cn.com.codesec.SkyCSharp -> cn.com.codesec.SkyCSharp:
    java.lang.String test -> a
    java.lang.String[] args -> b
    org.apache.log4j.Logger logger -> c
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> d
    cn.com.codesec.SkyCSharp skyCSharp -> e
    36:107:void <clinit>() -> <clinit>
    39:39:org.apache.log4j.Logger getLogger() -> a
    45:45:cn.com.codesec.java.common.SkyCSharpProject getSkyCSharpProject() -> b
    49:51:void Test(cn.com.codesec.SkyCSharp) -> a
    83:98:void main(java.lang.String[]) -> main
    101:105:void initLogger(java.lang.String) -> a
    110:110:cn.com.codesec.SkyCSharp getSkyCSharp() -> c
    113:115:void <init>(java.lang.String[]) -> <init>
    118:139:void checkEnvironment() -> h
    142:403:void parsCmd() -> i
    408:447:void run() -> d
    450:460:void loadRules() -> e
    463:469:void parseJsp() -> f
    472:479:java.util.List parseJava() -> g
    484:494:java.util.List parseCSharper(java.lang.String) -> b
cn.com.codesec.csharp.tree.AnnotationsConvert -> cn.com.codesec.csharp.tree.AnnotationsConvert:
    13:13:void <init>() -> <init>
    18:26:java.util.List deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    31:31:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.BugDetailDescription -> cn.com.codesec.csharp.tree.BugDetailDescription:
    java.lang.String Path -> Path
    java.lang.String Function -> Function
    int StartLine -> StartLine
    int EndLine -> EndLine
    int StartColumn -> StartColumn
    int EndColumn -> EndColumn
    cn.com.codesec.csharp.tree.BugType bugType -> bugType
    3:3:void <init>() -> <init>
    6:6:java.lang.String getPath() -> getPath
    10:11:void setPath(java.lang.String) -> setPath
    14:14:java.lang.String getFunction() -> getFunction
    18:19:void setFunction(java.lang.String) -> setFunction
    22:22:int getStartLine() -> getStartLine
    26:27:void setStartLine(int) -> setStartLine
    30:30:int getEndLine() -> getEndLine
    34:35:void setEndLine(int) -> setEndLine
    38:38:int getStartColumn() -> getStartColumn
    42:43:void setStartColumn(int) -> setStartColumn
    46:46:int getEndColumn() -> getEndColumn
    50:51:void setEndColumn(int) -> setEndColumn
    54:54:cn.com.codesec.csharp.tree.BugType getBugType() -> getBugType
    58:59:void setBugType(cn.com.codesec.csharp.tree.BugType) -> setBugType
cn.com.codesec.csharp.tree.BugType -> cn.com.codesec.csharp.tree.BugType:
    cn.com.codesec.csharp.tree.BugType PASSWORD_IN_COMMENT -> PASSWORD_IN_COMMENT
    cn.com.codesec.csharp.tree.BugType CODE_COMPLEX -> CODE_COMPLEX
    cn.com.codesec.csharp.tree.BugType PUBLIC_FIELD_ACCESS -> PUBLIC_FIELD_ACCESS
    cn.com.codesec.csharp.tree.BugType[] ENUM$VALUES -> ENUM$VALUES
    76:80:void <clinit>() -> <clinit>
    76:76:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.csharp.tree.BugType[] values() -> values
    1:1:cn.com.codesec.csharp.tree.BugType valueOf(java.lang.String) -> valueOf
cn.com.codesec.csharp.tree.ExpressionBeanConvert -> cn.com.codesec.csharp.tree.ExpressionBeanConvert:
    13:13:void <init>() -> <init>
    18:113:cn.com.codesec.java.bean.expression.ExpressionBean deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    120:120:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.ExpressionBeanListConvert -> cn.com.codesec.csharp.tree.ExpressionBeanListConvert:
    16:16:void <init>() -> <init>
    19:156:java.util.List deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    160:160:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.LiteralExpBeanConvert -> cn.com.codesec.csharp.tree.LiteralExpBeanConvert:
    10:10:void <init>() -> <init>
    15:60:cn.com.codesec.java.bean.literal.LiteralExpBean deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    65:65:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.LocationBeanConvert -> cn.com.codesec.csharp.tree.LocationBeanConvert:
    11:11:void <init>() -> <init>
    16:41:cn.com.codesec.java.bean.location.LocationBean deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    48:48:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.MyCompilationUnitBean -> cn.com.codesec.csharp.tree.MyCompilationUnitBean:
    cn.com.codesec.csharp.tree.MyCompilationUnitBean Instance -> Instance
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> skyCSharpProject
    int[] $SWITCH_TABLE$cn$com$codesec$csharp$tree$BugType -> $SWITCH_TABLE$cn$com$codesec$csharp$tree$BugType
    41:42:void <clinit>() -> <clinit>
    43:45:void <init>() -> <init>
    47:47:cn.com.codesec.csharp.tree.MyCompilationUnitBean getMyCompilationUnitBean() -> getMyCompilationUnitBean
    50:51:java.util.List GetCompilationBean(java.lang.String,cn.com.codesec.java.common.SkyCSharpProject) -> GetCompilationBean
    55:110:java.util.List DeserializeFrontEndUnit(java.lang.String) -> DeserializeFrontEndUnit
    115:134:void deleteDirectory(java.io.File) -> deleteDirectory
    136:176:java.lang.String uFrontZip(java.lang.String) -> uFrontZip
    183:276:cn.com.codesec.java.bean.CompilationUnitBean ConvertCompilationUnitBean(com.alibaba.fastjson.JSONObject,java.lang.String) -> ConvertCompilationUnitBean
    281:309:java.io.File getRealPath(java.lang.String,java.lang.String) -> getRealPath
    314:333:java.util.List DeserializeUnit(java.util.List,java.lang.String) -> DeserializeUnit
    337:356:cn.com.codesec.util.IRFile ConvertBeanToIRFile(cn.com.codesec.java.bean.CompilationUnitBean) -> ConvertBeanToIRFile
    361:372:java.util.List DerializableAnnotations(com.alibaba.fastjson.JSONObject) -> DerializableAnnotations
    376:388:java.util.List DerializableParamsBeans(com.alibaba.fastjson.JSONObject) -> DerializableParamsBeans
    391:403:java.util.List DerializableFiledDecls(com.alibaba.fastjson.JSONObject) -> DerializableFiledDecls
    406:418:java.util.List DerializableFunDecls(com.alibaba.fastjson.JSONObject) -> DerializableFunDecls
    39:39:int[] $SWITCH_TABLE$cn$com$codesec$csharp$tree$BugType() -> $SWITCH_TABLE$cn$com$codesec$csharp$tree$BugType
cn.com.codesec.csharp.tree.MyFilePath -> cn.com.codesec.csharp.tree.MyFilePath:
    10:10:void <init>() -> <init>
    15:23:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    28:28:int getFastMatchToken() -> getFastMatchToken
cn.com.codesec.csharp.tree.MyFunDeclBean -> cn.com.codesec.csharp.tree.MyFunDeclBean:
    boolean varArg -> varArg
    java.lang.String name -> name
    java.lang.String namespace -> namespace
    java.util.Set exceptions -> exceptions
    cn.com.codesec.java.bean.statement.BlockBean body -> body
    cn.com.codesec.java.bean.TypeBean returnType -> returnType
    java.lang.String uniqueName -> uniqueName
    java.util.List params -> params
    11:11:void <init>() -> <init>
    17:17:cn.com.codesec.java.bean.TypeBean getReturnType() -> getReturnType
    24:25:void setReturnType(cn.com.codesec.java.bean.TypeBean) -> setReturnType
    31:31:java.lang.String getUniqueName() -> getUniqueName
    38:39:void setUniqueName(java.lang.String) -> setUniqueName
    45:45:boolean isVarArg() -> isVarArg
    48:48:boolean getVarArg() -> getVarArg
    54:55:void setVarArg(boolean) -> setVarArg
    61:61:java.lang.String getName() -> getName
    68:69:void setName(java.lang.String) -> setName
    75:75:java.lang.String getNamespace() -> getNamespace
    82:83:void setNamespace(java.lang.String) -> setNamespace
    89:89:java.util.Set getExceptions() -> getExceptions
    96:97:void setExceptions(java.util.Set) -> setExceptions
    103:103:cn.com.codesec.java.bean.statement.BlockBean getBody() -> getBody
    110:111:void setBody(cn.com.codesec.java.bean.statement.BlockBean) -> setBody
    118:118:java.util.List getParams() -> getParams
    125:126:void setParams(java.util.List) -> setParams
cn.com.codesec.csharp.tree.MyTypeBean -> cn.com.codesec.csharp.tree.MyTypeBean:
    java.lang.String primitiveType -> primitiveType
    java.lang.String name -> name
    java.lang.Integer pointerDepth -> pointerDepth
    java.lang.Integer arrayDimensions -> arrayDimensions
    cn.com.codesec.java.bean.TypeBean returnType -> returnType
    java.util.List funArgs -> funArgs
    8:8:void <init>() -> <init>
    14:14:java.lang.String getName() -> getName
    21:22:void setName(java.lang.String) -> setName
    28:28:cn.com.codesec.java.bean.TypeBean getReturnType() -> getReturnType
    35:36:void setReturnType(cn.com.codesec.java.bean.TypeBean) -> setReturnType
    42:42:java.util.List getFunArgs() -> getFunArgs
    49:50:void setFunArgs(java.util.List) -> setFunArgs
    58:58:java.lang.String getPrimitiveType() -> getPrimitiveType
    65:66:void setPrimitiveType(java.lang.String) -> setPrimitiveType
    76:76:java.lang.Integer getPointerDepth() -> getPointerDepth
    83:84:void setPointerDepth(java.lang.Integer) -> setPointerDepth
    92:92:java.lang.Integer getArrayDimensions() -> getArrayDimensions
    99:100:void setArrayDimensions(java.lang.Integer) -> setArrayDimensions
cn.com.codesec.csharp.tree.StatemenBeanList -> cn.com.codesec.csharp.tree.StatemenBeanList:
    13:13:void <init>() -> <init>
    17:99:java.util.List deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
    104:104:int getFastMatchToken() -> getFastMatchToken
    1:1:java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object) -> deserialze
cn.com.codesec.csharp.tree.TupleClassImp -> cn.com.codesec.csharp.tree.TupleClassImp:
    cn.com.codesec.java.bean.statement.BlockBean item1 -> item1
    cn.com.codesec.java.bean.expression.ExpressionBean item2 -> item2
    9:9:void <init>() -> <init>
    13:13:cn.com.codesec.java.bean.statement.BlockBean getItem1() -> getItem1
    17:18:void setItem1(cn.com.codesec.java.bean.statement.BlockBean) -> setItem1
    21:21:cn.com.codesec.java.bean.expression.ExpressionBean getItem2() -> getItem2
    25:26:void setItem2(cn.com.codesec.java.bean.expression.ExpressionBean) -> setItem2
cn.com.codesec.java.ast.ASTNodeVulnerability -> cn.com.codesec.a:
    java.lang.String label -> c
    java.lang.String matchText -> d
    java.util.List astNodeVulnerabilitys -> e
    cn.com.codesec.java.rules.VulnerabilityRule rule -> g
    float severity -> a
    java.lang.String instanceID -> b
    java.lang.String matchString -> h
    java.lang.String matchContext -> i
    java.lang.String pathType -> j
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> k
    61:61:void <clinit>() -> <clinit>
    43:43:java.lang.String getLabel() -> a_
    47:48:void setLabel(java.lang.String) -> a
    53:53:java.lang.String getMatchText() -> b
    57:58:void setMatchText(java.lang.String) -> b
    64:64:java.util.List getAstNodeVulnerabilitys() -> c
    79:79:java.lang.String getPathType() -> b_
    84:84:java.lang.String getMatchContext() -> e
    102:103:void add(int[],cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.util.SourceFile,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    105:106:void add(int[],cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.util.SourceFile,java.lang.String,java.lang.String) -> a
    109:110:void add(int[],boolean,cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.util.SourceFile,java.lang.String,java.lang.String) -> a
    114:157:void add(int[],boolean,cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.util.SourceFile,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    87:167:void <init>(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.java.rules.VulnerabilityRule,java.lang.String,java.lang.String) -> <init>
    171:236:java.lang.String buildPathType(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.java.rules.VulnerabilityRule) -> a
    244:252:cn.com.codesec.parse.ir.SourceInfo getLineAndColumn(int[],boolean,cn.com.codesec.util.SourceFile) -> a
    330:335:void createInstanceId() -> f
    339:356:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    361:361:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    365:365:java.lang.String getAnalyzerName() -> h
    369:369:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    375:375:void collectSourceLocations(java.util.Collection) -> a
    378:378:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    382:382:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    385:385:java.lang.String getMatchString() -> l
    389:389:float getSeverity() -> m
cn.com.codesec.java.bean.AssociativeIndexBean -> cn.com.codesec.java.bean.AssociativeIndexBean:
    10:10:void <init>() -> <init>
cn.com.codesec.java.bean.CompilationUnitBean -> cn.com.codesec.java.bean.CompilationUnitBean:
    int language -> language
    java.util.List decls -> decls
    15:33:void <init>() -> <init>
    21:21:int getLanguage() -> getLanguage
    28:29:void setLanguage(int) -> setLanguage
    39:39:java.util.List getDecls() -> getDecls
    46:47:void setDecls(java.util.List) -> setDecls
    51:52:void add(cn.com.codesec.java.bean.decl.DeclBean) -> add
cn.com.codesec.java.bean.CompilationUnitBeanRef -> cn.com.codesec.java.bean.CompilationUnitBeanRef:
    java.lang.ref.Reference ref -> ref
    cn.com.codesec.util.IRFile key -> key
    16:20:void <init>(cn.com.codesec.java.bean.CompilationUnitBean,cn.com.codesec.util.IRFile) -> <init>
    24:32:cn.com.codesec.java.bean.CompilationUnitBean get() -> get
    1:1:java.lang.Object get() -> get
cn.com.codesec.java.bean.DeclContainer -> cn.com.codesec.java.bean.DeclContainer:
    void add(cn.com.codesec.java.bean.decl.DeclBean) -> add
cn.com.codesec.java.bean.IndexBean -> cn.com.codesec.java.bean.IndexBean:
    cn.com.codesec.java.bean.expression.ExpressionBean index -> index
    16:16:void <init>() -> <init>
    24:24:cn.com.codesec.java.bean.expression.ExpressionBean getIndex() -> getIndex
    31:32:void setIndex(cn.com.codesec.java.bean.expression.ExpressionBean) -> setIndex
cn.com.codesec.java.bean.ModifiableBean -> cn.com.codesec.java.bean.ModifiableBean:
    void setModifiers(java.util.List) -> setModifiers
    java.util.List getModifiers() -> getModifiers
cn.com.codesec.java.bean.NodeBean -> cn.com.codesec.java.bean.NodeBean:
    cn.com.codesec.java.bean.SourceInfoBean sourceInfo -> sourceInfo
    12:12:void <init>() -> <init>
    20:20:cn.com.codesec.java.bean.SourceInfoBean getSourceInfo() -> getSourceInfo
    27:28:void setSourceInfo(cn.com.codesec.java.bean.SourceInfoBean) -> setSourceInfo
cn.com.codesec.java.bean.SourceAnnotationsBean -> cn.com.codesec.java.bean.SourceAnnotationsBean:
cn.com.codesec.java.bean.SourceInfoBean -> cn.com.codesec.java.bean.SourceInfoBean:
    cn.com.codesec.util.FilePath sourceFile -> sourceFile
    int lineStart -> lineStart
    int lineEnd -> lineEnd
    int columnStart -> columnStart
    int columnEnd -> columnEnd
    17:19:void <init>() -> <init>
    24:24:int getLineStart() -> getLineStart
    31:32:void setLineStart(int) -> setLineStart
    38:38:int getLineEnd() -> getLineEnd
    45:46:void setLineEnd(int) -> setLineEnd
    52:52:int getColumnStart() -> getColumnStart
    59:60:void setColumnStart(int) -> setColumnStart
    66:66:int getColumnEnd() -> getColumnEnd
    73:74:void setColumnEnd(int) -> setColumnEnd
    80:80:cn.com.codesec.util.FilePath getSourceFile() -> getSourceFile
    84:85:void setSourceFile(cn.com.codesec.util.FilePath) -> setSourceFile
cn.com.codesec.java.bean.TypeBean -> cn.com.codesec.java.bean.TypeBean:
    java.lang.Integer primitiveType -> primitiveType
    java.lang.String name -> name
    java.lang.Integer pointerDepth -> pointerDepth
    java.lang.Integer arrayDimensions -> arrayDimensions
    cn.com.codesec.java.bean.TypeBean returnType -> returnType
    java.util.List funArgs -> funArgs
    12:12:void <init>() -> <init>
    18:18:java.lang.String getName() -> getName
    25:26:void setName(java.lang.String) -> setName
    32:32:cn.com.codesec.java.bean.TypeBean getReturnType() -> getReturnType
    39:40:void setReturnType(cn.com.codesec.java.bean.TypeBean) -> setReturnType
    46:46:java.util.List getFunArgs() -> getFunArgs
    53:54:void setFunArgs(java.util.List) -> setFunArgs
    62:62:java.lang.Integer getPrimitiveType() -> getPrimitiveType
    69:70:void setPrimitiveType(java.lang.Integer) -> setPrimitiveType
    80:80:java.lang.Integer getPointerDepth() -> getPointerDepth
    87:88:void setPointerDepth(java.lang.Integer) -> setPointerDepth
    96:96:java.lang.Integer getArrayDimensions() -> getArrayDimensions
    103:104:void setArrayDimensions(java.lang.Integer) -> setArrayDimensions
cn.com.codesec.java.bean.decl.ClassDeclBean -> cn.com.codesec.java.bean.decl.ClassDeclBean:
    java.lang.String trueSimpleName -> trueSimpleName
    java.lang.String name -> name
    java.util.List extendsList -> extendsList
    java.util.List implementsList -> implementsList
    java.lang.String namespaceName -> namespaceName
    java.lang.String namespaceLocalName -> namespaceLocalName
    java.util.List fieldDecls -> fieldDecls
    java.util.List funDecls -> funDecls
    boolean $assertionsDisabled -> $assertionsDisabled
    19:19:void <clinit>() -> <clinit>
    19:159:void <init>() -> <init>
    25:25:java.lang.String getName() -> getName
    32:33:void setName(java.lang.String) -> setName
    39:39:java.util.List getExtendsList() -> getExtendsList
    46:47:void setExtendsList(java.util.List) -> setExtendsList
    53:53:java.util.List getImplementsList() -> getImplementsList
    60:61:void setImplementsList(java.util.List) -> setImplementsList
    67:67:java.lang.String getNamespaceName() -> getNamespaceName
    74:75:void setNamespaceName(java.lang.String) -> setNamespaceName
    81:81:java.lang.String getNamespaceLocalName() -> getNamespaceLocalName
    88:89:void setNamespaceLocalName(java.lang.String) -> setNamespaceLocalName
    95:95:java.lang.String getTrueSimpleName() -> getTrueSimpleName
    99:115:void setTrueSimpleName(java.lang.String) -> setTrueSimpleName
    122:122:java.util.List getFieldDecls() -> getFieldDecls
    129:130:void setFieldDecls(java.util.List) -> setFieldDecls
    136:136:java.util.List getFunDecls() -> getFunDecls
    143:144:void setFunDecls(java.util.List) -> setFunDecls
    163:175:void add(cn.com.codesec.java.bean.decl.DeclBean) -> add
cn.com.codesec.java.bean.decl.DeclBean -> cn.com.codesec.java.bean.decl.DeclBean:
    java.util.List modifiers -> modifiers
    java.util.List annotations -> annotations
    21:21:void <init>() -> <init>
    30:30:java.util.List getModifiers() -> getModifiers
    38:39:void setModifiers(java.util.List) -> setModifiers
    49:49:java.util.List getAnnotations() -> getAnnotations
    56:57:void setAnnotations(java.util.List) -> setAnnotations
cn.com.codesec.java.bean.decl.FieldDeclBean -> cn.com.codesec.java.bean.decl.FieldDeclBean:
    cn.com.codesec.java.bean.TypeBean type -> type
    java.lang.String name -> name
    cn.com.codesec.java.bean.literal.LiteralExpBean constantValue -> constantValue
    17:17:void <init>() -> <init>
    23:23:cn.com.codesec.java.bean.TypeBean getType() -> getType
    30:31:void setType(cn.com.codesec.java.bean.TypeBean) -> setType
    37:37:java.lang.String getName() -> getName
    44:45:void setName(java.lang.String) -> setName
    51:51:cn.com.codesec.java.bean.literal.LiteralExpBean getConstantValue() -> getConstantValue
    58:59:void setConstantValue(cn.com.codesec.java.bean.literal.LiteralExpBean) -> setConstantValue
cn.com.codesec.java.bean.decl.FunDeclBean -> cn.com.codesec.java.bean.decl.FunDeclBean:
    cn.com.codesec.java.bean.TypeBean returnType -> returnType
    java.lang.String uniqueName -> uniqueName
    java.util.List parms -> parms
    boolean varArg -> varArg
    java.lang.String name -> name
    java.lang.String namespac -> namespac
    java.util.Set exceptions -> exceptions
    cn.com.codesec.java.bean.statement.BlockBean body -> body
    18:18:void <init>() -> <init>
    24:24:cn.com.codesec.java.bean.TypeBean getReturnType() -> getReturnType
    31:32:void setReturnType(cn.com.codesec.java.bean.TypeBean) -> setReturnType
    38:38:java.lang.String getUniqueName() -> getUniqueName
    45:46:void setUniqueName(java.lang.String) -> setUniqueName
    52:52:boolean isVarArg() -> isVarArg
    59:60:void setVarArg(boolean) -> setVarArg
    62:62:boolean getVarArg() -> getVarArg
    68:68:java.lang.String getName() -> getName
    75:76:void setName(java.lang.String) -> setName
    82:82:java.lang.String getNamespac() -> getNamespac
    89:90:void setNamespac(java.lang.String) -> setNamespac
    96:96:java.util.Set getExceptions() -> getExceptions
    103:104:void setExceptions(java.util.Set) -> setExceptions
    110:110:cn.com.codesec.java.bean.statement.BlockBean getBody() -> getBody
    117:118:void setBody(cn.com.codesec.java.bean.statement.BlockBean) -> setBody
    134:134:java.util.List getParms() -> getParms
    141:142:void setParms(java.util.List) -> setParms
    164:164:java.util.List getOverrides() -> getOverrides
    169:169:void setOverrides(java.util.List) -> setOverrides
    171:179:void SetValue(cn.com.codesec.csharp.tree.MyFunDeclBean) -> SetValue
cn.com.codesec.java.bean.decl.SourceNoneBean -> cn.com.codesec.java.bean.decl.SourceNoneBean:
    cn.com.codesec.java.bean.decl.SourceNoneBean SOURCE_NONE_NODE -> SOURCE_NONE_NODE
    12:12:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
cn.com.codesec.java.bean.decl.VarDeclBean -> cn.com.codesec.java.bean.decl.VarDeclBean:
    cn.com.codesec.java.bean.TypeBean type -> type
    java.lang.String name -> name
    java.lang.String namespaceLocalName -> namespaceLocalName
    java.lang.String namespac -> namespac
    13:13:void <init>() -> <init>
    19:19:cn.com.codesec.java.bean.TypeBean getType() -> getType
    26:27:void setType(cn.com.codesec.java.bean.TypeBean) -> setType
    33:33:java.lang.String getName() -> getName
    40:41:void setName(java.lang.String) -> setName
    47:47:java.lang.String getNamespaceLocalName() -> getNamespaceLocalName
    54:55:void setNamespaceLocalName(java.lang.String) -> setNamespaceLocalName
    61:61:java.lang.String getNamespac() -> getNamespac
    68:69:void setNamespac(java.lang.String) -> setNamespac
cn.com.codesec.java.bean.expression.AllocationBean -> cn.com.codesec.java.bean.expression.AllocationBean:
    cn.com.codesec.java.bean.TypeBean type -> type
    java.util.List dimensions -> dimensions
    java.lang.String allocationBean -> allocationBean
    15:58:void <init>() -> <init>
    21:21:cn.com.codesec.java.bean.TypeBean getType() -> getType
    28:29:void setType(cn.com.codesec.java.bean.TypeBean) -> setType
    39:39:java.util.List getDimensions() -> getDimensions
    46:47:void setDimensions(java.util.List) -> setDimensions
    51:51:java.lang.String getAllocationBean() -> getAllocationBean
    55:56:void setAllocationBean(java.lang.String) -> setAllocationBean
cn.com.codesec.java.bean.expression.ExpressionBean -> cn.com.codesec.java.bean.expression.ExpressionBean:
    cn.com.codesec.java.bean.TypeBean typeCast -> typeCast
    14:14:void <init>() -> <init>
    22:22:cn.com.codesec.java.bean.TypeBean getTypeCast() -> getTypeCast
    29:30:void setTypeCast(cn.com.codesec.java.bean.TypeBean) -> setTypeCast
cn.com.codesec.java.bean.expression.FunCallBean -> cn.com.codesec.java.bean.expression.FunCallBean:
    java.lang.String uniqueName -> uniqueName
    java.util.List arglist -> arglist
    boolean nonvirtual -> nonvirtual
    java.util.List argNames -> argNames
    cn.com.codesec.java.bean.expression.ExpressionBean pointer -> pointer
    java.lang.String funCallBean -> funCallBean
    16:97:void <init>() -> <init>
    22:22:java.lang.String getUniqueName() -> getUniqueName
    28:29:void setUniqueName(java.lang.String) -> setUniqueName
    36:36:java.util.List getArglist() -> getArglist
    42:43:void setArglist(java.util.List) -> setArglist
    48:48:java.util.List getArgNames() -> getArgNames
    54:55:void setArgNames(java.util.List) -> setArgNames
    64:64:boolean isNonvirtual() -> isNonvirtual
    70:71:void setNonvirtual(boolean) -> setNonvirtual
    80:80:cn.com.codesec.java.bean.expression.ExpressionBean getPointer() -> getPointer
    86:87:void setPointer(cn.com.codesec.java.bean.expression.ExpressionBean) -> setPointer
    90:90:java.lang.String getFunCallBean() -> getFunCallBean
    94:95:void setFunCallBean(java.lang.String) -> setFunCallBean
cn.com.codesec.java.bean.expression.FunIdentifierBean -> cn.com.codesec.java.bean.expression.FunIdentifierBean:
    java.lang.String name -> name
    java.lang.String funIdentifierBean -> funIdentifierBean
    10:36:void <init>() -> <init>
    18:18:java.lang.String getName() -> getName
    25:26:void setName(java.lang.String) -> setName
    29:29:java.lang.String getFunIdentifierBean() -> getFunIdentifierBean
    33:34:void setFunIdentifierBean(java.lang.String) -> setFunIdentifierBean
cn.com.codesec.java.bean.expression.OpExpBean -> cn.com.codesec.java.bean.expression.OpExpBean:
    int operatorIndex -> operatorIndex
    cn.com.codesec.java.bean.expression.ExpressionBean lhs -> lhs
    cn.com.codesec.java.bean.expression.ExpressionBean rhs -> rhs
    java.lang.String opExpBean -> opExpBean
    13:72:void <init>() -> <init>
    19:19:int getOperatorIndex() -> getOperatorIndex
    26:27:void setOperatorIndex(int) -> setOperatorIndex
    33:33:cn.com.codesec.java.bean.expression.ExpressionBean getLhs() -> getLhs
    40:41:void setLhs(cn.com.codesec.java.bean.expression.ExpressionBean) -> setLhs
    47:47:cn.com.codesec.java.bean.expression.ExpressionBean getRhs() -> getRhs
    54:55:void setRhs(cn.com.codesec.java.bean.expression.ExpressionBean) -> setRhs
    65:65:java.lang.String getOpExpBean() -> getOpExpBean
    69:70:void setOpExpBean(java.lang.String) -> setOpExpBean
cn.com.codesec.java.bean.literal.BooleanLiteralBean -> cn.com.codesec.java.bean.literal.BooleanLiteralBean:
    boolean value -> value
    java.lang.String booleanLiteralBean -> booleanLiteralBean
    10:36:void <init>() -> <init>
    18:18:boolean isValue() -> isValue
    25:26:void setValue(boolean) -> setValue
    29:29:java.lang.String getBooleanLiteralBean() -> getBooleanLiteralBean
    33:34:void setBooleanLiteralBean(java.lang.String) -> setBooleanLiteralBean
cn.com.codesec.java.bean.literal.CharLiteralBean -> cn.com.codesec.java.bean.literal.CharLiteralBean:
    char value -> value
    java.lang.String charLiteralBean -> charLiteralBean
    10:37:void <init>() -> <init>
    18:18:char getValue() -> getValue
    25:26:void setValue(char) -> setValue
    30:30:java.lang.String getCharLiteralBean() -> getCharLiteralBean
    34:35:void setCharLiteralBean(java.lang.String) -> setCharLiteralBean
cn.com.codesec.java.bean.literal.DoubleLiteralBean -> cn.com.codesec.java.bean.literal.DoubleLiteralBean:
    double value -> value
    java.lang.String doubleLiteralBean -> doubleLiteralBean
    10:36:void <init>() -> <init>
    18:18:double getValue() -> getValue
    25:26:void setValue(double) -> setValue
    29:29:java.lang.String getDoubleLiteralBean() -> getDoubleLiteralBean
    33:34:void setDoubleLiteralBean(java.lang.String) -> setDoubleLiteralBean
cn.com.codesec.java.bean.literal.FloatLiteralBean -> cn.com.codesec.java.bean.literal.FloatLiteralBean:
    float value -> value
    java.lang.String floatLiteralBean -> floatLiteralBean
    10:37:void <init>() -> <init>
    18:18:float getValue() -> getValue
    25:26:void setValue(float) -> setValue
    30:30:java.lang.String getFloatLiteralBean() -> getFloatLiteralBean
    34:35:void setFloatLiteralBean(java.lang.String) -> setFloatLiteralBean
cn.com.codesec.java.bean.literal.IntLiteralBean -> cn.com.codesec.java.bean.literal.IntLiteralBean:
    int value -> value
    java.lang.String intLiteralBean -> intLiteralBean
    10:36:void <init>() -> <init>
    18:18:int getValue() -> getValue
    25:26:void setValue(int) -> setValue
    29:29:java.lang.String getIntLiteralBean() -> getIntLiteralBean
    33:34:void setIntLiteralBean(java.lang.String) -> setIntLiteralBean
cn.com.codesec.java.bean.literal.LiteralExpBean -> cn.com.codesec.java.bean.literal.LiteralExpBean:
    java.lang.String literalExpBean -> literalExpBean
    12:22:void <init>() -> <init>
    15:15:java.lang.String getLiteralExpBean() -> getLiteralExpBean
    19:20:void setLiteralExpBean(java.lang.String) -> setLiteralExpBean
cn.com.codesec.java.bean.literal.LongLiteralBean -> cn.com.codesec.java.bean.literal.LongLiteralBean:
    long value -> value
    java.lang.String longLiteralBean -> longLiteralBean
    10:36:void <init>() -> <init>
    18:18:long getValue() -> getValue
    25:26:void setValue(long) -> setValue
    29:29:java.lang.String getLongLiteralBean() -> getLongLiteralBean
    33:34:void setLongLiteralBean(java.lang.String) -> setLongLiteralBean
cn.com.codesec.java.bean.literal.NullLiteralBean -> cn.com.codesec.java.bean.literal.NullLiteralBean:
    java.lang.String nullLiteralBean -> nullLiteralBean
    12:22:void <init>() -> <init>
    15:15:java.lang.String getNullLiteralBean() -> getNullLiteralBean
    19:20:void setNullLiteralBean(java.lang.String) -> setNullLiteralBean
cn.com.codesec.java.bean.literal.StringLiteralBean -> cn.com.codesec.java.bean.literal.StringLiteralBean:
    java.lang.String value -> value
    java.lang.String stringLiteralBean -> stringLiteralBean
    10:37:void <init>() -> <init>
    18:18:java.lang.String getValue() -> getValue
    25:26:void setValue(java.lang.String) -> setValue
    30:30:java.lang.String getStringLiteralBean() -> getStringLiteralBean
    34:35:void setStringLiteralBean(java.lang.String) -> setStringLiteralBean
cn.com.codesec.java.bean.location.ArrayAccessBean -> cn.com.codesec.java.bean.location.ArrayAccessBean:
    cn.com.codesec.java.bean.location.LocationBean bas -> bas
    cn.com.codesec.java.bean.IndexBean index -> index
    java.lang.String arrayAccessBean -> arrayAccessBean
    15:58:void <init>() -> <init>
    21:21:cn.com.codesec.java.bean.location.LocationBean getBase() -> getBase
    28:29:void setBas(cn.com.codesec.java.bean.location.LocationBean) -> setBas
    35:35:cn.com.codesec.java.bean.IndexBean getIndex() -> getIndex
    42:43:void setIndex(cn.com.codesec.java.bean.IndexBean) -> setIndex
    51:51:java.lang.String getArrayAccessBean() -> getArrayAccessBean
    55:56:void setArrayAccessBean(java.lang.String) -> setArrayAccessBean
cn.com.codesec.java.bean.location.DereferenceBean -> cn.com.codesec.java.bean.location.DereferenceBean:
    cn.com.codesec.java.bean.location.LocationBean bas -> bas
    java.lang.String dereferenceBean -> dereferenceBean
    13:41:void <init>() -> <init>
    22:22:cn.com.codesec.java.bean.location.LocationBean getBase() -> getBase
    29:30:void setBas(cn.com.codesec.java.bean.location.LocationBean) -> setBas
    34:34:java.lang.String getDereferenceBean() -> getDereferenceBean
    38:39:void setDereferenceBean(java.lang.String) -> setDereferenceBean
cn.com.codesec.java.bean.location.FieldAccessBean -> cn.com.codesec.java.bean.location.FieldAccessBean:
    cn.com.codesec.java.bean.TypeBean type -> type
    cn.com.codesec.java.bean.expression.ExpressionBean instance -> instance
    java.lang.String name -> name
    java.lang.String fieldAccessBean -> fieldAccessBean
    16:66:void <init>() -> <init>
    22:22:cn.com.codesec.java.bean.TypeBean getType() -> getType
    29:30:void setType(cn.com.codesec.java.bean.TypeBean) -> setType
    36:36:cn.com.codesec.java.bean.expression.ExpressionBean getInstance() -> getInstance
    43:44:void setInstance(cn.com.codesec.java.bean.expression.ExpressionBean) -> setInstance
    50:50:java.lang.String getName() -> getName
    57:58:void setName(java.lang.String) -> setName
cn.com.codesec.java.bean.location.LocationBean -> cn.com.codesec.java.bean.location.LocationBean:
    java.lang.String locationBean -> locationBean
    12:22:void <init>() -> <init>
    15:15:java.lang.String getLocationBean() -> getLocationBean
    19:20:void setLocationBean(java.lang.String) -> setLocationBean
cn.com.codesec.java.bean.location.VarAccessBean -> cn.com.codesec.java.bean.location.VarAccessBean:
    java.lang.String name -> name
    java.lang.String varAccessBean -> varAccessBean
    10:36:void <init>() -> <init>
    18:18:java.lang.String getName() -> getName
    25:26:void setName(java.lang.String) -> setName
    29:29:java.lang.String getVarAccessBean() -> getVarAccessBean
    33:34:void setVarAccessBean(java.lang.String) -> setVarAccessBean
cn.com.codesec.java.bean.statement.AssignmentStmtBean -> cn.com.codesec.java.bean.statement.AssignmentStmtBean:
    cn.com.codesec.java.bean.expression.ExpressionBean lhs -> lhs
    cn.com.codesec.java.bean.expression.ExpressionBean rhs -> rhs
    java.lang.String assignmentStmtBean -> assignmentStmtBean
    14:55:void <init>() -> <init>
    20:20:cn.com.codesec.java.bean.expression.ExpressionBean getLhs() -> getLhs
    27:28:void setLhs(cn.com.codesec.java.bean.expression.ExpressionBean) -> setLhs
    34:34:cn.com.codesec.java.bean.expression.ExpressionBean getRhs() -> getRhs
    41:42:void setRhs(cn.com.codesec.java.bean.expression.ExpressionBean) -> setRhs
    49:49:java.lang.String getAssignmentStmtBean() -> getAssignmentStmtBean
    53:54:void setAssignmentStmtBean(java.lang.String) -> setAssignmentStmtBean
cn.com.codesec.java.bean.statement.BlockBean -> cn.com.codesec.java.bean.statement.BlockBean:
    java.util.List statements -> statements
    java.lang.String blockBean -> blockBean
    16:43:void <init>() -> <init>
    25:25:java.util.List getStatements() -> getStatements
    30:31:void add(cn.com.codesec.java.bean.statement.StatementBean) -> add
    34:35:void setStatements(java.util.List) -> setStatements
    38:38:java.lang.String getBlockBean() -> getBlockBean
    41:42:void setBlockBean(java.lang.String) -> setBlockBean
cn.com.codesec.java.bean.statement.CallStmtBean -> cn.com.codesec.java.bean.statement.CallStmtBean:
    cn.com.codesec.java.bean.expression.FunCallBean call -> call
    java.lang.String callStmtBean -> callStmtBean
    12:38:void <init>() -> <init>
    18:18:cn.com.codesec.java.bean.expression.FunCallBean getCall() -> getCall
    25:26:void setCall(cn.com.codesec.java.bean.expression.FunCallBean) -> setCall
    31:31:java.lang.String getCallStmtBean() -> getCallStmtBean
    35:36:void setCallStmtBean(java.lang.String) -> setCallStmtBean
cn.com.codesec.java.bean.statement.DeclStatementBean -> cn.com.codesec.java.bean.statement.DeclStatementBean:
    cn.com.codesec.java.bean.decl.VarDeclBean decl -> decl
    java.lang.String declStatementBean -> declStatementBean
    13:39:void <init>() -> <init>
    22:22:cn.com.codesec.java.bean.decl.VarDeclBean getDecl() -> getDecl
    29:30:void setDecl(cn.com.codesec.java.bean.decl.VarDeclBean) -> setDecl
    33:33:java.lang.String getDeclStatementBean() -> getDeclStatementBean
    36:37:void setDeclStatementBean(java.lang.String) -> setDeclStatementBean
cn.com.codesec.java.bean.statement.GotoBean -> cn.com.codesec.java.bean.statement.GotoBean:
    java.lang.String targetLabel -> targetLabel
    java.lang.String gotoBean -> gotoBean
    10:37:void <init>() -> <init>
    18:18:java.lang.String getTargetLabel() -> getTargetLabel
    26:27:void setTargetLabel(java.lang.String) -> setTargetLabel
    30:30:java.lang.String getGotoBean() -> getGotoBean
    34:35:void setGotoBean(java.lang.String) -> setGotoBean
cn.com.codesec.java.bean.statement.IfElseBean -> cn.com.codesec.java.bean.statement.IfElseBean:
    cn.com.codesec.java.bean.expression.ExpressionBean predicate -> predicate
    cn.com.codesec.java.bean.statement.BlockBean ifBody -> ifBody
    cn.com.codesec.java.bean.statement.BlockBean elseBody -> elseBody
    boolean isNativ -> isNativ
    java.lang.String ifElseBean -> ifElseBean
    15:90:void <init>() -> <init>
    21:21:cn.com.codesec.java.bean.expression.ExpressionBean getPredicate() -> getPredicate
    28:29:void setPredicate(cn.com.codesec.java.bean.expression.ExpressionBean) -> setPredicate
    35:35:cn.com.codesec.java.bean.statement.BlockBean getIfBody() -> getIfBody
    42:43:void setIfBody(cn.com.codesec.java.bean.statement.BlockBean) -> setIfBody
    49:49:cn.com.codesec.java.bean.statement.BlockBean getElseBody() -> getElseBody
    56:57:void setElseBody(cn.com.codesec.java.bean.statement.BlockBean) -> setElseBody
    63:63:boolean isNative() -> isNative
    70:71:void setNativ(boolean) -> setNativ
    83:83:java.lang.String getIfElseBean() -> getIfElseBean
    87:88:void setIfElseBean(java.lang.String) -> setIfElseBean
cn.com.codesec.java.bean.statement.NoOpStmtBean -> cn.com.codesec.java.bean.statement.NoOpStmtBean:
    java.lang.String noOpStmtBean -> noOpStmtBean
    10:21:void <init>() -> <init>
    14:14:java.lang.String getNoOpStmtBean() -> getNoOpStmtBean
    18:19:void setNoOpStmtBean(java.lang.String) -> setNoOpStmtBean
cn.com.codesec.java.bean.statement.ReturnStmtBean -> cn.com.codesec.java.bean.statement.ReturnStmtBean:
    cn.com.codesec.java.bean.expression.ExpressionBean expr -> expr
    java.lang.String returnStmtBean -> returnStmtBean
    14:41:void <init>() -> <init>
    20:20:cn.com.codesec.java.bean.expression.ExpressionBean getExpr() -> getExpr
    27:28:void setExpr(cn.com.codesec.java.bean.expression.ExpressionBean) -> setExpr
    34:34:java.lang.String getReturnStmtBean() -> getReturnStmtBean
    38:39:void setReturnStmtBean(java.lang.String) -> setReturnStmtBean
cn.com.codesec.java.bean.statement.StatementBean -> cn.com.codesec.java.bean.statement.StatementBean:
    java.util.List labels -> labels
    16:16:void <init>() -> <init>
    24:24:java.util.List getLabels() -> getLabels
    31:32:void setLabels(java.util.List) -> setLabels
cn.com.codesec.java.bean.statement.ThrowStmtBean -> cn.com.codesec.java.bean.statement.ThrowStmtBean:
    java.lang.String throwStmtBean -> throwStmtBean
    11:19:void <init>() -> <init>
    14:14:java.lang.String getThrowStmtBean() -> getThrowStmtBean
    17:18:void setThrowStmtBean(java.lang.String) -> setThrowStmtBean
cn.com.codesec.java.bean.statement.WhileStmtBean -> cn.com.codesec.java.bean.statement.WhileStmtBean:
    cn.com.codesec.java.bean.expression.ExpressionBean predicate -> predicate
    cn.com.codesec.java.bean.statement.BlockBean body -> body
    java.lang.String whileStmtBean -> whileStmtBean
    14:56:void <init>() -> <init>
    20:20:cn.com.codesec.java.bean.expression.ExpressionBean getPredicate() -> getPredicate
    27:28:void setPredicate(cn.com.codesec.java.bean.expression.ExpressionBean) -> setPredicate
    34:34:cn.com.codesec.java.bean.statement.BlockBean getBody() -> getBody
    41:42:void setBody(cn.com.codesec.java.bean.statement.BlockBean) -> setBody
    49:49:java.lang.String getWhileStmtBean() -> getWhileStmtBean
    53:54:void setWhileStmtBean(java.lang.String) -> setWhileStmtBean
cn.com.codesec.java.bean.txt.IRTxtWriter -> cn.com.codesec.java.bean.txt.IRTxtWriter:
    cn.com.codesec.java.bean.CompilationUnitBean compilationUnitBean -> compilationUnitBean
    java.io.PrintWriter out -> out
    boolean includeSourceInfo -> includeSourceInfo
    int curLineNumber -> curLineNumber
    cn.com.codesec.util.FilePath curFile -> curFile
    int indent -> indent
    boolean newline -> newline
    cn.com.codesec.scan.meta.Language language -> language
    java.lang.String[] EMPTY_TOKENS -> EMPTY_TOKENS
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType
    boolean $assertionsDisabled -> $assertionsDisabled
    68:858:void <clinit>() -> <clinit>
    72:98:void <init>(cn.com.codesec.java.bean.CompilationUnitBean,cn.com.codesec.util.FilePath) -> <init>
    80:88:void write(java.io.File) -> write
    101:110:void write(java.lang.String) -> write
    115:140:void compilationUnit() -> compilationUnit
    143:207:void funDecl(cn.com.codesec.java.bean.decl.FunDeclBean) -> funDecl
    210:228:void block(cn.com.codesec.java.bean.statement.BlockBean) -> block
    231:261:void statement(cn.com.codesec.java.bean.statement.StatementBean) -> statement
    264:267:void noOpStmt(cn.com.codesec.java.bean.statement.NoOpStmtBean) -> noOpStmt
    270:286:void returnStmt(cn.com.codesec.java.bean.statement.ReturnStmtBean) -> returnStmt
    289:294:void nstGoto(cn.com.codesec.java.bean.statement.GotoBean) -> nstGoto
    297:302:void declStatement(cn.com.codesec.java.bean.statement.DeclStatementBean) -> declStatement
    305:311:void whileStmt(cn.com.codesec.java.bean.statement.WhileStmtBean) -> whileStmt
    314:322:void assignmentStmt(cn.com.codesec.java.bean.statement.AssignmentStmtBean) -> assignmentStmt
    325:330:void callStmt(cn.com.codesec.java.bean.statement.CallStmtBean) -> callStmt
    333:349:void ifElse(cn.com.codesec.java.bean.statement.IfElseBean) -> ifElse
    352:373:void expression(cn.com.codesec.java.bean.expression.ExpressionBean) -> expression
    376:391:void location(cn.com.codesec.java.bean.location.LocationBean) -> location
    395:411:void arrayAccess(cn.com.codesec.java.bean.location.ArrayAccessBean) -> arrayAccess
    414:417:void varAccess(cn.com.codesec.java.bean.location.VarAccessBean) -> varAccess
    420:433:void fieldAccess(cn.com.codesec.java.bean.location.FieldAccessBean) -> fieldAccess
    436:440:void dereference(cn.com.codesec.java.bean.location.DereferenceBean) -> dereference
    443:458:void opExp(cn.com.codesec.java.bean.expression.OpExpBean) -> opExp
    461:464:void funId(cn.com.codesec.java.bean.expression.FunIdentifierBean) -> funId
    467:512:void literalExp(cn.com.codesec.java.bean.literal.LiteralExpBean) -> literalExp
    515:515:java.lang.String getNameToWrite(cn.com.codesec.java.bean.expression.FunCallBean) -> getNameToWrite
    519:542:void funCall(cn.com.codesec.java.bean.expression.FunCallBean) -> funCall
    545:559:void printFunCallArguments(cn.com.codesec.java.bean.expression.FunCallBean) -> printFunCallArguments
    562:581:void allocation(cn.com.codesec.java.bean.expression.AllocationBean) -> allocation
    584:599:void index(cn.com.codesec.java.bean.IndexBean) -> index
    602:608:void writeExpressionTypeCast(cn.com.codesec.java.bean.expression.ExpressionBean) -> writeExpressionTypeCast
    611:613:void writeSourceInfoAndLabel(cn.com.codesec.java.bean.statement.StatementBean) -> writeSourceInfoAndLabel
    616:625:void writeLabel(cn.com.codesec.java.bean.statement.StatementBean) -> writeLabel
    628:628:java.lang.String escape(java.lang.String) -> escape
    638:638:void writeLog(java.lang.String) -> writeLog
    641:667:void varDecl(cn.com.codesec.java.bean.decl.VarDeclBean) -> varDecl
    670:684:void writeSourceAnnotations(cn.com.codesec.java.bean.decl.DeclBean) -> writeSourceAnnotations
    687:715:void type(cn.com.codesec.java.bean.TypeBean) -> type
    718:727:void printTypeName(cn.com.codesec.java.bean.TypeBean) -> printTypeName
    731:732:void writePrimitiveType(java.lang.Integer) -> writePrimitiveType
    735:818:java.lang.String getPrimitiveTypeString(cn.com.codesec.parse.ir.PrimitiveType) -> getPrimitiveTypeString
    822:828:java.lang.String normalize(java.lang.String) -> normalize
    832:833:void writeModifiers(cn.com.codesec.java.bean.ModifiableBean) -> writeModifiers
    836:845:cn.com.codesec.parse.ir.IRModifierSet readModifiers(cn.com.codesec.java.bean.ModifiableBean) -> readModifiers
    849:850:void writeModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> writeModifiers
    853:856:void write(java.lang.String[]) -> write
    861:924:java.lang.String[] getModifierTokens(cn.com.codesec.parse.ir.IRModifierSet) -> getModifierTokens
    928:949:void writeSourceInfo(cn.com.codesec.java.bean.NodeBean) -> writeSourceInfo
    952:955:int getColumnNumber(cn.com.codesec.java.bean.NodeBean) -> getColumnNumber
    959:961:void endline() -> endline
    965:967:void printSignaturesFromTypeMeta(cn.com.codesec.java.bean.decl.ClassDeclBean,boolean) -> printSignaturesFromTypeMeta
    831:831:void access$0(cn.com.codesec.java.bean.txt.IRTxtWriter,cn.com.codesec.java.bean.ModifiableBean) -> access$0
    669:669:void access$1(cn.com.codesec.java.bean.txt.IRTxtWriter,cn.com.codesec.java.bean.decl.DeclBean) -> access$1
    627:627:java.lang.String access$2(java.lang.String) -> access$2
    68:68:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType
cn.com.codesec.java.bean.txt.IRTxtWriter$TypeSignatureGenerator -> cn.com.codesec.java.bean.txt.IRTxtWriter$TypeSignatureGenerator:
    java.io.PrintWriter out -> out
    cn.com.codesec.java.bean.txt.IRTxtWriter irWriter -> irWriter
    975:979:void <init>(java.io.PrintWriter,cn.com.codesec.java.bean.txt.IRTxtWriter) -> <init>
    982:984:void printType(cn.com.codesec.java.bean.TypeBean) -> printType
    987:1002:void printField(cn.com.codesec.java.bean.decl.FieldDeclBean,boolean) -> printField
    1005:1068:void printMethod(cn.com.codesec.java.bean.decl.FunDeclBean,boolean) -> printMethod
    1072:1124:void printTypeSignature(cn.com.codesec.java.bean.decl.ClassDeclBean,boolean) -> printTypeSignature
cn.com.codesec.java.cache.ASTBeanSerializer -> cn.com.codesec.b:
    13:13:void <init>() -> <init>
    18:18:java.io.ObjectOutputStream getObjectOutputStream(java.io.OutputStream) -> a
    24:24:java.io.ObjectInputStream getObjectInputStream(java.io.InputStream) -> a
cn.com.codesec.java.cache.AsynchronousCacheService -> cn.com.codesec.c:
    long queueDelay -> a
    int capacity -> b
    java.util.concurrent.ConcurrentMap concurrentMap -> c
    java.util.concurrent.DelayQueue dirty -> d
    java.util.Set pinned -> e
    boolean exit -> f
    java.lang.Thread thread -> g
    java.lang.String threadName -> h
    java.util.concurrent.atomic.AtomicInteger asynchronousAtomicInteger -> i
    java.util.concurrent.atomic.AtomicInteger synchronizationAtomicInteger -> j
    23:25:void <clinit>() -> <clinit>
    31:31:boolean isExit() -> a
    39:46:void <init>(java.lang.String) -> <init>
    49:52:void startup() -> b
    55:57:void shutdown() -> c
    61:74:void run() -> run
    77:105:java.io.Serializable take(boolean) -> a
    109:135:void putWithEvict(java.io.Serializable) -> c
    void doSerialize(java.io.Serializable) -> a
    141:164:void serialize(java.io.Serializable) -> d
    167:174:void enqueue(java.io.Serializable) -> b
    177:178:void pin(java.io.Serializable) -> e
    23:23:long access$0() -> d
    111:122:cn.com.codesec.java.cache.AsynchronousCacheService$DelayedElement lambda$0(java.io.Serializable,java.io.Serializable,cn.com.codesec.java.cache.AsynchronousCacheService$DelayedElement) -> a
cn.com.codesec.java.cache.AsynchronousCacheService$DelayedElement -> cn.com.codesec.d:
    long addTime -> a
    java.io.Serializable node -> b
    196:196:java.io.Serializable getNode() -> a
    199:202:void <init>(java.io.Serializable) -> <init>
    206:206:long getDelay(java.util.concurrent.TimeUnit) -> getDelay
    212:227:int compareTo(java.util.concurrent.Delayed) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.cache.CacheManagerService -> cn.com.codesec.e:
    boolean persistent -> a
    org.ehcache.CacheManager cacheManager -> b
    org.ehcache.Cache htmlCache -> c
    int DEAFAULT_CACHE_COUNT -> d
    java.lang.String HTML_CACHE_NAME -> e
    org.ehcache.Cache xmlCache -> f
    java.lang.String XML_CACHE_NAME -> g
    org.ehcache.Cache astCache -> h
    cn.com.codesec.java.cache.AsynchronousCacheService astAsynchronousCache -> i
    java.util.Map astMap -> j
    java.lang.String TERMINAL_SET_CACHE_NAME -> k
    org.ehcache.Cache terminalSetCache -> l
    java.lang.String PROFILE_DATA_CACHE_NAME -> m
    org.ehcache.Cache profileDataCache -> n
    java.lang.String ISSUES_DATA_CACHE_NAME -> o
    org.ehcache.Cache issuesDataCache -> p
    java.lang.String GLOBAL_DATA_CACHE_NAME -> q
    org.ehcache.Cache globalDataCache -> r
    int astNumber -> s
    java.lang.String AST_CACHE_NAME -> t
    org.ehcache.Cache funDeclCache -> u
    cn.com.codesec.java.cache.AsynchronousCacheService funDeclAsynchronousCache -> v
    java.lang.String FUN_DECL_CACHE_NAME -> w
    52:52:void <init>() -> <init>
    59:64:org.ehcache.CacheManager getCacheManager() -> a
    73:78:void initHtmlCache() -> b
    81:85:void closeHtmlCache() -> c
    88:88:java.lang.String getHtml(cn.com.codesec.util.SourceFile) -> a
    92:93:void cacheHtml(cn.com.codesec.util.SourceFile,java.lang.String) -> a
    101:106:void initXMLCache() -> d
    109:113:void closeXMLCache() -> e
    116:116:org.jdom2.Document getDocument(cn.com.codesec.util.SourceFile) -> b
    120:121:void cacheDocument(cn.com.codesec.util.SourceFile,org.jdom2.Document) -> a
    137:142:void initTerminalSetCache(cn.com.codesec.scan.analyzer.taint.TerminalCalculator) -> a
    145:145:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet readTerminalSet(java.lang.Long) -> a
    149:150:void writeTerminalSet(java.lang.Long,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet) -> a
    153:157:void closeTerminalSetCache() -> f
    173:192:void initMethodDataCache() -> g
    195:199:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data readProfileData(java.lang.Long) -> b
    204:205:void writeProfileData(java.lang.Long,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> a
    208:209:void clearProfileData(java.lang.Long) -> c
    212:216:java.util.Set readIssuesData(java.lang.Long) -> d
    221:222:void writeIssuesData(java.lang.Long,cn.com.codesec.scan.util.collections.TightSet) -> a
    225:226:void clearIssuesData(java.lang.Long) -> e
    229:230:void writeGlobalData(cn.com.codesec.scan.metadata.StorageMeta,java.util.Map) -> a
    233:248:void closeMethodDataCache() -> h
    257:258:void setAstNumber(int) -> a
    263:278:void initASTCache() -> i
    281:293:void initFunDeclCache() -> j
    296:307:void closeASTCache() -> k
    310:314:void close() -> l
    325:327:void writeAST(cn.com.codesec.util.IRFile,cn.com.codesec.java.bean.CompilationUnitBean) -> a
    330:330:cn.com.codesec.java.bean.CompilationUnitBean readAST(cn.com.codesec.util.IRFile) -> a
    334:338:cn.com.codesec.java.bean.CompilationUnitBean getAST(cn.com.codesec.util.IRFile) -> b
    342:344:void removeAST(cn.com.codesec.util.IRFile) -> c
    347:347:cn.com.codesec.scan.ir.nodes.IRFunDecl readFunDecl(java.lang.Integer) -> a
    351:355:void writeFunDecl(java.lang.Integer,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    359:360:void asynchronousWrite(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    363:371:void closeFunDeclCache() -> m
    379:447:void cleanCache() -> n
    125:125:org.ehcache.Cache access$0() -> o
cn.com.codesec.java.cache.CacheManagerService$1 -> cn.com.codesec.f:
    1:268:void <init>(java.lang.String) -> <init>
    270:274:void doSerialize(org.apache.commons.lang3.tuple.Pair) -> a
    1:1:void doSerialize(java.io.Serializable) -> a
cn.com.codesec.java.cache.CacheManagerService$2 -> cn.com.codesec.g:
    1:286:void <init>(java.lang.String) -> <init>
    289:290:void doSerialize(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1:1:void doSerialize(java.io.Serializable) -> a
cn.com.codesec.java.cache.FastjsonConfig -> cn.com.codesec.h:
    17:27:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    31:40:java.lang.String toJSONString(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    45:45:cn.com.codesec.scan.ir.nodes.IRFunDecl parseObject(java.lang.String) -> a
cn.com.codesec.java.cache.HandleSerializerJSONType -> cn.com.codesec.i:
cn.com.codesec.java.cache.IRFunDeclSerializer -> cn.com.codesec.j:
    15:15:void <init>() -> <init>
    20:20:java.io.ObjectOutputStream getObjectOutputStream(java.io.OutputStream) -> a
    26:26:java.io.ObjectInputStream getObjectInputStream(java.io.InputStream) -> a
cn.com.codesec.java.cache.JavaSerializer -> cn.com.codesec.k:
    15:15:void <init>() -> <init>
    23:32:java.nio.ByteBuffer serialize(java.lang.Object) -> serialize
    42:49:java.lang.Object read(java.nio.ByteBuffer) -> read
    55:55:boolean equals(java.lang.Object,java.nio.ByteBuffer) -> equals
    java.io.ObjectOutputStream getObjectOutputStream(java.io.OutputStream) -> a
    java.io.ObjectInputStream getObjectInputStream(java.io.InputStream) -> a
cn.com.codesec.java.cache.MethodDataSerializer -> cn.com.codesec.l:
    21:21:void <init>() -> <init>
    26:26:java.io.ObjectOutputStream getObjectOutputStream(java.io.OutputStream) -> a
    32:32:java.io.ObjectInputStream getObjectInputStream(java.io.InputStream) -> a
cn.com.codesec.java.cache.NodeHandleSerializer -> cn.com.codesec.m:
    cn.com.codesec.scan.backend.BackEnd world -> a
    com.alibaba.fastjson.serializer.ObjectSerializer varDeclSerializer -> b
    30:34:void <init>() -> <init>
    39:63:void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int) -> write
cn.com.codesec.java.cache.NodeJSONType -> cn.com.codesec.n:
cn.com.codesec.java.cache.TerminalSerializer -> cn.com.codesec.o:
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator calc -> a
    24:26:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator) -> <init>
    30:30:java.io.ObjectOutputStream getObjectOutputStream(java.io.OutputStream) -> a
    35:35:java.io.ObjectInputStream getObjectInputStream(java.io.InputStream) -> a
cn.com.codesec.java.cache.TerminalSerializer$IssueCalculationInputStream -> cn.com.codesec.p:
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator calculator -> a
    57:60:void <init>(java.io.InputStream,cn.com.codesec.scan.analyzer.taint.TerminalCalculator) -> <init>
    64:67:java.lang.Object resolveObject(java.lang.Object) -> resolveObject
    56:56:void <init>(java.io.InputStream,cn.com.codesec.scan.analyzer.taint.TerminalCalculator,cn.com.codesec.java.cache.TerminalSerializer$IssueCalculationInputStream) -> <init>
cn.com.codesec.java.cache.TerminalSerializer$IssueCalculationOutputStream -> cn.com.codesec.q:
    40:42:void <init>(java.io.OutputStream) -> <init>
    46:49:java.lang.Object replaceObject(java.lang.Object) -> replaceObject
    39:39:void <init>(java.io.OutputStream,cn.com.codesec.java.cache.TerminalSerializer$IssueCalculationOutputStream) -> <init>
cn.com.codesec.java.cache.TerminalSerializer$TerminalHandle -> cn.com.codesec.r:
    int id -> a
    74:76:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> <init>
    79:79:java.lang.Object get(cn.com.codesec.scan.analyzer.taint.TerminalCalculator) -> a
cn.com.codesec.java.common.CSharpVersionConfig -> cn.com.codesec.s:
    java.util.List notjavaeeRuleSetNameList -> a
    java.util.List htmlScanRuleIdList -> b
    8:115:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    118:118:java.util.List getNotjavaeeRuleSetNameList() -> a
    122:122:java.util.List getHtmlScanRuleIdList() -> b
    126:127:void setHtmlScanRuleIdList(java.util.List) -> a
cn.com.codesec.java.common.CheckMode -> cn.com.codesec.t:
    cn.com.codesec.java.common.CheckMode NORMAL -> a
    cn.com.codesec.java.common.CheckMode EXACT -> b
    java.lang.String type -> c
    cn.com.codesec.java.common.CheckMode[] ENUM$VALUES -> d
    3:7:void <clinit>() -> <clinit>
    12:12:java.lang.String getType() -> a
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.java.common.CheckMode[] values() -> values
    1:1:cn.com.codesec.java.common.CheckMode valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.common.CheckModeMap -> cn.com.codesec.u:
    java.util.Map map -> a
    8:15:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    19:19:cn.com.codesec.java.common.CheckMode valueOf(java.lang.String) -> a
cn.com.codesec.java.common.DebugOption -> cn.com.codesec.v:
    boolean IS_TOKEN_RELEASE -> a
    boolean IS_RELEASE -> b
    boolean IS_DEBUG -> c
    boolean ASSERT -> d
    boolean IS_RESULT_DEBUG -> e
    boolean IS_DEBUGDATA -> f
    boolean IS_CACHEDATA -> g
    java.lang.String OLD_KEY -> h
    java.lang.String NEW_KEY -> i
    java.lang.String SKY_CSHARP -> j
    java.lang.String SKY_CSHARP_HG -> k
    boolean OLDPACKAGE -> l
    boolean IS_CERT -> m
    java.lang.String ENGINE -> n
    boolean OLDTRACEINFOTYPE -> o
    java.lang.String engineName -> p
    java.lang.String homeName -> q
    java.lang.String version -> r
    10:10:void <init>() -> <init>
    50:54:java.lang.String getEngineName() -> a
    63:81:java.lang.String getHomeName() -> b
    88:103:java.lang.String getVersion() -> c
cn.com.codesec.java.common.DefaultExtensionNames -> cn.com.codesec.w:
    cn.com.codesec.java.common.DefaultExtensionNames SMALI_EXTENSION_NAMES -> a
    cn.com.codesec.java.common.DefaultExtensionNames YAML_EXTENSION_NAMES -> b
    cn.com.codesec.java.common.DefaultExtensionNames JAVA_EXTENSION_NAMES -> c
    cn.com.codesec.java.common.DefaultExtensionNames JSP_EXTENSION_NAMES -> d
    cn.com.codesec.java.common.DefaultExtensionNames VM_EXTENSION_NAMES -> e
    cn.com.codesec.java.common.DefaultExtensionNames JAR_EXTENSION_NAMES -> f
    cn.com.codesec.java.common.DefaultExtensionNames AAR_EXTENSION_NAMES -> g
    cn.com.codesec.java.common.DefaultExtensionNames HTML_EXTENSION_NAMES -> h
    cn.com.codesec.java.common.DefaultExtensionNames CONFIG_EXTENSION_NAMES -> i
    cn.com.codesec.java.common.DefaultExtensionNames SETTINGS_EXTENSION_NAMES -> j
    cn.com.codesec.java.common.DefaultExtensionNames XML_EXTENSION_NAMES -> k
    cn.com.codesec.java.common.DefaultExtensionNames WSDD_EXTENSION_NAMES -> l
    cn.com.codesec.java.common.DefaultExtensionNames XSI_EXTENSION_NAMES -> m
    cn.com.codesec.java.common.DefaultExtensionNames XSD_EXTENSION_NAMES -> n
    cn.com.codesec.java.common.DefaultExtensionNames PROPERTIES_EXTENSION_NAMES -> o
    cn.com.codesec.java.common.DefaultExtensionNames INI_EXTENSION_NAMES -> p
    java.util.List extensionNames -> q
    cn.com.codesec.java.common.DefaultExtensionNames[] ENUM$VALUES -> r
    14:46:void <clinit>() -> <clinit>
    51:51:java.util.List getExtensionNames() -> a
    54:56:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    1:1:cn.com.codesec.java.common.DefaultExtensionNames[] values() -> values
    1:1:cn.com.codesec.java.common.DefaultExtensionNames valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.common.EngineCheckMode -> cn.com.codesec.x:
    cn.com.codesec.java.common.EngineCheckMode BUG -> a
    cn.com.codesec.java.common.EngineCheckMode CERT -> b
    cn.com.codesec.java.common.EngineCheckMode STD -> c
    cn.com.codesec.java.common.EngineCheckMode YDT -> d
    cn.com.codesec.java.common.EngineCheckMode GUIDE -> e
    java.lang.String type -> f
    cn.com.codesec.java.common.EngineCheckMode[] ENUM$VALUES -> g
    10:20:void <clinit>() -> <clinit>
    25:25:java.lang.String getType() -> a
    28:31:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.java.common.EngineCheckMode[] values() -> values
    1:1:cn.com.codesec.java.common.EngineCheckMode valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.common.EngineCheckModeMap -> cn.com.codesec.y:
    java.util.Map map -> a
    8:15:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    19:19:cn.com.codesec.java.common.EngineCheckMode valueOf(java.lang.String) -> a
cn.com.codesec.java.common.EngineConfig -> cn.com.codesec.z:
    cn.com.codesec.java.rules.flags.TaintFlagSet disableTagSet -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet filterTagSet -> b
    java.util.Map disableTagWithCategoryId -> c
    12:54:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    15:15:cn.com.codesec.java.rules.flags.TaintFlagSet getDisableTagSet() -> a
    21:21:cn.com.codesec.java.rules.flags.TaintFlagSet getFilterTagSet() -> b
    27:27:java.util.Map getDisableTagWithCategoryId() -> c
cn.com.codesec.java.common.EngineEdition -> cn.com.codesec.A:
    cn.com.codesec.java.common.EngineEdition OLD -> a
    cn.com.codesec.java.common.EngineEdition NEW -> b
    cn.com.codesec.java.common.EngineEdition FSPROJECT -> c
    java.lang.String type -> d
    cn.com.codesec.java.common.EngineEdition[] ENUM$VALUES -> e
    3:9:void <clinit>() -> <clinit>
    14:14:java.lang.String getType() -> a
    17:20:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.java.common.EngineEdition[] values() -> values
    1:1:cn.com.codesec.java.common.EngineEdition valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.common.EngineEditionMap -> cn.com.codesec.B:
    java.util.Map map -> a
    8:15:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    19:19:cn.com.codesec.java.common.EngineEdition valueOf(java.lang.String) -> a
cn.com.codesec.java.common.EngineMode -> cn.com.codesec.C:
    cn.com.codesec.java.common.EngineMode BUG -> a
    cn.com.codesec.java.common.EngineMode CERT -> b
    cn.com.codesec.java.common.EngineMode STD -> c
    cn.com.codesec.java.common.EngineMode YDT -> d
    cn.com.codesec.java.common.EngineMode GUIDE -> e
    java.lang.String type -> f
    cn.com.codesec.java.common.EngineMode[] ENUM$VALUES -> g
    10:20:void <clinit>() -> <clinit>
    25:25:java.lang.String getType() -> a
    28:31:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.java.common.EngineMode[] values() -> values
    1:1:cn.com.codesec.java.common.EngineMode valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.common.EngineModeMap -> cn.com.codesec.D:
    java.util.Map map -> a
    8:15:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    19:19:cn.com.codesec.java.common.EngineMode valueOf(java.lang.String) -> a
cn.com.codesec.java.common.ExtensionNamesConfig -> cn.com.codesec.E:
    java.util.List javaExtensionNames -> a
    java.util.List jspExtensionNames -> b
    java.util.List vmExtensionNames -> c
    java.util.List jarExtensionNames -> d
    java.util.List htmlExtensionNames -> e
    java.util.List xmlExtensionNames -> f
    java.util.List wsddExtensionNames -> g
    java.util.List xsiExtensionNames -> h
    java.util.List xsdExtensionNames -> i
    java.util.List propertiesExtensionNames -> j
    java.util.List iniExtensionNames -> k
    java.util.List smaliExtensionNames -> l
    java.util.List yamlExtensionNames -> m
    java.util.List aarExtensionNames -> n
    13:160:void <init>() -> <init>
    19:19:java.util.List getJavaExtensionNames() -> a
    23:24:void setJavaExtensionNames(java.util.List) -> a
    27:27:java.util.List getJspExtensionNames() -> b
    31:32:void setJspExtensionNames(java.util.List) -> b
    35:35:java.util.List getVmExtensionNames() -> c
    39:40:void setVmExtensionNames(java.util.List) -> c
    43:43:java.util.List getJarExtensionNames() -> d
    47:48:void setJarExtensionNames(java.util.List) -> d
    51:51:java.util.List getHtmlExtensionNames() -> e
    55:56:void setHtmlExtensionNames(java.util.List) -> e
    59:59:java.util.List getXmlExtensionNames() -> f
    63:64:void setXmlExtensionNames(java.util.List) -> f
    67:67:java.util.List getPropertiesExtensionNames() -> g
    72:73:void setPropertiesExtensionNames(java.util.List) -> g
    100:100:java.util.List getXsdExtensionNames() -> h
    104:105:void setXsdExtensionNames(java.util.List) -> h
    108:108:java.util.List getXsiExtensionNames() -> i
    112:113:void setXsiExtensionNames(java.util.List) -> i
    116:116:java.util.List getWsddExtensionNames() -> j
    120:121:void setWsddExtensionNames(java.util.List) -> j
    133:133:java.util.List getSmaliExtensionNames() -> k
    137:138:void setSmaliExtensionNames(java.util.List) -> k
    144:144:java.util.List getYamlExtensionNames() -> l
    148:149:void setYamlExtensionNames(java.util.List) -> l
    152:152:java.util.List getIniExtensionNames() -> m
    156:157:void setIniExtensionNames(java.util.List) -> m
    163:163:java.util.List getAarExtensionNames() -> n
    167:168:void setAarExtensionNames(java.util.List) -> n
cn.com.codesec.java.common.PathDescirptionService -> cn.com.codesec.F:
    java.lang.String DEFAULT_TYPE_VALUE -> a
    java.util.ResourceBundle resourceBundle -> b
    java.lang.String BASE_NAME -> c
    java.lang.String[] baseNamePrefixs -> d
    java.util.Map pathDescirptionServiceMap -> e
    64:75:void <clinit>() -> <clinit>
    24:28:void <init>(java.lang.String) -> <init>
    34:42:java.lang.String getValue(java.lang.String) -> a
    49:59:java.lang.String getMessageFormatString(java.lang.String,java.lang.Object[]) -> a
    80:82:java.lang.String getTaintMessageFormatString(java.lang.String,java.lang.Object[]) -> b
    87:87:cn.com.codesec.java.common.PathDescirptionService getPathDescirptionService(java.lang.String) -> b
    92:100:java.util.Map parseStateDescriptions() -> a
    105:156:void parseStateDescriptions(java.util.Map,java.lang.String,java.lang.String) -> a
    160:166:cn.com.codesec.java.rules.StateDescriptions getStateDescriptions(java.lang.String,java.util.Map) -> a
    172:173:java.lang.String getFlagDataDescription(boolean,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    178:206:java.lang.String getDataDescription(boolean,cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    211:211:java.lang.String getDeafultDataDescription() -> b
cn.com.codesec.java.common.ReloadingConfigHolder -> cn.com.codesec.G:
    org.apache.commons.configuration2.PropertiesConfiguration scanConfiguration -> a
    org.apache.commons.configuration2.reloading.PeriodicReloadingTrigger periodicReloadingTrigger -> b
    16:16:void <init>() -> <init>
    23:49:void initScanConfig(java.lang.String) -> a
    53:56:void clearScanConfig() -> a
    64:70:boolean isEnd(java.lang.String) -> b
    75:75:boolean isAnalysisEnd() -> b
    80:80:boolean isScanEndForce() -> c
    85:85:boolean isDataFlowResultEnd() -> d
    90:90:boolean isDataFlowResultEndForce() -> e
    94:94:org.apache.commons.configuration2.PropertiesConfiguration getScanConfiguration() -> f
    98:99:void setScanConfiguration(org.apache.commons.configuration2.PropertiesConfiguration) -> a
    102:102:org.apache.commons.configuration2.reloading.PeriodicReloadingTrigger getPeriodicReloadingTrigger() -> g
    106:107:void setPeriodicReloadingTrigger(org.apache.commons.configuration2.reloading.PeriodicReloadingTrigger) -> a
cn.com.codesec.java.common.ReloadingConfigHolder$1 -> cn.com.codesec.H:
    org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder val$builder -> a
    1:29:void <init>(org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder) -> <init>
    32:39:void onEvent(org.apache.commons.configuration2.builder.ConfigurationBuilderEvent) -> a
    1:1:void onEvent(org.apache.commons.configuration2.event.Event) -> onEvent
cn.com.codesec.java.common.ScanTimeTimerTask -> cn.com.codesec.I:
    java.lang.String buildId -> a
    java.util.concurrent.atomic.AtomicInteger runTimes -> b
    java.util.concurrent.atomic.AtomicInteger analysisEndTimes -> c
    java.util.concurrent.atomic.AtomicInteger dataFlowResultEndTimes -> d
    boolean beginDataFlowResult -> e
    13:32:void <init>(java.lang.String) -> <init>
    36:37:void setBeginDataFlowResult(boolean) -> a
    41:110:void run() -> run
cn.com.codesec.java.common.SkyCSharpConfig -> cn.com.codesec.J:
    java.lang.String CACHE_PTATH -> a
    java.lang.String DEBUG_PTATH -> b
    java.lang.String ETC_PTATH -> c
    java.lang.String LOGS_PTATH -> d
    java.lang.String RULES_PTATH -> e
    java.lang.String JAVAEE_LIB_PTATH -> f
    java.lang.String JSP_LIB_PTATH -> g
    java.lang.String COMMON_LIB_PTATH -> h
    java.lang.String ANDROID_LIB_PTATH -> i
    java.lang.String JDK_LIB_PTATH -> j
    java.lang.String z3path -> bB
    java.lang.String homePath -> bC
    java.lang.String cachePath -> bD
    java.lang.String CONFIGERROR -> bE
    java.lang.String debugPath -> bF
    java.lang.String parserJspTempPath -> bG
    java.lang.String PARSER_JSP_TEMP_PTATH -> k
    java.lang.String parserVmTempPath -> bH
    java.lang.String PARSER_VM_TEMP_PTATH -> l
    java.lang.String complexityDataPath -> bI
    java.lang.String COMPLEXITY_DATA_PATH -> m
    java.lang.String controlFlowGraphData -> bJ
    java.lang.String ControlFlowGraph_DATA_PATH -> n
    java.lang.String functionAndVarDeclData -> bK
    java.lang.String FUNCTIONANDVARDECL_DATA_PATH -> o
    java.lang.String functionAndVarReferData -> bL
    java.lang.String FUNCTIONANDVARREFER_DATA_PATH -> p
    java.lang.String callGraphData -> bM
    java.lang.String CALLGRAPH_DATA_PATH -> q
    java.lang.String semanticDataPath -> bN
    java.lang.String SEMANTIC_DATA_PATH -> r
    java.lang.String fileRelationsPath -> bO
    java.lang.String File_RELATIONS_PATH -> s
    java.lang.Boolean containsLib -> bP
    java.lang.String CONTAINS_LIB -> t
    boolean DEFAULT_CONTAINS_LIB -> u
    java.lang.String parserAarTempPath -> bQ
    java.lang.String PARSER_AAR_TEMP_PTATH -> v
    java.lang.String taintDataDebugPath -> bR
    java.lang.String TAINT_DATA_PTATH -> w
    java.lang.String constantsDataDebugPath -> bS
    java.lang.String CONSTATNS_DATA_PTATH -> x
    java.lang.String cfgDataDebugPath -> bT
    java.lang.String CFG_DATA_PTATH -> y
    java.lang.String limitDataDebugPath -> bU
    java.lang.String LIMIT_DATA_PTATH -> z
    java.lang.String globalDataDebugPath -> bV
    java.lang.String GLOBAL_DATA_PTATH -> A
    java.lang.String irDataDebugPath -> bW
    java.lang.String IR_DATA_PTATH -> B
    java.lang.String serializeDataDebugPath -> bX
    java.lang.String SERIALIZE_DATA_PTATH -> C
    java.lang.String javaeeLibPath -> bY
    java.lang.String jspLibPath -> bZ
    java.lang.String commonLibPath -> ca
    java.lang.String jdkLibPath -> cb
    java.lang.String androidLibPath -> cc
    java.lang.Boolean skipDeadCode -> cd
    java.lang.Boolean showDeprecatedESAPI -> ce
    java.lang.Boolean showPossibleSafetyXSS -> cf
    java.lang.Boolean uniquePropertiesKey -> cg
    java.lang.Boolean javaJumpToTemplateByGlobaltype -> ch
    java.lang.Boolean templateJumpToTemplateByGlobaltype -> ci
    java.lang.Boolean templateJumpToJavaByGlobaltype -> cj
    java.lang.Integer globalJumpTypeFlag -> ck
    java.lang.Integer enableCodeStyleCheckFlag -> cl
    java.lang.Boolean enableNestedForDepthCheck -> cm
    java.lang.Boolean enableNestedIfDepthCheck -> cn
    java.lang.Boolean enableConstantNameCheck -> co
    java.lang.Boolean enableMethodLengthCheck -> cp
    java.lang.Boolean jumpByRequestGlobalType -> cq
    java.lang.Boolean jumpBySessionGlobalType -> cr
    java.lang.Boolean jumpByOtherGlobalType -> cs
    java.lang.Boolean useSystemBuiltInObjectsInJsp -> ct
    java.lang.Boolean useStruts2SourceBuiltInJsp -> cu
    java.lang.Boolean jspTranslationLinkToOtherWebInfo -> cv
    java.lang.Boolean showPossibleXSSFromJson -> cw
    java.lang.Boolean showPossibleXSSPassthrourhFile -> cx
    java.lang.Boolean showPossibleSQLInjectionOfMybatis -> cy
    java.lang.Boolean showPossibleErrorPathOfJsp -> cz
    java.lang.Boolean showPossibleErrorPathOfJspInLow -> cA
    java.lang.Boolean showUncertaintyPathOfJsp -> cB
    java.lang.Boolean keyIsEncryptionKeyInStructural -> cC
    java.lang.Boolean showPossibleNotPasswordOrEncryptionKey -> cD
    java.lang.Boolean vmParserAllowHyphenInIdentifiers -> cE
    java.lang.Boolean JDKOverridePass -> cF
    java.lang.Boolean moreExtractAllow -> cG
    java.lang.Boolean iteratorClassOverride -> cH
    java.lang.Boolean listClassOverride -> cI
    java.lang.Boolean mapClassOverride -> cJ
    java.lang.Boolean lambdaOverride -> cK
    java.lang.String templateTraceLevel -> cL
    java.util.Set filterSourceTags -> cM
    java.lang.String struts2ValueTransferMode -> cN
    java.lang.Boolean objectStruts2ValueTransferMode -> cO
    java.lang.String ignoreMapOperationLevel -> cP
    java.lang.Boolean anonymousClassOverride -> cQ
    java.lang.Boolean returnTypeOverride -> cR
    java.lang.Long maxIssueCountInEachMethod -> cS
    java.lang.Long maxIssueCountInInjectionConstantFilter -> cT
    java.lang.Boolean enableInjectionConstantFilter -> cU
    java.lang.Boolean resultXMLSpecialcharacters -> cV
    java.lang.Long resultXMLNumberLimit -> cW
    java.lang.String ruleBasePath -> cX
    int threadCount -> cY
    java.lang.String CONFIG_PTATH -> D
    java.lang.String SCAN_CONFIG -> E
    java.lang.String SCAN_TIME -> F
    java.lang.String THREAD_COUNT -> G
    java.lang.String DEFAULT_THREAD_COUNT -> H
    java.lang.String PARSE_DUPLICATE_TYPES -> I
    boolean DEFAULT_PARSE_DUPLICATE_TYPES -> J
    java.lang.String DUPLICATE_TYPES_TIMES -> K
    long DEFAULT_DUPLICATE_TYPES_TIMES -> L
    java.lang.String LOAD_SCAN_HTML_RULES -> M
    boolean DEFAULT_LOAD_HTML_SCAN_RULES -> N
    java.lang.String USE_SYSTEM_BUILTIN_OBJECTS_IN_JSP -> O
    boolean DEFAULT_USE_SYSTEM_BUILTIN_OBJECTS_IN_JSP -> P
    java.lang.String USE_STRUTS2SOURCE_BUILTIN_IN_JSP -> Q
    boolean DEFAULT_USE_STRUTS2SOURCE_BUILTIN_IN_JSP -> R
    java.lang.String JSP_TRANSLATION_LINK_TO_OTHER_WEBINFO -> S
    boolean DEFAULT_JSP_TRANSLATION_LINK_TO_OTHER_WEBINFO -> T
    java.lang.String ANALYSIS_SKIP -> U
    java.lang.String DATA_FLOW_RESULT_SKIP -> V
    java.lang.String ANALYSIS_END -> W
    java.lang.String ANALYSIS_END_FORCE -> X
    java.lang.String DATA_FLOW_RESULT_END -> Y
    java.lang.String DATA_FLOW_RESULT_END_FORCE -> Z
    long DEFAULT_SCAN_TIME -> aa
    long DEFAULT_RESULT_TIME -> ab
    long REFRESH_TIME -> ac
    java.lang.String VMPARSER_ALLOW_HYPHEN_IN_IDENTIFIERS -> ad
    boolean DEFAULT_VMPARSER_ALLOW_HYPHEN_IN_IDENTIFIERS -> ae
    java.lang.String SKIP_DEAD_CODE -> af
    boolean DEFAULT_SKIP_DEAD_CODE -> ag
    java.lang.String SHOW_DEPRECATED_ESAPI -> ah
    boolean DEFAULT_SHOW_DEPRECATED_ESAPI -> ai
    java.lang.String SHOW_POSSIBLE_SAFETY_XSS -> aj
    boolean DEFAULT_SHOW_POSSIBLE_SAFETY_XSS -> ak
    java.lang.String SHOW_POSSIBLE_XSS_JSON -> al
    boolean DEFAULT_SHOW_POSSIBLE_XSS_JSON -> am
    java.lang.String SHOW_POSSIBLE_XSS_PASSTHROUGH_FILE -> an
    boolean DEFAULT_SHOW_POSSIBLE_XSS_PASSTHROUGH_FILE -> ao
    java.lang.String SHOW_POSSIBLE_SQL_INJECTION_MYBATIS -> ap
    boolean DEFAULT_SHOW_POSSIBLE_SQL_INJECTION_MYBATIS -> aq
    java.lang.String SHOW_POSSIBLE_ERRORPATHOFJSP -> ar
    boolean DEFAULT_SHOW_POSSIBLE_ERRORPATHOFJSP -> as
    java.lang.String SHOW_POSSIBLE_ERRORPATHOFJSPINLOW -> at
    boolean DEFAULT_SHOW_POSSIBLE_ERRORPATHOFJSPINLOW -> au
    java.lang.String SHOW_UNCERTAINTY_PATHOFJSP -> av
    boolean DEFAULT_SHOW_UNCERTAINTY_PATHOFJSP -> aw
    java.lang.String KEY_IS_ENCRYPTION_KEY_IN_STRUCTURAL -> ax
    boolean DEFAULT_KEY_IS_ENCRYPTION_KEY_IN_STRUCTURAL -> ay
    java.lang.String SHOW_POSSIBLE_NOT_PASS_WORD_OR_ENCRYPTION_KEY -> az
    boolean DEFAULT_SHOW_POSSIBLE_NOT_PASS_WORD_OR_ENCRYPTION_KEY -> aA
    java.lang.String JDK_OVERRIDE_PASS -> aB
    boolean DEFAULT_JDK_OVERRIDE_PASS -> aC
    java.lang.String MORE_EXTRACT_ALLOW -> aD
    boolean DEFAULT_MORE_EXTRACT_ALLOW -> aE
    java.lang.String LAMBDA_OVERRIDE -> aF
    boolean DEFAULT_LAMBDA_OVERRIDE -> aG
    java.lang.String MAP_CLASS_OVERRIDE -> aH
    boolean DEFAULT_MAP_CLASS_OVERRIDE -> aI
    java.lang.String LIST_CLASS_OVERRIDE -> aJ
    boolean DEFAULT_LIST_CLASS_OVERRIDE -> aK
    java.lang.String ITERATOR_CLASS_OVERRIDE -> aL
    boolean DEFAULT_ITERATOR_CLASS_OVERRIDE -> aM
    java.lang.String IGNORE_MAP_OPERATION_LEVEL -> aN
    java.lang.String DEFAULT_IGNORE_MAP_OPERATION_LEVEL -> aO
    java.lang.String TEMPLATE_TRACE_LEVEL -> aP
    java.lang.String DEFAULT_TEMPLATE_TRACE_LEVEL -> aQ
    java.lang.String FILTER_SOURCE_TAGS -> aR
    java.lang.String DEFAULT_FILTER_SOURCE_TAGS -> aS
    java.lang.String STRUTS2_VALUE_TRANSFER_MODE -> aT
    java.lang.String DEFAULT_STRUTS2_VALUE_TRANSFER_MODE -> aU
    java.lang.String RETURN_TYPE_OVERRIDE -> aV
    boolean DEFAULT_RETURN_TYPE_OVERRIDE -> aW
    java.lang.String MAX_ISSUE_COUNT_IN_EACH_METHOD -> aX
    long DEFAULT_MAX_ISSUE_COUNT_IN_EACH_METHOD -> aY
    java.lang.String MAX_ENUM_CONSTANT_lIMIT -> aZ
    int DEFAULT_MAX_ENUM_CONSTANT_lIMIT -> ba
    java.lang.String MAX_CONSTANT_lIMIT -> bb
    int DEFAULT_MAX_CONSTANT_lIMIT -> bc
    java.lang.String INJECTION_CONSTANT_FILTER_MAX_ISSUE_COUNT -> bd
    long DEFAULT_INJECTION_CONSTANT_FILTER_MAX_ISSUE_COUNT -> be
    java.lang.String INJECTION_CONSTANT_FILTER_ENABLED -> bf
    boolean DEFAULT_INJECTION_CONSTANT_FILTER_ENABLED -> bg
    java.lang.String RESULT_XML_SPECIALCHARACTERS -> bh
    boolean DEFAULT_RESULT_XML_SPECIALCHARACTERS -> bi
    java.lang.String RESULT_XML_NUMBERLIMIT -> bj
    long DEFAULT_RESULT_XML_NUMBERLIMIT -> bk
    java.lang.String ANONYMOUS_CLASS_OVERRIDE -> bl
    boolean DEFAULT_ANONYMOUS_CLASS_OVERRIDE -> bm
    java.lang.String UNIQUE_PROPERTIES_KEY -> bn
    boolean DEFAULT_UNIQUE_PROPERTIES_KEY -> bo
    java.lang.String GLOBAL_JUMP_TYPE -> bp
    java.lang.String DEFAULT_GLOBAL_JUMP_TYPE_FLAG -> bq
    java.lang.String ENABLE_CODE_STYLE_CHECK -> br
    java.lang.String DEFAULT_ENABLE_CODE_STYLE_CHECK -> bs
    java.lang.String TEMPLATE_JUMP_TO_JAVA_BY_GLOBALTYPE -> bt
    boolean DEFAULT_TEMPLATE_JUMP_TO_JAVA_BY_GLOBALTYPE -> bu
    java.lang.String TEMPLATE_JUMP_TO_TEMPLATE_BY_GLOBALTYPE -> bv
    boolean DEFAULT_TEMPLATE_JUMP_TO_TEMPLATE_BY_GLOBALTYPE -> bw
    java.lang.String JAVA_JUMP_TO_TEMPLATE_BY_GLOBALTYPE -> bx
    boolean DEFAULT_JAVA_JUMP_TO_TEMPLATE_BY_GLOBALTYPE -> by
    java.lang.String FLUSHTODISK -> bz
    java.lang.String MEMORYERRORLIMIT -> bA
    java.lang.String scanConfigPath -> cZ
    java.lang.String logFilePath -> da
    java.lang.Integer maxEnumConstantLimit -> db
    java.lang.Integer maxConstantLimit -> dc
    43:1213:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    47:47:java.lang.String getHomePath() -> a
    51:52:void setHomePath(java.lang.String) -> a
    57:68:java.lang.String getCachePath() -> b
    76:87:java.lang.String getDebugPath() -> c
    91:104:java.lang.String getZ3Path() -> d
    111:114:java.lang.String getParserJspTempPath() -> e
    122:125:java.lang.String getParserVmTempPath() -> f
    133:136:java.lang.String getComplexityDataPath() -> g
    142:145:java.lang.String getControlFlowGraphDataPath() -> h
    151:154:java.lang.String getFunctionAndVarDeclDataPath() -> i
    160:163:java.lang.String getFunctionAndVarReferDataPath() -> j
    169:172:java.lang.String getCallGraphDataPath() -> k
    179:182:java.lang.String getSemanticDataPath() -> l
    190:193:java.lang.String getFileRelationsPath() -> m
    199:203:java.lang.Boolean isContainsLib() -> n
    218:221:java.lang.String getParserAarTempPath() -> o
    229:238:java.lang.String getTaintDataDebugPath() -> p
    246:255:java.lang.String getConstantsDataDebugPath() -> q
    263:272:java.lang.String getCfgDataDebugPath() -> r
    280:283:java.lang.String getLimitDataDebugPath() -> s
    291:294:java.lang.String getGlobalDataDebugPath() -> t
    302:311:java.lang.String getIRDataDebugPath() -> u
    319:328:java.lang.String getSerializeDataDebugPath() -> v
    332:333:java.lang.String getCacheParentPath() -> w
    337:338:java.lang.String getDebugParentPath() -> x
    344:348:java.lang.String getJavaeeLibPath() -> y
    354:358:java.lang.String getJspLibPath() -> z
    364:368:java.lang.String getCommonLibPath() -> A
    374:378:java.lang.String getJdkLibPath() -> B
    384:388:java.lang.String getAndroidLibPath() -> C
    394:398:java.lang.Boolean isSkipDeadCode() -> D
    404:408:java.lang.Boolean isShowDeprecatedESAPI() -> E
    414:418:java.lang.Boolean isShowPossibleSafetyXSS() -> F
    424:428:java.lang.Boolean isUniquePropertiesKey() -> G
    434:438:java.lang.Boolean isJavaJumpToTemplateByGlobaltype() -> H
    444:448:java.lang.Boolean isTemplateJumpToTemplateByGlobaltype() -> I
    454:458:java.lang.Boolean isTemplateJumpToJavaByGlobaltype() -> J
    463:472:java.lang.Integer getGlobalJumpTypeFlag() -> K
    478:487:java.lang.Integer getEnableCodeStyleCheckFlag() -> L
    493:497:java.lang.Boolean isEnableNestedForDepthCheck() -> M
    503:507:java.lang.Boolean isEnableNestedIfDepthCheck() -> N
    513:517:java.lang.Boolean isEnableConstantNameCheck() -> O
    523:527:java.lang.Boolean isEnableMethodLengthCheck() -> P
    535:539:java.lang.Boolean isJumpByRequestGlobalType() -> Q
    545:549:java.lang.Boolean isJumpBySessionGlobalType() -> R
    555:559:java.lang.Boolean isJumpByOtherGlobalType() -> S
    565:569:java.lang.Boolean isUseSystemBuiltInObjectsInJsp() -> T
    575:579:java.lang.Boolean isUseStruts2SourceBuiltInJsp() -> U
    585:589:java.lang.Boolean isJspTranslationLinkToOtherWebInfo() -> V
    595:599:java.lang.Boolean isShowPossibleXSSFromJson() -> W
    605:609:java.lang.Boolean isShowPossibleXSSPassthrourhFile() -> X
    615:619:java.lang.Boolean isShowPossibleSQLInjectionOfMybatis() -> Y
    625:629:java.lang.Boolean isShowPossibleErrorPathOfJsp() -> Z
    635:639:java.lang.Boolean isShowPossibleErrorPathOfJspInLow() -> aa
    645:649:java.lang.Boolean isShowUncertaintyPathOfJsp() -> ab
    656:660:java.lang.Boolean isKeyIsEncryptionKeyInStructural() -> ac
    666:670:java.lang.Boolean isShowPossibleNotPassword() -> ad
    676:680:java.lang.Boolean isVmParserAllowHyphenInIdentifiers() -> ae
    686:690:java.lang.Boolean isJDKOverridePass() -> af
    696:700:java.lang.Boolean isMoreExtractAllow() -> ag
    706:710:java.lang.Boolean isIteratorClassOverride() -> ah
    716:720:java.lang.Boolean isListClassOverride() -> ai
    726:730:java.lang.Boolean isMapClassOverride() -> aj
    737:741:java.lang.Boolean getLambdaOverride() -> ak
    750:754:java.lang.String getTemplateTraceLevel() -> al
    760:771:java.util.Set getFilterSourceTags() -> am
    777:781:java.lang.String getStruts2ValueTransferMode() -> an
    787:793:java.lang.Boolean isObjectStruts2ValueTransferMode() -> ao
    799:803:java.lang.String getIgnoreMapOperationLevel() -> ap
    809:813:java.lang.Boolean getAnonymousClassOverride() -> aq
    819:823:java.lang.Boolean getReturnTypeOverride() -> ar
    830:834:long getMaxIssueCountInEachMethod() -> as
    840:844:long getMaxIssueCountInInjectionConstantFilter() -> at
    850:854:java.lang.Boolean getEnableInjectionConstantFilter() -> au
    860:864:java.lang.Boolean getResultXMLSpecialcharacters() -> av
    870:874:long getResultXMLNumberLimit() -> aw
    880:883:java.lang.String getRuleBasePath() -> ax
    890:899:int getThreadCount() -> ay
    904:908:void setThreadCount(java.lang.String) -> b
    912:915:void setThreadCount(int) -> a
    1177:1190:java.lang.String getScanConfigPath() -> az
    1196:1200:java.lang.String getlogFilePath(java.lang.String) -> c
    1206:1210:java.lang.Integer getMaxEnumConstantLimit() -> aA
    1216:1220:java.lang.Integer getMaxConstantLimit() -> aB
cn.com.codesec.java.common.SkyCSharpProject -> cn.com.codesec.K:
    cn.com.codesec.scan.meta.Language LANGUAGE -> a
    boolean usedESAPI -> f
    boolean isAndroid -> g
    boolean isJ2ee -> h
    java.lang.String SEPARATOR -> b
    java.lang.String DEFAULT_CHARSET_NAME -> c
    java.lang.String WEB_INF -> d
    java.lang.String buildId -> i
    java.lang.String[] libPath -> j
    java.lang.String resultPath -> k
    java.lang.String scanId -> l
    java.util.HashMap propertyPairs -> m
    java.util.HashMap JFinalAopMaps -> n
    java.util.Set nonExistFiles -> o
    long startTime -> p
    long endTime -> q
    java.util.List conversionErrorJsp -> r
    java.util.Map compilerErrorJar -> s
    java.util.List loaderErrorJava -> t
    java.util.List loaderErrorJsp -> u
    java.util.List compilerErrorJava -> v
    boolean singleton -> w
    java.util.List compilerErrorJsp -> x
    java.util.Map javaCompilerError -> y
    java.util.Map jspCompilerError -> z
    java.util.Map jspConversionError -> A
    int javaCount -> B
    int jspCount -> C
    java.lang.String sourceVersion -> D
    cn.com.codesec.util.FilePath sourceFilePath -> E
    com.google.common.collect.BiMap filePathAndIndex -> e
    java.util.Set javas -> F
    java.util.Set excludeJavas -> G
    java.util.Set jsps -> H
    java.util.Set excludeJsps -> I
    java.util.Set vms -> J
    java.util.Set jars -> K
    java.util.Set thirdjars -> L
    java.util.Set thirdjspjars -> M
    java.util.Set thirdCommonjars -> N
    java.util.Set thirdaars -> O
    java.util.List validatedJars -> P
    com.google.common.collect.Multimap tagAndJsps -> Q
    java.util.Set jdkjars -> R
    java.util.Set aars -> S
    java.util.Set jarInAars -> T
    java.util.Set htmls -> U
    java.util.Set allxmls -> V
    java.util.Set settings -> W
    java.util.Set configs -> X
    java.util.Set allhtmls -> Y
    java.util.Set xmls -> Z
    java.util.Set appxmanifestxmls -> aa
    java.util.Set likexmls -> ab
    java.util.Set yamls -> ac
    java.util.Set properties -> ad
    java.util.Set smaliFiles -> ae
    java.util.TreeSet webRoots -> af
    java.lang.String checkModelPath -> ag
    java.lang.String safePath -> ah
    java.lang.String url -> ai
    cn.com.codesec.java.common.ExtensionNamesConfig extensionNamesConfig -> aj
    java.lang.String javaExtPattern -> ak
    java.lang.String jspExtPattern -> al
    java.lang.String vmExtPattern -> am
    java.lang.String jarExtPattern -> an
    java.lang.String aarExtPattern -> ao
    java.lang.String htmlExtPattern -> ap
    java.lang.String configExtPattern -> aq
    java.lang.String settingsExtPattern -> ar
    java.lang.String xmlExtPattern -> as
    java.lang.String wsddExtPattern -> at
    java.lang.String xmiExtPattern -> au
    java.lang.String xsdExtPattern -> av
    java.lang.String propertiesExtPattern -> aw
    java.lang.String iniExtPattern -> ax
    java.lang.String yamlExtPattern -> ay
    java.lang.String smaliExtPattern -> az
    java.lang.String token -> aA
    java.lang.String[] userRuleFilePaths -> aB
    java.lang.String[] configFilePaths -> aC
    java.lang.String excludeFile -> aD
    java.lang.String excludedDir -> aE
    java.lang.String changeFilesData -> aF
    cn.com.codesec.java.common.filter.FilenameFilterChain filenameFilterChain -> aG
    java.util.Timer timer -> aH
    cn.com.codesec.java.common.ScanTimeTimerTask scanTimeTimerTask -> aI
    cn.com.codesec.java.common.EngineMode engineMode -> aJ
    cn.com.codesec.java.common.CheckMode checkMode -> aK
    cn.com.codesec.java.common.EngineEdition engineEdition -> aL
    java.util.Map javaToJspMap -> aM
    boolean analysisEnd -> aN
    boolean dataFlowResultEnd -> aO
    java.lang.String args -> aP
    java.lang.String configProperties -> aQ
    java.util.HashMap analysisErrors -> aR
    java.util.List minSdks -> aS
    java.util.Map javaToVmMap -> aT
    42:69:void <clinit>() -> <clinit>
    48:48:boolean isUsedESAPI() -> a
    52:53:void setUsedESAPI(boolean) -> a
    58:58:boolean isAndroid() -> b
    62:63:void setAndroid(boolean) -> b
    74:74:boolean isJ2ee() -> c
    78:79:void setJ2ee(boolean) -> c
    84:84:java.lang.String getResultPath() -> d
    88:89:void setResultPath(java.lang.String) -> a
    92:92:java.lang.String getBuildId() -> e
    96:97:void setBuildId(java.lang.String) -> b
    102:102:java.lang.String getScanId() -> f
    109:109:java.util.HashMap getPropertyPairs() -> g
    115:115:java.util.HashMap getJFinalAopMaps() -> h
    45:1391:void <init>() -> <init>
    121:121:java.util.Set getNonExistFiles() -> i
    45:1391:void <init>(java.lang.String) -> <init>
    138:139:void setSourceVersion(java.lang.String) -> c
    142:142:long getStartTime() -> j
    146:147:void setStartTime(long) -> a
    152:152:long getEndTime() -> k
    156:157:void setEndTime(long) -> b
    162:162:long getTime() -> l
    171:171:java.util.List getConversionErrorJsp() -> m
    179:180:void setConversionErrorJsp(java.util.List) -> a
    186:186:java.util.Map getCompilerErrorJar() -> n
    190:191:void setCompilerErrorJar(java.util.Map) -> a
    197:197:java.util.List getLoaderErrorJava() -> o
    204:204:java.util.List getLoaderErrorJsp() -> p
    211:211:java.util.List getCompilerErrorJava() -> q
    215:215:java.util.List getCompilerErrorJsp() -> r
    221:221:boolean isSingleton() -> s
    225:226:void setSingleton(boolean) -> d
    232:232:java.util.Map getJavaCompilerError() -> t
    236:236:java.util.Map getJspCompilerError() -> u
    240:240:java.util.Map getJspConversionError() -> v
    256:256:int getJavaCount() -> w
    260:261:void setJavaCount(int) -> a
    264:264:int getJspCount() -> x
    268:269:void setJspCount(int) -> b
    277:277:java.lang.String getSourceVersion() -> y
    283:283:cn.com.codesec.util.FilePath getSourceFilePath() -> z
    287:288:void setSourceFilePath(cn.com.codesec.util.FilePath) -> a
    291:291:cn.com.codesec.java.common.ExtensionNamesConfig getExtensionNamesConfig() -> A
    295:295:java.util.Set getJavas() -> B
    299:299:java.util.Set getJsps() -> C
    303:303:java.util.Set getVms() -> D
    307:307:java.util.Set getJars() -> E
    311:311:java.util.Set getThirdjars() -> F
    315:315:java.util.Set getHtmls() -> G
    319:319:java.util.Set getAllxmls() -> H
    323:323:java.util.Set getYamls() -> I
    327:327:java.util.Set getSettings() -> J
    331:331:java.util.Set getConfigs() -> K
    335:345:java.util.List getAllSourceFileList() -> L
    350:356:com.google.common.collect.BiMap getFilePathAndIndex() -> M
    361:367:java.util.Set getAllFiles() -> N
    371:371:java.util.Set getAllhtmls() -> O
    375:375:java.util.Set getXmls() -> P
    379:379:java.util.Set getLikexmls() -> Q
    383:383:java.util.Set getProperties() -> R
    387:387:java.util.Set getSmaliFiles() -> S
    394:394:java.util.Set getExcludeJavas() -> T
    400:400:java.util.Set getExcludeJsps() -> U
    415:415:com.google.common.collect.Multimap getTagAndJsps() -> V
    419:419:java.util.Set getThirdjspjars() -> W
    422:422:java.util.Set getThirdCommonjars() -> X
    425:425:java.util.List getValidatedJars() -> Y
    429:430:void setValidatedJars(java.util.List) -> b
    433:433:java.util.Set getThirdaars() -> Z
    439:439:java.util.Set getJdkjars() -> aa
    445:445:java.util.Set getAars() -> ab
    451:451:java.util.Set getJarInAars() -> ac
    490:490:java.util.TreeSet getWebRoots() -> ad
    498:499:void setWebRoots(java.util.TreeSet) -> a
    506:689:void searchAllFile(java.lang.String) -> d
    695:706:java.io.File[] listFiles(java.io.File) -> a
    711:711:boolean filter(cn.com.codesec.util.SourceFile) -> a
    716:717:boolean filter(cn.com.codesec.util.FilePath,boolean) -> a
    721:721:cn.com.codesec.util.SourceFile createSourceFile(java.io.File,cn.com.codesec.parse.meta.FileType) -> a
    724:724:cn.com.codesec.util.SourceFile createSourceFile(java.io.File,java.lang.String,cn.com.codesec.parse.meta.FileType) -> a
    728:734:cn.com.codesec.util.SourceFile createSourceFile(java.io.File,cn.com.codesec.parse.meta.FileType,boolean) -> a
    737:743:cn.com.codesec.util.SourceFile createSourceFile(java.io.File,cn.com.codesec.parse.meta.FileType,java.lang.String,boolean) -> a
    752:774:void getThirdPublicLib(java.io.File,java.util.Set,java.util.Set) -> a
    778:783:boolean isAndroidApp() -> aW
    787:807:void build() -> ae
    810:837:void getValidatedJars(java.util.Set,java.util.List,boolean) -> a
    841:846:void unzipAar(java.util.Set,java.lang.String) -> a
    850:858:void clear() -> af
    861:861:java.lang.String getCheckModelPath() -> ag
    865:866:void setCheckModelPath(java.lang.String) -> e
    869:869:java.lang.String getSafePath() -> ah
    873:874:void setSafePath(java.lang.String) -> f
    883:883:java.lang.String getUrl() -> ai
    887:888:void setUrl(java.lang.String) -> g
    894:895:void setLibPath(java.lang.String[]) -> a
    898:898:java.lang.String[] getLibPath() -> aj
    906:908:java.util.List getExtensionNames(cn.com.codesec.java.common.DefaultExtensionNames,java.util.List) -> a
    912:912:java.lang.String getExtPattern(java.util.List) -> d
    918:923:java.lang.String getJavaExtPattern() -> ak
    929:934:java.lang.String getJspExtPattern() -> al
    940:945:java.lang.String getVMExtPattern() -> am
    952:957:java.lang.String getJarExtPattern() -> an
    963:968:java.lang.String getAarExtPattern() -> ao
    974:979:java.lang.String getHtmlExtPattern() -> ap
    985:990:java.lang.String getConfigExtPattern() -> aq
    996:1001:java.lang.String getSettingsExtPattern() -> ar
    1007:1012:java.lang.String getXmlExtPattern() -> as
    1018:1023:java.lang.String getWsddExtPattern() -> at
    1029:1034:java.lang.String getXmiExtPattern() -> au
    1040:1045:java.lang.String getXsdExtPattern() -> av
    1051:1056:java.lang.String getPropertiesExtPattern() -> aw
    1062:1067:java.lang.String getIniExtPattern() -> ax
    1072:1077:java.lang.String getYamlExtPattern() -> ay
    1083:1088:java.lang.String getSmaliExtPattern() -> az
    1094:1094:java.lang.String getToken() -> aA
    1098:1099:void setToken(java.lang.String) -> h
    1106:1106:java.lang.String[] getConfigFilePaths() -> aB
    1110:1111:void setConfigFilePaths(java.lang.String[]) -> b
    1117:1117:java.lang.String[] getUserRuleFilePaths() -> aC
    1125:1126:void setUserRuleFilePaths(java.lang.String[]) -> c
    1129:1129:java.lang.String getExcludeFile() -> aD
    1133:1134:void setExcludeFile(java.lang.String) -> i
    1137:1137:java.lang.String getExcludedDir() -> aE
    1141:1142:void setExcludedDir(java.lang.String) -> j
    1151:1151:java.lang.String getChangeFilesData() -> aF
    1155:1156:void setChangeFilesData(java.lang.String) -> k
    1161:1183:cn.com.codesec.java.common.filter.FilenameFilterChain getFilenameFilterChain() -> aG
    1189:1194:java.util.Set readChangeFiles(java.lang.String) -> l
    1198:1210:void readChangeFiles(org.w3c.dom.Document,java.util.Set) -> a
    1213:1228:void readChangeFiles(org.w3c.dom.Element,java.util.Set) -> a
    1235:1235:cn.com.codesec.java.common.ScanTimeTimerTask getScanTimeTimerTask() -> aH
    1240:1246:void createScanRuntimeConfig() -> aI
    1250:1259:void clearScanRuntimeConfig() -> aJ
    1268:1268:cn.com.codesec.java.common.EngineMode getEngineMode() -> aK
    1276:1277:void setEngineMode(cn.com.codesec.java.common.EngineMode) -> a
    1282:1282:cn.com.codesec.java.common.CheckMode getCheckMode() -> aL
    1286:1287:void setCheckMode(cn.com.codesec.java.common.CheckMode) -> a
    1292:1292:cn.com.codesec.java.common.EngineEdition getEngineEdition() -> aM
    1296:1297:void setEngineEdition(cn.com.codesec.java.common.EngineEdition) -> a
    1303:1303:java.util.Map getJavaToJspMap() -> aN
    1311:1312:void setJavaToJspMap(java.util.Map) -> b
    1322:1322:boolean isAnalysisEnd() -> aO
    1326:1327:void setAnalysisEnd(boolean) -> e
    1330:1330:boolean isDataFlowResultEnd() -> aP
    1334:1335:void setDataFlowResultEnd(boolean) -> f
    1342:1342:java.lang.String getRelativePath(cn.com.codesec.util.FilePath) -> b
    1348:1349:void setArgs(java.lang.String) -> m
    1352:1352:java.lang.String getArgs() -> aQ
    1358:1365:void setConfigProperties() -> aR
    1368:1368:java.lang.String getConfigProperties() -> aS
    1374:1375:void addEngineError(java.lang.String,java.lang.String) -> a
    1378:1378:java.util.HashMap getAnalysisErrors() -> aT
    1384:1384:java.util.List getMinSdks() -> aU
    1388:1389:void setMinSdks(java.util.List) -> c
    1394:1394:java.util.Map getJavaToVmMap() -> aV
    1398:1399:void setJavaToVmMap(java.util.Map) -> c
cn.com.codesec.java.common.SkyCSharpProject$1 -> cn.com.codesec.L:
    cn.com.codesec.java.common.SkyCSharpProject this$0 -> a
    1:479:void <init>(cn.com.codesec.java.common.SkyCSharpProject) -> <init>
    482:482:int compare(cn.com.codesec.util.FilePath,cn.com.codesec.util.FilePath) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.java.common.SkyException -> cn.com.codesec.M:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> a
    cn.com.codesec.messaging.Message message -> b
    16:18:void <init>(cn.com.codesec.messaging.Message) -> <init>
    20:23:void <init>(cn.com.codesec.messaging.Message,java.lang.Throwable) -> <init>
    27:27:java.lang.Throwable getCause() -> getCause
    32:36:java.lang.String getLocalizedMessage() -> getLocalizedMessage
    41:41:java.lang.String getMessage() -> getMessage
    45:46:void setMessage(cn.com.codesec.messaging.Message) -> a
    50:50:cn.com.codesec.messaging.Message getSkyMessage() -> a
cn.com.codesec.java.common.Sourceanalyzer -> cn.com.codesec.N:
    30:30:void <init>() -> <init>
    33:68:void runSourceanalyzer(java.util.List) -> a
cn.com.codesec.java.common.TestLogMessageReceiver -> cn.com.codesec.O:
    14:14:void <init>() -> <init>
    18:19:void receive(cn.com.codesec.messaging.Message) -> a
    23:24:void receive(cn.com.codesec.java.common.SkyException) -> a
    28:29:void receive(cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
cn.com.codesec.java.common.filter.ExcludeFilenameFilter -> cn.com.codesec.P:
    org.springframework.util.AntPathMatcher antPathMatcher -> a
    java.util.List excludeFileAnts -> b
    java.util.List excludeDirAnts -> c
    18:23:void <init>(java.lang.String,java.lang.String) -> <init>
    27:60:java.util.List getAntPathPatterns(java.lang.String,boolean) -> b
    72:90:boolean filter(java.lang.String,boolean) -> a
cn.com.codesec.java.common.filter.FilenameFilter -> cn.com.codesec.Q:
    boolean filter(java.lang.String,boolean) -> a
cn.com.codesec.java.common.filter.FilenameFilterChain -> cn.com.codesec.R:
    java.util.List filenameFilters -> a
    6:8:void <init>() -> <init>
    11:12:void addFilter(cn.com.codesec.java.common.filter.FilenameFilter) -> a
    16:24:boolean filter(java.lang.String,boolean) -> a
cn.com.codesec.java.common.filter.IncludeFilenameFilter -> cn.com.codesec.S:
    java.util.Set includeFilenames -> a
    11:14:void <init>(java.util.Set) -> <init>
    18:25:boolean filter(java.lang.String,boolean) -> a
cn.com.codesec.java.config.ConfigChecker -> cn.com.codesec.T:
    java.lang.String getRuleID() -> a
    void check(cn.com.codesec.java.config.xml.XmlFile,org.w3c.dom.Element,cn.com.codesec.java.rules.ConfigRule) -> a
cn.com.codesec.java.config.ConfigFileAnalyzer -> cn.com.codesec.U:
    java.util.List rules -> c
    cn.com.codesec.scan.backend.data.ProgramModel programModel -> d
    java.util.Map ruleIdAndConfigCheckerMap -> e
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> f
    40:58:void <init>(cn.com.codesec.java.common.SkyCSharpProject) -> <init>
    63:63:java.lang.String getName() -> a
    69:69:java.lang.String getPoolSize() -> b
    75:75:java.lang.String getDirective() -> c
    85:86:void expireProgramModelData() -> d
    90:101:void run() -> e
    104:128:void analyzeXmlFile(cn.com.codesec.util.SourceFile) -> a
    131:179:void xpathCheck(cn.com.codesec.util.SourceFile,cn.com.codesec.java.config.xml.XmlFile,cn.com.codesec.java.rules.ConfigRule) -> a
    182:196:void matchProperties(cn.com.codesec.util.SourceFile,cn.com.codesec.java.config.property.PropertiesResult,cn.com.codesec.java.rules.ConfigRule) -> a
    199:216:void analyzePropertyFile(cn.com.codesec.util.SourceFile) -> b
    219:220:void exceptionHandler(java.lang.Throwable,cn.com.codesec.util.SKYFile) -> a
    223:232:void doValueCheck(cn.com.codesec.java.config.property.PropertiesResult,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.ConfigRule) -> a
    236:243:java.util.List hasMatch(cn.com.codesec.java.config.property.PropertiesResult,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher) -> a
    248:262:void doMissingKeyCheck(cn.com.codesec.java.config.property.PropertiesResult,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.ConfigRule) -> a
    267:314:void addVuln(org.w3c.dom.Node,cn.com.codesec.java.config.xml.XmlFile,java.lang.String,java.lang.String,cn.com.codesec.java.rules.ConfigRule,cn.com.codesec.util.SourceFile) -> a
cn.com.codesec.java.config.checker.MissingFilterDefinitionChecker -> cn.com.codesec.V:
    29:29:void <init>() -> <init>
    33:33:java.lang.String getRuleID() -> a
    38:93:void check(cn.com.codesec.java.config.xml.XmlFile,org.w3c.dom.Element,cn.com.codesec.java.rules.ConfigRule) -> a
    96:106:boolean precedingContains(cn.com.codesec.java.config.xml.XmlFile,org.w3c.dom.Element,java.util.List) -> a
cn.com.codesec.java.config.checker.MissingServletMappingChecker -> cn.com.codesec.W:
    32:32:void <init>() -> <init>
    36:36:java.lang.String getRuleID() -> a
    41:94:void check(cn.com.codesec.java.config.xml.XmlFile,org.w3c.dom.Element,cn.com.codesec.java.rules.ConfigRule) -> a
cn.com.codesec.java.config.property.PropertiesParser -> cn.com.codesec.X:
    java.util.regex.Pattern pComment -> a
    java.util.regex.Pattern pLeadSpace -> b
    23:24:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    28:79:cn.com.codesec.java.config.property.PropertiesResult parse(cn.com.codesec.util.SourceFile) -> a
    84:91:boolean isContinuation(java.lang.String) -> a
    95:99:java.lang.String trimLeadingSpace(java.lang.String) -> b
    103:157:java.lang.String unescape(java.lang.String) -> c
    161:199:java.lang.String[] splitKeyValue(java.lang.String) -> d
cn.com.codesec.java.config.property.PropertiesResult -> cn.com.codesec.Y:
    cn.com.codesec.util.SourceFile sourceFile -> a
    java.util.List properties -> b
    18:18:cn.com.codesec.util.SourceFile getSourceFile() -> a
    21:25:void <init>(cn.com.codesec.util.SourceFile) -> <init>
    28:30:void addProperty(java.lang.String,java.lang.String,int) -> a
    73:73:java.util.List getPropertyEntries() -> b
    77:90:java.lang.String get(java.lang.String,boolean) -> a
cn.com.codesec.java.config.property.PropertiesResult$PropertyEntry -> cn.com.codesec.Z:
    java.lang.String key -> a
    java.lang.String value -> b
    int line -> c
    35:35:java.lang.String getKey() -> a
    39:40:void setKey(java.lang.String) -> a
    43:43:java.lang.String getValue() -> b
    47:48:void setValue(java.lang.String) -> b
    51:51:int getLine() -> c
    55:56:void setLine(int) -> a
    64:68:void <init>(java.lang.String,java.lang.String,int) -> <init>
    64:64:void <init>(java.lang.String,java.lang.String,int,cn.com.codesec.java.config.property.PropertiesResult$PropertyEntry) -> <init>
    58:58:java.lang.String access$1(cn.com.codesec.java.config.property.PropertiesResult$PropertyEntry) -> a
    60:60:java.lang.String access$2(cn.com.codesec.java.config.property.PropertiesResult$PropertyEntry) -> b
cn.com.codesec.java.config.xml.DOMParserWithLineNumbers -> cn.com.codesec.aa:
    org.apache.xerces.xni.XMLLocator locator -> c
    java.lang.String inputFile -> a
    java.io.Reader xmlReader -> b
    java.util.HashMap lineMap -> d
    java.util.HashMap columnMap -> e
    26:39:void <init>(java.io.Reader,java.lang.String,java.util.HashMap,boolean) -> <init>
    26:46:void <init>(java.lang.String,java.util.HashMap) -> <init>
    26:54:void <init>(java.io.Reader,java.util.HashMap,java.util.HashMap) -> <init>
    58:59:void initialize() -> a
    65:113:void initialize(boolean) -> a
    118:120:void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations) -> startElement
    125:128:void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations) -> startDocument
    132:150:void saveLineNumber() -> b
    154:219:org.w3c.dom.Document getDocument() -> getDocument
cn.com.codesec.java.config.xml.DOMParserWithLineNumbers$1 -> cn.com.codesec.ab:
    cn.com.codesec.java.config.xml.DOMParserWithLineNumbers this$0 -> a
    1:82:void <init>(cn.com.codesec.java.config.xml.DOMParserWithLineNumbers) -> <init>
    86:87:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String) -> resolveEntity
cn.com.codesec.java.config.xml.DOMParserWithLineNumbers$2 -> cn.com.codesec.ac:
    cn.com.codesec.java.config.xml.DOMParserWithLineNumbers this$0 -> a
    1:90:void <init>(cn.com.codesec.java.config.xml.DOMParserWithLineNumbers) -> <init>
    97:97:void error(org.xml.sax.SAXParseException) -> error
    104:104:void fatalError(org.xml.sax.SAXParseException) -> fatalError
    111:111:void warning(org.xml.sax.SAXParseException) -> warning
cn.com.codesec.java.config.xml.XmlDocument -> cn.com.codesec.ad:
    org.w3c.dom.Document document -> a
    java.io.File file -> b
    java.lang.String filePath -> c
    java.util.HashMap lineMap -> d
    16:135:void <init>(java.io.Reader,java.lang.String,boolean,boolean) -> <init>
    16:142:void <init>(java.io.Reader) -> <init>
    147:147:java.util.HashMap getLineMap() -> a
    152:152:org.w3c.dom.Document getDocument() -> b
    157:160:org.w3c.dom.Element getDocumentRoot() -> c
    165:165:java.io.File getFile() -> d
    170:176:java.lang.String getFirstValueByTagName(org.w3c.dom.Element,java.lang.String) -> a
    181:185:org.w3c.dom.Element getFirstElementByTagName(org.w3c.dom.Element,java.lang.String) -> b
cn.com.codesec.java.config.xml.XmlFile -> cn.com.codesec.ae:
    cn.com.codesec.util.SourceFile sourceFile -> a
    org.w3c.dom.Element elem -> b
    java.util.HashMap lineMap -> c
    javax.xml.xpath.XPath xp -> d
    26:26:org.w3c.dom.Element getElem() -> a
    30:30:java.util.HashMap getLineMap() -> b
    38:42:void <init>(cn.com.codesec.util.SourceFile,org.w3c.dom.Element,java.util.HashMap) -> <init>
    45:45:cn.com.codesec.util.SourceFile getSourceFile() -> c
    50:55:org.apache.xpath.objects.XObject evalXPathExpression(java.lang.String) -> a
    60:99:java.lang.Object evalXPath2Expression(java.lang.String) -> b
    103:122:int getLineNumberForXPathMatch(java.lang.String,java.lang.String,java.lang.StringBuilder) -> a
    127:177:int getApproxLineNumber(java.lang.String,java.lang.StringBuilder) -> a
    181:182:int getLineNumberForNode(org.w3c.dom.Node) -> a
cn.com.codesec.java.config.xml.XmlFile$1 -> cn.com.codesec.af:
    cn.com.codesec.java.config.xml.XmlFile this$0 -> a
    org.apache.xml.utils.PrefixResolver val$resolver -> b
    1:65:void <init>(cn.com.codesec.java.config.xml.XmlFile,org.apache.xml.utils.PrefixResolver) -> <init>
    69:69:java.lang.String getNamespaceURI(java.lang.String) -> getNamespaceURI
    74:74:java.util.Iterator getPrefixes(java.lang.String) -> getPrefixes
    79:79:java.lang.String getPrefix(java.lang.String) -> getPrefix
cn.com.codesec.java.config.xml.XmlFileParser -> cn.com.codesec.ag:
    cn.com.codesec.util.SourceFile file -> a
    cn.com.codesec.java.config.xml.XmlDocument xmlDocument -> b
    14:14:cn.com.codesec.java.config.xml.XmlDocument getXmlDocument() -> a
    18:19:void <init>(cn.com.codesec.util.SourceFile) -> <init>
    22:23:void <init>(cn.com.codesec.util.SourceFile,boolean) -> <init>
    25:28:void <init>(cn.com.codesec.util.SourceFile,java.io.Reader,boolean) -> <init>
    31:31:int getCodeLines() -> b
    35:36:cn.com.codesec.java.config.xml.XmlFile parse() -> c
cn.com.codesec.java.content.ContentScanner -> cn.com.codesec.ah:
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> a
    cn.com.codesec.java.rules.InternalRule hiddenFIeldInternalRule -> b
    java.util.regex.Pattern hiddenFIeldPattern -> c
    cn.com.codesec.java.rules.InternalRule crossSIteREquestFOrgeryInternalRule -> d
    java.util.regex.Pattern crossSIteREquestFOrgeryPattern -> e
    cn.com.codesec.java.rules.InternalRule htmlCOmmentINJSPINternalRule -> f
    java.util.regex.Pattern htmlCOmmentINJSpServersideIncludesPattern -> g
    java.util.regex.Pattern htmlCOmmentINIECOnditionalCommentsPattern -> h
    cn.com.codesec.java.rules.InternalRule passwordINCOmmentINJSPINternalRule -> i
    java.util.regex.Pattern passwordPattern -> j
    java.util.regex.Pattern notPasswordPattern -> k
    java.util.regex.Pattern namePasswordPattern -> l
    cn.com.codesec.java.rules.InternalRule suspiciousCOmmentINJSP -> m
    java.util.regex.Pattern suspiciousPattern -> n
    cn.com.codesec.java.rules.InternalRule inputPAsswdTYpeNOtPasswdINJSP -> o
    cn.com.codesec.java.rules.InternalRule unprotectedTRansportCRedentialsINJSP -> p
    cn.com.codesec.java.rules.InternalRule informationEXposureINGETREquest -> q
    cn.com.codesec.java.rules.InternalRule ognlExpressionInjection -> r
    cn.com.codesec.java.rules.InternalRule ognlExpressionInjection2 -> s
    cn.com.codesec.java.rules.InternalRule ognlExpressionInjection3 -> t
    cn.com.codesec.java.rules.InternalRule ognlExpressionInjection4 -> u
    java.util.regex.Pattern sensitivePattern -> v
    163:185:void <clinit>() -> <clinit>
    146:205:void <init>(cn.com.codesec.java.common.SkyCSharpProject) -> <init>
    208:215:void runScanner() -> a
    218:220:int[] getLineAndColumn(net.htmlparser.jericho.Source,net.htmlparser.jericho.Element) -> a
    224:233:int[] getLineAndColumn(net.htmlparser.jericho.Source,int,int) -> a
    237:453:void scanFile(cn.com.codesec.util.SourceFile) -> a
    455:478:java.util.Map parseAttribute(java.lang.String) -> a
    483:518:void isSensitiveFromPage(java.util.List,net.htmlparser.jericho.Source,cn.com.codesec.util.SourceFile) -> a
    520:539:void getExposureInformationGetForm(java.util.List,net.htmlparser.jericho.Source,cn.com.codesec.util.SourceFile) -> b
cn.com.codesec.java.lambda.AbstractLambdaCallStructuralMatch -> cn.com.codesec.ai:
    13:13:void <init>() -> <init>
    cn.com.codesec.java.lambda.AbstractLambdaCallStructuralMatch$CommonIRVisitorAdapter getCommonIRVisitorAdapter() -> a
    36:49:java.util.List matchFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.java.lambda.AbstractLambdaCallStructuralMatch$CommonIRVisitorAdapter -> cn.com.codesec.aj:
    java.util.List expressionsList -> a
    cn.com.codesec.java.lambda.AbstractLambdaCallStructuralMatch this$0 -> b
    15:17:void <init>(cn.com.codesec.java.lambda.AbstractLambdaCallStructuralMatch) -> <init>
    20:20:java.util.List getExpressionsList() -> a
    25:28:void addExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.java.lambda.AbstractLambdaCallsMethodStructuralMatch -> cn.com.codesec.ak:
    13:13:void <init>() -> <init>
    cn.com.codesec.java.lambda.AbstractLambdaCallsMethodStructuralMatch$CommonIRVisitorAdapter getCommonIRVisitorAdapter() -> a
    36:49:java.util.List matchFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.java.lambda.AbstractLambdaCallsMethodStructuralMatch$CommonIRVisitorAdapter -> cn.com.codesec.al:
    java.util.List expressionsList -> a
    cn.com.codesec.java.lambda.AbstractLambdaCallsMethodStructuralMatch this$0 -> b
    15:17:void <init>(cn.com.codesec.java.lambda.AbstractLambdaCallsMethodStructuralMatch) -> <init>
    20:20:java.util.List getExpressionsList() -> a
    25:28:void addExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.java.lambda.LambdaCallStructuralMatch -> cn.com.codesec.am:
    14:14:void <init>() -> <init>
    java.lang.String getRuleID() -> b
    java.util.List matchFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.java.lambda.LambdaCallStructuralRuleManager -> cn.com.codesec.an:
    18:18:void <init>() -> <init>
    22:132:java.util.Map load() -> a
cn.com.codesec.java.lambda.LambdaCallsMethodStructuralMatch -> cn.com.codesec.ao:
    3:3:void <init>() -> <init>
    java.lang.String getMethodSignature() -> c
cn.com.codesec.java.progress.ProgressUtil -> cn.com.codesec.ap:
    double passedStage -> a
    double currentProcess -> b
    cn.com.codesec.java.progress.ProgressUtil$Proportion currentProportion -> c
    boolean isStep -> d
    double currentStepTotalCount -> e
    java.util.concurrent.atomic.AtomicLong currentStepCount -> f
    double passedPrintProcess -> g
    float PRINT_THRESHOLD -> h
    69:160:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    83:93:void start(cn.com.codesec.java.progress.ProgressUtil$Proportion,double) -> a
    96:97:void click() -> a
    100:117:void click(int) -> a
    120:127:void start(cn.com.codesec.java.progress.ProgressUtil$Proportion) -> a
    130:134:void end() -> b
    137:156:void change(double,double) -> a
    164:165:void printProcess() -> c
    170:191:void printProcess(boolean) -> a
cn.com.codesec.java.progress.ProgressUtil$Proportion -> cn.com.codesec.aq:
    cn.com.codesec.java.progress.ProgressUtil$Proportion FIRST -> a
    cn.com.codesec.java.progress.ProgressUtil$Proportion FIFTH -> b
    cn.com.codesec.java.progress.ProgressUtil$Proportion EIGHTH -> c
    cn.com.codesec.java.progress.ProgressUtil$Proportion NINTH -> d
    cn.com.codesec.java.progress.ProgressUtil$Proportion TENTH -> e
    cn.com.codesec.java.progress.ProgressUtil$Proportion THIRTEENTH -> f
    cn.com.codesec.java.progress.ProgressUtil$Proportion FOURTEENTH -> g
    cn.com.codesec.java.progress.ProgressUtil$Proportion FIFTEENTH -> h
    cn.com.codesec.java.progress.ProgressUtil$Proportion SIXTEENTH -> i
    cn.com.codesec.java.progress.ProgressUtil$Proportion ELEVENTH -> j
    cn.com.codesec.java.progress.ProgressUtil$Proportion CONTENT -> k
    cn.com.codesec.java.progress.ProgressUtil$Proportion CONFIG -> l
    cn.com.codesec.java.progress.ProgressUtil$Proportion SEMANTIC -> m
    cn.com.codesec.java.progress.ProgressUtil$Proportion STRUCTURAL -> n
    cn.com.codesec.java.progress.ProgressUtil$Proportion STRUCTURALCOMPLETE -> o
    cn.com.codesec.java.progress.ProgressUtil$Proportion NULLPTR -> p
    cn.com.codesec.java.progress.ProgressUtil$Proportion STATEFUL -> q
    cn.com.codesec.java.progress.ProgressUtil$Proportion ENTRYPOINT -> r
    cn.com.codesec.java.progress.ProgressUtil$Proportion TAINTPROPAGATION -> s
    cn.com.codesec.java.progress.ProgressUtil$Proportion TAINTPROPAGATIONCOMPLETE -> t
    cn.com.codesec.java.progress.ProgressUtil$Proportion RESULT -> u
    double proportionValue -> v
    double passedStage -> w
    cn.com.codesec.java.progress.ProgressUtil$Proportion[] ENUM$VALUES -> x
    19:45:void <clinit>() -> <clinit>
    51:51:double getPassedStage() -> a
    55:55:double getProportionValue() -> b
    58:61:void <init>(java.lang.String,int,double,double) -> <init>
    1:1:cn.com.codesec.java.progress.ProgressUtil$Proportion[] values() -> values
    1:1:cn.com.codesec.java.progress.ProgressUtil$Proportion valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.progress.Sky_Compute -> cn.com.codesec.ar:
    7:7:void <init>() -> <init>
    30:34:double divide(double,double,int,int) -> a
    54:55:double round(double,int) -> a
cn.com.codesec.java.progress.TimeUtil -> cn.com.codesec.as:
    java.util.Map startPartTime -> a
    java.util.Map endPartTime -> b
    java.util.LinkedList linkedList -> c
    21:54:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    62:65:void start(cn.com.codesec.java.progress.TimeUtil$Part) -> a
    69:72:void end() -> a
    76:107:void record() -> b
    110:111:java.lang.String getCurrentTime() -> c
cn.com.codesec.java.progress.TimeUtil$Part -> cn.com.codesec.at:
    cn.com.codesec.java.progress.TimeUtil$Part JSP -> a
    cn.com.codesec.java.progress.TimeUtil$Part RULE -> b
    cn.com.codesec.java.progress.TimeUtil$Part FIRST -> c
    cn.com.codesec.java.progress.TimeUtil$Part FOURTH -> d
    cn.com.codesec.java.progress.TimeUtil$Part FIFTH -> e
    cn.com.codesec.java.progress.TimeUtil$Part SIXTH -> f
    cn.com.codesec.java.progress.TimeUtil$Part SEVENTH -> g
    cn.com.codesec.java.progress.TimeUtil$Part EIGHTH -> h
    cn.com.codesec.java.progress.TimeUtil$Part NINTH -> i
    cn.com.codesec.java.progress.TimeUtil$Part MIDSCRIPT -> j
    cn.com.codesec.java.progress.TimeUtil$Part TENTH -> k
    cn.com.codesec.java.progress.TimeUtil$Part TWELFTH -> l
    cn.com.codesec.java.progress.TimeUtil$Part THIRTEENTH -> m
    cn.com.codesec.java.progress.TimeUtil$Part FOURTEENTH -> n
    cn.com.codesec.java.progress.TimeUtil$Part FIFTEENTH -> o
    cn.com.codesec.java.progress.TimeUtil$Part SIXTEENTH -> p
    cn.com.codesec.java.progress.TimeUtil$Part ELEVENTH -> q
    cn.com.codesec.java.progress.TimeUtil$Part SEVENTEENTH -> r
    cn.com.codesec.java.progress.TimeUtil$Part CONTENT -> s
    cn.com.codesec.java.progress.TimeUtil$Part CONFIG -> t
    cn.com.codesec.java.progress.TimeUtil$Part EIGHTEENTH -> u
    cn.com.codesec.java.progress.TimeUtil$Part NINETEENTH -> v
    cn.com.codesec.java.progress.TimeUtil$Part RESULT -> w
    cn.com.codesec.java.progress.TimeUtil$Part RESULT_FIRST -> x
    cn.com.codesec.java.progress.TimeUtil$Part RESULT_SECOND -> y
    cn.com.codesec.java.progress.TimeUtil$Part[] ENUM$VALUES -> z
    24:49:void <clinit>() -> <clinit>
    24:24:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.progress.TimeUtil$Part[] values() -> values
    1:1:cn.com.codesec.java.progress.TimeUtil$Part valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.results.BugInfo -> cn.com.codesec.au:
    java.lang.String id -> a
    java.lang.String classChin -> b
    java.lang.String subClassChin -> c
    java.lang.String detailClassChin -> d
    float bugServerity -> e
    java.lang.String language -> f
    java.lang.String description -> g
    java.util.List cweIds -> h
    java.util.List owaspTop10s -> i
    java.util.List owaspMobiles -> j
    java.util.List cweSansTop25s -> k
    java.util.List certStandardSpecifications -> l
    java.util.List isoIecTr24772s -> m
    java.util.List misraIds -> n
    java.util.List gbt349462017s -> o
    java.util.List sjt116832017s -> p
    java.util.List pciDsses -> q
    java.lang.String type -> r
    java.lang.String advice -> s
    30:30:java.lang.String getClassChin() -> a
    37:37:java.lang.String getSubClassChin() -> b
    44:44:java.lang.String getDetailClassChin() -> c
    58:58:java.util.List getCweIds() -> d
    62:63:void setCweIds(java.util.List) -> a
    66:66:java.util.List getOwaspTop10s() -> e
    70:71:void setOwaspTop10s(java.util.List) -> b
    74:74:java.util.List getCweSansTop25s() -> f
    78:79:void setCweSansTop25s(java.util.List) -> c
    82:82:java.util.List getIsoIecTr24772s() -> g
    86:87:void setIsoIecTr24772s(java.util.List) -> d
    90:90:java.util.List getMisraIds() -> h
    94:95:void setMisraIds(java.util.List) -> e
    98:98:java.util.List getGbt349462017s() -> i
    102:103:void setGbt349442017s(java.util.List) -> f
    106:106:java.util.List getSjt116832017s() -> j
    110:111:void setSjt116832017s(java.util.List) -> g
    115:115:java.util.List getPciDsses() -> k
    119:120:void setPciDsses(java.util.List) -> h
    123:124:void setOwaspMobiles(java.util.List) -> i
    130:130:java.util.List getOwaspMobiles() -> l
    136:136:java.util.List getCertStandardSpecifications() -> m
    150:150:java.lang.String getType() -> n
    126:158:void <init>(java.lang.String) -> <init>
    126:279:void <init>(org.w3c.dom.Element) -> <init>
    285:285:java.lang.String getAdvice() -> o
    292:292:java.lang.String getDescription() -> p
    296:296:java.lang.String getId() -> q
    300:300:float getBugServerity() -> r
    304:304:java.lang.String getLanguage() -> s
cn.com.codesec.java.results.ResultsConstant -> cn.com.codesec.av:
    java.lang.String TRACEINFOTYPE -> a
    java.lang.String TRACEINFODESCRIPTION -> b
    java.lang.String CONFIDENCE -> c
cn.com.codesec.java.results.ResultsRender -> cn.com.codesec.aw:
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> a
    cn.com.codesec.java.rules.RuleSet ruleSet -> b
    int PER_BATCH_NUMBER -> c
    int PER_LOG_NUMBER -> d
    java.util.List sourceFilelist -> e
    70:1158:void <init>() -> <init>
    99:299:void report() -> a
    301:309:void copyDir(java.lang.String,java.lang.String) -> a
    312:320:void copyFile(java.lang.String,java.lang.String) -> b
    322:342:org.dom4j.io.XMLWriter createResultXML(java.io.OutputStream) -> a
    346:366:org.dom4j.io.XMLWriter createIndexXML(java.io.OutputStream) -> b
    370:387:void createIndexXML(org.dom4j.io.XMLWriter) -> a
    395:411:java.lang.String getLhsFromAssign(java.lang.String) -> a
    416:674:void createResultXML(org.dom4j.io.XMLWriter) -> b
    683:931:java.util.Map renderVulnerabilitys(org.dom4j.io.XMLWriter,java.util.List,java.util.Map) -> a
    937:953:void outBugInstances(int,org.dom4j.io.XMLWriter,java.util.List) -> a
    955:955:boolean isInterestingNode(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node) -> a
    959:981:void renderTraceInfo(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node,org.dom4j.Element,boolean,boolean) -> a
    986:997:void renderStatefulPath(org.dom4j.Element,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,int) -> a
    1002:1031:void renderStatefulPath(org.dom4j.Element,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node) -> a
    1035:1039:void renderTraceInfo(cn.com.codesec.parse.ir.SourceLocation,java.lang.String,org.dom4j.Element) -> a
    1041:1054:void renderTraceInfo(cn.com.codesec.scan.analyzer.vuln.Vulnerability,cn.com.codesec.scan.analyzer.taint.vector.TaintNode,org.dom4j.Element) -> a
    1057:1066:void renderTraceInfo(cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode,org.dom4j.Element) -> a
    1069:1107:void renderTraceInfo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,org.dom4j.Element,boolean,boolean) -> a
    1110:1136:void renderBugDetailsInfo(cn.com.codesec.scan.analyzer.vuln.Vulnerability,org.dom4j.Element) -> a
    1139:1145:void renderSourceLocation(cn.com.codesec.parse.ir.SourceLocation,org.dom4j.Element) -> a
    1166:1166:java.lang.String getTraceInfoType(boolean,boolean,java.lang.String) -> a
cn.com.codesec.java.results.ResultsRender$1 -> cn.com.codesec.ax:
    cn.com.codesec.java.results.ResultsRender this$0 -> a
    1:1044:void <init>(cn.com.codesec.java.results.ResultsRender) -> <init>
    1047:1047:int compare(cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode,cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.java.results.Sky_Excel2Xml_Buginfo -> cn.com.codesec.ay:
    27:27:void <init>() -> <init>
    31:110:org.dom4j.Document getBugInfoByReadExcel(java.io.File) -> a
    119:156:void createDocument(org.dom4j.Element,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    159:184:void writeDocument2Xml(java.io.File,org.dom4j.Document) -> a
cn.com.codesec.java.rules.AbstractLambdaCallRule -> cn.com.codesec.az:
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode mode -> a
    16:22:void <init>(org.w3c.dom.Element) -> <init>
    25:25:boolean isCallsReturns() -> a
    29:29:boolean isCalls() -> b
    33:33:boolean isCallsMap() -> g_
    37:37:boolean isCallsMethod() -> d
cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode -> cn.com.codesec.aA:
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode CALLS -> a
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode CALLSRETURNS -> b
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode CALLSMAP -> c
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode CALLSMETHOD -> d
    cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode[] ENUM$VALUES -> e
    9:10:void <clinit>() -> <clinit>
    9:9:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode[] values() -> values
    1:1:cn.com.codesec.java.rules.AbstractLambdaCallRule$LambdaCallMode valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.AbstractRule -> cn.com.codesec.aB:
    java.lang.String ruleID -> a
    java.lang.String version -> b
    java.lang.String label -> c
    boolean script -> d
    18:18:java.lang.String getVersion() -> e
    25:26:void setVersion(java.lang.String) -> a_
    31:38:void <init>(org.w3c.dom.Element) -> <init>
    40:42:void <init>(java.lang.String) -> <init>
    44:47:void <init>(java.lang.String,java.lang.String) -> <init>
    51:51:java.lang.String getRuleID() -> f
    55:56:void setRuleID(java.lang.String) -> b
    60:60:java.lang.String getLabel() -> g
    65:65:cn.com.codesec.java.rules.Conditional getConditional() -> h
    70:70:boolean isScript() -> i
    74:81:java.lang.String ruleIdForDebug(cn.com.codesec.java.rules.SKYRule) -> a
    85:89:java.lang.String ruleIdForLog(cn.com.codesec.java.rules.SKYRule) -> b
    94:104:int compareTo(cn.com.codesec.java.rules.SKYRule) -> c
    109:109:boolean isDataflowRule() -> j
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.AbstractVulnerabilityRule -> cn.com.codesec.aC:
    java.lang.String description -> a
    java.util.List categoryIds -> b
    java.lang.String ruleSetName -> c
    float defaultGrade -> d
    float effect -> e
    float veracity -> f
    float possibility -> g
    18:18:java.lang.String getDescription() -> a
    24:24:java.util.List getCategoryIds() -> b
    28:29:void setCategoryIds(java.util.List) -> a
    38:38:java.lang.String getRuleSetName() -> f_
    42:43:void setRuleSetName(java.lang.String) -> c
    46:58:int getPriorityValue(float,float) -> a
    65:81:int dynamicGrade(float) -> a
    88:109:void <init>(org.w3c.dom.Element) -> <init>
    113:119:java.lang.String getTextContent(org.w3c.dom.Element,java.lang.String) -> a
    134:139:float getSeverity() -> d
    144:169:void readGrade(org.w3c.dom.Element) -> a
cn.com.codesec.java.rules.AliasMethodRule -> cn.com.codesec.aD:
    cn.com.codesec.scan.model.ParameterLocation inParameterLocation -> c
    cn.com.codesec.scan.model.ParameterLocation outParameterLocation -> d
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    15:15:cn.com.codesec.scan.model.ParameterLocation getInParameterLocation() -> a
    19:19:cn.com.codesec.scan.model.ParameterLocation getOutParameterLocation() -> b
    31:56:void <init>(org.w3c.dom.Element) -> <init>
    60:60:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    65:65:cn.com.codesec.java.rules.Conditional getConditional() -> h
    70:71:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.AliasReturnMethodRule -> cn.com.codesec.aE:
    cn.com.codesec.scan.model.ParameterLocation inParameterLocation -> c
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    13:13:cn.com.codesec.scan.model.ParameterLocation getInParameterLocation() -> a
    23:40:void <init>(org.w3c.dom.Element) -> <init>
    44:44:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    49:49:cn.com.codesec.java.rules.Conditional getConditional() -> h
    54:55:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.CallIdentifier -> cn.com.codesec.aF:
    cn.com.codesec.java.rules.Identifier identifier -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    19:22:void <init>(cn.com.codesec.java.rules.Identifier,cn.com.codesec.java.rules.Conditional) -> <init>
    25:25:cn.com.codesec.java.rules.Identifier getIdentifier() -> a
    29:29:cn.com.codesec.java.rules.Conditional getConditional() -> b
    33:41:boolean equals(java.lang.Object) -> equals
    45:46:int hashCode() -> hashCode
cn.com.codesec.java.rules.CallIdentifierSource -> cn.com.codesec.aG:
    cn.com.codesec.java.rules.CallIdentifier getFunctionCallIdentifier(java.lang.String) -> a
cn.com.codesec.java.rules.ConditionEvaluator -> cn.com.codesec.aH:
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand COMPLETE_TRUE -> a
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand COMPLETE_FALSE -> b
    20:22:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
cn.com.codesec.java.rules.ConditionEvaluator$PEAnd -> cn.com.codesec.aI:
    228:229:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
    233:237:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    242:242:boolean evaluate(java.lang.Object) -> a
    247:247:java.lang.String toString() -> toString
cn.com.codesec.java.rules.ConditionEvaluator$PEComplete -> cn.com.codesec.aJ:
    boolean value -> a
    336:338:void <init>(boolean) -> <init>
    342:342:boolean evaluate(java.lang.Object) -> a
    347:347:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    352:352:java.lang.String toString() -> toString
    357:361:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand and(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    366:370:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand or(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> b
    375:375:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand not() -> a
    380:391:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> c
    395:395:boolean isValue() -> b
    399:400:void setValue(boolean) -> a
cn.com.codesec.java.rules.ConditionEvaluator$PEExp -> cn.com.codesec.aK:
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand a -> a
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand b -> b
    178:181:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
    185:187:void collectCheckedValues(java.util.Collection) -> a
    191:205:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> c
    209:209:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand getA() -> b
    213:214:void setA(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> d
    217:217:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand getB() -> c
    221:222:void setB(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> e
cn.com.codesec.java.rules.ConditionEvaluator$PELabelCheck -> cn.com.codesec.aL:
    java.lang.String toCheck -> a
    408:410:void <init>(java.lang.String) -> <init>
    414:414:boolean evaluate(cn.com.codesec.java.rules.label.LabelSet) -> a
    419:419:cn.com.codesec.util.TriState isSatisfiable(cn.com.codesec.java.rules.label.LabelSet,cn.com.codesec.java.rules.label.LabelSet) -> a
    424:425:void collectCheckedValues(java.util.Collection) -> a
    429:429:java.lang.String toString() -> toString
    434:445:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> c
    1:1:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    1:1:boolean evaluate(java.lang.Object) -> a
cn.com.codesec.java.rules.ConditionEvaluator$PENot -> cn.com.codesec.aM:
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand op -> a
    282:284:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
    288:288:boolean evaluate(java.lang.Object) -> a
    293:293:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    298:299:void collectCheckedValues(java.util.Collection) -> a
    303:303:java.lang.String toString() -> toString
    308:319:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> c
    323:323:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand getOp() -> b
    327:328:void setOp(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> d
cn.com.codesec.java.rules.ConditionEvaluator$PEOperand -> cn.com.codesec.aN:
    cn.com.codesec.java.rules.flags.TaintFlagSet checked -> a
    79:81:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    boolean evaluate(java.lang.Object) -> a
    java.lang.String toString() -> toString
    91:100:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand and(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    104:113:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand or(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> b
    117:123:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand not() -> a
    127:132:boolean checksSpecificFlag() -> d
    136:136:void collectCheckedValues(java.util.Collection) -> a
    140:140:boolean equals(java.lang.Object) -> equals
    145:145:int hashCode() -> hashCode
    150:160:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> c
    164:164:cn.com.codesec.java.rules.flags.TaintFlagSet getChecked() -> e
    168:169:void setChecked(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.ConditionEvaluator$PEOr -> cn.com.codesec.aO:
    254:255:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
    259:259:boolean evaluate(java.lang.Object) -> a
    264:268:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    273:273:java.lang.String toString() -> toString
cn.com.codesec.java.rules.ConditionEvaluator$PartialEvaluation -> cn.com.codesec.aP:
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand partial -> a
    28:33:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
    36:36:boolean isComplete() -> a
    40:40:boolean result() -> b
    44:44:boolean evaluate(java.lang.Object) -> a
    48:48:boolean isSatisfiable(java.lang.Object,java.lang.Object) -> a
    53:53:java.lang.String toString() -> toString
    58:58:boolean equals(java.lang.Object) -> equals
    63:63:int hashCode() -> hashCode
    68:71:int compareTo(cn.com.codesec.java.rules.ConditionEvaluator$PartialEvaluation) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.Conditional -> cn.com.codesec.aQ:
    org.apache.log4j.Logger LOG -> a
    41:41:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    45:51:cn.com.codesec.java.rules.Conditional parser(org.w3c.dom.Element,boolean) -> a
    56:62:java.util.List make(java.util.List,boolean) -> a
    66:110:cn.com.codesec.java.rules.Conditional make(org.w3c.dom.Element,boolean) -> b
    114:115:cn.com.codesec.java.rules.Conditional$CTaintFlagSet parserConditionalTaintFlagSet(org.w3c.dom.Element) -> a
    119:134:cn.com.codesec.java.rules.Conditional$CIsType parserConditionalIsType(org.w3c.dom.Element) -> b
    138:139:cn.com.codesec.java.rules.Conditional$CIsConstant parserConditionalIsConstant(org.w3c.dom.Element) -> c
    143:145:cn.com.codesec.java.rules.Conditional$CConstantEq parserConditionalConstantEq(org.w3c.dom.Element) -> d
    150:153:cn.com.codesec.java.rules.Conditional$CConstantMatches parserConditionalConstantMatches(org.w3c.dom.Element) -> e
    158:171:cn.com.codesec.java.rules.Conditional$CConstantLT parserConditionalConstantLt(org.w3c.dom.Element) -> f
    175:188:cn.com.codesec.java.rules.Conditional$CConstantGT parserConditionalConstantGt(org.w3c.dom.Element) -> g
    193:196:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand evaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    203:203:java.util.List getLeaves() -> a
cn.com.codesec.java.rules.Conditional$CAnd -> cn.com.codesec.aR:
    331:332:void <init>(java.util.List) -> <init>
    336:336:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand join(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    341:341:boolean equals(java.lang.Object) -> equals
    346:346:int hashCode() -> hashCode
cn.com.codesec.java.rules.Conditional$CArg -> cn.com.codesec.aS:
    cn.com.codesec.scan.util.ArgumentSpecifier argDesc -> a
    376:381:void <init>(java.lang.String) -> <init>
    385:389:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    393:397:cn.com.codesec.scan.ir.nodes.IRLocation getArg(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.util.ArgumentSpecifier) -> a
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    404:411:boolean equals(java.lang.Object) -> equals
    416:416:int hashCode() -> hashCode
    421:432:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.Conditional$CConstantEq -> cn.com.codesec.aT:
    java.lang.String value -> b
    471:473:void <init>(java.lang.String,java.lang.String) -> <init>
    477:483:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    488:495:boolean equals(java.lang.Object) -> equals
    500:500:int hashCode() -> hashCode
    470:470:void <init>(java.lang.String,java.lang.String,cn.com.codesec.java.rules.Conditional$CConstantEq) -> <init>
cn.com.codesec.java.rules.Conditional$CConstantGT -> cn.com.codesec.aU:
    726:727:void <init>(java.lang.String,long) -> <init>
    731:731:boolean compare(long) -> a
    736:736:boolean equals(java.lang.Object) -> equals
    741:741:int hashCode() -> hashCode
cn.com.codesec.java.rules.Conditional$CConstantLT -> cn.com.codesec.aV:
    704:705:void <init>(java.lang.String,long) -> <init>
    709:709:boolean compare(long) -> a
    714:714:boolean equals(java.lang.Object) -> equals
    719:719:int hashCode() -> hashCode
cn.com.codesec.java.rules.Conditional$CConstantMatches -> cn.com.codesec.aW:
    java.util.Map PATTERN_CACHE -> b
    java.util.regex.Pattern pattern -> c
    579:580:void <clinit>() -> <clinit>
    511:513:void <init>(java.lang.String,cn.com.codesec.java.rules.bean.RulePattern) -> <init>
    516:522:void setPattern(cn.com.codesec.java.rules.bean.RulePattern) -> a
    525:525:java.util.regex.Pattern getPattern() -> b
    530:545:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    550:557:boolean equals(java.lang.Object) -> equals
    562:562:int hashCode() -> hashCode
    568:575:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
cn.com.codesec.java.rules.Conditional$CIntegerCompare -> cn.com.codesec.aX:
    long ruleValue -> b
    662:664:void <init>(java.lang.String,long) -> <init>
    668:673:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    boolean compare(long) -> a
    680:680:boolean equals(java.lang.Object) -> equals
    685:685:int hashCode() -> hashCode
    691:696:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
cn.com.codesec.java.rules.Conditional$CIsConstant -> cn.com.codesec.aY:
    440:441:void <init>(java.lang.String) -> <init>
    445:452:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    457:457:boolean equals(java.lang.Object) -> equals
    462:462:int hashCode() -> hashCode
    439:439:void <init>(java.lang.String,cn.com.codesec.java.rules.Conditional$CIsConstant) -> <init>
cn.com.codesec.java.rules.Conditional$CIsType -> cn.com.codesec.aZ:
    cn.com.codesec.java.rules.StringMatcher namespaceMatcher -> b
    cn.com.codesec.java.rules.StringMatcher classMatcher -> c
    589:592:void <init>(java.lang.String,cn.com.codesec.java.rules.bean.MatchType,cn.com.codesec.java.rules.bean.MatchType) -> <init>
    597:619:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    624:631:boolean equals(java.lang.Object) -> equals
    636:636:int hashCode() -> hashCode
    642:652:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
    588:588:void <init>(java.lang.String,cn.com.codesec.java.rules.bean.MatchType,cn.com.codesec.java.rules.bean.MatchType,cn.com.codesec.java.rules.Conditional$CIsType) -> <init>
cn.com.codesec.java.rules.Conditional$CNot -> cn.com.codesec.ba:
    cn.com.codesec.java.rules.Conditional child -> a
    210:212:void <init>(cn.com.codesec.java.rules.Conditional) -> <init>
    216:216:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    221:221:java.util.List getLeaves() -> a
    226:233:boolean equals(java.lang.Object) -> equals
    238:238:int hashCode() -> hashCode
    243:254:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.Conditional$COp -> cn.com.codesec.bb:
    java.util.List operands -> a
    263:265:void <init>(java.util.List) -> <init>
    269:279:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand join(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    286:290:java.util.List getLeaves() -> a
    295:302:boolean equals(java.lang.Object) -> equals
    307:307:int hashCode() -> hashCode
    312:323:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.Conditional$COr -> cn.com.codesec.bc:
    353:354:void <init>(java.util.List) -> <init>
    358:358:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand join(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    363:363:boolean equals(java.lang.Object) -> equals
    368:368:int hashCode() -> hashCode
cn.com.codesec.java.rules.Conditional$CTaintFlagSet -> cn.com.codesec.bd:
    cn.com.codesec.java.rules.flags.TaintFlag flag -> a
    749:751:void <init>(java.lang.String) -> <init>
    755:755:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand doEvaluate(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    759:759:java.lang.String getFlagName() -> b
    764:771:boolean equals(java.lang.Object) -> equals
    776:776:int hashCode() -> hashCode
    781:792:int compareTo(cn.com.codesec.java.rules.Conditional) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    749:749:void <init>(java.lang.String,cn.com.codesec.java.rules.Conditional$CTaintFlagSet) -> <init>
cn.com.codesec.java.rules.Conditional$MissingArgumentException -> cn.com.codesec.be:
    797:797:void <init>() -> <init>
    797:797:void <init>(cn.com.codesec.java.rules.Conditional$MissingArgumentException) -> <init>
cn.com.codesec.java.rules.ConfigRule -> cn.com.codesec.bf:
    java.lang.String configFileType -> a
    cn.com.codesec.java.rules.StringMatcher configFile -> b
    cn.com.codesec.java.rules.StringMatcher propertyName -> c
    cn.com.codesec.java.rules.StringMatcher propertyValue -> d
    java.lang.String xPathExpression -> e
    java.lang.String xPathReportAt -> f
    java.lang.String comment -> g
    boolean matchXML -> h
    boolean matchProperty -> i
    int xpathVersion -> j
    boolean notPresent -> k
    20:20:java.lang.String getConfigFileType() -> k
    24:24:cn.com.codesec.java.rules.StringMatcher getConfigFile() -> l
    28:28:cn.com.codesec.java.rules.StringMatcher getPropertyName() -> m
    32:32:cn.com.codesec.java.rules.StringMatcher getPropertyValue() -> n
    36:36:java.lang.String getxPathExpression() -> o
    40:41:void setxPathExpression(java.lang.String) -> d
    44:45:void setConfigFile(cn.com.codesec.java.rules.StringMatcher) -> a
    48:53:void setConfigFileValue(java.lang.String) -> e
    56:56:java.lang.String getxPathReportAt() -> p
    60:60:java.lang.String getComment() -> q
    78:78:boolean hasComment() -> r
    82:82:boolean isMatchXML() -> s
    86:86:boolean isMatchProperty() -> t
    94:153:void <init>(org.w3c.dom.Element) -> <init>
    158:158:int getXpathVersion() -> u
    164:164:boolean isNotPresent() -> v
cn.com.codesec.java.rules.ContainerSubRule -> cn.com.codesec.bg:
    cn.com.codesec.java.rules.SKYRule container -> a
    8:10:void <init>(java.lang.String,cn.com.codesec.java.rules.SKYRule) -> <init>
    13:13:cn.com.codesec.java.rules.SKYRule getContainer() -> a
    18:18:java.lang.String getLabel() -> g
    23:23:java.lang.String getVersion() -> e
cn.com.codesec.java.rules.ControlflowActionPrototype -> cn.com.codesec.bh:
    10:10:void <init>() -> <init>
cn.com.codesec.java.rules.ControlflowAtFunctionRule -> cn.com.codesec.bi:
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    java.util.Map parametersMap -> b
    21:35:void <init>(org.w3c.dom.Element) -> <init>
    38:38:java.util.Map getParametersMap() -> a
    43:43:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    48:49:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.DataflowCleanseRule -> cn.com.codesec.bj:
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> a
    13:22:void <init>(org.w3c.dom.Element) -> <init>
    25:25:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> a
    30:32:void checkRule() -> b
cn.com.codesec.java.rules.DataflowEntryPointRule -> cn.com.codesec.bk:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    12:20:void <init>(org.w3c.dom.Element) -> <init>
    23:23:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
    28:30:void checkRule() -> b
cn.com.codesec.java.rules.DataflowPassthroughRule -> cn.com.codesec.bl:
    cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> h_
    cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
cn.com.codesec.java.rules.DataflowPassthroughRuleImpl -> cn.com.codesec.bm:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> b
    12:28:void <init>(org.w3c.dom.Element) -> <init>
    32:32:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> h_
    37:37:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    42:45:void checkRule() -> b
cn.com.codesec.java.rules.DataflowRule -> cn.com.codesec.bn:
    org.apache.log4j.Logger LOG -> a
    cn.com.codesec.java.rules.Identifier functionIdentifier -> c
    cn.com.codesec.java.rules.flags.TaintFlagSet plusTaintFlags -> d
    cn.com.codesec.java.rules.flags.TaintFlagSet minusTaintFlags -> e
    cn.com.codesec.java.rules.Conditional conditional -> f
    14:14:void <clinit>() -> <clinit>
    19:20:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    27:45:void <init>(org.w3c.dom.Element) -> <init>
    49:49:boolean isDataflowRule() -> j
    54:54:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    59:59:cn.com.codesec.java.rules.Conditional getConditional() -> h
    63:64:void setConditional(cn.com.codesec.java.rules.Conditional) -> a
    68:68:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    73:73:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    78:80:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    83:83:void checkRule() -> b
    87:95:void checkArg(cn.com.codesec.scan.util.ArgumentSpecifier,java.lang.String,boolean) -> a
cn.com.codesec.java.rules.DataflowSinkRule -> cn.com.codesec.bo:
    org.apache.log4j.Logger LOG -> d
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    java.util.List sinks -> b
    java.util.List sourceRules -> c
    13:13:void <clinit>() -> <clinit>
    20:51:void <init>(org.w3c.dom.Element) -> <init>
    55:55:java.util.List getSinks() -> k
    60:60:int getSinkCount() -> l
    65:65:int getSourceCount() -> m
    70:70:java.util.List getSourceRules() -> n
    75:75:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    80:81:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    85:85:boolean isDataflowRule() -> j
    90:90:boolean isVulnerabilityRule() -> o
cn.com.codesec.java.rules.DataflowSinkSourceRule -> cn.com.codesec.bp:
    org.apache.log4j.Logger LOG -> d
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    java.util.List sinks -> b
    java.util.List sourceRules -> c
    13:13:void <clinit>() -> <clinit>
    20:51:void <init>(org.w3c.dom.Element) -> <init>
    55:55:java.util.List getSinks() -> k
    60:60:int getSinkCount() -> l
    65:65:int getSourceCount() -> m
    70:70:java.util.List getSourceRules() -> n
    75:75:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    80:81:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    85:85:boolean isDataflowRule() -> j
    90:90:boolean isVulnerabilityRule() -> o
cn.com.codesec.java.rules.DataflowSourceRule -> cn.com.codesec.bq:
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> a
    13:22:void <init>(org.w3c.dom.Element) -> <init>
    25:25:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> a
    30:32:void checkRule() -> b
cn.com.codesec.java.rules.FunctionRule -> cn.com.codesec.br:
    cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.GetSSLClient -> cn.com.codesec.bs:
    52:52:void <init>() -> <init>
    62:81:javax.net.ssl.SSLContext createIgnoreVerifySSL() -> a
    102:155:byte[][] keyAndiv(java.lang.String,java.lang.String) -> a
    169:175:java.lang.String deptStr(java.lang.String,byte[],byte[]) -> a
    185:207:java.lang.String getServerInfo(java.lang.String,int[],int[],java.lang.String) -> a
    217:221:byte[] generateKey(int[]) -> a
    238:279:java.lang.String sendJsonObj(java.lang.String,java.util.Map,java.lang.String) -> a
    296:341:java.lang.String sendJsonArray(java.lang.String,java.lang.String,java.lang.String) -> a
cn.com.codesec.java.rules.GetSSLClient$1 -> cn.com.codesec.bt:
    cn.com.codesec.java.rules.GetSSLClient this$0 -> a
    1:64:void <init>(cn.com.codesec.java.rules.GetSSLClient) -> <init>
    68:68:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    73:73:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    77:77:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
cn.com.codesec.java.rules.GlobalClassRule -> cn.com.codesec.bu:
    cn.com.codesec.java.rules.GlobalClassRule$ClassMatcher[] matchers -> a
    java.util.Map matchedAncestorCache -> b
    26:26:void <clinit>() -> <clinit>
    29:36:void <init>(org.w3c.dom.Element) -> <init>
    39:39:org.apache.commons.lang3.tuple.Pair matches(cn.com.codesec.java.rules.GlobalClassRule,cn.com.codesec.scan.metadata.TypeMeta) -> a
    43:55:org.apache.commons.lang3.tuple.Pair matchedAncestor(cn.com.codesec.scan.metadata.TypeMeta) -> a
    60:84:void matchedAncestorCache(cn.com.codesec.scan.metadata.TypeMeta,org.apache.commons.lang3.tuple.Pair) -> a
cn.com.codesec.java.rules.GlobalClassRule$ClassMatcher -> cn.com.codesec.bv:
    cn.com.codesec.java.rules.StringMatcher namespaceSM -> a
    cn.com.codesec.java.rules.StringMatcher classNameSM -> b
    boolean matchSubs -> c
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand classLabel -> d
    93:137:void <init>(org.w3c.dom.Element) -> <init>
    141:158:cn.com.codesec.scan.metadata.TypeMeta matchedAncestor(cn.com.codesec.scan.metadata.TypeMeta) -> a
    93:93:void <init>(org.w3c.dom.Element,cn.com.codesec.java.rules.GlobalClassRule$ClassMatcher) -> <init>
cn.com.codesec.java.rules.GlobalFieldRule -> cn.com.codesec.bw:
    cn.com.codesec.java.rules.GlobalFieldRule$FieldMatcher[] matchers -> a
    18:25:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.rules.Conditional getConditional() -> h
    33:38:boolean matches(cn.com.codesec.scan.metadata.FieldMeta) -> a
cn.com.codesec.java.rules.GlobalFieldRule$FieldMatcher -> cn.com.codesec.bx:
    cn.com.codesec.java.rules.MemberMatcher matcher -> a
    boolean matchSupers -> b
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand classLabel -> c
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand fieldLabel -> d
    48:113:void <init>(org.w3c.dom.Element) -> <init>
    116:116:boolean matches(cn.com.codesec.scan.metadata.FieldMeta) -> a
    48:48:void <init>(org.w3c.dom.Element,cn.com.codesec.java.rules.GlobalFieldRule$FieldMatcher) -> <init>
cn.com.codesec.java.rules.Identifier -> cn.com.codesec.by:
    boolean matches(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.rules.IdentifierImpl -> cn.com.codesec.bz:
    cn.com.codesec.java.rules.StringMatcher pkg -> a
    cn.com.codesec.java.rules.StringMatcher cls -> b
    cn.com.codesec.java.rules.StringMatcher name -> c
    cn.com.codesec.java.rules.ConditionEvaluator$PELabelCheck classLabel -> d
    cn.com.codesec.java.rules.ConditionEvaluator$PELabelCheck functionLabel -> e
    cn.com.codesec.java.rules.IdentifierImpl$ParamType[] signature -> f
    cn.com.codesec.java.rules.IdentifierImpl$ParamType returnType -> g
    int sigWildcardMin -> h
    int sigWildCardMax -> i
    boolean sigIsVarArg -> j
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> k
    boolean applyToImplements -> l
    boolean applyToOverrides -> m
    boolean applyToExtends -> n
    java.util.List excepts -> o
    boolean isFromSkyRule -> p
    56:63:boolean equals(java.lang.Object) -> equals
    68:68:int hashCode() -> hashCode
    73:129:int compareTo(cn.com.codesec.java.rules.Identifier) -> a
    133:134:void <init>() -> <init>
    136:154:void <init>(boolean) -> <init>
    157:170:void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean) -> <init>
    174:215:java.lang.String toString() -> toString
    253:254:void setPkg(cn.com.codesec.java.rules.StringMatcher) -> a
    257:258:void setCls(cn.com.codesec.java.rules.StringMatcher) -> b
    261:262:void setName(cn.com.codesec.java.rules.StringMatcher) -> c
    265:266:void setClassLabel(cn.com.codesec.java.rules.ConditionEvaluator$PELabelCheck) -> a
    269:270:void setFunctionLabel(cn.com.codesec.java.rules.ConditionEvaluator$PELabelCheck) -> b
    273:274:void setSignature(cn.com.codesec.java.rules.IdentifierImpl$ParamType[],boolean) -> a
    277:281:void setSignature(cn.com.codesec.java.rules.IdentifierImpl$ParamType[],int,int,boolean) -> a
    284:285:void setReturnType(cn.com.codesec.java.rules.IdentifierImpl$ParamType) -> a
    288:289:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    292:293:void setApplyToImplements(boolean) -> a
    296:297:void setApplyToOverrides(boolean) -> b
    300:301:void setApplyToExtends(boolean) -> c
    304:305:void addExcept(cn.com.codesec.java.rules.Identifier) -> b
    308:308:boolean hasModifiers(cn.com.codesec.parse.ir.IRModifiers) -> a
    313:343:boolean matches(cn.com.codesec.scan.metadata.FunMeta) -> a
    350:356:boolean checkEnclosingTypeAndPackage(cn.com.codesec.scan.metadata.FunMeta) -> b
    360:360:boolean matchClassName(cn.com.codesec.java.rules.StringMatcher,java.lang.String) -> a
    364:368:boolean normalCheckEnclosingTypeAndPackage(cn.com.codesec.scan.metadata.FunMeta) -> c
    372:372:boolean checkPackage(cn.com.codesec.scan.metadata.Namespace) -> a
    376:386:boolean checkEnclosingType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    390:459:boolean checkFun(cn.com.codesec.scan.metadata.FunMeta) -> d
    463:468:boolean checkExcepts(cn.com.codesec.scan.metadata.FunMeta) -> e
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.IdentifierImpl$ParamType -> cn.com.codesec.bA:
    boolean paramMatch(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.meta.Language) -> a
cn.com.codesec.java.rules.IdentifierImpl$ParamType33 -> cn.com.codesec.bB:
    java.lang.String baseType -> a
    int arrayDimensions -> b
    int pointerDepth -> c
    477:503:void <init>(java.lang.String) -> <init>
    507:524:int compareTo(cn.com.codesec.java.rules.IdentifierImpl$ParamType) -> a
    529:537:java.lang.String toString() -> toString
    542:543:boolean paramMatch(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.meta.Language) -> a
    548:555:boolean equals(java.lang.Object) -> equals
    560:560:int hashCode() -> hashCode
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.IdentifierImpl$ParamType34 -> cn.com.codesec.bC:
    java.lang.String baseType -> a
    cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier[] modifiers -> b
    int[] $SWITCH_TABLE$cn$com$codesec$java$rules$IdentifierImpl$ParamType34$Modifier -> c
    569:572:void <init>(java.lang.String,java.util.List) -> <init>
    574:591:void <init>(java.lang.String) -> <init>
    595:609:int compareTo(cn.com.codesec.java.rules.IdentifierImpl$ParamType) -> a
    614:670:boolean paramMatch(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.meta.Language) -> a
    675:675:java.lang.String toString() -> toString
    680:687:boolean equals(java.lang.Object) -> equals
    692:692:int hashCode() -> hashCode
    1:1:int compareTo(java.lang.Object) -> compareTo
    564:564:int[] $SWITCH_TABLE$cn$com$codesec$java$rules$IdentifierImpl$ParamType34$Modifier() -> a
cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier -> cn.com.codesec.bD:
    cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier ARRAY -> a
    cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier REFERENCE -> b
    cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier POINTER -> c
    java.lang.String string -> d
    cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier[] ENUM$VALUES -> e
    695:699:void <clinit>() -> <clinit>
    703:705:void <init>(java.lang.String,int,java.lang.String) -> <init>
    708:708:java.lang.String getString() -> a
    1:1:cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier[] values() -> values
    1:1:cn.com.codesec.java.rules.IdentifierImpl$ParamType34$Modifier valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.IdentifierMux -> cn.com.codesec.bE:
    java.util.List ids -> a
    22:24:void <init>(java.util.List) -> <init>
    28:33:boolean matches(cn.com.codesec.scan.metadata.FunMeta) -> a
    38:49:int compareTo(cn.com.codesec.java.rules.Identifier) -> a
    53:53:java.util.List getIds() -> a
    57:58:void setIds(java.util.List) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.IdentifierSafeFunctionImpl -> cn.com.codesec.bF:
    cn.com.codesec.java.rules.StringMatcher pkg -> a
    cn.com.codesec.java.rules.StringMatcher cls -> b
    cn.com.codesec.java.rules.StringMatcher name -> c
    cn.com.codesec.java.rules.StringMatcher[] signature -> d
    cn.com.codesec.java.rules.StringMatcher returnType -> e
    28:35:boolean equals(java.lang.Object) -> equals
    40:40:int hashCode() -> hashCode
    45:68:int compareTo(cn.com.codesec.java.rules.Identifier) -> a
    71:77:void <init>() -> <init>
    80:90:void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean) -> <init>
    94:126:java.lang.String toString() -> toString
    131:132:void setPkg(cn.com.codesec.java.rules.StringMatcher) -> a
    135:136:void setCls(cn.com.codesec.java.rules.StringMatcher) -> b
    139:140:void setName(cn.com.codesec.java.rules.StringMatcher) -> c
    143:144:void setSignature(cn.com.codesec.java.rules.StringMatcher[]) -> a
    147:148:void setReturnType(cn.com.codesec.java.rules.StringMatcher) -> d
    153:153:boolean matches(cn.com.codesec.scan.metadata.FunMeta) -> a
    157:160:boolean checkPackage(cn.com.codesec.scan.metadata.Namespace) -> a
    164:174:boolean checkEnclosingType(cn.com.codesec.scan.metadata.TypeMeta) -> f
    178:209:boolean checkFun(cn.com.codesec.scan.metadata.FunMeta) -> l
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.InternalRule -> cn.com.codesec.bG:
    java.util.Set REGISTRY -> x
    java.lang.String NULLPTR_J_STORE_DEREF -> a
    java.lang.String NULLPTR_J_CHECK_DEREF -> b
    java.lang.String NULLPTR_J_DEREF_CHECK -> c
    java.lang.String PASSWORD_IN_COMMENT_IN_JSP -> d
    java.lang.String PASSWORD_IN_COMMENT_IN_CS -> e
    java.lang.String CODE_COMPLEX -> f
    java.lang.String PUBLIC_FIELD_ACCESS -> g
    java.lang.String SUSPICIOUS_COMMENT_IN_JSP -> h
    java.lang.String INPUT_PASSWD_TYPE_NOT_PASSWD_IN_JSP -> i
    java.lang.String UNPROTECTED_TRANSPORT_CREDENTIALS_IN_JSP -> j
    java.lang.String INFORMATION_EXPOSURE_IN_GET_REQUEST -> k
    java.lang.String HTML_COMMENT_IN_JSP -> l
    java.lang.String CROSS_SITE_REQUEST_FORGERY -> m
    java.lang.String HIDDEN_FIELD -> n
    java.lang.String TIME_AND_STATE_SESSION_FIXATION -> o
    java.lang.String OGNL_Expression_Injection -> p
    java.lang.String OGNL_Expression_Injection2 -> q
    java.lang.String OGNL_Expression_Injection3 -> r
    java.lang.String OGNL_Expression_Injection4 -> s
    20:74:void <clinit>() -> <clinit>
    77:77:boolean isInternalRuleID(java.lang.String) -> d
    81:82:java.lang.String register(java.lang.String) -> e
    86:91:void <init>(org.w3c.dom.Element) -> <init>
    94:94:cn.com.codesec.java.rules.Identifier getFunctionIdentifier() -> k
cn.com.codesec.java.rules.LabelRule -> cn.com.codesec.bH:
    13:14:void <init>(java.lang.String) -> <init>
    17:18:void <init>(java.lang.String,java.lang.String) -> <init>
cn.com.codesec.java.rules.LambdaCallRule -> cn.com.codesec.bI:
    cn.com.codesec.java.rules.Identifier functionIdentifier -> b
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> c
    cn.com.codesec.scan.util.ArgumentSpecifier sinkArg -> d
    cn.com.codesec.java.rules.LambdaCallRule$ParamType paramType -> e
    java.lang.String methodSignature -> f
    21:52:void <init>(org.w3c.dom.Element) -> <init>
    56:56:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    61:62:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    65:65:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> k
    69:70:void setInArg(cn.com.codesec.scan.util.ArgumentSpecifier) -> a
    73:73:cn.com.codesec.java.rules.LambdaCallRule$ParamType getParamType() -> l
    77:78:void setParamType(cn.com.codesec.java.rules.LambdaCallRule$ParamType) -> a
    81:81:cn.com.codesec.scan.util.ArgumentSpecifier getSinkArg() -> m
    85:86:void setSinkArg(cn.com.codesec.scan.util.ArgumentSpecifier) -> b
    129:129:java.lang.String getMethodSignature() -> n
    133:134:void setMethodSignature(java.lang.String) -> c
cn.com.codesec.java.rules.LambdaCallRule$ParamType -> cn.com.codesec.bJ:
    cn.com.codesec.java.rules.StringMatcher typeStringMatcher -> b
    java.lang.String typeString -> c
    cn.com.codesec.java.rules.LambdaCallRule this$0 -> a
    92:94:void <init>(cn.com.codesec.java.rules.LambdaCallRule,cn.com.codesec.java.rules.StringMatcher) -> <init>
    96:98:void <init>(cn.com.codesec.java.rules.LambdaCallRule,java.lang.String) -> <init>
    101:101:cn.com.codesec.java.rules.StringMatcher getTypeStringMatcher() -> a
    105:105:java.lang.String getTypeString() -> b
    110:110:java.lang.String toString() -> toString
    114:120:boolean paramMatch(cn.com.codesec.scan.metadata.Type) -> a
cn.com.codesec.java.rules.ListRule -> cn.com.codesec.bK:
    org.apache.log4j.Logger LOG -> a
    java.util.List initSubRules -> b
    java.util.List getSubRules -> c
    java.util.List removeSubRules -> d
    java.util.List addSubRules -> e
    java.util.List readSubRules -> f
    27:27:void <clinit>() -> <clinit>
    30:30:java.util.List getInitSubRules() -> a
    34:34:java.util.List getGetSubRules() -> b
    38:38:java.util.List getRemoveSubRules() -> c
    42:42:java.util.List getAddSubRules() -> d
    56:56:java.util.List getReadSubRules() -> k
    45:97:void <init>(org.w3c.dom.Element) -> <init>
    131:132:void invalidArg(java.lang.String,java.lang.String) -> a
    130:130:void access$0(cn.com.codesec.java.rules.ListRule,java.lang.String,java.lang.String) -> a
cn.com.codesec.java.rules.ListRule$AddSubRule -> cn.com.codesec.bL:
    236:237:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule) -> <init>
    241:241:cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    235:235:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$AddSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$GetSubRule -> cn.com.codesec.bM:
    210:211:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule) -> <init>
    215:215:cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    209:209:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$GetSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$InitOpSubRule -> cn.com.codesec.bN:
    197:198:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule) -> <init>
    202:202:cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    196:196:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$InitOpSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$ListOpSubRule -> cn.com.codesec.bO:
    cn.com.codesec.scan.model.ParameterLocation list -> a
    cn.com.codesec.scan.model.ParameterLocation index -> b
    cn.com.codesec.scan.model.ParameterLocation value -> c
    137:137:cn.com.codesec.scan.model.ParameterLocation getList() -> d
    141:141:cn.com.codesec.scan.model.ParameterLocation getIndex() -> k
    145:145:cn.com.codesec.scan.model.ParameterLocation getValue() -> l
    155:176:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.ListRule) -> <init>
    179:188:void validate() -> m
    cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    154:154:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$ListOpSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$ListType -> cn.com.codesec.bP:
    cn.com.codesec.java.rules.ListRule$ListType INIT -> a
    cn.com.codesec.java.rules.ListRule$ListType GET -> b
    cn.com.codesec.java.rules.ListRule$ListType REMOVE -> c
    cn.com.codesec.java.rules.ListRule$ListType ADD -> d
    cn.com.codesec.java.rules.ListRule$ListType READ -> e
    cn.com.codesec.java.rules.ListRule$ListType[] ENUM$VALUES -> f
    18:24:void <clinit>() -> <clinit>
    18:18:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.ListRule$ListType[] values() -> values
    1:1:cn.com.codesec.java.rules.ListRule$ListType valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.ListRule$ReadSubRule -> cn.com.codesec.bQ:
    249:250:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule) -> <init>
    254:254:cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    248:248:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$ReadSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$RemoveSubRule -> cn.com.codesec.bR:
    223:224:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule) -> <init>
    228:228:cn.com.codesec.java.rules.ListRule$ListType getListType() -> b
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    222:222:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$RemoveSubRule) -> <init>
cn.com.codesec.java.rules.ListRule$SubRule -> cn.com.codesec.bS:
    cn.com.codesec.java.rules.Identifier id -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    104:111:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.ListRule) -> <init>
    115:115:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    121:121:cn.com.codesec.java.rules.Conditional getConditional() -> h
    126:127:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    103:103:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.ListRule,cn.com.codesec.java.rules.ListRule$SubRule) -> <init>
cn.com.codesec.java.rules.MapRule -> cn.com.codesec.bT:
    org.apache.log4j.Logger LOG -> a
    java.util.List storeSubRules -> b
    java.util.List retrieveSubRules -> c
    java.util.List passthroughSubRules -> d
    boolean hasKeysFunction -> e
    17:17:void <clinit>() -> <clinit>
    28:28:java.util.List getStoreSubRules() -> a
    32:32:java.util.List getRetrieveSubRules() -> b
    36:36:java.util.List getPassthroughSubRules() -> c
    40:40:boolean isHasKeysFunction() -> d
    19:75:void <init>(org.w3c.dom.Element) -> <init>
    159:160:void invalidArg(java.lang.String,java.lang.String) -> a
    158:158:void access$0(cn.com.codesec.java.rules.MapRule,java.lang.String,java.lang.String) -> a
cn.com.codesec.java.rules.MapRule$MapKeysSubRule -> cn.com.codesec.bU:
    286:293:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule) -> <init>
    1:1:boolean isDataflowRule() -> j
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    285:285:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$MapKeysSubRule) -> <init>
cn.com.codesec.java.rules.MapRule$MapOpSubRule -> cn.com.codesec.bV:
    cn.com.codesec.scan.util.ArgumentSpecifier mapArg -> a
    cn.com.codesec.scan.util.ArgumentSpecifier keyArg -> b
    cn.com.codesec.scan.util.ArgumentSpecifier valueArg -> c
    119:127:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.MapRule) -> <init>
    void validate() -> b
    cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> d
    cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> k
    136:136:cn.com.codesec.scan.util.ArgumentSpecifier getMapArg() -> l
    140:140:cn.com.codesec.scan.util.ArgumentSpecifier getKeyArg() -> m
    144:144:cn.com.codesec.scan.util.ArgumentSpecifier getValueArg() -> n
    148:148:boolean isStore() -> o
    152:152:boolean isRetrieve() -> p
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile makeProfile() -> q
    1:1:boolean isDataflowRule() -> j
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    118:118:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$MapOpSubRule) -> <init>
cn.com.codesec.java.rules.MapRule$MapValuesSubRule -> cn.com.codesec.bW:
    275:281:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule) -> <init>
    1:1:boolean isDataflowRule() -> j
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
    274:274:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$MapValuesSubRule) -> <init>
cn.com.codesec.java.rules.MapRule$PassthroughSubRule -> cn.com.codesec.bX:
    cn.com.codesec.scan.util.ArgumentSpecifier in -> a
    cn.com.codesec.scan.util.ArgumentSpecifier out -> b
    cn.com.codesec.scan.util.ArgumentSpecifier origIn -> c
    245:245:cn.com.codesec.scan.util.ArgumentSpecifier getOrigInArg() -> b
    250:250:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> h_
    255:255:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    260:260:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    265:265:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    269:270:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.MapRule) -> <init>
    1:1:boolean isDataflowRule() -> j
    1:1:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    1:1:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    1:1:cn.com.codesec.java.rules.Conditional getConditional() -> h
cn.com.codesec.java.rules.MapRule$RetrieveSubRule -> cn.com.codesec.bY:
    204:205:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule) -> <init>
    209:215:void validate() -> b
    219:219:boolean isRetrieve() -> p
    224:224:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile makeProfile() -> q
    229:229:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> d
    234:234:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> k
    203:203:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$RetrieveSubRule) -> <init>
cn.com.codesec.java.rules.MapRule$StoreSubRule -> cn.com.codesec.bZ:
    164:165:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule) -> <init>
    169:178:void validate() -> b
    182:182:boolean isStore() -> o
    187:187:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile makeProfile() -> q
    192:192:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> d
    197:197:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> k
    163:163:void <init>(org.w3c.dom.Element,int,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$StoreSubRule) -> <init>
cn.com.codesec.java.rules.MapRule$SubRule -> cn.com.codesec.ca:
    cn.com.codesec.java.rules.Identifier id -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    82:89:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.MapRule) -> <init>
    93:93:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    98:98:boolean isDataflowRule() -> j
    104:104:cn.com.codesec.java.rules.Conditional getConditional() -> h
    109:110:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    81:81:void <init>(org.w3c.dom.Element,java.lang.String,cn.com.codesec.java.rules.MapRule,cn.com.codesec.java.rules.MapRule$SubRule) -> <init>
cn.com.codesec.java.rules.MemberMatcher -> cn.com.codesec.cb:
    cn.com.codesec.java.rules.StringMatcher namespace -> a
    cn.com.codesec.java.rules.StringMatcher enclosingClass -> b
    cn.com.codesec.java.rules.StringMatcher name -> c
    16:23:void <init>(cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher) -> <init>
    27:27:java.lang.String toString() -> toString
    31:31:boolean matches(cn.com.codesec.scan.meta.Symbol) -> a
    35:52:boolean matches(cn.com.codesec.scan.meta.Symbol,boolean) -> a
    56:59:boolean classMatch(cn.com.codesec.java.rules.StringMatcher,java.lang.String) -> a
cn.com.codesec.java.rules.NamespaceMatcher -> cn.com.codesec.cc:
    5:5:void <init>() -> <init>
    8:8:boolean matches(cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.scan.metadata.Namespace) -> a
    12:15:boolean checkMatch(cn.com.codesec.java.rules.StringMatcher,java.lang.String) -> a
cn.com.codesec.java.rules.NonReturningMethodRule -> cn.com.codesec.cd:
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    10:12:void <init>(org.w3c.dom.Element) -> <init>
    16:16:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    21:22:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.NullPtrCmpRule -> cn.com.codesec.ce:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    boolean trueWhenNull -> b
    12:30:void <init>(org.w3c.dom.Element) -> <init>
    33:33:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
    38:40:void checkRule() -> b
    43:43:boolean isTrueWhenNull() -> d
cn.com.codesec.java.rules.NullPtrFetchRule -> cn.com.codesec.cf:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> b
    13:29:void <init>(org.w3c.dom.Element) -> <init>
    32:32:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
    36:36:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    41:44:void checkRule() -> b
cn.com.codesec.java.rules.NullPtrPassthroughRule -> cn.com.codesec.cg:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> b
    13:29:void <init>(org.w3c.dom.Element) -> <init>
    32:32:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
    36:36:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    41:44:void checkRule() -> b
cn.com.codesec.java.rules.NullPtrRule -> cn.com.codesec.ch:
    org.apache.log4j.Logger LOG -> a
    cn.com.codesec.java.rules.Identifier functionIdentifier -> c
    10:10:void <clinit>() -> <clinit>
    15:16:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    19:27:void <init>(org.w3c.dom.Element) -> <init>
    31:31:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    35:35:void checkRule() -> b
    39:47:void checkArg(cn.com.codesec.scan.util.ArgumentSpecifier,java.lang.String,boolean) -> a
cn.com.codesec.java.rules.NullPtrSinkRule -> cn.com.codesec.ci:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    11:20:void <init>(org.w3c.dom.Element) -> <init>
    24:26:void checkRule() -> b
    29:29:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
cn.com.codesec.java.rules.NullPtrSourceRule -> cn.com.codesec.cj:
    8:9:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.NullPtrStoreRule -> cn.com.codesec.ck:
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> b
    13:29:void <init>(org.w3c.dom.Element) -> <init>
    32:32:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> a
    36:36:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    41:44:void checkRule() -> b
cn.com.codesec.java.rules.ObsoleteRule -> cn.com.codesec.cl:
    18:19:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.ParamTypeUtil -> cn.com.codesec.cm:
    3:3:void <init>() -> <init>
    7:7:cn.com.codesec.java.rules.IdentifierImpl$ParamType33 paramType(java.lang.String) -> a
cn.com.codesec.java.rules.ReportableElement -> cn.com.codesec.cn:
    boolean isReportable() -> a
    java.lang.String reportAs() -> b
cn.com.codesec.java.rules.ResultFilterRule -> cn.com.codesec.co:
    java.util.List checks -> a
    java.lang.String ruleID -> b
    15:19:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    21:25:void <init>(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    28:28:java.util.List getChecks() -> a
    120:120:boolean isScript() -> i
    125:125:java.lang.String getRuleID() -> f
    131:131:java.lang.String getLabel() -> g
    137:137:cn.com.codesec.java.rules.Conditional getConditional() -> h
    143:143:java.lang.String getVersion() -> e
    149:149:int compareTo(cn.com.codesec.java.rules.SKYRule) -> a
    155:155:boolean isDataflowRule() -> j
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.ResultFilterRule$Check -> cn.com.codesec.cp:
    java.lang.String domAnalyzer -> a
    java.lang.String subAnalyzer -> b
    cn.com.codesec.java.rules.ResultFilterRule$FieldCheck ruleSetNameCheck -> c
    cn.com.codesec.java.rules.ResultFilterRule$FieldCheck ruleIDCheck -> d
    38:42:void <init>(java.lang.String,java.lang.String) -> <init>
    43:51:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> <init>
    55:55:java.lang.String getDomAnalyzer() -> a
    59:59:java.lang.String getSubAnalyzer() -> b
    63:63:cn.com.codesec.java.rules.ResultFilterRule$FieldCheck getRuleSetNameCheck() -> c
    67:67:cn.com.codesec.java.rules.ResultFilterRule$FieldCheck getRuleIDCheck() -> d
    38:38:void <init>(java.lang.String,java.lang.String,cn.com.codesec.java.rules.ResultFilterRule$Check) -> <init>
cn.com.codesec.java.rules.ResultFilterRule$FieldCheck -> cn.com.codesec.cq:
    boolean isSameValue -> a
    cn.com.codesec.java.rules.StringMatcher domMatcher -> b
    cn.com.codesec.java.rules.StringMatcher subMatcher -> c
    77:81:void <init>() -> <init>
    84:95:cn.com.codesec.java.rules.bean.MatchType createMatchType(java.lang.String,java.lang.String) -> a
    98:102:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    105:105:boolean isSameValue() -> a
    109:109:cn.com.codesec.java.rules.StringMatcher getDomMatcher() -> b
    113:113:cn.com.codesec.java.rules.StringMatcher getSubMatcher() -> c
cn.com.codesec.java.rules.RuleConstants -> cn.com.codesec.cr:
    java.lang.String SKY_NON_EXISTANT -> a
    java.lang.String CATEGORY_BUFFER_OVERFLOW -> b
    java.lang.String CATEGORY_NULL_DEREF -> c
    cn.com.codesec.java.rules.flags.TaintFlag TAINT_FLAG_NOT_NULL_TERMINATED -> d
    cn.com.codesec.java.rules.flags.TaintFlag TAINT_FLAG_NOT_NULL_TERM_TRUNCATE -> e
    cn.com.codesec.java.rules.flags.TaintFlag TAINT_FLAG_NULL_TERMINATED -> f
    cn.com.codesec.java.rules.flags.TaintFlag NUMERIC_TAINT_FLAG -> g
    cn.com.codesec.java.rules.flags.TaintFlag XSS_TAINT_FLAG -> h
    cn.com.codesec.java.rules.flags.TaintFlag COMPARISON_FLAG -> i
    cn.com.codesec.java.rules.flags.TaintFlag LOOP_BOUND_FLAG -> j
    10:16:void <clinit>() -> <clinit>
cn.com.codesec.java.rules.RuleReader -> cn.com.codesec.cs:
    org.apache.log4j.Logger LOG -> a
    cn.com.codesec.java.rules.RuleSet ruleSet -> b
    java.util.Map declaredFlags -> c
    51:51:void <clinit>() -> <clinit>
    55:58:void <init>(cn.com.codesec.java.rules.RuleSet,java.util.Map) -> <init>
    62:142:void addRule(cn.com.codesec.java.rules.SKYRule) -> a
    148:164:void loadCheckModel() -> a
    167:180:void readCheckModel(org.w3c.dom.Document) -> b
    185:195:void loadConfig(java.lang.String) -> a
    198:216:void readDisableTags() -> b
    218:241:void readConfig(org.w3c.dom.Document) -> c
    246:258:void loadSafeFunction() -> c
    261:336:void readSafeFunction(org.w3c.dom.Document) -> d
    339:348:void readRule(java.lang.String) -> b
    351:374:void readIntentActions(org.w3c.dom.Element,java.util.Map) -> a
    377:400:void readContentProviders(org.w3c.dom.Element,java.util.Map) -> b
    403:430:void readContentUris(org.w3c.dom.Element,java.util.Map) -> c
    433:449:void readSimpleMap(org.w3c.dom.Element,java.util.Map) -> d
    452:457:void readSimpleList(org.w3c.dom.Element,java.util.List) -> a
    461:463:void readData(java.lang.String,org.w3c.dom.Element,java.util.Map) -> a
    467:478:java.lang.Object readListOrMap(org.w3c.dom.Element) -> g
    482:488:java.util.List readList(org.w3c.dom.Element) -> h
    493:509:java.util.Map readMap(org.w3c.dom.Element) -> i
    514:526:java.lang.Object readCollectionOrString(org.w3c.dom.Element) -> j
    531:760:void readRule(org.w3c.dom.Document) -> a
    763:768:org.w3c.dom.Document getDocument(java.lang.String,boolean) -> a
    772:795:org.w3c.dom.Document getDocument(java.lang.String,java.io.InputStream,boolean) -> a
    799:807:cn.com.codesec.java.rules.Rules$FlagType getFlagType(java.lang.String) -> f
    812:832:void parserFunctionIdentifier(cn.com.codesec.java.rules.FunctionRule,org.w3c.dom.Element) -> a
    835:837:cn.com.codesec.java.rules.Identifier parserFunctionIdentifier(org.w3c.dom.Element) -> a
    841:895:void parserFunctionIdentifier(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> g
    898:913:void parseApplyToElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> a
    916:920:void parseReturnTypeElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> b
    923:927:void parseClassLabelElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> c
    930:934:void parseFunctionLabelElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> d
    937:974:void parseParametersElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> e
    977:989:java.lang.String getAttributeFromElement(org.w3c.dom.Element,java.lang.String) -> a
    993:1000:void parseModifiersElement(org.w3c.dom.Element,cn.com.codesec.java.rules.IdentifierImpl) -> f
    1003:1019:cn.com.codesec.parse.ir.IRModifiers convertModifier(java.lang.String) -> c
    1024:1032:cn.com.codesec.java.rules.bean.MatchType createMatchType(java.lang.String,boolean) -> b
    1036:1044:cn.com.codesec.java.rules.bean.RulePattern createRulePattern(java.lang.String) -> d
    1048:1052:cn.com.codesec.java.rules.bean.RuleValue createRuleValue(java.lang.String) -> e
    1056:1078:cn.com.codesec.java.rules.bean.MatchType createMatchTypeFromElement(org.w3c.dom.Element) -> b
    1082:1094:cn.com.codesec.java.rules.bean.RuleValue createRuleValueFromElement(org.w3c.dom.Element) -> c
    1098:1122:cn.com.codesec.java.rules.bean.RulePattern createRulePatternFromElement(org.w3c.dom.Element) -> d
    1132:1132:java.lang.String getTextContentFromElement(org.w3c.dom.Element) -> e
    1136:1145:java.util.List getChildElementsByTagName(org.w3c.dom.Element,java.lang.String) -> b
    1149:1158:java.util.List getChildElements(org.w3c.dom.Element) -> f
    1169:1181:org.w3c.dom.Element getChildElementByTagName(org.w3c.dom.Element,java.lang.String) -> c
    1187:1192:java.lang.String getChildTextByTagName(org.w3c.dom.Element,java.lang.String) -> d
cn.com.codesec.java.rules.RuleSet -> cn.com.codesec.ct:
    java.util.Map ruleSetNameAndSafeFunctionIdentifierListMap -> b
    java.util.List safeFunctionIdentifiers -> c
    long serialVersionUID -> serialVersionUID
    java.util.Map dataMap -> d
    java.util.Map androidMapApf -> e
    java.util.Map internalRules -> f
    java.util.SortedMap functionRules -> g
    java.util.List structuralRules -> h
    java.util.List stringMatchRules -> i
    java.util.List mapRules -> j
    java.util.List listRules -> k
    java.util.List globalFieldRules -> l
    java.util.List globalClassRules -> m
    java.util.Map rulesById -> a
    java.util.List coverage -> n
    java.util.List checkCategoryIds -> o
    boolean checkModel -> p
    java.util.Map controlflowActionPrototypes -> q
    java.util.List statefulRules -> r
    java.util.List configRules -> s
    java.util.List entrypointStructuralRules -> t
    java.util.List transferStructuralRules -> u
    java.util.List transferFunctionStructuralRules -> v
    java.util.List cleanseStructuralRules -> w
    java.util.List cleanseFunctionRules -> x
    java.util.List sourceStructuralRules -> y
    java.util.List sourceFunctionStructuralRules -> z
    java.util.List writeStructuralRules -> A
    java.util.List sinkStructuralRules -> B
    java.util.List sinkFunctionStructuralRules -> C
    java.util.List lambdaCallStructuralRules -> D
    java.util.concurrent.ConcurrentMap funRuleCache -> E
    java.util.concurrent.ConcurrentMap funRuleCacheByType -> F
    java.util.concurrent.ConcurrentMap funRuleCacheNonReturning -> G
    java.util.Map idAndbugInfosMap -> H
    java.util.List ruleSetPartList -> I
    java.util.Map ruleSetNameAndCategoryIdsMap -> J
    java.util.Map ruleSetCategoryIdAndNameMap -> K
    69:156:void buildRuleSetMap() -> a
    160:175:void storeNameAndCategoryIds(java.lang.String,java.util.List) -> a
    180:180:java.util.Map getRuleSetNameAndSafeFunctionIdentifierListMap() -> b
    185:206:void buildRuleSetNameAndSafeFunctionIdentifierListMap() -> c
    211:212:void addSafeFunctionIdentifier(java.lang.String,cn.com.codesec.java.rules.Identifier) -> a
    220:220:java.util.List getJslList() -> d
    226:226:java.util.Map getDataMap() -> e
    232:232:java.util.List getAndroidPrivilegePerms() -> f
    237:237:java.util.List getAndroidStandardReceiverActions() -> g
    242:242:java.util.List getAndroidStandardActivityActions() -> h
    247:247:java.util.List getAndroidProtectedActions() -> i
    252:252:java.util.Map getAndroidOptionalPermissionsMap() -> j
    256:256:java.util.Map getAndroidMapOrSimple() -> k
    260:260:java.util.List getAndroidCallbacks() -> l
    266:266:java.util.Map getAndroidMapApf() -> m
    270:271:void setAndroidMapApf(java.util.Map) -> a
    274:274:java.util.Map getAndroidMapApfOrs() -> n
    278:278:java.util.Map getAndroidMapOrOver() -> o
    285:285:java.util.List getContentProviderWrite() -> p
    292:292:java.util.List getContentProviderRead() -> q
    299:299:java.util.List getContentUriWrite() -> r
    306:306:java.util.List getContentUriRead() -> s
    313:313:java.util.List getIntentsendingactivitys() -> t
    320:320:java.util.List getIntentsendingservices() -> u
    327:327:java.util.List getIntentsendingbroadcasts() -> v
    334:334:java.util.List getIntentreceivingactions() -> w
    340:340:cn.com.codesec.java.rules.InternalRule getInternalRule(java.lang.String) -> a
    347:347:java.util.SortedMap getFunctionRules() -> x
    370:370:java.util.Map getIdAndrRuleMap() -> y
    387:387:boolean isCheckModel() -> z
    391:391:java.util.List getCheckCategoryIds() -> A
    395:396:void setCheckModel(boolean) -> a
    420:420:java.util.Map getControlflowActionPrototypes() -> B
    425:426:void setControlflowActionPrototypes(java.util.Map) -> b
    434:434:java.util.List getAllStatefulRules() -> C
    441:441:java.util.List getAllConfigRules() -> D
    177:930:void <init>() -> <init>
    476:478:void notifyFunctionChange(cn.com.codesec.scan.metadata.FunMeta) -> a
    481:483:void clearAllCaches() -> E
    487:490:void eventFired(cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event) -> a
    494:494:int getRuleCount() -> F
    501:501:java.util.List getEntrypointStructuralRules() -> G
    508:508:java.util.List getTransferStructuralRules() -> H
    515:515:java.util.List getTransferFunctionStructuralRules() -> I
    522:522:java.util.List getCleanseStructuralRules() -> J
    529:529:java.util.List getCleanseFunctionRules() -> K
    536:536:java.util.List getSourceStructuralRules() -> L
    543:543:java.util.List getSourceFunctionStructuralRules() -> M
    550:550:java.util.List getWriteStructuralRules() -> N
    557:557:java.util.List getSinkStructuralRules() -> O
    564:564:java.util.List getSinkFunctionStructuralRules() -> P
    568:568:java.util.List getLambdaCallStructuralRules() -> Q
    586:638:void addRule(cn.com.codesec.java.rules.SKYRule) -> a
    641:642:void addCoverageIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    645:646:void addCoverageIdentifiers(java.util.Collection) -> a
    648:648:java.util.List getAllStringMatchRules() -> R
    653:656:java.util.List getDataflowRulesForFunction(cn.com.codesec.scan.metadata.FunMeta) -> b
    660:660:java.util.List getAllStructuralRules() -> S
    663:673:java.util.List getSemanticRulesForFunction(cn.com.codesec.scan.metadata.FunMeta) -> c
    679:679:cn.com.codesec.java.rules.SKYRule getRuleById(java.lang.String) -> b
    683:683:java.util.List getAllMapRules() -> T
    687:687:java.util.List getAllListRules() -> U
    691:691:java.util.List getAllGlobalFieldRules() -> V
    695:695:java.util.List getAllGlobalClassRules() -> W
    702:710:java.util.List getRulesForFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Class) -> a
    714:718:java.util.List convert(java.util.List,java.util.function.Function) -> a
    724:724:java.util.List getRulesForFunction(cn.com.codesec.scan.metadata.FunMeta,java.lang.Class) -> a
    730:730:java.util.List getRulesForFunction(cn.com.codesec.scan.metadata.FunMeta) -> d
    734:734:java.util.List getNonreturningRulesForFunction(cn.com.codesec.scan.metadata.FunMeta,java.lang.Class) -> b
    744:786:java.util.List funCacheRead(cn.com.codesec.scan.metadata.FunMeta,boolean,java.lang.Class) -> a
    791:801:void funCacheStore(cn.com.codesec.scan.metadata.FunMeta,boolean,java.lang.Class,java.util.List) -> a
    804:814:java.util.List filtered(java.util.List,java.lang.Class) -> a
    818:857:void getRulesForFunction(cn.com.codesec.scan.metadata.FunMeta,java.util.Set,cn.com.codesec.scan.util.collections.IdentityHashSet,boolean,java.lang.Class) -> a
    862:876:java.util.List getRulesForFunction(cn.com.codesec.scan.metadata.FunMeta,boolean,java.lang.Class) -> b
    881:886:boolean isCovered(cn.com.codesec.scan.metadata.FunMeta) -> e
    893:903:java.util.List getNullPointerRulesForFunction(cn.com.codesec.scan.metadata.FunMeta) -> f
    913:913:java.util.Map getIdAndbugInfosMap() -> X
    919:919:java.util.List getRuleSetPartList() -> Y
    926:926:java.util.Map getRuleSetNameAndCategoryIdsMap() -> Z
    933:933:java.util.Map getRuleSetCategoryIdAndNameMap() -> aa
    938:950:cn.com.codesec.java.results.BugInfo getBugInfoByRuleSetName(java.lang.String) -> c
    955:960:cn.com.codesec.java.results.BugInfo getBugInfoByCategoryId(java.lang.String) -> d
    798:798:java.util.concurrent.ConcurrentMap lambda$2(cn.com.codesec.scan.metadata.FunMeta) -> g
cn.com.codesec.java.rules.RuleSet$SKYRuleComparator -> cn.com.codesec.cu:
    55:55:void <init>() -> <init>
    61:62:int compare(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.SKYRule) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
    55:55:void <init>(cn.com.codesec.java.rules.RuleSet$SKYRuleComparator) -> <init>
cn.com.codesec.java.rules.RuleSetPart -> cn.com.codesec.cv:
    java.lang.String name -> a
    java.util.Map modeAndCategoryIdMap -> b
    19:19:java.lang.String getName() -> a
    23:23:java.util.Map getModeAndCategoryIdMap() -> b
    30:71:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.RuleUtils -> cn.com.codesec.cw:
    org.apache.log4j.Logger LOG -> a
    16:16:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    20:21:cn.com.codesec.java.rules.StringMatcher createStringMatcher(java.lang.String,boolean) -> a
    29:30:cn.com.codesec.java.rules.StringMatcher createClassStringMatcher(java.lang.String,boolean) -> b
    34:34:cn.com.codesec.java.rules.StringMatcher convertMatchType(cn.com.codesec.java.rules.bean.MatchType) -> a
    41:59:cn.com.codesec.java.rules.StringMatcher convertClassMatchType(cn.com.codesec.java.rules.bean.MatchType) -> b
    64:72:cn.com.codesec.java.rules.StringMatcher convertMatchType(cn.com.codesec.java.rules.bean.MatchType,boolean) -> a
    76:76:java.util.regex.Pattern convertPattern(cn.com.codesec.java.rules.bean.RulePattern) -> a
    81:83:java.util.regex.Pattern convertPattern(cn.com.codesec.java.rules.bean.RulePattern,boolean) -> a
    88:99:java.util.regex.Pattern convertPattern(java.lang.String,boolean,boolean) -> a
    104:104:boolean checkLabels(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    108:108:boolean summarizeOnly(cn.com.codesec.java.rules.SKYRule) -> a
cn.com.codesec.java.rules.Rules -> cn.com.codesec.cx:
    org.apache.log4j.Logger LOG -> b
    boolean rulesLoaded -> c
    boolean loadScanHtmlRules -> d
    cn.com.codesec.java.rules.RuleSet ruleSet -> e
    java.util.Map declaredFlags -> f
    java.lang.String BUILTIN_RULE_VERSION -> a
    java.util.Set dynamicDataSets -> g
    29:571:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    37:52:int versrionCompare(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.SKYRule) -> a
    57:77:int versrionCompare(java.lang.String,java.lang.String) -> a
    92:171:void loadRules() -> a
    175:193:void readRule(java.lang.String,cn.com.codesec.java.rules.RuleReader) -> a
    197:211:void readconfig(java.lang.String,cn.com.codesec.java.rules.RuleReader) -> b
    218:569:void clearRule() -> b
    577:577:java.util.Set getDynamicDataSets() -> c
    585:586:void setDynamicDataSets(java.util.Set) -> a
    590:594:void collectDynamicDataStructural(cn.com.codesec.java.structural.StructuralCommon) -> a
    597:601:cn.com.codesec.java.rules.Rules$FlagType getFlagType(java.lang.String) -> a
    605:605:cn.com.codesec.java.rules.RuleSet getRuleSet() -> d
    609:609:cn.com.codesec.java.rules.SKYRule getRuleById(java.lang.String) -> b
cn.com.codesec.java.rules.Rules$FlagType -> cn.com.codesec.cy:
    cn.com.codesec.java.rules.Rules$FlagType GENERAL -> a
    cn.com.codesec.java.rules.Rules$FlagType NEUTRAL -> b
    cn.com.codesec.java.rules.Rules$FlagType SPECIFIC -> c
    cn.com.codesec.java.rules.Rules$FlagType[] ENUM$VALUES -> d
    80:81:void <clinit>() -> <clinit>
    80:80:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.Rules$FlagType[] values() -> values
    1:1:cn.com.codesec.java.rules.Rules$FlagType valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.SKYRule -> cn.com.codesec.cz:
    boolean isScript() -> i
    java.lang.String getRuleID() -> f
    java.lang.String getVersion() -> e
    java.lang.String getLabel() -> g
    cn.com.codesec.java.rules.Conditional getConditional() -> h
    boolean isDataflowRule() -> j
cn.com.codesec.java.rules.SemanticRule -> cn.com.codesec.cA:
    org.apache.log4j.Logger LOG -> h
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    cn.com.codesec.scan.util.ArgumentSpecifier controlArg -> c
    cn.com.codesec.scan.util.ArgumentSpecifier destinationArg -> d
    cn.com.codesec.scan.util.ArgumentSpecifier executionPathArg -> e
    cn.com.codesec.scan.util.ArgumentSpecifier formatArg -> f
    cn.com.codesec.scan.util.ArgumentSpecifier sourceArg -> g
    cn.com.codesec.java.rules.TypeType typeType -> i
    12:12:void <clinit>() -> <clinit>
    23:23:cn.com.codesec.scan.util.ArgumentSpecifier getControlArg() -> k
    27:27:cn.com.codesec.scan.util.ArgumentSpecifier getDestinationArg() -> l
    31:31:cn.com.codesec.scan.util.ArgumentSpecifier getExecutionPathArg() -> m
    35:35:cn.com.codesec.scan.util.ArgumentSpecifier getFormatArg() -> n
    39:39:cn.com.codesec.scan.util.ArgumentSpecifier getSourceArg() -> o
    43:100:void <init>(org.w3c.dom.Element) -> <init>
    104:104:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    109:109:cn.com.codesec.java.rules.Conditional getConditional() -> h
    113:113:boolean isMemoryRule() -> p
    117:117:boolean isBufferOverflowRule() -> q
    121:121:boolean isFormatStringScanRule() -> r
    125:125:boolean isFormatStringPrintRule() -> s
    129:130:boolean isPlainRule() -> t
    134:134:boolean isProcessControlRule() -> u
    138:138:boolean isUncheckedReturnValueRule() -> v
    142:155:void checkRule() -> w
    159:164:void checkArgs(int,int,int,int,int) -> a
    167:176:void checkArg(cn.com.codesec.scan.util.ArgumentSpecifier,int,java.lang.String) -> a
    180:181:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.SingletonMethodRule -> cn.com.codesec.cB:
    cn.com.codesec.java.rules.Identifier functionIdentifier -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    12:20:void <init>(org.w3c.dom.Element) -> <init>
    24:24:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    29:29:cn.com.codesec.java.rules.Conditional getConditional() -> h
    34:35:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
cn.com.codesec.java.rules.Sink -> cn.com.codesec.cC:
    cn.com.codesec.java.rules.SinkSourceRule sinkSourceRule -> d
    cn.com.codesec.scan.util.ArgumentSpecifier inArg -> a
    cn.com.codesec.java.rules.Conditional conditional -> b
    boolean primary -> c
    java.lang.String reportString -> e
    17:44:void <init>(org.w3c.dom.Element,cn.com.codesec.java.rules.SinkSourceRule) -> <init>
    47:47:cn.com.codesec.scan.util.ArgumentSpecifier getInArg() -> c
    51:51:cn.com.codesec.java.rules.Conditional getConditional() -> d
    55:55:boolean isPrimary() -> e
    59:59:cn.com.codesec.java.rules.SinkSourceRule getRule() -> f
    63:64:void setPrimary(boolean) -> a
    68:87:int compareTo(cn.com.codesec.java.rules.Sink) -> a
    92:92:boolean isReportable() -> a
    97:97:java.lang.String reportAs() -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.SinkSourceRule -> cn.com.codesec.cD:
    boolean isVulnerabilityRule() -> o
    java.util.List getSinks() -> k
    int getSinkCount() -> l
    java.util.List getSourceRules() -> n
    int getSourceCount() -> m
cn.com.codesec.java.rules.SkyCSharpRuleNames -> cn.com.codesec.cE:
    java.lang.String EL_DISABLE_LABEL -> a
    java.lang.String AT_DISABLE_ALL -> b
    java.lang.String EL_ID -> c
    java.lang.String AT_ID -> d
    java.lang.String AT_LANGUAGE_MATCH -> e
    java.lang.String EL_LABEL -> f
    java.lang.String AT_LABEL -> g
    java.lang.String EL_RULES -> h
    java.lang.String EL_FLAG_DECLARATIONS -> i
    java.lang.String EL_MAP -> j
    java.lang.String EL_ENTRY -> k
    java.lang.String EL_KEYS -> l
    java.lang.String EL_KEY -> m
    java.lang.String EL_VALUES -> n
    java.lang.String EL_LIST -> o
    java.lang.String EL_FLAG -> p
    java.lang.String EL_USER_FLAG -> q
    java.lang.String AT_NAME -> r
    java.lang.String AT_VERSION -> s
    java.lang.String AT_SRC -> t
    java.lang.String EL_SOURCE_RULE -> u
    java.lang.String EL_NOTES -> v
    java.lang.String EL_METAS -> w
    java.lang.String EL_META -> x
    java.lang.String EL_SCRIPT -> y
    java.lang.String EL_OUT_ARGS -> z
    java.lang.String EL_CONDITION -> A
    java.lang.String EL_AND -> B
    java.lang.String EL_OR -> C
    java.lang.String EL_NOT -> D
    java.lang.String EL_IS_TYPE -> E
    java.lang.String AT_ARGUMENT -> F
    java.lang.String EL_PACKAGE_NAME -> G
    java.lang.String EL_CLASS_NAME -> H
    java.lang.String EL_IS_CONT -> I
    java.lang.String AT_VALUE -> J
    java.lang.String EL_CONT_GT -> K
    java.lang.String EL_CONT_LT -> L
    java.lang.String EL_CONT_MATCHES -> M
    java.lang.String AT_TYPE -> N
    java.lang.String AT_PATTERN -> O
    java.lang.String EL_FLAG_SET -> P
    java.lang.String AT_FLAG -> Q
    java.lang.String EL_METHOD_CALL_IDENTIFIER -> R
    java.lang.String EL_METHOD_IDENTIFIER -> S
    java.lang.String EL_METHOD_NAME -> T
    java.lang.String EL_CLASS_LABEL -> U
    java.lang.String EL_METHOD_LABEL -> V
    java.lang.String EL_MODIFIERS -> W
    java.lang.String EL_MODIFIER -> X
    java.lang.String EL_PARAMETERS -> Y
    java.lang.String AT_VAR_ARG -> Z
    java.lang.String EL_PARAM_TYPE -> aa
    java.lang.String EL_WILD_CARD -> ab
    java.lang.String AT_MIN -> ac
    java.lang.String AT_MAX -> ad
    java.lang.String EL_RETURN_TYPE -> ae
    java.lang.String EL_APPLY_TO -> af
    java.lang.String AT_IMPLEMENTS -> ag
    java.lang.String AT_OVERRIDES -> ah
    java.lang.String AT_EXTENDS -> ai
    java.lang.String EL_EXCEPT -> aj
    java.lang.String AT_CASE_INSENSITIVE -> ak
    java.lang.String AT_MULTILINE -> al
    java.lang.String AT_IN_STRING_MATCH -> am
    java.lang.String EL_FLAGS -> an
    java.lang.String EL_PLUS -> ao
    java.lang.String EL_MINUS -> ap
    java.lang.String EL_CONTROLFLOW_RULE -> aq
    java.lang.String EL_CONTROLFLOW_METHOD_RULE -> ar
    java.lang.String EL_PASSTHROUGH_RULE -> as
    java.lang.String EL_IN_ARGS -> at
    java.lang.String EL_METHODSIGNATURE -> au
    java.lang.String EL_CLEANSE_RULE -> av
    java.lang.String EL_ENTRY_POINT_RULE -> aw
    java.lang.String EL_LIST_RULE -> ax
    java.lang.String EL_LIST_ARG -> ay
    java.lang.String EL_INDEX_ARG -> az
    java.lang.String EL_ADD_METHOD -> aA
    java.lang.String EL_REMOVE_METHOD -> aB
    java.lang.String EL_INIT_METHOD -> aC
    java.lang.String EL_READ_METHOD -> aD
    java.lang.String EL_MAP_RULE -> aE
    java.lang.String EL_PUT_METHOD -> aF
    java.lang.String EL_MAP_ARG -> aG
    java.lang.String EL_KEY_ARG -> aH
    java.lang.String EL_VALUE_ARG -> aI
    java.lang.String EL_GET_METHOD -> aJ
    java.lang.String EL_VALUES_METHOD -> aK
    java.lang.String EL_VALUES_ARG -> aL
    java.lang.String EL_KEYS_METHOD -> aM
    java.lang.String EL_KEYS_ARG -> aN
    java.lang.String EL_SINK_RULE -> aO
    java.lang.String EL_DEFAULT_GRADE -> aP
    java.lang.String EL_EFFECT -> aQ
    java.lang.String EL_VERACITY -> aR
    java.lang.String EL_POSSIBILITY -> aS
    java.lang.String EL_CATEGORY_ID -> aT
    java.lang.String EL_CATEGORY_STD_ID -> cT
    java.lang.String EL_CERT_CATEGORY_ID -> cU
    java.lang.String EL_NULL_PTR_SOURCE_RULE -> aU
    java.lang.String EL_NULL_PTR_STORE_RULE -> aV
    java.lang.String EL_NULL_PTR_PASSTHROUGH_RULE -> aW
    java.lang.String EL_NULL_PTR_FETCH_RULE -> aX
    java.lang.String EL_NULL_PTR_CMP_RULE -> aY
    java.lang.String EL_NULL_PTR_SINK_RULE -> aZ
    java.lang.String EL_STRING_MATCH -> ba
    java.lang.String EL_STRING_REGEX -> bb
    java.util.Map CHECK_MODE_AND_CATEGORY_ELEMENT_NAME -> cV
    java.lang.String EL_VULN_KINGDOM -> bc
    java.lang.String EL_VULN_CATEGORY -> bd
    java.lang.String EL_VULN_SUBCATEGORY -> be
    java.lang.String AT_REF -> bf
    java.lang.String EL_RECOMMENDATIONS -> bg
    java.lang.String EL_EXPLANATION -> bh
    java.lang.String AT_APPEND -> bi
    java.lang.String EL_SINK_POINT -> bj
    java.lang.String AT_PRIMARY -> bk
    java.lang.String EL_SOURCE_POINT -> bl
    java.lang.String EL_REPORT_AS -> bm
    java.lang.String EL_CLASS_RULE -> bn
    java.lang.String EL_MATCH -> bo
    java.lang.String EL_FIELD_RULE -> bp
    java.lang.String EL_FIELD_NAME -> bq
    java.lang.String EL_FIELD_LABEL -> br
    java.lang.String EL_RESULT_FILTER_RULE -> bs
    java.lang.String EL_CHECK -> bt
    java.lang.String EL_ANALYZER_NAME -> bu
    java.lang.String EL_DOMINANT -> bv
    java.lang.String EL_SUBORDINATE -> bw
    java.lang.String EL_SAME_VALUE -> bx
    java.lang.String EL_SINGLETON_METHOD_RULE -> by
    java.lang.String EL_ALIAS_METHOD_RULE -> bz
    java.lang.String EL_ALIAS_RETURN_METHOD_RULE -> bA
    java.lang.String EL_SEMANTIC_RULE -> bB
    java.lang.String EL_STRUCTURAL_RULE -> bC
    java.lang.String EL_INTERNAL_RULE -> bD
    java.lang.String EL_DEPRECATION_RULE -> bE
    java.lang.String EL_CHARACTERIZATION_RULE -> bF
    java.lang.String EL_TYPE -> bG
    java.lang.String EL_CONTROL_ARGUMENT -> bH
    java.lang.String EL_DESTINATION_ARGUMENT -> bI
    java.lang.String EL_EXECUTION_PATH_ARGUMENT -> bJ
    java.lang.String EL_FORMAT_ARGUMENT -> bK
    java.lang.String EL_SOURCE_ARGUMENT -> bL
    java.lang.String EL_PATTERN -> bM
    java.lang.String EL_VALUE -> bN
    java.lang.String EL_CONFIG_RULE -> bO
    java.lang.String EL_CONFIG_FILE -> bP
    java.lang.String EL_XPATH_MATCH -> bQ
    java.lang.String EL_COMMENT -> bR
    java.lang.String AT_EXPRESSION -> bS
    java.lang.String AT_REPORT_AT -> bT
    java.lang.String EL_PROPERTY_MATCH -> bU
    java.lang.String EL_NAME_MATCH -> bV
    java.lang.String EL_VALUE_MATCH -> bW
    java.lang.String EL_BUG_INFOS -> bX
    java.lang.String EL_BUG_INFO -> bY
    java.lang.String EL_BUG_INFO_TYPE -> bZ
    java.lang.String EL_CATEGORIES -> ca
    java.lang.String EL_CATEGORY -> cb
    java.lang.String EL_BUG_SERVERITY -> cc
    java.lang.String EL_DESCRIPTION -> cd
    java.lang.String EL_ADVICE -> ce
    java.lang.String TYPE_CWE -> cf
    java.lang.String TYPE_CERT -> cg
    java.lang.String TYPE_OWASP -> ch
    java.lang.String TYPE_OWASP_MOBILE -> ci
    java.lang.String TYPE_SANS -> cj
    java.lang.String TYPE_ISO -> ck
    java.lang.String TYPE_MISRA -> cl
    java.lang.String TYPE_GBT -> cm
    java.lang.String TYPE_SJT -> cn
    java.lang.String TYPE_PCIDSS -> co
    java.lang.String TYPE_CLASS_CHIN -> cp
    java.lang.String TYPE_SUB_CLASS_CHIN -> cq
    java.lang.String TYPE_DETAIL_CLASS_CHIN -> cr
    java.lang.String EL_REFERENCES -> cs
    java.lang.String EL_REFERENCE -> ct
    java.lang.String AT_LANGUAGE -> cu
    java.lang.String EL_ENTRYPOINT_STRUCTURAL -> cv
    java.lang.String EL_TRANSFER_STRUCTURAL -> cw
    java.lang.String EL_TRANSFER_FUNCTION_STRUCTURAL -> cx
    java.lang.String EL_CLEANSE_STRUCTURAL -> cy
    java.lang.String EL_CLEANSE_FUNCTION_STRUCTURAL -> cz
    java.lang.String EL_SOURCE_STRUCTURAL -> cA
    java.lang.String EL_SOURCE_FUNCTION_STRUCTURAL -> cB
    java.lang.String EL_WRITE_STRUCTURAL -> cC
    java.lang.String EL_SINK_STRUCTURAL -> cD
    java.lang.String EL_SINK_FUNCTION_STRUCTURAL -> cE
    java.lang.String EL_OBSOLETE -> cF
    java.lang.String EL_LAMBDA_CALL -> cG
    java.lang.String EL_LAMBDA_CALL_STRUCTURAL -> cH
    java.lang.String EL_XPATHVERSION -> cI
    java.lang.String EL_NOTPRESENT -> cJ
    java.lang.String EL_CHANGEFILESDATA -> cK
    java.lang.String EL_CREATEFILES -> cL
    java.lang.String EL_UPDATEFILES -> cM
    java.lang.String EL_FILE -> cN
    java.lang.String EL_RULESETS -> cO
    java.lang.String EL_RULESET -> cP
    java.lang.String EL_NAME -> cQ
    java.lang.String EL_MAPS -> cR
    java.lang.String EL_RULESET_NAME -> cS
    156:326:void <clinit>() -> <clinit>
    12:12:void <init>() -> <init>
    160:160:java.util.Map getCheckmodeandcategoryelementname() -> a
cn.com.codesec.java.rules.Sky_CoderXL -> cn.com.codesec.cF:
    30:30:void <init>() -> <init>
    34:38:java.io.InputStream decryptData(java.lang.String,java.lang.String) -> a
    43:44:java.io.InputStream decryptData(java.lang.String,java.io.InputStream) -> a
    50:82:java.io.InputStream decrypt(byte[]) -> a
cn.com.codesec.java.rules.SourceRule -> cn.com.codesec.cG:
    cn.com.codesec.java.rules.SinkSourceRule sinkSourceRule -> e
    cn.com.codesec.scan.util.ArgumentSpecifier outArg -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet plusTaintFlags -> b
    cn.com.codesec.java.rules.flags.TaintFlagSet minusTaintFlags -> c
    java.lang.String ruleID -> d
    java.lang.String reportString -> f
    19:39:void <init>(org.w3c.dom.Element,cn.com.codesec.java.rules.SinkSourceRule,java.lang.String,int) -> <init>
    42:42:cn.com.codesec.scan.util.ArgumentSpecifier getOutArg() -> d
    46:46:cn.com.codesec.java.rules.SinkSourceRule getParent() -> m
    51:51:java.lang.String getRuleID() -> f
    56:56:java.lang.String getLabel() -> g
    61:61:cn.com.codesec.java.rules.Conditional getConditional() -> h
    66:68:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    72:72:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    77:77:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    82:82:cn.com.codesec.java.rules.Identifier getMethodIdentifier() -> c
    87:88:void setMethodIdentifier(cn.com.codesec.java.rules.Identifier) -> a
    92:92:boolean isScript() -> i
    97:97:java.lang.String getVersion() -> e
    102:102:boolean isReportable() -> a
    107:107:java.lang.String reportAs() -> b
cn.com.codesec.java.rules.StateDescriptions -> cn.com.codesec.cH:
    java.lang.String id -> a
    java.lang.String enter -> b
    java.util.List addList -> c
    java.util.List removeList -> d
    17:23:int hashCode() -> hashCode
    28:55:boolean equals(java.lang.Object) -> equals
    67:67:java.lang.String getId() -> a
    71:71:java.lang.String getEnter() -> b
    79:80:void setEnter(java.lang.String) -> a
    83:83:java.util.List getAddList() -> c
    87:87:java.util.List getRemoveList() -> d
    96:97:void addAdd(cn.com.codesec.java.rules.StateDescriptions$ExtraString) -> a
    101:102:void addRemove(cn.com.codesec.java.rules.StateDescriptions$ExtraString) -> b
    90:106:void <init>(java.lang.String) -> <init>
    90:111:void <init>(java.lang.String,java.lang.String) -> <init>
cn.com.codesec.java.rules.StateDescriptions$ExtraString -> cn.com.codesec.cI:
    java.lang.String varName -> a
    java.lang.String content -> b
    117:121:int hashCode() -> hashCode
    126:143:boolean equals(java.lang.Object) -> equals
    147:147:java.lang.String getVarName() -> a
    151:151:java.lang.String getContent() -> b
    158:162:void <init>(java.lang.String,java.lang.String) -> <init>
cn.com.codesec.java.rules.StateDescriptions$TYPE -> cn.com.codesec.cJ:
    cn.com.codesec.java.rules.StateDescriptions$TYPE ENTER -> a
    cn.com.codesec.java.rules.StateDescriptions$TYPE ADD -> b
    cn.com.codesec.java.rules.StateDescriptions$TYPE REMOVE -> c
    cn.com.codesec.java.rules.StateDescriptions$TYPE[] ENUM$VALUES -> d
    58:63:void <clinit>() -> <clinit>
    58:58:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.StateDescriptions$TYPE[] values() -> values
    1:1:cn.com.codesec.java.rules.StateDescriptions$TYPE valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.StatefulRule -> cn.com.codesec.cK:
    java.lang.String EOS_ON_NRF -> a
    java.lang.String EOF_ON_NRF -> b
    java.lang.String REPORT_SELFLOOP -> c
    java.lang.String REPORT_ON_ASSIGN_RHS -> d
    java.lang.String LOCAL_ONLY -> e
    java.util.Map FLAG_DEFAULTS -> f
    cn.com.codesec.scan.analyzer.stateful.Machine machine -> g
    java.util.Map funIDs -> h
    java.util.Map flags -> i
    java.lang.String primaryState -> j
    java.util.Map stateStringsMap -> k
    47:133:void <clinit>() -> <clinit>
    31:32:void setMachine(cn.com.codesec.scan.analyzer.stateful.Machine) -> a
    37:37:java.util.Map getFlags() -> k
    43:44:void setPrimaryState(java.lang.String) -> d
    70:94:void <init>(org.w3c.dom.Element) -> <init>
    99:99:java.lang.String getPrimaryState() -> l
    104:104:cn.com.codesec.java.rules.CallIdentifier getFunctionCallIdentifier(java.lang.String) -> a
    108:114:boolean getFlag(java.lang.String) -> e
    118:118:boolean isLocalOnly() -> m
    122:122:cn.com.codesec.scan.analyzer.stateful.Machine getMachine() -> n
    126:126:cn.com.codesec.scan.meta.Language getLanguage() -> o
    130:130:java.util.Map getStateStringsMap() -> p
    136:137:void setStateStringsMap(java.util.Map) -> a
    142:142:cn.com.codesec.java.rules.StateDescriptions getStateStrings(java.lang.String) -> f
cn.com.codesec.java.rules.StringMatchRule -> cn.com.codesec.cL:
    java.lang.String regex -> a
    9:9:java.lang.String getRegex() -> k
    13:14:void setRegex(java.lang.String) -> d
    19:25:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.StringMatcher -> cn.com.codesec.cM:
    13:13:void <init>() -> <init>
    boolean matches(java.lang.String) -> a
    18:18:cn.com.codesec.java.rules.StringMatcher create(java.lang.String,boolean) -> a
    22:22:cn.com.codesec.java.rules.StringMatcher create(java.util.regex.Pattern,boolean) -> a
    26:26:boolean isLiteral() -> a
    30:30:boolean isRegex() -> b
    34:35:cn.com.codesec.java.rules.StringMatcher setLiteralValue(java.lang.String) -> b
    39:41:cn.com.codesec.java.rules.StringMatcher setRegexValue(java.lang.String) -> c
    45:45:cn.com.codesec.java.rules.StringMatcher matchAll() -> c
cn.com.codesec.java.rules.StringMatcher$All -> cn.com.codesec.cN:
    178:178:void <init>() -> <init>
    182:182:boolean matches(java.lang.String) -> a
    187:187:java.lang.String toString() -> toString
    192:192:boolean equals(java.lang.Object) -> equals
    197:197:int hashCode() -> hashCode
    202:205:int compareTo(cn.com.codesec.java.rules.StringMatcher) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.StringMatcher$Literal -> cn.com.codesec.cO:
    java.lang.String value -> a
    boolean valIgnoreCase -> b
    120:123:void <init>(java.lang.String,boolean) -> <init>
    127:130:boolean matches(java.lang.String) -> a
    135:135:java.lang.String toString() -> toString
    140:148:boolean equals(java.lang.Object) -> equals
    153:154:int hashCode() -> hashCode
    159:173:int compareTo(cn.com.codesec.java.rules.StringMatcher) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    119:119:void <init>(java.lang.String,boolean,cn.com.codesec.java.rules.StringMatcher$Literal) -> <init>
    117:117:boolean access$2(cn.com.codesec.java.rules.StringMatcher$Literal) -> a
cn.com.codesec.java.rules.StringMatcher$Regex -> cn.com.codesec.cP:
    java.util.regex.Pattern pattern -> a
    boolean patternInString -> b
    54:57:void <init>(java.util.regex.Pattern,boolean) -> <init>
    61:63:boolean matches(java.lang.String) -> a
    68:68:java.lang.String toString() -> toString
    73:84:boolean equals(java.lang.Object) -> equals
    89:90:int hashCode() -> hashCode
    95:109:int compareTo(cn.com.codesec.java.rules.StringMatcher) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    53:53:void <init>(java.util.regex.Pattern,boolean,cn.com.codesec.java.rules.StringMatcher$Regex) -> <init>
    50:50:java.util.regex.Pattern access$2(cn.com.codesec.java.rules.StringMatcher$Regex) -> a
    51:51:boolean access$3(cn.com.codesec.java.rules.StringMatcher$Regex) -> b
cn.com.codesec.java.rules.StructuralRule -> cn.com.codesec.cQ:
    cn.com.codesec.java.structural.StructuralMatch structuralMatch -> a
    boolean matchCSharp -> b
    boolean matchAspx -> c
    19:19:boolean isMatchCSharp() -> l
    23:23:boolean isMatchAspx() -> m
    27:27:cn.com.codesec.java.structural.StructuralMatch getStructuralMatch() -> n
    31:32:void setStructuralMatch(cn.com.codesec.java.structural.StructuralMatch) -> a
    54:68:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.TaintConditionEvaluator -> cn.com.codesec.cR:
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand PESPECIFIC_ONLY_CHECK -> c
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand COMPARISON_FLAG_CHECK -> d
    cn.com.codesec.java.rules.ConditionEvaluator$PEOperand LOOP_BOUND_FLAG_CHECK -> e
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation BUILTIN_OVERFLOW_CONDITIONAL -> a
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation DEFAULT_SINK_CONDITIONAL -> b
    40:45:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    19:28:cn.com.codesec.java.rules.ConditionEvaluator$PEOperand addDefaultChecks(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> a
    32:36:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation evaluateConditional(cn.com.codesec.java.rules.Conditional,cn.com.codesec.scan.ir.nodes.IRFunCall,boolean) -> a
cn.com.codesec.java.rules.TaintConditionEvaluator$PEFlagCheck -> cn.com.codesec.cS:
    cn.com.codesec.java.rules.flags.TaintFlag checkFlag -> a
    59:61:void <init>(cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    65:65:boolean evaluate(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    70:70:cn.com.codesec.util.TriState isSatisfiable(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    75:76:void collectCheckedValues(java.util.Collection) -> a
    80:80:java.lang.String toString() -> toString
    84:84:cn.com.codesec.java.rules.flags.TaintFlag getCheckFlag() -> b
    1:1:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    1:1:boolean evaluate(java.lang.Object) -> a
cn.com.codesec.java.rules.TaintConditionEvaluator$PESpecificOnlyCheck -> cn.com.codesec.cT:
    92:93:void <init>() -> <init>
    97:97:boolean checksSpecificFlag() -> d
    102:106:cn.com.codesec.util.TriState isSatisfiable(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    111:111:boolean evaluate(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    115:127:boolean check(cn.com.codesec.java.rules.flags.TaintFlagSet) -> c
    132:132:java.lang.String toString() -> toString
    1:1:cn.com.codesec.util.TriState isSatisfiable(java.lang.Object,java.lang.Object) -> a
    1:1:boolean evaluate(java.lang.Object) -> a
    91:91:void <init>(cn.com.codesec.java.rules.TaintConditionEvaluator$PESpecificOnlyCheck) -> <init>
cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation -> cn.com.codesec.cU:
    50:51:void <init>(cn.com.codesec.java.rules.ConditionEvaluator$PEOperand) -> <init>
cn.com.codesec.java.rules.TriState -> cn.com.codesec.cV:
    cn.com.codesec.java.rules.TriState YES -> a
    cn.com.codesec.java.rules.TriState NO -> b
    cn.com.codesec.java.rules.TriState MAYBE -> c
    5:7:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
    10:10:cn.com.codesec.java.rules.TriState fromBoolean(boolean) -> a
    14:20:cn.com.codesec.java.rules.TriState and(cn.com.codesec.java.rules.TriState) -> a
    24:30:cn.com.codesec.java.rules.TriState or(cn.com.codesec.java.rules.TriState) -> b
    34:34:cn.com.codesec.java.rules.TriState not() -> a
    38:38:java.lang.String toString() -> toString
    42:42:cn.com.codesec.java.rules.TriState getYES() -> b
    46:47:void setYES(cn.com.codesec.java.rules.TriState) -> c
    50:50:cn.com.codesec.java.rules.TriState getNO() -> c
    54:55:void setNO(cn.com.codesec.java.rules.TriState) -> d
    58:58:cn.com.codesec.java.rules.TriState getMAYBE() -> d
    62:63:void setMAYBE(cn.com.codesec.java.rules.TriState) -> e
cn.com.codesec.java.rules.TypeIdentifier -> cn.com.codesec.cW:
    cn.com.codesec.java.rules.StringMatcher className -> a
    cn.com.codesec.java.rules.StringMatcher namespaceName -> b
    12:15:void <init>(cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher) -> <init>
    18:27:boolean checkType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    31:33:boolean doCheckType(cn.com.codesec.scan.metadata.TypeMeta) -> b
cn.com.codesec.java.rules.TypeType -> cn.com.codesec.cX:
    cn.com.codesec.java.rules.TypeType BUFFEROVERFLOW -> a
    cn.com.codesec.java.rules.TypeType FORMATSTRINGPRINT -> b
    cn.com.codesec.java.rules.TypeType FORMATSTRINGSCAN -> c
    cn.com.codesec.java.rules.TypeType PROCESSCONTROL -> d
    cn.com.codesec.java.rules.TypeType UNCHECKEDRETURNVALUE -> e
    cn.com.codesec.java.rules.TypeType MEMORY -> f
    cn.com.codesec.java.rules.TypeType DEFAULT -> g
    java.lang.String value -> h
    java.util.Map ENUM_CONSTANTS -> i
    cn.com.codesec.java.rules.TypeType[] ENUM$VALUES -> j
    8:24:void <clinit>() -> <clinit>
    26:28:void <init>(java.lang.String,int,java.lang.String) -> <init>
    31:35:cn.com.codesec.java.rules.TypeType fromValue(java.lang.String) -> a
    39:39:java.lang.String value() -> a
    44:44:void setValue(java.lang.String) -> b
    47:47:java.lang.String toString() -> toString
    1:1:cn.com.codesec.java.rules.TypeType[] values() -> values
    1:1:cn.com.codesec.java.rules.TypeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.VulnerabilityRule -> cn.com.codesec.cY:
    java.lang.String INTERNAL_CATEGORY_ID -> t
    java.lang.String INTERNAL_RULESET_NAME -> u
    java.lang.String CUSTOM_CATEGORY_ID_PREFIX -> v
    java.lang.String CUSTOM_RULESET_NAME_PREFIX -> w
    float getSeverity() -> d
    java.lang.String getDescription() -> a
    java.lang.String getRuleSetName() -> f_
    void setRuleSetName(java.lang.String) -> c
    java.util.List getCategoryIds() -> b
    void setCategoryIds(java.util.List) -> a
    int dynamicGrade(float) -> a
cn.com.codesec.java.rules.bean.MatchType -> cn.com.codesec.cZ:
    cn.com.codesec.java.rules.bean.RulePattern rulePattern -> a
    cn.com.codesec.java.rules.bean.RuleValue ruleValue -> b
    3:3:void <init>() -> <init>
    6:6:cn.com.codesec.java.rules.bean.RulePattern getRulePattern() -> a
    9:10:void setRulePattern(cn.com.codesec.java.rules.bean.RulePattern) -> a
    12:12:cn.com.codesec.java.rules.bean.RuleValue getRuleValue() -> b
    15:16:void setRuleValue(cn.com.codesec.java.rules.bean.RuleValue) -> a
    21:51:boolean equals(java.lang.Object) -> equals
    56:65:int hashCode() -> hashCode
cn.com.codesec.java.rules.bean.RulePattern -> cn.com.codesec.da:
    java.lang.String content -> a
    boolean caseInsensitive -> b
    boolean multiline -> c
    boolean inStringMatch -> d
    3:32:void <init>() -> <init>
    7:7:java.lang.String getContent() -> a
    11:12:void setContent(java.lang.String) -> a
    15:15:boolean isCaseInsensitive() -> b
    19:20:void setCaseInsensitive(boolean) -> a
    23:23:boolean isMultiline() -> c
    27:28:void setMultiline(boolean) -> b
    35:35:boolean isInStringMatch() -> d
    39:40:void setInStringMatch(boolean) -> c
    44:67:boolean equals(java.lang.Object) -> equals
    72:79:int hashCode() -> hashCode
cn.com.codesec.java.rules.bean.RuleValue -> cn.com.codesec.db:
    java.lang.String content -> a
    boolean caseInsensitive -> b
    3:21:void <init>() -> <init>
    5:5:java.lang.String getContent() -> a
    9:10:void setContent(java.lang.String) -> a
    13:13:boolean isCaseInsensitive() -> b
    17:18:void setCaseInsensitive(boolean) -> a
    25:42:boolean equals(java.lang.Object) -> equals
    47:52:int hashCode() -> hashCode
cn.com.codesec.java.rules.flags.ImmutableTaintFlagSet -> cn.com.codesec.dc:
    java.util.concurrent.ConcurrentMap INSTANCES -> b
    60:61:void <clinit>() -> <clinit>
    13:18:cn.com.codesec.java.rules.flags.ImmutableTaintFlagSet getImmutableTaintFlagSet(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    22:23:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    27:27:boolean addAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    32:32:boolean removeAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> c
    37:37:boolean retainAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> d
    42:42:boolean add(cn.com.codesec.java.rules.flags.TaintFlag) -> a
    47:47:boolean remove(cn.com.codesec.java.rules.flags.TaintFlag) -> b
    52:52:void clear() -> a
    56:56:java.lang.Object readResolve() -> readResolve
cn.com.codesec.java.rules.flags.TaintFlag -> cn.com.codesec.dd:
    java.util.HashMap INDICES -> a
    java.util.ArrayList all -> b
    boolean stateRead -> c
    java.lang.String flagName -> d
    int index -> e
    11:13:void <clinit>() -> <clinit>
    29:29:cn.com.codesec.java.rules.flags.TaintFlag getFlagByIndex(int) -> a
    32:50:void <init>(java.lang.String) -> <init>
    53:53:java.lang.String getName() -> a
    58:58:java.lang.String toString() -> toString
    62:62:int getIndex() -> b
    67:67:int compareTo(cn.com.codesec.java.rules.flags.TaintFlag) -> a
    72:79:boolean equals(java.lang.Object) -> equals
    84:84:int hashCode() -> hashCode
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.flags.TaintFlagSet -> cn.com.codesec.de:
    cn.com.codesec.java.rules.flags.TaintFlagSet EMPTY_SET -> a
    java.util.BitSet data -> b
    247:248:void <clinit>() -> <clinit>
    21:23:void <init>() -> <init>
    25:27:void <init>(java.util.BitSet) -> <init>
    29:34:void <init>(cn.com.codesec.java.rules.flags.TaintFlag[]) -> <init>
    36:41:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet[]) -> <init>
    44:46:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    49:49:boolean contains(cn.com.codesec.java.rules.flags.TaintFlag) -> c
    53:56:boolean add(cn.com.codesec.java.rules.flags.TaintFlag) -> a
    60:63:boolean remove(cn.com.codesec.java.rules.flags.TaintFlag) -> b
    68:68:java.util.Iterator iterator() -> iterator
    94:97:boolean containsAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> e
    101:103:boolean addAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    107:109:boolean retainAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> d
    113:115:cn.com.codesec.java.rules.flags.TaintFlagSet intersection(cn.com.codesec.java.rules.flags.TaintFlagSet) -> f
    119:121:boolean removeAll(cn.com.codesec.java.rules.flags.TaintFlagSet) -> c
    125:126:void clear() -> a
    129:129:int size() -> b
    133:133:boolean isEmpty() -> c
    137:163:cn.com.codesec.scan.util.Twin parse(org.w3c.dom.Element,java.lang.String) -> a
    167:192:cn.com.codesec.scan.util.Twin parse(java.lang.String,java.lang.String) -> a
    197:204:boolean equals(java.lang.Object) -> equals
    209:209:int hashCode() -> hashCode
    214:223:java.lang.String toString() -> toString
    228:243:int compareTo(cn.com.codesec.java.rules.flags.TaintFlagSet) -> g
    1:1:int compareTo(java.lang.Object) -> compareTo
    19:19:java.util.BitSet access$1(cn.com.codesec.java.rules.flags.TaintFlagSet) -> h
cn.com.codesec.java.rules.flags.TaintFlagSet$1 -> cn.com.codesec.df:
    int next -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet this$0 -> b
    1:69:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    73:73:boolean hasNext() -> hasNext
    78:83:cn.com.codesec.java.rules.flags.TaintFlag next() -> a
    88:88:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.java.rules.flags.TaintFlagTransformation -> cn.com.codesec.dg:
    cn.com.codesec.scan.util.Canonicalizer UNIVERSE -> b
    cn.com.codesec.java.rules.flags.TaintFlagTransformation NOOP_SEQUENCE -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet plus -> c
    cn.com.codesec.java.rules.flags.TaintFlagSet minus -> d
    147:149:void <clinit>() -> <clinit>
    19:19:cn.com.codesec.java.rules.flags.TaintFlagTransformation mk(java.util.List) -> a
    23:26:cn.com.codesec.java.rules.flags.TaintFlagTransformation mk(cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    30:33:cn.com.codesec.java.rules.flags.TaintFlagTransformation mk(cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op) -> a
    37:45:cn.com.codesec.java.rules.flags.TaintFlagTransformation mk(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    49:49:cn.com.codesec.java.rules.flags.TaintFlagTransformation mk(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    53:53:java.lang.Object readResolve() -> readResolve
    56:70:void <init>(java.util.List) -> <init>
    72:78:void <init>(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    81:83:boolean check() -> c
    87:87:int size() -> a
    91:98:java.util.ArrayList getSequence() -> b
    103:108:java.lang.String toString() -> toString
    113:120:boolean equals(java.lang.Object) -> equals
    125:127:int hashCode() -> hashCode
    132:134:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    138:138:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    143:143:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op -> cn.com.codesec.dh:
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator operator -> a
    cn.com.codesec.java.rules.flags.TaintFlag flag -> b
    172:175:void <init>(cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator,cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    179:186:boolean equals(java.lang.Object) -> equals
    191:193:int hashCode() -> hashCode
    198:198:java.lang.String toString() -> toString
    202:202:cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator getOperator() -> a
    206:206:cn.com.codesec.java.rules.flags.TaintFlag getFlag() -> b
cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator -> cn.com.codesec.di:
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator PLUS -> a
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator MINUS -> b
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator[] ENUM$VALUES -> c
    151:159:void <clinit>() -> <clinit>
    151:151:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator[] values() -> values
    1:1:cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator valueOf(java.lang.String) -> valueOf
    151:151:void <init>(java.lang.String,int,cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator) -> <init>
cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator$1 -> cn.com.codesec.dj:
    1:153:void <init>(java.lang.String,int) -> <init>
    156:156:java.lang.String toString() -> toString
cn.com.codesec.java.rules.flags.TaintFlagTransformation$Operator$2 -> cn.com.codesec.dk:
    1:159:void <init>(java.lang.String,int) -> <init>
    162:162:java.lang.String toString() -> toString
cn.com.codesec.java.rules.flags.TaintFlagTransformer -> cn.com.codesec.dl:
    cn.com.codesec.java.rules.flags.TaintFlagTransformer NULL_TRANSFORMER -> g
    5:19:void <clinit>() -> <clinit>
    void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
cn.com.codesec.java.rules.flags.TaintFlagTransformer$1 -> cn.com.codesec.dm:
    1:5:void <init>() -> <init>
    8:8:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    12:12:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    17:17:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
cn.com.codesec.java.rules.label.LabelAccess -> cn.com.codesec.dn:
    cn.com.codesec.java.rules.label.LabelAccess$Phase phase -> a
    cn.com.codesec.scan.backend.BackEnd backEnd -> b
    cn.com.codesec.scan.util.collections.GMultiMap deferred -> c
    java.util.Set labeled -> d
    java.lang.ThreadLocal disableWarning -> e
    java.util.concurrent.ConcurrentMap labelSymbolMap -> f
    221:227:void <clinit>() -> <clinit>
    44:49:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    52:53:void restart(cn.com.codesec.scan.backend.BackEnd) -> a
    56:56:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis getCallGraphAnalysis() -> a
    60:61:void disablePhaseWarnings() -> b
    64:67:void restorePhaseWarnings() -> c
    70:70:cn.com.codesec.java.rules.label.LabelSet getLabels(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.SKYRule) -> a
    74:74:cn.com.codesec.java.rules.label.LabelSet getLabelsRule(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> a
    78:78:cn.com.codesec.java.rules.label.LabelSet getLabels(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> b
    82:82:cn.com.codesec.java.rules.label.LabelSet getLabels(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.scan.ir.transformer.TransformingVisitorAdapter) -> a
    87:87:cn.com.codesec.java.rules.label.LabelSet getLabels(cn.com.codesec.scan.meta.Symbol) -> a
    91:101:cn.com.codesec.java.rules.label.LabelSet getLabelsInternal(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> f
    105:110:void beginScriptPhase() -> d
    113:124:void endScriptPhase() -> e
    127:129:void clearRulesCache() -> f
    132:140:void addLabelFromNSTTransformer(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> c
    143:151:void addLabelDeferred(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> d
    154:155:void addLabelImmediate(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> e
    161:166:void addLabelImmediate(cn.com.codesec.scan.meta.Symbol,java.lang.String,java.lang.Object) -> a
    169:169:boolean canLabel(cn.com.codesec.scan.meta.Symbol) -> b
    174:181:void addLabel(cn.com.codesec.scan.meta.Symbol,java.lang.String,java.lang.Object) -> b
    185:192:void removeLabel(cn.com.codesec.scan.meta.Symbol,java.lang.String,java.lang.Object) -> c
    195:199:java.util.Set getSymbolsByLabel(java.lang.String) -> a
    204:208:java.lang.Object getLabeledSymbolValue(java.lang.String,cn.com.codesec.scan.meta.Symbol) -> a
    213:218:void applyLabel(cn.com.codesec.scan.metadata.Annotatable,java.lang.String) -> a
    176:176:cn.com.codesec.util.fset.FMap lambda$0(cn.com.codesec.scan.meta.Symbol,java.lang.Object,java.lang.String,cn.com.codesec.util.fset.FMap) -> a
    187:187:cn.com.codesec.util.fset.FMap lambda$1(cn.com.codesec.scan.meta.Symbol,java.lang.Object,java.lang.String,cn.com.codesec.util.fset.FMap) -> b
cn.com.codesec.java.rules.label.LabelAccess$1 -> cn.com.codesec.do:
    1:221:void <init>() -> <init>
    224:224:java.lang.Integer initialValue() -> a
    1:1:java.lang.Object initialValue() -> initialValue
cn.com.codesec.java.rules.label.LabelAccess$Phase -> cn.com.codesec.dp:
    cn.com.codesec.java.rules.label.LabelAccess$Phase INITIAL_PASS -> a
    cn.com.codesec.java.rules.label.LabelAccess$Phase SCRIPT -> b
    cn.com.codesec.java.rules.label.LabelAccess$Phase ANALYSIS -> c
    cn.com.codesec.java.rules.label.LabelAccess$Phase[] ENUM$VALUES -> d
    229:233:void <clinit>() -> <clinit>
    229:229:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.java.rules.label.LabelAccess$Phase[] values() -> values
    1:1:cn.com.codesec.java.rules.label.LabelAccess$Phase valueOf(java.lang.String) -> valueOf
cn.com.codesec.java.rules.label.LabelPlacementAnalysis -> cn.com.codesec.dq:
    cn.com.codesec.java.rules.label.LabelPlacementAnalysis$LabelTask task -> b
    cn.com.codesec.java.rules.label.LabelAccess access -> c
    23:30:void <init>(cn.com.codesec.java.rules.label.LabelAccess) -> <init>
    37:37:boolean processInitial(cn.com.codesec.scan.metadata.FunMeta) -> a
    42:42:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task getTask() -> a
    46:46:void processChange(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis) -> a
    52:56:void complete() -> b
    60:65:void placeLabels(cn.com.codesec.scan.metadata.TypeMeta) -> a
    69:78:void placeLabels(cn.com.codesec.scan.metadata.FunMeta) -> b
    67:67:void access$0(cn.com.codesec.java.rules.label.LabelPlacementAnalysis,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.rules.label.LabelPlacementAnalysis$LabelTask -> cn.com.codesec.dr:
    cn.com.codesec.java.rules.label.LabelPlacementAnalysis this$0 -> a
    83:83:void <init>(cn.com.codesec.java.rules.label.LabelPlacementAnalysis) -> <init>
    88:89:void run(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    83:83:void <init>(cn.com.codesec.java.rules.label.LabelPlacementAnalysis,cn.com.codesec.java.rules.label.LabelPlacementAnalysis$LabelTask) -> <init>
cn.com.codesec.java.rules.label.LabelSet -> cn.com.codesec.ds:
    cn.com.codesec.scan.backend.data.ModelKey Key -> a
    cn.com.codesec.java.rules.label.LabelSet Empty -> b
    cn.com.codesec.util.fset.FMap labels -> c
    60:67:void <clinit>() -> <clinit>
    20:22:void <init>() -> <init>
    26:31:boolean add(java.lang.String,cn.com.codesec.scan.metadata.Annotatable) -> a
    35:35:java.util.Collection toNames() -> a
    39:39:boolean containsLabel(java.lang.String) -> a
    43:43:cn.com.codesec.java.rules.label.PlacedLabel getLabel(java.lang.String) -> b
    47:47:int size() -> b
    52:52:java.util.Iterator iterator() -> iterator
    56:56:cn.com.codesec.java.rules.label.LabelSet getEmpty() -> c
cn.com.codesec.java.rules.label.LabelSet$1 -> cn.com.codesec.dt:
    1:61:void <init>() -> <init>
    64:64:boolean add(java.lang.String,cn.com.codesec.scan.metadata.Annotatable) -> a
cn.com.codesec.java.rules.label.PlacedLabel -> cn.com.codesec.du:
    java.lang.String labelName -> a
    cn.com.codesec.scan.metadata.Annotatable symbol -> b
    24:27:void <init>(java.lang.String,cn.com.codesec.scan.metadata.Annotatable) -> <init>
    30:30:java.lang.String getLabelName() -> a
    34:34:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    38:38:cn.com.codesec.scan.meta.Language getSourceLanguage() -> c
    43:53:int compareTo(cn.com.codesec.java.rules.label.PlacedLabel) -> a
    58:58:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.java.rules.label.structural.LabelRuleManager -> cn.com.codesec.dv:
    java.util.List labelStructuralMatchList -> a
    19:29:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    31:31:java.util.List getLabelStructuralMatchList() -> a
    34:35:void setLabelStructuralMatchList(java.util.List) -> a
cn.com.codesec.java.rules.label.structural.LabelStructuralMatch -> cn.com.codesec.dw:
    cn.com.codesec.java.rules.LabelRule labelRule -> a
    20:20:void <init>() -> <init>
    25:25:cn.com.codesec.java.rules.LabelRule getLabelRule() -> a
    31:31:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.java.rules.label.LabelAccess) -> a
    36:36:void match(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
    41:41:void match(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
    45:46:void setLabel(cn.com.codesec.java.rules.LabelRule,cn.com.codesec.java.rules.label.LabelAccess,cn.com.codesec.scan.meta.Symbol,java.lang.String) -> a
    50:91:void setLabel(cn.com.codesec.java.rules.LabelRule,cn.com.codesec.java.rules.label.LabelAccess,cn.com.codesec.scan.meta.Symbol,java.lang.String,java.lang.Object[]) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch02666BF97CA9403D8FFD27BF3FF30AF8 -> cn.com.codesec.dx:
    java.util.regex.Pattern pattern -> b
    23:23:void <clinit>() -> <clinit>
    27:49:void match(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
    52:54:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch04DC0B4B6AC54B939B46486D7B4778A8 -> cn.com.codesec.dy:
    80:82:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.java.rules.label.LabelAccess) -> a
    85:87:void <init>() -> <init>
    25:25:cn.com.codesec.java.rules.LabelRule access$0(cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch04DC0B4B6AC54B939B46486D7B4778A8) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch04DC0B4B6AC54B939B46486D7B4778A8$MyNSTVisitorAdapter -> cn.com.codesec.dz:
    cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch04DC0B4B6AC54B939B46486D7B4778A8 this$0 -> a
    28:28:void <init>(cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch04DC0B4B6AC54B939B46486D7B4778A8) -> <init>
    32:66:void match(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.java.rules.label.LabelAccess) -> a
    71:73:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch24A39FF64EF140E1BF7CD69285585E60 -> cn.com.codesec.dA:
    boolean match -> b
    132:134:void match(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
    137:157:void match01(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> b
    160:169:void match02(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> c
    171:173:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch2AC604E3E76C493FBDBC698F29F64226 -> cn.com.codesec.dB:
    java.util.regex.Pattern MASS_ASSIGNMENT_REGEXP -> b
    16:19:void <init>() -> <init>
    23:47:void match(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch3427F2A06218488785F87EA04208E660 -> cn.com.codesec.dC:
    24:26:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch78F98D93C1B1432E897B0F841FC6F2C1 -> cn.com.codesec.dD:
    48:50:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch831687A23D724FC99A2CC48B91122D16 -> cn.com.codesec.dE:
    56:84:void match(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.label.LabelAccess) -> a
    103:105:void <init>() -> <init>
    57:57:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch831687A23D724FC99A2CC48B91122D16$MyNSTVisitorAdapter -> cn.com.codesec.dF:
    boolean match -> b
    cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch831687A23D724FC99A2CC48B91122D16 this$0 -> a
    86:86:void <init>(cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch831687A23D724FC99A2CC48B91122D16) -> <init>
    90:95:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    99:99:boolean isMatch() -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch8A5EDA6743104D6A9552B9537465910E -> cn.com.codesec.dG:
    33:38:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.java.rules.label.LabelAccess) -> a
    40:42:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch8A5EDA6743104D6A9552B9537465910E$MyNSTVisitorAdapter -> cn.com.codesec.dH:
    java.util.List fieldAccesses -> a
    cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch8A5EDA6743104D6A9552B9537465910E this$0 -> b
    44:49:void <init>(cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatch8A5EDA6743104D6A9552B9537465910E) -> <init>
    46:46:java.util.List getFieldAccesses() -> a
    53:63:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatchB75CDF62D7064627813F65BD01C81285 -> cn.com.codesec.dI:
    28:30:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatchC15B29A14DD54890934F0942288CBEB2 -> cn.com.codesec.dJ:
    33:35:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatchD8457C12483145B98FC1EC03520E20CA -> cn.com.codesec.dK:
    43:45:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatchEA9755849C424290A3B9CFBE0F4E3475 -> cn.com.codesec.dL:
    37:39:void <init>() -> <init>
cn.com.codesec.java.rules.label.structural.impl.LabelStructuralMatchFD0574FDF6BC44AE8E0C8DBC24CB2E9A -> cn.com.codesec.dM:
    43:45:void <init>() -> <init>
cn.com.codesec.java.rules.script.Definition.AspnetMvc_Mass_Assignment -> cn.com.codesec.dN:
    java.util.regex.Pattern MASS_ASSIGNMENT_REGEXP -> a
    9:10:void <init>() -> <init>
cn.com.codesec.java.rules.script.FunctionIdentifierData -> cn.com.codesec.dO:
    java.lang.String clss -> a
    java.lang.String namespaceName -> b
    java.lang.String className -> c
    java.lang.String functionName -> d
    java.util.List modifierNameList -> e
    13:55:void <init>() -> <init>
    16:16:java.lang.String getNamespaceName() -> a
    20:21:void setNamespaceName(java.lang.String) -> a
    24:24:java.lang.String getClassName() -> b
    28:29:void setClassName(java.lang.String) -> b
    32:32:java.lang.String getFunctionName() -> c
    36:37:void setFunctionName(java.lang.String) -> c
    42:42:java.lang.String getClss() -> d
    46:47:void setClss(java.lang.String) -> d
    58:58:java.util.List getModifierNameList() -> e
    62:63:void setModifierNameList(java.util.List) -> a
cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript -> cn.com.codesec.dP:
    java.util.Map dynamicModificationRuleMap -> a
    24:27:void <init>(java.util.Map) -> <init>
    33:69:void modificationRule() -> a
    73:102:void propertyUtilschangeRule(cn.com.codesec.java.rules.DataflowSourceRule,java.util.List) -> a
    71:71:void access$0(cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript,cn.com.codesec.java.rules.DataflowSourceRule,java.util.List) -> a
cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript$1 -> cn.com.codesec.dQ:
    cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript this$0 -> a
    1:33:void <init>(cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript) -> <init>
    37:47:void modification(cn.com.codesec.java.rules.script.Program,cn.com.codesec.java.rules.RuleSet,java.lang.String) -> a
cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript$2 -> cn.com.codesec.dR:
    cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript this$0 -> a
    1:51:void <init>(cn.com.codesec.java.rules.script.JavaDataFlowChangeRuleScript) -> <init>
    55:65:void modification(cn.com.codesec.java.rules.script.Program,cn.com.codesec.java.rules.RuleSet,java.lang.String) -> a
cn.com.codesec.java.rules.script.NameTableUtil -> cn.com.codesec.dS:
    26:26:void <init>() -> <init>
    30:34:cn.com.codesec.scan.metadata.TypeMeta getClassByName(java.lang.String,java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    38:38:cn.com.codesec.scan.metadata.TypeMeta getClassByFullName(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    42:42:java.util.Collection getAllClasses(cn.com.codesec.scan.meta.Language) -> a
    46:54:java.lang.String getPackageName(cn.com.codesec.scan.metadata.TypeMeta) -> a
    58:70:java.util.Set getClassesByLabel(java.lang.String) -> a
    74:86:java.util.Set getFieldsByLabel(java.lang.String) -> b
    90:93:java.lang.Object getLabelValue(java.lang.String,cn.com.codesec.scan.meta.Symbol) -> a
    96:108:java.util.Set getMethodsByLabel(java.lang.String) -> c
cn.com.codesec.java.rules.script.Program -> cn.com.codesec.dT:
    java.util.List struts1ActionClassNames -> a
    cn.com.codesec.java.rules.script.Program program -> b
    java.util.List struts1Inputs -> c
    java.util.List struts1PrivateInputs -> d
    24:24:void <clinit>() -> <clinit>
    12:44:void <init>() -> <init>
    21:21:java.util.List getStruts1ActionClassNames() -> a
    27:27:cn.com.codesec.java.rules.script.Program getProgram() -> b
    31:32:void setProgram(cn.com.codesec.java.rules.script.Program) -> a
    35:35:java.util.List getStruts1Inputs() -> c
    39:39:java.util.List getStruts1PrivateInputs() -> d
cn.com.codesec.java.rules.script.PropHolder -> cn.com.codesec.dU:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String ref -> c
    3:3:void <init>() -> <init>
    10:10:java.lang.String getName() -> a
    14:15:void setName(java.lang.String) -> a
    18:18:java.lang.String getValue() -> b
    22:23:void setValue(java.lang.String) -> b
    26:26:java.lang.String getRef() -> c
    30:31:void setRef(java.lang.String) -> c
cn.com.codesec.java.rules.script.ScriptManager -> cn.com.codesec.dV:
    cn.com.codesec.java.common.SkyCSharpProject skyCSharpProject -> a
    java.util.Map dynamicModificationRuleMap -> b
    26:43:void <init>(cn.com.codesec.java.common.SkyCSharpProject) -> <init>
    32:40:void pre() -> a
    51:67:void scriptInRule() -> b
    78:85:void mid() -> c
cn.com.codesec.java.rules.script.common.DynamicModificationRule -> cn.com.codesec.dW:
    void modification(cn.com.codesec.java.rules.script.Program,cn.com.codesec.java.rules.RuleSet,java.lang.String) -> a
cn.com.codesec.java.rules.script.common.ScriptUtil -> cn.com.codesec.dX:
    java.util.regex.Pattern packageNamePattern -> a
    java.util.regex.Pattern methodNamePattern -> b
    java.util.Set errorXMLs -> c
    39:175:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    45:46:boolean isValidJavaPackageName(java.lang.String) -> a
    50:53:boolean isValidJavaPackageNameFty(java.lang.String) -> b
    58:59:boolean isValidJavaMethodName(java.lang.String) -> c
    63:66:boolean isValidJavaIdentifier(java.lang.String) -> d
    72:111:void generateFunctionIdentifiers(cn.com.codesec.java.rules.RuleSet,cn.com.codesec.java.rules.FunctionRule,java.util.Collection) -> a
    114:128:boolean isSubClass(java.lang.String,java.lang.String) -> a
    132:149:boolean isSubClassHelper(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    153:155:void initCache() -> a
    158:160:void closeCache() -> b
    163:172:java.lang.String readString(cn.com.codesec.util.SourceFile) -> a
    178:178:java.util.Set getErrorXMLs() -> c
    182:219:org.jdom2.Document readDocument(cn.com.codesec.util.SourceFile) -> b
    227:251:java.lang.String readString(java.io.File,java.lang.String) -> a
    255:255:java.lang.String getClss(java.lang.String,java.lang.String) -> b
    259:270:void addLabelToField(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    273:281:void addLabelToFields(java.lang.String,java.lang.String,java.lang.String) -> a
    284:287:void setLabel(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> a
    290:291:cn.com.codesec.scan.metadata.TypeMeta getClassByFullName(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    295:305:cn.com.codesec.scan.metadata.annotations.Annotation getAnnotation(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    309:315:org.apache.commons.lang3.tuple.Pair splitFullyQualifiedClsName(java.lang.String) -> e
    320:326:boolean isSafeForJavaGlobal(cn.com.codesec.scan.metadata.TypeMeta) -> a
    330:330:java.lang.Boolean namespaceMatchesRegularExpression(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    342:351:java.lang.Boolean classMatchesRegularExpression(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.meta.Language,cn.com.codesec.java.rules.script.common.ScriptUtil$ClassManipulator) -> a
    356:365:void iterateOverFields(java.util.Set,java.lang.String,java.util.List) -> a
    368:399:void propLabels(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String,java.util.List) -> a
    402:404:void visitField(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String,java.util.List) -> b
    407:407:boolean isVisited(cn.com.codesec.scan.metadata.FieldMeta,java.util.List) -> a
    411:426:java.util.List extractLabelValues(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> b
cn.com.codesec.java.rules.script.common.ScriptUtil$1 -> cn.com.codesec.dY:
    1:330:void <init>() -> <init>
    333:334:java.lang.String classManipulator(cn.com.codesec.scan.metadata.TypeMeta) -> a
cn.com.codesec.java.rules.script.common.ScriptUtil$ClassManipulator -> cn.com.codesec.dZ:
    java.lang.String classManipulator(cn.com.codesec.scan.metadata.TypeMeta) -> a
cn.com.codesec.java.rules.script.template.AbstractTemplateCollector -> cn.com.codesec.ea:
    java.util.Set allTemplates -> a
    10:20:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    23:23:boolean isTemplate(java.lang.String) -> a
cn.com.codesec.java.rules.script.template.AbstractTemplatePaths -> cn.com.codesec.eb:
    java.util.Set paths -> a
    java.util.Set pathFragmentses -> b
    8:11:void <init>() -> <init>
    15:19:void addAll(java.util.Set) -> a
    23:28:void add(java.lang.String) -> a
    32:36:void addAllFragments(java.util.Set) -> b
    40:45:void addFragments(java.util.Set) -> c
    48:48:java.util.Set getPaths() -> a
    52:52:java.util.Set getPathFragmentses() -> b
cn.com.codesec.java.rules.script.template.AllTemplatePaths -> cn.com.codesec.ec:
    java.util.Map templatePathsMap -> a
    8:9:void <init>() -> <init>
    12:20:void add(cn.com.codesec.java.rules.script.template.TemplatePaths) -> a
    23:23:cn.com.codesec.java.rules.script.template.TemplatePaths getTemplatePaths(java.lang.String) -> a
    27:33:java.util.Set getAllTemplatePaths() -> a
    37:45:void addAll(cn.com.codesec.java.rules.script.template.AllTemplatePaths,java.util.Set) -> a
cn.com.codesec.java.rules.script.template.SpringTemplateCollector -> cn.com.codesec.ed:
    cn.com.codesec.java.rules.script.template.SpringTemplateCollector springTemplateCollector -> b
    java.util.Map pathAndTemplates -> c
    java.util.Map pathFragmentsAndTemplates -> d
    java.util.Map shortPathViewAndLongPathViews -> e
    11:17:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    21:25:java.util.Set collectTemplates(java.util.Set) -> a
    29:49:java.util.Set collectTemplates(java.lang.String) -> b
    53:58:boolean contain(java.lang.String,java.lang.String) -> a
    63:67:java.util.Set collectTemplatesByFragments(java.util.Set) -> b
    71:84:java.util.Set collectTemplatesByFragment(java.util.Set) -> c
    89:89:cn.com.codesec.java.rules.script.template.TemplateCollector getTemplateCollector() -> a
    93:93:java.util.Map getShortPathViewAndLongPathViews() -> b
cn.com.codesec.java.rules.script.template.SuffixTemplateCollector -> cn.com.codesec.ee:
    cn.com.codesec.java.rules.script.template.SuffixTemplateCollector suffixTemplateCollector -> b
    java.util.Map pathAndTemplates -> c
    java.util.Map pathFragmentsAndTemplates -> d
    java.util.Map shortPathViewAndLongPathViews -> e
    12:18:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    22:26:java.util.Set collectTemplates(java.util.Set) -> a
    30:49:java.util.Set collectTemplates(java.lang.String) -> b
    53:55:boolean strutsMatch(java.lang.String,java.lang.String) -> a
    62:66:java.util.Set collectTemplatesByFragments(java.util.Set) -> b
    70:83:java.util.Set collectTemplatesByFragment(java.util.Set) -> c
    88:88:cn.com.codesec.java.rules.script.template.TemplateCollector getTemplateCollector() -> a
    92:92:java.util.Map getShortPathViewAndLongPathViews() -> b
cn.com.codesec.java.rules.script.template.SuffixTemplatePaths -> cn.com.codesec.ef:
    9:9:void <init>() -> <init>
    13:13:cn.com.codesec.java.rules.script.template.TemplateCollector getTemplateCollector() -> c
    17:19:void add(java.lang.String) -> a
    21:46:void collectShortPathViewAndLongPathViews(java.lang.String) -> b
    49:49:java.lang.String getName() -> d
cn.com.codesec.java.rules.script.template.TemplateCollector -> cn.com.codesec.eg:
    java.util.Set collectTemplates(java.util.Set) -> a
    java.util.Set collectTemplatesByFragments(java.util.Set) -> b
cn.com.codesec.java.rules.script.template.TemplatePaths -> cn.com.codesec.eh:
    cn.com.codesec.java.rules.script.template.TemplateCollector getTemplateCollector() -> c
    java.lang.String getName() -> d
    void addAll(java.util.Set) -> a
    void add(java.lang.String) -> a
    void addAllFragments(java.util.Set) -> b
    void addFragments(java.util.Set) -> c
    java.util.Set getPaths() -> a
    java.util.Set getPathFragmentses() -> b
cn.com.codesec.java.rules.script.template.TemplateUtil -> cn.com.codesec.ei:
    11:11:void <init>() -> <init>
    15:15:boolean isTemplate(java.lang.String) -> a
    20:21:boolean hasUnknowTemplatePath(cn.com.codesec.scan.metadata.FunMeta) -> a
    25:26:boolean hasNoTemplateMapping(cn.com.codesec.scan.metadata.FunMeta) -> b
    31:49:boolean hasTemplatePath(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    69:81:void addLabel(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.script.template.TemplatePaths) -> a
    85:97:void addLabel(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.script.template.AllTemplatePaths,java.util.Set) -> a
    100:102:void addUnCertainPathLabel(cn.com.codesec.scan.meta.Symbol) -> a
    105:106:void addNoTemplateMappingLabel(cn.com.codesec.scan.meta.Symbol) -> b
cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule -> cn.com.codesec.ej:
    cn.com.codesec.java.rules.Conditional conditional -> a
    20:20:cn.com.codesec.java.rules.Conditional getConditional() -> h
    24:32:void <init>(org.w3c.dom.Element) -> <init>
cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule -> cn.com.codesec.ek:
    boolean flags -> c
    cn.com.codesec.java.rules.flags.TaintFlagSet plusTaintFlags -> a
    cn.com.codesec.java.rules.flags.TaintFlagSet minusTaintFlags -> b
    20:20:boolean isFlags() -> a
    27:39:void <init>(org.w3c.dom.Element) -> <init>
    43:43:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    48:48:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    53:55:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
cn.com.codesec.java.rules.structural.CleanseFunctionRule -> cn.com.codesec.el:
    cn.com.codesec.java.taint.CleanseFunctionMatch cleanseFunctionMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.CleanseFunctionMatch getCleanseFunctionMatch() -> b
    36:37:void setCleanseFunctionMatch(cn.com.codesec.java.taint.CleanseFunctionMatch) -> a
cn.com.codesec.java.rules.structural.CleanseStructuralRule -> cn.com.codesec.em:
    cn.com.codesec.java.taint.CleanseStructuralMatch cleanseStructuralMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.CleanseStructuralMatch getCleanseStructuralMatch() -> b
    36:37:void setCleanseStructuralMatch(cn.com.codesec.java.taint.CleanseStructuralMatch) -> a
cn.com.codesec.java.rules.structural.EntrypointStructuralRule -> cn.com.codesec.en:
    cn.com.codesec.java.taint.EntrypointStructuralMatch entrypointStructuralMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.EntrypointStructuralMatch getEntrypointStructuralMatch() -> b
    36:37:void setEntrypointStructuralMatch(cn.com.codesec.java.taint.EntrypointStructuralMatch) -> a
cn.com.codesec.java.rules.structural.LambdaCallStructuralRule -> cn.com.codesec.eo:
    cn.com.codesec.java.lambda.LambdaCallStructuralMatch lambdaCallStructuralMatch -> b
    15:16:void <init>(org.w3c.dom.Element) -> <init>
    21:21:cn.com.codesec.java.lambda.LambdaCallStructuralMatch getLambdaCallStructuralMatch() -> k
    25:26:void setLambdaCallStructuralMatch(cn.com.codesec.java.lambda.LambdaCallStructuralMatch) -> a
cn.com.codesec.java.rules.structural.SinkFunctionStructuralRule -> cn.com.codesec.ep:
    cn.com.codesec.java.taint.SinkFunctionMatch sinkFunctionMatch -> a
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.SinkFunctionMatch getSinkFunctionMatch() -> k
    36:37:void setSinkFunctionMatch(cn.com.codesec.java.taint.SinkFunctionMatch) -> a
cn.com.codesec.java.rules.structural.SinkStructuralRule -> cn.com.codesec.eq:
    cn.com.codesec.java.taint.SinkStructuralMatch sinkStructuralMatch -> a
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.SinkStructuralMatch getSinkStructuralMatch() -> k
    36:37:void setSinkStructuralMatch(cn.com.codesec.java.taint.SinkStructuralMatch) -> a
cn.com.codesec.java.rules.structural.SourceFunctionStructuralRule -> cn.com.codesec.er:
    cn.com.codesec.java.taint.SourceFunctionMatch sourceFunctionMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.SourceFunctionMatch getSourceFunctionMatch() -> b
    36:37:void setSourceFunctionMatch(cn.com.codesec.java.taint.SourceFunctionMatch) -> a
cn.com.codesec.java.rules.structural.SourceStructuralRule -> cn.com.codesec.es:
    cn.com.codesec.java.taint.SourceStructuralMatch sourceStructuralMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.SourceStructuralMatch getSourceStructuralMatch() -> b
    36:37:void setSourceStructuralMatch(cn.com.codesec.java.taint.SourceStructuralMatch) -> a
cn.com.codesec.java.rules.structural.TransferFunctionStructuralRule -> cn.com.codesec.et:
    cn.com.codesec.java.taint.TransferFunctionMatch transferFunctionMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.TransferFunctionMatch getTransferFunctionMatch() -> b
    36:37:void setTransferFunctionMatch(cn.com.codesec.java.taint.TransferFunctionMatch) -> a
cn.com.codesec.java.rules.structural.TransferStructuralRule -> cn.com.codesec.eu:
    cn.com.codesec.java.taint.TransferStructuralMatch transferStructuralMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.TransferStructuralMatch getTransferStructuralMatch() -> b
    36:37:void setTransferStructuralMatch(cn.com.codesec.java.taint.TransferStructuralMatch) -> a
cn.com.codesec.java.rules.structural.WriteStructuralRule -> cn.com.codesec.ev:
    cn.com.codesec.java.taint.WriteStructuralMatch writeStructuralMatch -> c
    20:21:void <init>(org.w3c.dom.Element) -> <init>
    29:29:cn.com.codesec.java.taint.WriteStructuralMatch getWriteStructuralMatch() -> b
    36:37:void setWriteStructuralMatch(cn.com.codesec.java.taint.WriteStructuralMatch) -> a
cn.com.codesec.java.stateful.ControlflowRuleBuilder -> cn.com.codesec.ew:
    cn.com.codesec.java.rules.StatefulRule statefulRule -> a
    cn.com.codesec.scan.analyzer.stateful.Machine machine -> b
    java.util.Map patterns -> c
    java.util.Map placeholders -> d
    34:35:void setStatefulRule(cn.com.codesec.java.rules.StatefulRule) -> a
    37:40:void <init>() -> <init>
    java.lang.String getRuleID() -> a
    49:54:cn.com.codesec.scan.analyzer.stateful.Machine createMachine() -> b
    58:61:void machineSpecification() -> c
    66:66:void limit() -> d
    69:73:void declaration() -> e
    78:78:void stateDeclaration() -> f
    83:83:void patternDeclaration() -> g
    88:88:void variableDeclaration() -> h
    93:93:void transition() -> i
    96:97:void addState(java.lang.String,java.lang.String) -> a
    100:101:void addState(java.lang.String) -> a
    104:105:void addState(java.lang.String,boolean,boolean) -> a
    109:110:void addState(java.lang.String,boolean,boolean,java.lang.String) -> a
    117:128:void addState(java.lang.String,boolean,boolean,boolean,java.lang.String) -> a
    132:133:void addPattern(java.lang.String,java.util.List) -> a
    137:137:java.util.List getPattern(java.lang.String) -> b
    142:144:void addLimit(java.lang.String) -> c
    147:150:cn.com.codesec.java.rules.CallIdentifier getCallIdentifier(java.lang.String) -> d
    154:157:cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction atFunction(java.lang.String) -> e
    161:161:boolean getRuleFlag(java.lang.String) -> f
    166:166:cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding ruleVariable(java.lang.String,boolean,boolean) -> b
    171:177:cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding ruleVariable(java.lang.String,boolean,boolean,boolean) -> a
    182:182:cn.com.codesec.scan.analyzer.stateful.RuleVarMeta getVarMeta(java.lang.String) -> g
    186:188:void addTransition(java.lang.String,java.lang.String,java.util.List) -> a
    191:193:void addPlaceholder(java.lang.String) -> h
    196:196:cn.com.codesec.scan.analyzer.stateful.ast.RuleReturn ruleReturn(java.lang.String) -> i
    200:200:cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator ruleDerefOperator(java.lang.String) -> j
    204:204:cn.com.codesec.scan.analyzer.stateful.ast.RuleAnyExpr ruleAnyExpr() -> j
    208:208:cn.com.codesec.scan.analyzer.stateful.ast.RuleEscape ruleEscape(java.lang.String) -> k
    212:213:cn.com.codesec.scan.analyzer.stateful.ast.RuleScopeEnd ruleScopeEnd(java.lang.String) -> l
    218:218:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock ifBlock(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,boolean) -> a
    223:224:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock ifBlock(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType,boolean) -> a
    227:228:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock ifBlock2(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,boolean) -> b
    236:236:cn.com.codesec.scan.analyzer.stateful.ast.RuleParam ruleParam(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding,int) -> a
    241:247:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall mkRuleCall(java.lang.String,java.util.List,boolean) -> a
    252:252:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment assignmentStatement(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> a
    256:256:cn.com.codesec.scan.analyzer.stateful.ast.RuleFunctionEnd ruleFunctionEnd() -> k
cn.com.codesec.java.stateful.ControlflowRuleManager -> cn.com.codesec.ex:
    21:21:void <init>() -> <init>
    24:195:java.util.Map load() -> a
    200:268:java.util.Map controlflowRuleBuilderMap() -> b
cn.com.codesec.java.stateful.impl.CookieNotSentOverSSLAnalyzer -> cn.com.codesec.ey:
    10:10:void <init>() -> <init>
    26:27:void variableDeclaration() -> h
    31:34:void transition() -> i
    38:42:void stateDeclaration() -> f
    45:50:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> m
    63:67:void transition1() -> l
    71:75:void transition2() -> m
    85:97:void transition3() -> n
    101:101:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.FormWithoutAntiForgeryTokenAnalyzer -> cn.com.codesec.ez:
    28:28:void <init>() -> <init>
    31:33:void variableDeclaration() -> h
    36:39:void transition() -> i
    42:46:void stateDeclaration() -> f
    48:51:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> m
    54:57:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> n
    61:68:void transition1() -> l
    71:78:void transition2() -> m
    81:85:void transition3() -> n
    88:88:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.HTTPOnlyNotSetAnalyzer -> cn.com.codesec.eA:
    10:10:void <init>() -> <init>
    26:27:void variableDeclaration() -> h
    31:34:void transition() -> i
    38:42:void stateDeclaration() -> f
    45:50:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> m
    63:67:void transition1() -> l
    71:75:void transition2() -> m
    85:96:void transition3() -> n
    100:100:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.HeapInspectionAnalyzer -> cn.com.codesec.eB:
    35:35:void <init>() -> <init>
    39:41:void variableDeclaration() -> h
    45:49:void transition() -> i
    53:57:void stateDeclaration() -> f
    60:67:void transition1() -> l
    70:90:void transition2() -> m
    93:104:void transition3() -> n
    107:111:void transition4() -> o
    114:119:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String,java.lang.String) -> b
    123:124:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call2(java.lang.String,java.util.List) -> b
    128:131:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> m
    135:135:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.IncorrectCheckFunctionReturnValue -> cn.com.codesec.eC:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral ruleLiteral -> c
    java.util.List exceptRuleLiterals -> d
    19:25:void <init>() -> <init>
    29:35:void stateDeclaration() -> f
    39:40:void variableDeclaration() -> h
    44:49:void transition() -> i
    52:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment assignmentStatement1(java.lang.String,java.lang.String) -> b
    60:63:void transition1() -> l
    69:75:void transition2() -> m
    79:82:void transition3() -> n
    86:92:void transition4() -> o
    96:99:void transition5() -> p
    103:103:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.JavascriptHijackingJSONP -> cn.com.codesec.eD:
    10:10:void <init>() -> <init>
    23:24:void variableDeclaration() -> h
    28:30:void transition() -> i
    34:38:void stateDeclaration() -> f
    41:47:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    51:54:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    57:61:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    64:69:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> p
    74:78:void transition1() -> l
    82:88:void transition2() -> m
    92:92:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.MailTransmissionAnalyzer -> cn.com.codesec.eE:
    22:22:void <init>() -> <init>
    26:27:void variableDeclaration() -> h
    31:34:void transition() -> i
    38:43:void stateDeclaration() -> f
    46:51:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call(java.lang.String) -> m
    56:60:void transition1() -> l
    64:68:void transition2() -> m
    72:76:void transition3() -> n
    80:80:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.MissingCheckagainstNullAnaylzer -> cn.com.codesec.eF:
    39:39:void <init>() -> <init>
    42:44:void variableDeclaration() -> h
    48:54:void transition() -> i
    58:63:void stateDeclaration() -> f
    66:70:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> m
    74:77:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> n
    81:94:void transition1() -> l
    97:102:void transition2() -> m
    105:118:void transition3() -> n
    121:126:void transition4() -> o
    128:135:void transition5() -> p
    137:143:void transition6() -> q
    146:146:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.MissingCheckagainstNullAnaylzer1 -> cn.com.codesec.eG:
    java.lang.String ALLOCATED -> c
    java.lang.String CHECKED -> d
    java.lang.String NULLCHECK -> e
    45:45:void <init>() -> <init>
    51:53:void variableDeclaration() -> h
    57:63:void transition() -> i
    67:72:void stateDeclaration() -> f
    75:79:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> m
    83:86:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> n
    90:103:void transition1() -> l
    106:112:void transition2() -> m
    115:123:void transition3() -> n
    126:131:void transition4() -> o
    133:140:void transition5() -> p
    142:148:void transition6() -> q
    151:151:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.MissingXMLValidationAnalyzer -> cn.com.codesec.eH:
    10:10:void <init>() -> <init>
    29:30:void variableDeclaration() -> h
    34:38:void transition() -> i
    42:47:void stateDeclaration() -> f
    50:53:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    57:61:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    65:69:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    72:77:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> p
    81:85:void transition1() -> l
    89:93:void transition2() -> m
    96:101:void transition3() -> n
    104:109:void transition4() -> o
    113:113:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.MissingXMLValidationAnalyzer1 -> cn.com.codesec.eI:
    10:10:void <init>() -> <init>
    29:31:void variableDeclaration() -> h
    36:40:void transition() -> i
    44:48:void stateDeclaration() -> f
    51:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    59:62:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    66:69:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    73:77:void transition1() -> l
    80:84:void transition2() -> m
    87:92:void transition3() -> n
    95:101:void transition4() -> o
    105:105:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.NullDereferenceAnalyzer -> cn.com.codesec.eJ:
    32:32:void <init>() -> <init>
    36:38:void variableDeclaration() -> h
    43:49:void transition() -> i
    53:59:void stateDeclaration() -> f
    63:70:void transition1() -> l
    72:76:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    79:85:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> n
    88:89:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call4(java.lang.String,java.util.List) -> b
    93:98:void transition2() -> m
    101:106:void transition3() -> n
    109:129:void transition4() -> o
    132:138:void transition5() -> p
    141:144:void transition6() -> q
    147:147:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.PrivacyViolationHeapInspectionAnalyzer -> cn.com.codesec.eK:
    10:10:void <init>() -> <init>
    36:37:void variableDeclaration() -> h
    42:45:void transition() -> i
    49:53:void stateDeclaration() -> f
    56:58:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    62:65:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    70:75:void transition1() -> l
    78:84:void transition2() -> m
    87:91:void transition3() -> n
    94:94:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnReleaseResourceAnalyzer4 -> cn.com.codesec.eL:
    27:27:void <init>() -> <init>
    31:32:void variableDeclaration() -> h
    36:39:void transition() -> i
    43:47:void stateDeclaration() -> f
    51:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    58:59:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call2(java.lang.String,java.util.List) -> b
    64:69:void transition1() -> l
    72:95:void transition2() -> m
    98:102:void transition3() -> n
    105:105:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnReleaseUnmanagedMemory -> cn.com.codesec.eM:
    37:37:void <init>() -> <init>
    41:42:void variableDeclaration() -> h
    47:50:void transition() -> i
    54:58:void stateDeclaration() -> f
    61:63:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    67:70:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    75:80:void transition1() -> l
    83:89:void transition2() -> m
    92:96:void transition3() -> n
    99:99:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseDatabaseAnalyzer1 -> cn.com.codesec.eN:
    10:10:void <init>() -> <init>
    40:42:void variableDeclaration() -> h
    47:52:void transition() -> i
    56:60:void stateDeclaration() -> f
    64:68:void transition1() -> l
    70:74:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    77:78:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call4(java.lang.String,java.util.List) -> b
    82:99:void transition2() -> m
    102:113:void transition3() -> n
    116:120:void transition4() -> o
    123:123:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseDatabaseAnalyzer2 -> cn.com.codesec.eO:
    10:10:void <init>() -> <init>
    40:42:void variableDeclaration() -> h
    47:51:void transition() -> i
    55:59:void stateDeclaration() -> f
    63:67:void transition1() -> l
    69:73:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    76:79:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    82:83:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call4(java.lang.String,java.util.List) -> b
    87:104:void transition2() -> m
    107:118:void transition3() -> n
    121:125:void transition4() -> o
    128:128:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseResourceAnalyzer -> cn.com.codesec.eP:
    10:10:void <init>() -> <init>
    39:41:void variableDeclaration() -> h
    46:51:void transition() -> i
    55:59:void stateDeclaration() -> f
    63:67:void transition1() -> l
    70:74:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    78:79:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call4(java.lang.String,java.util.List) -> b
    83:100:void transition2() -> m
    104:113:void transition3() -> n
    116:120:void transition4() -> o
    123:123:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseResourceAnalyzer2 -> cn.com.codesec.eQ:
    java.lang.String RELEASE -> c
    10:10:void <init>() -> <init>
    82:87:void variableDeclaration() -> h
    92:110:void transition() -> i
    114:121:void stateDeclaration() -> f
    123:127:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    130:134:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call(java.lang.String) -> n
    137:139:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> o
    142:149:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> p
    162:166:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> q
    169:170:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call5(java.lang.String,java.util.List) -> b
    174:179:void transition1() -> l
    182:187:void transition2() -> m
    190:207:void transition3() -> n
    210:214:void transition4() -> o
    217:221:void transition5() -> p
    224:241:void transition6() -> q
    244:248:void transition7() -> r
    251:269:void transition8() -> s
    272:276:void transition9() -> t
    280:297:void transition10() -> u
    300:312:void transition11() -> v
    315:327:void transition12() -> w
    330:335:void transition13() -> x
    338:345:void transition14() -> y
    348:352:void transition131() -> z
    356:360:void transition132() -> A
    364:368:void transition15() -> B
    371:375:void transition16() -> C
    378:378:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseResourceAnalyzer3 -> cn.com.codesec.eR:
    10:10:void <init>() -> <init>
    43:45:void variableDeclaration() -> h
    50:55:void transition() -> i
    59:63:void stateDeclaration() -> f
    67:72:void transition1() -> l
    74:78:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    81:84:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    87:90:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    93:94:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call4(java.lang.String,java.util.List) -> b
    97:100:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call5(java.lang.String,java.lang.String) -> b
    104:125:void transition2() -> m
    128:141:void transition3() -> n
    144:148:void transition4() -> o
    151:151:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleaseStreamsAnalyzer -> cn.com.codesec.eS:
    10:10:void <init>() -> <init>
    121:124:void variableDeclaration() -> h
    128:139:void transition() -> i
    143:149:void stateDeclaration() -> f
    153:179:void transition1() -> l
    182:186:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    189:193:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    196:198:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    201:204:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> p
    207:214:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call5(java.lang.String) -> q
    217:223:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String,java.lang.String) -> b
    227:247:void transition2() -> m
    249:259:void transition21() -> n
    262:284:void transition3() -> o
    287:307:void transition31() -> p
    310:326:void transition4() -> q
    329:343:void transition41() -> r
    346:352:void transition5() -> s
    355:361:void transition51() -> t
    364:368:void transition6() -> u
    371:375:void transition61() -> v
    380:380:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleasedResourceFiles1 -> cn.com.codesec.eT:
    16:16:void <init>() -> <init>
    20:24:void stateDeclaration() -> f
    28:29:void variableDeclaration() -> h
    33:36:void transition() -> i
    40:44:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    47:51:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    55:59:void transition1() -> l
    63:72:void transition2() -> m
    76:80:void transition3() -> n
    84:84:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleasedResourceSynchronization -> cn.com.codesec.eU:
    10:10:void <init>() -> <init>
    29:31:void variableDeclaration() -> h
    35:38:void transition() -> i
    42:46:void stateDeclaration() -> f
    50:54:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    57:61:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    65:71:void transition1() -> l
    75:82:void transition2() -> m
    86:90:void transition3() -> n
    94:94:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleasedResourceUnmanagedObjectAnalyzer -> cn.com.codesec.eV:
    10:10:void <init>() -> <init>
    31:32:void variableDeclaration() -> h
    37:40:void transition() -> i
    44:48:void stateDeclaration() -> f
    51:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    59:62:void transition1() -> l
    65:72:void transition2() -> m
    75:78:void transition3() -> n
    82:82:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleasedResourceUnmanagedObjectAnalyzer1 -> cn.com.codesec.eW:
    10:10:void <init>() -> <init>
    29:30:void variableDeclaration() -> h
    35:38:void transition() -> i
    42:46:void stateDeclaration() -> f
    49:53:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    57:61:void transition1() -> l
    64:72:void transition2() -> m
    75:79:void transition3() -> n
    82:82:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UnreleasedResourceUnmanagedObjectAnalyzer2 -> cn.com.codesec.eX:
    10:10:void <init>() -> <init>
    29:30:void variableDeclaration() -> h
    35:38:void transition() -> i
    42:46:void stateDeclaration() -> f
    49:53:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    57:61:void transition1() -> l
    64:72:void transition2() -> m
    75:79:void transition3() -> n
    82:82:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.UseOfImpersonationAnalyzer -> cn.com.codesec.eY:
    29:29:void <init>() -> <init>
    33:34:void variableDeclaration() -> h
    38:42:void transition() -> i
    46:51:void stateDeclaration() -> f
    53:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call0(java.lang.String) -> m
    59:63:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> n
    66:67:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment call2(java.lang.String,java.util.List) -> b
    70:74:void transition1() -> l
    76:82:void transition2() -> m
    84:87:void transition3() -> n
    89:93:void transition4() -> o
    96:96:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.XMLEntityExpansionInjectionAnalyzer -> cn.com.codesec.eZ:
    10:10:void <init>() -> <init>
    32:33:void variableDeclaration() -> h
    37:42:void transition() -> i
    46:51:void stateDeclaration() -> f
    54:57:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    60:64:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> n
    67:71:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call6(java.lang.String) -> o
    74:79:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call7(java.lang.String) -> p
    82:86:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> q
    90:94:void transition1() -> l
    98:103:void transition2() -> m
    106:110:void transition3() -> n
    113:117:void transition4() -> o
    120:125:void transition5() -> p
    128:128:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.XMLExternalEntityInjectionAnalyzer -> cn.com.codesec.fa:
    10:10:void <init>() -> <init>
    31:32:void variableDeclaration() -> h
    37:40:void transition() -> i
    44:49:void stateDeclaration() -> f
    52:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    59:63:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    66:68:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    72:76:void transition1() -> l
    79:83:void transition2() -> m
    86:90:void transition3() -> n
    93:93:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.XMLExternalEntityInjectionAnalyzer1 -> cn.com.codesec.fb:
    java.lang.String INITDOCUMENT -> c
    java.lang.String UNSAFE -> d
    java.lang.String SETXMLRESOLVER -> e
    java.lang.String DISABLEDTDPROCESSING1 -> f
    10:10:void <init>() -> <init>
    51:53:void variableDeclaration() -> h
    57:64:void transition() -> i
    68:74:void stateDeclaration() -> f
    77:81:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    86:90:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    93:97:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> o
    101:104:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> p
    107:111:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call5(java.lang.String) -> q
    114:116:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call6(java.lang.String) -> r
    120:124:void transition1() -> l
    128:132:void transition2() -> m
    135:140:void transition3() -> n
    143:147:void transition4() -> o
    150:154:void transition5() -> p
    156:160:void transition6() -> q
    163:167:void transition10() -> r
    170:170:java.lang.String getRuleID() -> a
cn.com.codesec.java.stateful.impl.XMLExternalEntityInjectionAnalyzer2 -> cn.com.codesec.fc:
    10:10:void <init>() -> <init>
    30:31:void variableDeclaration() -> h
    35:40:void transition() -> i
    44:49:void stateDeclaration() -> f
    52:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call1(java.lang.String) -> m
    59:63:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call2(java.lang.String) -> n
    66:70:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call5(java.lang.String) -> o
    73:77:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call3(java.lang.String) -> p
    80:84:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call6(java.lang.String) -> q
    87:92:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call7(java.lang.String) -> r
    95:99:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall call4(java.lang.String) -> s
    103:107:void transition1() -> l
    110:115:void transition2() -> m
    118:122:void transition3() -> n
    125:129:void transition4() -> o
    132:137:void transition5() -> p
    140:140:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.DynamicDataSet -> cn.com.codesec.fd:
    void dynamicData(cn.com.codesec.java.rules.script.Program) -> a
cn.com.codesec.java.structural.IRNodeAndTemp -> cn.com.codesec.fe:
    cn.com.codesec.scan.ir.nodes.IRNode node -> a
    cn.com.codesec.scan.ir.nodes.IRVarAccess tempVar -> b
    15:19:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRVarAccess) -> <init>
    25:25:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> a
    32:32:cn.com.codesec.scan.ir.nodes.IRNode getTempVar() -> b
cn.com.codesec.java.structural.StringMatch -> cn.com.codesec.ff:
    13:13:void <init>() -> <init>
    64:66:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> a
cn.com.codesec.java.structural.StringMatch$MyIRVisitorAdapter -> cn.com.codesec.fg:
    java.lang.String regex -> a
    java.util.List nodeList -> b
    17:21:void <init>(java.lang.String) -> <init>
    24:24:java.util.List getNodeList() -> a
    29:35:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    41:47:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    53:59:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
cn.com.codesec.java.structural.StructuralCommon -> cn.com.codesec.fh:
    java.util.regex.Pattern modelAndViewPattern -> a
    90:90:void <clinit>() -> <clinit>
    89:89:void <init>() -> <init>
    93:101:cn.com.codesec.scan.metadata.TypeMeta getTypeMetaByIRFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    105:107:cn.com.codesec.scan.ir.nodes.IRExpression getSynchronizedObject(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    112:125:boolean isIREqual(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    131:135:boolean isConstructor(cn.com.codesec.scan.metadata.FunMeta) -> b
    145:150:boolean namedParameterlistContains(java.util.List,cn.com.codesec.java.structural.StructuralCommon$NamedParameterMatch) -> a
    154:170:boolean isAllConstantIndexInArray(cn.com.codesec.scan.ir.nodes.IRArrayAccess) -> a
    192:211:java.util.List getNamedParameterlist(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    215:220:boolean isInSynchronizedBlock(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    224:230:cn.com.codesec.scan.ir.nodes.IRBlock getEnclosinSynchronizedBlock(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    234:242:cn.com.codesec.scan.ir.nodes.IRWhileStmt getNSTWhileStmt(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    250:252:boolean reaches(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.structural.StructuralCommon$FunMetaMatcher) -> a
    256:271:boolean reaches(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.structural.StructuralCommon$FunMetaMatcher,java.util.Set) -> a
    275:277:boolean reachedBy(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.structural.StructuralCommon$FunMetaMatcher) -> b
    281:296:boolean reachedBy(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.structural.StructuralCommon$FunMetaMatcher,java.util.Set) -> b
    299:300:cn.com.codesec.scan.ir.nodes.IRExpression getExpression(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    304:305:cn.com.codesec.java.structural.IRNodeAndTemp getTaintExpression(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> b
    309:320:cn.com.codesec.java.structural.IRNodeAndTemp inlineTemporary(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    325:333:cn.com.codesec.scan.ir.nodes.IRExpression getNSTExpression(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    337:337:java.util.Collection getFields(cn.com.codesec.scan.metadata.TypeMeta) -> a
    341:346:boolean constantValueEquals(cn.com.codesec.scan.analyzer.constants.ConstantValue,java.lang.String) -> a
    351:358:boolean constantValueMatches(cn.com.codesec.scan.analyzer.constants.ConstantValue,java.util.regex.Pattern) -> a
    362:362:cn.com.codesec.java.rules.label.LabelSet getLabelSet(cn.com.codesec.scan.meta.Symbol) -> a
    366:366:cn.com.codesec.java.rules.label.LabelSet getLabelSet(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.SKYRule) -> a
    370:370:cn.com.codesec.java.rules.label.LabelSet getLabelSet(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> a
    373:394:boolean isDubboRemoteServiceInLocal(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.TypeMeta) -> a
    397:402:cn.com.codesec.scan.ir.nodes.IRVarDecl getCatchBlockExceptionVarDecl(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
    406:406:cn.com.codesec.scan.model.ParameterLocation getParameterLocation(cn.com.codesec.java.taint.Slot) -> a
    410:422:java.util.List getUses(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    426:441:java.util.List getReads(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    455:476:java.util.List getRealChildNodeList(cn.com.codesec.scan.ir.nodes.IRNode) -> c
    480:520:boolean isRealNode(cn.com.codesec.scan.ir.nodes.IRNode) -> d
    525:550:boolean isRealNode(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    554:554:boolean isFakeLocal(java.lang.String) -> f
    558:558:boolean isFakeLabel(java.lang.String) -> g
    562:570:boolean exceptionTypesContains(cn.com.codesec.scan.metadata.Type[],java.lang.String) -> a
    574:582:boolean parameterTypesContains(java.util.List,java.lang.String) -> a
    586:589:cn.com.codesec.java.taint.Slot getReturnSlot(cn.com.codesec.scan.metadata.FunMeta) -> c
    593:596:cn.com.codesec.java.taint.Slot getThisSlot(cn.com.codesec.scan.metadata.FunMeta) -> d
    600:610:java.util.List getParameterSlots(cn.com.codesec.scan.metadata.FunMeta) -> e
    614:625:java.util.List getParameterTypes(cn.com.codesec.scan.metadata.FunMeta) -> f
    628:642:java.util.List getParameterNames(cn.com.codesec.scan.metadata.FunMeta) -> g
    645:658:java.util.List getRealArglist(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    662:674:java.util.List getTaintRealArglist(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    678:683:cn.com.codesec.scan.ir.nodes.IRExpression getFunCallInstance(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    688:691:cn.com.codesec.java.structural.IRNodeAndTemp getTaintFunCallInstance(cn.com.codesec.scan.ir.nodes.IRFunCall) -> e
    695:701:java.lang.String getTypeMetaName(cn.com.codesec.scan.metadata.TypeMeta,boolean) -> a
    706:706:java.lang.String getTypeMetaName(cn.com.codesec.scan.metadata.TypeMeta) -> b
    710:721:java.lang.String getTypeName(cn.com.codesec.scan.metadata.Type,boolean) -> a
    725:725:java.lang.String getTypeName(cn.com.codesec.scan.metadata.Type) -> a
    729:741:java.util.List partialConstantValues(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    745:760:java.util.List partialStringConstantValues(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    764:783:boolean isAdd(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    787:801:cn.com.codesec.scan.ir.nodes.IRExpression clear(cn.com.codesec.scan.ir.nodes.IRExpression,boolean) -> a
    805:805:boolean isSkipDeref(cn.com.codesec.scan.ir.nodes.IRNode) -> f
    809:819:boolean superTypeMetasContains(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    823:829:boolean superTypeMetasContainsPutSingletonClassNamesHere(cn.com.codesec.scan.metadata.TypeMeta,java.util.List) -> a
    833:842:boolean directSuperTypeMetasContains(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> b
    846:855:boolean superTypeMetasMatches(cn.com.codesec.scan.metadata.TypeMeta,java.util.regex.Pattern) -> a
    858:859:boolean varDeclAnnotationsMatches(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.util.regex.Pattern) -> a
    862:863:boolean varDeclAnnotationsContains(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.String) -> a
    866:881:java.util.List getRealParams(cn.com.codesec.scan.metadata.FunMeta) -> h
    885:886:boolean fieldMetaAnnotationsMatches(cn.com.codesec.scan.metadata.FieldMeta,java.util.regex.Pattern) -> a
    890:891:boolean funMetaAnnotationsMatches(cn.com.codesec.scan.metadata.FunMeta,java.util.regex.Pattern) -> a
    895:896:boolean typeMetaAnnotationsMatches(cn.com.codesec.scan.metadata.TypeMeta,java.util.regex.Pattern) -> b
    900:906:boolean typeMetaFieldMetaAnnotationsMatches(cn.com.codesec.scan.metadata.TypeMeta,java.util.regex.Pattern) -> c
    910:925:boolean annotationsMatches(java.util.Set,java.util.regex.Pattern) -> a
    929:941:boolean annotationsEqual(cn.com.codesec.scan.metadata.annotations.Annotation,java.lang.String) -> a
    945:946:boolean fieldMetaAnnotationsContains(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
    950:951:boolean funMetaAnnotationsContains(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    955:957:boolean typeMetaAnnotationsContains(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> c
    961:969:java.lang.String getFilename(cn.com.codesec.scan.meta.Symbol) -> b
    973:988:boolean annotationsContains(java.util.Set,java.lang.String) -> a
    992:1014:cn.com.codesec.parse.ir.SourceInfo getAnnotationSourceInfoByTypeName(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> b
    1018:1022:cn.com.codesec.scan.metadata.FunMeta getEnclosingFunction(cn.com.codesec.scan.ir.nodes.IRNode) -> e
    1026:1027:cn.com.codesec.scan.model.AccessPath getFieldAccessAccessPath(java.lang.String) -> a
    1036:1040:java.lang.String[] getClassNameAndFunctionName(java.lang.String) -> b
    1044:1048:cn.com.codesec.scan.metadata.TypeMeta getFieldTypeMeta(cn.com.codesec.scan.metadata.FieldMeta) -> a
    1052:1055:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta(cn.com.codesec.scan.metadata.Type) -> b
    1093:1100:java.util.List getSuperWithLevel(cn.com.codesec.scan.metadata.TypeMeta,int) -> a
    1111:1122:java.lang.String getFunctionSignature(cn.com.codesec.scan.metadata.FunMeta) -> a
    1133:1151:java.util.Collection getMemberFunctions(cn.com.codesec.scan.metadata.TypeMeta) -> c
    1155:1164:boolean containChinese(java.lang.String) -> c
    1168:1177:boolean isChinese(char) -> a
    1181:1191:cn.com.codesec.scan.metadata.annotations.Annotation getAnnotation(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> d
    1195:1205:cn.com.codesec.scan.metadata.annotations.Annotation getAnnotation(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> b
    1209:1219:cn.com.codesec.scan.metadata.annotations.Annotation getAnnotation(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> b
    1229:1236:boolean enclosingTypeIsDeprecated(cn.com.codesec.scan.metadata.TypeMeta) -> d
    1246:1258:boolean superTypeIsDeprecated(cn.com.codesec.scan.metadata.TypeMeta) -> e
    1263:1334:boolean isSpringXSSContentType(cn.com.codesec.scan.metadata.FunMeta) -> i
    1338:1381:boolean isSpringFunctionWithReturnString(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> c
    1386:1425:boolean isSpringFunctionAnnotation(cn.com.codesec.scan.metadata.annotations.Annotation) -> a
    1429:1468:boolean isSimpleFormControllerSetFormViewFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> f
    1471:1535:boolean isModelAndViewSetView(cn.com.codesec.scan.ir.nodes.IRFunCall) -> g
    1539:1601:boolean isJstlOrInternalResourceViewConstructor(cn.com.codesec.scan.ir.nodes.IRFunCall) -> h
    1605:1644:boolean isSimpleFormControllerSetSuccessViewFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> i
    1648:1696:boolean isModelAndViewSetFormViewFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> j
    1700:1763:boolean isAbstractUrlBasedViewSetUrlFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> k
    1778:1801:boolean isXSSContentType(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    1814:1825:boolean isSafeXSSContentType(java.lang.String) -> d
    1830:1830:cn.com.codesec.scan.metadata.FunMeta findBeanGetter(java.lang.String,cn.com.codesec.scan.metadata.TypeMeta) -> a
    1834:1858:cn.com.codesec.scan.metadata.FunMeta findBeanGetter(java.lang.String,cn.com.codesec.scan.metadata.TypeMeta,boolean) -> a
    1861:1861:cn.com.codesec.scan.metadata.FunMeta findBeanSetter(java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.TypeMeta) -> a
    1864:1914:cn.com.codesec.scan.metadata.FunMeta findBeanSetter(java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.TypeMeta,boolean) -> a
    1918:1927:java.lang.String decapitalize(java.lang.String) -> e
    1930:1930:boolean isGetOrIsFunctionInBean(cn.com.codesec.scan.metadata.FunMeta) -> j
    1934:1977:boolean isGetOrIsFunctionInBean(cn.com.codesec.scan.metadata.FunMeta,boolean) -> a
    1981:2045:boolean hasSetFunctionByFiledName(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> c
    2049:2059:boolean isStruts2ActionFunction(cn.com.codesec.scan.metadata.FunMeta) -> k
    2063:2105:boolean checkSpringFunctionAnnotation(cn.com.codesec.scan.metadata.annotations.Annotation) -> b
    2108:2118:java.util.Set getStringConstants(cn.com.codesec.scan.ir.nodes.IRExpression) -> e
    1113:1113:java.lang.String lambda$0(cn.com.codesec.scan.metadata.Type) -> c
    1151:1151:cn.com.codesec.scan.metadata.FunMeta lambda$1(cn.com.codesec.java.structural.StructuralCommon$MetaLevel) -> a
    1842:1842:boolean lambda$2(cn.com.codesec.scan.metadata.FunMeta) -> l
    1877:1889:boolean lambda$3(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.StructuralCommon$1 -> cn.com.codesec.fi:
    cn.com.codesec.scan.metadata.TypeMeta val$beanClass -> a
    1:1843:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    1846:1852:int compare(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.java.structural.StructuralCommon$2 -> cn.com.codesec.fj:
    cn.com.codesec.scan.metadata.Type val$propType -> a
    cn.com.codesec.scan.metadata.TypeMeta val$beanClass -> b
    1:1891:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    1894:1908:int compare(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.java.structural.StructuralCommon$FunMetaMatcher -> cn.com.codesec.fk:
    boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.StructuralCommon$MetaLevel -> cn.com.codesec.fl:
    java.lang.Object meta -> b
    int level -> c
    cn.com.codesec.java.structural.StructuralCommon this$0 -> a
    1062:1065:void <init>(cn.com.codesec.java.structural.StructuralCommon,java.lang.Object,int) -> <init>
    1068:1068:java.lang.Object getMeta() -> a
    1072:1073:void setMeta(java.lang.Object) -> a
    1076:1076:int getLevel() -> b
    1080:1081:void setLevel(int) -> a
cn.com.codesec.java.structural.StructuralCommon$NamedParameter -> cn.com.codesec.fm:
    java.lang.String name -> a
    cn.com.codesec.scan.ir.nodes.IRLocation expression -> b
    173:176:void <init>(java.lang.String,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    179:179:java.lang.String getName() -> a
    183:183:cn.com.codesec.scan.ir.nodes.IRLocation getExpression() -> b
cn.com.codesec.java.structural.StructuralCommon$NamedParameterMatch -> cn.com.codesec.fn:
    boolean match(cn.com.codesec.java.structural.StructuralCommon$NamedParameter) -> a
cn.com.codesec.java.structural.StructuralMatch -> cn.com.codesec.fo:
    21:21:void <init>() -> <init>
    java.lang.String getRuleID() -> a
    26:26:java.util.List matchBodySymbol(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    30:30:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    34:34:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    38:38:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    42:42:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.StructuralRuleManager -> cn.com.codesec.fp:
    21:21:void <init>() -> <init>
    24:229:java.util.Map structuralMatchMap() -> a
cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer -> cn.com.codesec.fq:
    25:25:void <init>() -> <init>
    72:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    79:79:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.fr:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer this$0 -> a
    32:37:void <init>(cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer) -> <init>
    34:34:java.util.List getFunCalls() -> a
    41:43:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    47:67:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    32:32:void <init>(cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer,cn.com.codesec.java.structural.impl.AnonymousLDAPBindAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer -> cn.com.codesec.fs:
    java.util.regex.Pattern PATTERN_CLASS -> a
    32:32:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    73:75:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    79:79:java.lang.String getRuleID() -> a
    32:32:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.ft:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer this$0 -> a
    33:38:void <init>(cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer) -> <init>
    35:35:java.util.List getFunCalls() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    48:68:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    33:33:void <init>(cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer,cn.com.codesec.java.structural.impl.AnonymousMessageClientAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer -> cn.com.codesec.fu:
    java.util.regex.Pattern PATTERN_CLASS -> a
    java.util.regex.Pattern PATTERN_ENUM_TYPE -> b
    35:36:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    77:79:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    83:83:java.lang.String getRuleID() -> a
    35:35:java.util.regex.Pattern access$0() -> b
    36:36:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.fv:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer this$0 -> a
    37:42:void <init>(cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer) -> <init>
    39:39:java.util.List getFunCalls() -> a
    46:48:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    52:72:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    37:37:void <init>(cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer,cn.com.codesec.java.structural.impl.AnonymousTransportClientAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.AssertingPermissionsAnalyzer_R1 -> cn.com.codesec.fw:
    21:21:void <init>() -> <init>
    32:54:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    59:59:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.AssertingPermissionsAnalyzer_R2 -> cn.com.codesec.fx:
    22:22:void <init>() -> <init>
    34:56:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    61:61:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CallToGCCollectAnalyzer -> cn.com.codesec.fy:
    13:13:void <init>() -> <init>
    42:44:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    49:49:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CallToGCCollectAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.fz:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.CallToGCCollectAnalyzer this$0 -> a
    15:17:void <init>(cn.com.codesec.java.structural.impl.CallToGCCollectAnalyzer) -> <init>
    20:20:java.util.List getFunDeclList() -> a
    25:36:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.CatchesNullReferenceExceptionAnalyzer -> cn.com.codesec.fA:
    13:13:void <init>() -> <init>
    47:49:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    54:54:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CatchesNullReferenceExceptionAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.fB:
    java.util.List blockList -> b
    cn.com.codesec.java.structural.impl.CatchesNullReferenceExceptionAnalyzer this$0 -> a
    15:17:void <init>(cn.com.codesec.java.structural.impl.CatchesNullReferenceExceptionAnalyzer) -> <init>
    20:20:java.util.List getBlockList() -> a
    25:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ClassImplementsICloneableAnalyzer -> cn.com.codesec.fC:
    java.util.regex.Pattern pattern -> a
    8:10:void <init>() -> <init>
    14:22:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    27:27:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ClassNameConventionsAnalyzer -> cn.com.codesec.fD:
    java.util.regex.Pattern typePattern -> a
    java.util.regex.Pattern baseTypePattern -> b
    13:15:void <init>() -> <init>
    18:21:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    26:26:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CognitiveComplexityAnalyzer -> cn.com.codesec.fE:
    int threshold -> a
    15:16:void <init>() -> <init>
    55:62:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    67:67:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CognitiveComplexityAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.fF:
    int controlFlow -> b
    cn.com.codesec.java.structural.impl.CognitiveComplexityAnalyzer this$0 -> a
    17:22:void <init>(cn.com.codesec.java.structural.impl.CognitiveComplexityAnalyzer) -> <init>
    19:19:int getControlFlow() -> a
    26:28:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    33:35:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    47:49:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R1 -> cn.com.codesec.fG:
    java.util.regex.Pattern pattern -> a
    java.util.regex.Pattern pattern2 -> b
    76:79:void <init>() -> <init>
    82:99:boolean isRightType(cn.com.codesec.scan.metadata.FunMeta) -> l
    104:131:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    135:135:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2 -> cn.com.codesec.fH:
    28:28:void <init>() -> <init>
    166:206:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    210:239:boolean matchParamType(cn.com.codesec.scan.metadata.FunMeta,java.util.List) -> a
    244:246:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    251:251:java.lang.String getRuleID() -> a
    201:201:boolean lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    211:211:boolean lambda$1(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    212:213:boolean lambda$2(cn.com.codesec.scan.metadata.annotations.Annotation) -> c
    220:220:boolean lambda$4(cn.com.codesec.scan.metadata.FunMeta) -> m
    213:213:boolean lambda$3(java.util.Map$Entry) -> a
cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2$1 -> cn.com.codesec.fI:
    cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2 this$0 -> a
    1:223:void <init>(cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2) -> <init>
    226:235:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.fJ:
    java.util.List returnStmts -> b
    cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2 this$0 -> a
    116:121:void <init>(cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2) -> <init>
    118:118:java.util.List getReturnStmts() -> a
    125:127:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    130:140:void visitReturnStmt(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2$MyNSTVisitorAdapter2 -> cn.com.codesec.fK:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2 this$0 -> a
    143:148:void <init>(cn.com.codesec.java.structural.impl.ControllerActionNotRestrictedPOSTAnalyzer_R2) -> <init>
    145:145:java.util.List getFunCalls() -> a
    152:154:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    157:163:void visitFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R1 -> cn.com.codesec.fL:
    java.util.regex.Pattern pattern -> a
    java.util.regex.Pattern pattern2 -> b
    43:46:void <init>() -> <init>
    49:73:boolean isRightType(cn.com.codesec.scan.metadata.FunMeta) -> l
    78:106:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    110:110:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2 -> cn.com.codesec.fM:
    89:89:void <init>() -> <init>
    141:166:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    170:198:boolean matchParamType(cn.com.codesec.scan.metadata.FunMeta,java.util.List) -> a
    203:205:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    210:210:java.lang.String getRuleID() -> a
    171:171:boolean lambda$0(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    172:173:boolean lambda$1(cn.com.codesec.scan.metadata.annotations.Annotation) -> c
    179:179:boolean lambda$3(cn.com.codesec.scan.metadata.FunMeta) -> m
    173:173:boolean lambda$2(java.util.Map$Entry) -> a
cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2$1 -> cn.com.codesec.fN:
    cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2 this$0 -> a
    1:182:void <init>(cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2) -> <init>
    185:194:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.fO:
    java.util.List returnStmts -> b
    cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2 this$0 -> a
    91:96:void <init>(cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2) -> <init>
    93:93:java.util.List getReturnStmts() -> a
    100:102:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    105:115:void visitReturnStmt(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2$MyNSTVisitorAdapter2 -> cn.com.codesec.fP:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2 this$0 -> a
    118:123:void <init>(cn.com.codesec.java.structural.impl.ControllerActionWithoutAntiForgeryValidationAnalyzer_R2) -> <init>
    120:120:java.util.List getFunCalls() -> a
    127:129:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    132:138:void visitFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.CrossSiteRequestForgeryAnalyzer -> cn.com.codesec.fQ:
    13:13:void <init>() -> <init>
    17:25:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    29:29:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R1 -> cn.com.codesec.fR:
    15:15:void <init>() -> <init>
    53:55:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    60:60:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.fS:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R1 this$0 -> a
    23:28:void <init>(cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R1) -> <init>
    25:25:java.util.List getFunCalls() -> a
    32:34:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    38:48:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R2 -> cn.com.codesec.fT:
    java.util.regex.Pattern PATTERN_VALUE1 -> a
    java.util.regex.Pattern PATTERN_VALUE2 -> b
    25:26:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    62:64:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    68:68:java.lang.String getRuleID() -> a
    25:25:java.util.regex.Pattern access$0() -> b
    26:26:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.fU:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R2 this$0 -> a
    27:32:void <init>(cn.com.codesec.java.structural.impl.CrossSiteScriptingProtectionAnalyzer_R2) -> <init>
    29:29:java.util.List getFunCalls() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    42:57:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1 -> cn.com.codesec.fV:
    15:15:void <init>() -> <init>
    58:60:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    64:64:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.fW:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1 this$0 -> a
    25:30:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1) -> <init>
    27:27:java.util.List getFunCalls() -> a
    34:36:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    40:53:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    25:25:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1,cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2 -> cn.com.codesec.fX:
    java.util.regex.Pattern PATTERN_FUNCNAME -> a
    28:28:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    98:100:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    104:104:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.fY:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2 this$0 -> a
    29:34:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2) -> <init>
    31:31:java.util.List getFunCalls() -> a
    38:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    44:60:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    29:29:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2,cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2$MyNSTVisitorAdapter2 -> cn.com.codesec.fZ:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2 this$0 -> a
    63:68:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2) -> <init>
    65:65:java.util.List getFunCalls() -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    78:93:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    63:63:void <init>(cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2,cn.com.codesec.java.structural.impl.CrossSiteWebSocketHijackingAnalyzer_R2$MyNSTVisitorAdapter2) -> <init>
cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R1 -> cn.com.codesec.ga:
    13:13:void <init>() -> <init>
    20:23:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    28:28:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2 -> cn.com.codesec.gb:
    25:25:void <init>() -> <init>
    71:73:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    78:78:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gc:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2 this$0 -> a
    32:34:void <init>(cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2) -> <init>
    37:37:java.util.List getNodeList() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    48:67:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    32:32:void <init>(cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2,cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.DenialOfServiceAnalyzer_R3 -> cn.com.codesec.gd:
    13:13:void <init>() -> <init>
    21:23:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    28:28:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyCatchBlockAnalyzer -> cn.com.codesec.ge:
    13:13:void <init>() -> <init>
    56:58:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    63:63:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyCatchBlockAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.gf:
    java.util.List blockList -> b
    cn.com.codesec.java.structural.impl.EmptyCatchBlockAnalyzer this$0 -> a
    18:20:void <init>(cn.com.codesec.java.structural.impl.EmptyCatchBlockAnalyzer) -> <init>
    23:23:java.util.List getBlockList() -> a
    27:42:boolean match(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    47:51:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer -> cn.com.codesec.gg:
    17:17:void <init>() -> <init>
    61:63:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    67:67:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.gh:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer this$0 -> a
    24:29:void <init>(cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer) -> <init>
    26:26:java.util.List getFunCalls() -> a
    33:35:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    39:56:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    24:24:void <init>(cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer,cn.com.codesec.java.structural.impl.EmptyHMACKeyAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1 -> cn.com.codesec.gi:
    18:18:void <init>() -> <init>
    64:66:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    70:70:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gj:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1 this$0 -> a
    27:32:void <init>(cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1) -> <init>
    29:29:java.util.List getFunCalls() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    42:59:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    27:27:void <init>(cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1,cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2 -> cn.com.codesec.gk:
    18:18:void <init>() -> <init>
    64:66:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    70:70:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gl:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2 this$0 -> a
    27:32:void <init>(cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2) -> <init>
    29:29:java.util.List getFunCalls() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    42:59:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    27:27:void <init>(cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2,cn.com.codesec.java.structural.impl.EmptyPBEPasswordAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R1 -> cn.com.codesec.gm:
    42:42:void <init>() -> <init>
    127:129:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    133:133:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gn:
    java.util.regex.Pattern pattern -> b
    java.util.regex.Pattern pattern3 -> c
    java.util.regex.Pattern pattern4 -> d
    java.util.regex.Pattern pattern5 -> e
    java.util.List blockList -> f
    cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R1 this$0 -> a
    44:49:void <init>(cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R1) -> <init>
    51:51:java.util.List getBlockList() -> a
    56:81:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    84:108:boolean Judge(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    113:122:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R2 -> cn.com.codesec.go:
    java.util.regex.Pattern PATTERN_PWD -> a
    java.util.regex.Pattern PATTERN_PWD2 -> b
    27:28:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    67:72:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    77:77:java.lang.String getRuleID() -> a
    27:27:java.util.regex.Pattern access$0() -> b
    28:28:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gp:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R2 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R2) -> <init>
    33:33:java.util.List getNodeList() -> a
    38:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    44:61:void matchFieldAccess(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3 -> cn.com.codesec.gq:
    java.util.regex.Pattern PATTERN_PWD -> a
    74:74:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    123:125:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    129:129:java.lang.String getRuleID() -> a
    74:74:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.gr:
    java.util.List irNodeList -> b
    cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3 this$0 -> a
    75:80:void <init>(cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3) -> <init>
    77:77:java.util.List getIrNodeList() -> a
    84:86:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    90:99:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    102:117:boolean matchArg(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    75:75:void <init>(cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3,cn.com.codesec.java.structural.impl.EmptyPasswordAnalyzer_R3$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1 -> cn.com.codesec.gs:
    22:22:void <init>() -> <init>
    74:76:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    81:81:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gt:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1 this$0 -> a
    31:36:void <init>(cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1) -> <init>
    33:33:java.util.List getIrVarDecls() -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    46:69:void visitVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    31:31:void <init>(cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1,cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2 -> cn.com.codesec.gu:
    java.util.regex.Pattern PATTERN_TYPE -> a
    39:39:void <clinit>() -> <clinit>
    23:23:void <init>() -> <init>
    83:85:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    89:89:java.lang.String getRuleID() -> a
    39:39:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gv:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2 this$0 -> a
    40:45:void <init>(cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2) -> <init>
    42:42:java.util.List getIrVarDecls() -> a
    49:51:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    54:78:void visitVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    40:40:void <init>(cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2,cn.com.codesec.java.structural.impl.FileUploadAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.FormFieldWithoutValidator -> cn.com.codesec.gw:
    java.util.Map data -> a
    16:76:void <init>() -> <init>
    66:68:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    73:73:java.lang.String getRuleID() -> a
    82:82:void dynamicData(cn.com.codesec.java.rules.script.Program) -> a
    76:76:java.util.Map access$0(cn.com.codesec.java.structural.impl.FormFieldWithoutValidator) -> a
cn.com.codesec.java.structural.impl.FormFieldWithoutValidator$MyNSTVisitorAdapter -> cn.com.codesec.gx:
    java.util.List fieldAccessList -> b
    cn.com.codesec.java.structural.impl.FormFieldWithoutValidator this$0 -> a
    18:20:void <init>(cn.com.codesec.java.structural.impl.FormFieldWithoutValidator) -> <init>
    23:23:java.util.List getFieldAccessList() -> a
    27:50:boolean match(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    55:59:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer -> cn.com.codesec.gy:
    16:16:void <init>() -> <init>
    62:64:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    68:68:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.gz:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer this$0 -> a
    27:32:void <init>(cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer) -> <init>
    29:29:java.util.List getFunCallList() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    41:57:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    27:27:void <init>(cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer,cn.com.codesec.java.structural.impl.HardcodedHMACKeyAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1 -> cn.com.codesec.gA:
    16:16:void <init>() -> <init>
    60:62:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    67:67:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gB:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1 this$0 -> a
    25:30:void <init>(cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1) -> <init>
    27:27:java.util.List getFunCallList() -> a
    34:36:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    39:55:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    25:25:void <init>(cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1,cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2 -> cn.com.codesec.gC:
    16:16:void <init>() -> <init>
    60:62:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    66:66:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gD:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2 this$0 -> a
    25:30:void <init>(cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2) -> <init>
    27:27:java.util.List getFunCallList() -> a
    34:36:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    39:55:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    25:25:void <init>(cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2,cn.com.codesec.java.structural.impl.HardcodedPBEPasswordAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R1 -> cn.com.codesec.gE:
    20:20:void <init>() -> <init>
    89:91:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gF:
    java.util.List blockList -> b
    cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R1 this$0 -> a
    22:24:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R1) -> <init>
    27:27:java.util.List getBlockList() -> a
    31:69:boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    74:81:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2 -> cn.com.codesec.gG:
    java.util.regex.Pattern PATTERN_PWD -> a
    22:22:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    62:67:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    72:72:java.lang.String getRuleID() -> a
    22:22:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gH:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2 this$0 -> a
    23:25:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2) -> <init>
    27:27:java.util.List getNodeList() -> a
    32:34:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    38:56:void matchFieldAccess(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    23:23:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2,cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R3 -> cn.com.codesec.gI:
    46:46:void <init>() -> <init>
    150:152:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    157:157:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.gJ:
    java.util.regex.Pattern pattern -> b
    java.util.regex.Pattern pattern2 -> c
    java.util.regex.Pattern pattern3 -> d
    java.util.regex.Pattern pattern4 -> e
    java.util.regex.Pattern pattern5 -> f
    java.util.List blockList -> g
    cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R3 this$0 -> a
    48:54:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R3) -> <init>
    56:56:java.util.List getBlockList() -> a
    61:64:boolean IsNullConstant(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    68:93:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    96:129:boolean Judge(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    134:136:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    140:146:void visitAssignStmt(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R4 -> cn.com.codesec.gK:
    51:51:void <init>() -> <init>
    154:156:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    161:161:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R4$MyNSTVisitorAdapter -> cn.com.codesec.gL:
    java.util.regex.Pattern pattern -> b
    java.util.regex.Pattern pattern3 -> c
    java.util.regex.Pattern pattern4 -> d
    java.util.regex.Pattern pattern5 -> e
    java.util.List blockList -> f
    cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R4 this$0 -> a
    53:58:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R4) -> <init>
    60:60:java.util.List getBlockList() -> a
    65:68:boolean IsNullConstant(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    72:97:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    100:133:boolean Judge(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    138:140:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    144:150:void visitAssignStmt(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5 -> cn.com.codesec.gM:
    java.util.regex.Pattern PATTERN_PWD -> a
    86:86:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    135:137:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    141:141:java.lang.String getRuleID() -> a
    86:86:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5$MyNSTVisitorAdapter -> cn.com.codesec.gN:
    java.util.List irNodeList -> b
    cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5 this$0 -> a
    87:92:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5) -> <init>
    89:89:java.util.List getIrNodeList() -> a
    96:98:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    102:111:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    114:129:boolean matchArg(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    87:87:void <init>(cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5,cn.com.codesec.java.structural.impl.HardcodedPasswordAnalyzer_R5$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.ImageAnalyzer -> cn.com.codesec.gO:
    25:25:void <init>() -> <init>
    71:73:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    77:77:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ImageAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.gP:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.ImageAnalyzer this$0 -> a
    32:34:void <init>(cn.com.codesec.java.structural.impl.ImageAnalyzer) -> <init>
    37:37:java.util.List getNodeList() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    48:67:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    32:32:void <init>(cn.com.codesec.java.structural.impl.ImageAnalyzer,cn.com.codesec.java.structural.impl.ImageAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1 -> cn.com.codesec.gQ:
    21:21:void <init>() -> <init>
    54:56:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    61:61:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.gR:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1 this$0 -> a
    26:28:void <init>(cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1) -> <init>
    31:31:java.util.List getNodeList() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    42:50:void matchFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    26:26:void <init>(cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1,cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2 -> cn.com.codesec.gS:
    24:24:void <init>() -> <init>
    75:77:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    82:82:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.gT:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2 this$0 -> a
    33:38:void <init>(cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2) -> <init>
    35:35:java.util.List getFunCalls() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    48:70:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    33:33:void <init>(cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2,cn.com.codesec.java.structural.impl.InadequateRSAPaddingAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
    67:67:boolean lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer -> cn.com.codesec.gU:
    21:21:void <init>() -> <init>
    123:125:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    130:130:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.gV:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer this$0 -> a
    53:58:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer) -> <init>
    55:55:java.util.List getIrVarDecls() -> a
    62:64:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    68:101:void match(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    104:115:boolean matchCommandClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    84:84:boolean lambda$0(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.String) -> a
    109:111:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    111:111:boolean lambda$2(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer2 -> cn.com.codesec.gW:
    5:5:void <init>() -> <init>
    51:51:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3 -> cn.com.codesec.gX:
    java.util.regex.Pattern PATTERN_NAME -> a
    java.util.regex.Pattern PATTERN_CLASS -> b
    java.util.regex.Pattern PATTERN_ATTRIBUTE -> c
    37:39:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    113:115:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    119:119:java.lang.String getRuleID() -> a
    37:37:java.util.regex.Pattern access$0() -> b
    38:38:java.util.regex.Pattern access$1() -> c
    39:39:java.util.regex.Pattern access$2() -> d
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3$MyNSTVisitorAdapter -> cn.com.codesec.gY:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3 this$0 -> a
    40:45:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3) -> <init>
    42:42:java.util.List getFunCalls() -> a
    49:51:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    55:71:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    74:84:boolean matchParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    88:107:boolean matchFirstParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    40:40:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3,cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer3$MyNSTVisitorAdapter) -> <init>
    101:103:boolean lambda$0(cn.com.codesec.scan.metadata.FieldMeta) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer4 -> cn.com.codesec.gZ:
    22:22:void <init>() -> <init>
    123:125:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    130:130:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer4$MyNSTVisitorAdapter -> cn.com.codesec.ha:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer4 this$0 -> a
    46:47:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer4) -> <init>
    50:50:java.util.List getIrVarDecls() -> a
    54:96:void match(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    99:111:boolean matchCommandClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    116:118:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    100:100:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> b
    106:107:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    107:107:boolean lambda$2(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5 -> cn.com.codesec.hb:
    java.util.regex.Pattern PATTERN_NAME -> a
    35:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    116:118:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    122:122:java.lang.String getRuleID() -> a
    35:35:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5$MyNSTVisitorAdapter -> cn.com.codesec.hc:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5 this$0 -> a
    36:41:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5) -> <init>
    38:38:java.util.List getFunCalls() -> a
    45:47:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    51:64:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    67:80:boolean matchParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    84:94:boolean matchFirstParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    98:110:boolean matchCommandClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    36:36:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5,cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer5$MyNSTVisitorAdapter) -> <init>
    99:99:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> b
    105:106:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    106:106:boolean lambda$2(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6 -> cn.com.codesec.hd:
    18:18:void <init>() -> <init>
    116:118:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    122:122:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6$MyNSTVisitorAdapter -> cn.com.codesec.he:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6 this$0 -> a
    36:41:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6) -> <init>
    38:38:java.util.List getFunCalls() -> a
    45:47:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    51:64:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    67:80:boolean matchParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    84:94:boolean matchFirstParam(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    98:110:boolean matchCommandClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    36:36:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6,cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer6$MyNSTVisitorAdapter) -> <init>
    99:99:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> b
    105:106:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    106:106:boolean lambda$2(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7 -> cn.com.codesec.hf:
    22:22:void <init>() -> <init>
    107:109:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    113:113:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7$MyNSTVisitorAdapter -> cn.com.codesec.hg:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7 this$0 -> a
    44:49:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7) -> <init>
    46:46:java.util.List getIrVarDecls() -> a
    53:55:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    59:87:void match(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    90:102:boolean matchCommandClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    44:44:void <init>(cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7,cn.com.codesec.java.structural.impl.InsecureBinderConfigurationAnalyzer7$MyNSTVisitorAdapter) -> <init>
    91:91:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> b
    97:98:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    98:98:boolean lambda$2(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> a
cn.com.codesec.java.structural.impl.InsecureModeofOperationAnalyzer -> cn.com.codesec.hh:
    18:18:void <init>() -> <init>
    72:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    79:79:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.InsecureModeofOperationAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hi:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.structural.impl.InsecureModeofOperationAnalyzer this$0 -> a
    24:25:void <init>(cn.com.codesec.java.structural.impl.InsecureModeofOperationAnalyzer) -> <init>
    28:28:java.util.List getIrFunCalls() -> a
    32:33:void setIrFunCalls(java.util.List) -> a
    37:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    43:67:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R1 -> cn.com.codesec.hj:
    28:28:void <init>() -> <init>
    86:88:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    93:93:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.hk:
    java.util.List returnStmtsList -> b
    cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R1 this$0 -> a
    30:32:void <init>(cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R1) -> <init>
    35:35:java.util.List getFunDeclList() -> a
    40:80:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R2 -> cn.com.codesec.hl:
    20:20:void <init>() -> <init>
    48:50:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    55:55:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.hm:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R2 this$0 -> a
    22:24:void <init>(cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R2) -> <init>
    27:27:java.util.List getFunDeclList() -> a
    32:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R3 -> cn.com.codesec.hn:
    java.util.regex.Pattern ATTRIBUTE -> a
    31:31:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    68:70:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    75:75:java.lang.String getRuleID() -> a
    31:31:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.ho:
    java.util.List returnStmts -> b
    cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R3 this$0 -> a
    32:33:void <init>(cn.com.codesec.java.structural.impl.JavaScriptHijackingAnalyzer_R3) -> <init>
    35:35:java.util.List getReturnStmts() -> a
    38:54:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    59:62:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.JustOneDefinedAnalyzer -> cn.com.codesec.hp:
    15:15:void <init>() -> <init>
    49:51:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    54:81:boolean isMatch(cn.com.codesec.scan.metadata.FunMeta) -> l
    85:85:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.JustOneDefinedAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hq:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.JustOneDefinedAnalyzer this$0 -> a
    24:26:void <init>(cn.com.codesec.java.structural.impl.JustOneDefinedAnalyzer) -> <init>
    29:29:java.util.List getFunDeclList() -> a
    35:43:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.LeftoverDebugCodeAnalyzer -> cn.com.codesec.hr:
    18:18:void <init>() -> <init>
    25:42:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    46:46:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R1 -> cn.com.codesec.hs:
    21:21:void <init>() -> <init>
    59:68:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    72:72:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.ht:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R1 this$0 -> a
    23:25:void <init>(cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R1) -> <init>
    28:28:java.util.List getFunDeclList() -> a
    33:53:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2 -> cn.com.codesec.hu:
    18:18:void <init>() -> <init>
    52:54:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    58:58:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.hv:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2 this$0 -> a
    20:22:void <init>(cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2) -> <init>
    25:25:java.util.List getFunDeclList() -> a
    30:32:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    36:47:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    20:20:void <init>(cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2,cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3 -> cn.com.codesec.hw:
    18:18:void <init>() -> <init>
    50:52:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    56:56:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.hx:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3 this$0 -> a
    20:22:void <init>(cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3) -> <init>
    25:25:java.util.List getFunDeclList() -> a
    30:32:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    36:45:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    20:20:void <init>(cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3,cn.com.codesec.java.structural.impl.MIMESniffingAnalyzer_R3$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.MissingSerializableAttributeAnalyzer -> cn.com.codesec.hy:
    java.util.regex.Pattern DELEGATE -> a
    8:9:void <init>() -> <init>
    13:20:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    24:24:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MisspelledMethodNameAnalyzer -> cn.com.codesec.hz:
    java.util.regex.Pattern PATTERN -> a
    31:31:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    55:57:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    60:114:boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> d
    119:119:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.MisspelledMethodNameAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hA:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.MisspelledMethodNameAnalyzer this$0 -> a
    33:35:void <init>(cn.com.codesec.java.structural.impl.MisspelledMethodNameAnalyzer) -> <init>
    38:38:java.util.List getFunDeclList() -> a
    45:49:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R1 -> cn.com.codesec.hB:
    61:61:void <init>() -> <init>
    205:207:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    211:211:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.hC:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R1 this$0 -> a
    63:65:void <init>(cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R1) -> <init>
    67:67:java.util.List getFunDeclList() -> a
    71:97:java.lang.Boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    101:140:java.lang.Boolean isMatch2(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    144:161:java.lang.Boolean isMatch3(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    164:189:java.lang.Boolean isMatch4(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    193:200:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R2 -> cn.com.codesec.hD:
    60:60:void <init>() -> <init>
    192:194:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    198:198:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.hE:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R2 this$0 -> a
    62:64:void <init>(cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R2) -> <init>
    66:66:java.util.List getFunDeclList() -> a
    69:89:java.lang.Boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    93:131:java.lang.Boolean isMatch2(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    135:148:java.lang.Boolean isMatch3(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    151:172:java.lang.Boolean isMatch4(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> d
    176:187:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R3 -> cn.com.codesec.hF:
    24:24:void <init>() -> <init>
    206:208:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    212:212:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.hG:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R3 this$0 -> a
    72:74:void <init>(cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R3) -> <init>
    76:76:java.util.List getFunDeclList() -> a
    79:100:java.lang.Boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    104:146:java.lang.Boolean isMatch2(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    150:162:java.lang.Boolean isMatch3(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    165:186:java.lang.Boolean isMatch4(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> d
    190:201:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R4 -> cn.com.codesec.hH:
    66:66:void <init>() -> <init>
    205:207:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    211:211:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R4$MyNSTVisitorAdapter -> cn.com.codesec.hI:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R4 this$0 -> a
    68:70:void <init>(cn.com.codesec.java.structural.impl.ModelOptionalRequiredPropertiesAnalyzer_R4) -> <init>
    72:72:java.util.List getFunDeclList() -> a
    76:95:java.lang.Boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    99:140:java.lang.Boolean isMatch2(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    144:161:java.lang.Boolean isMatch3(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    164:189:java.lang.Boolean isMatch4(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    193:200:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ModelWithRequiredNonNullablePropertyAnalyzer -> cn.com.codesec.hJ:
    20:20:void <init>() -> <init>
    72:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    78:78:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ModelWithRequiredNonNullablePropertyAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hK:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.ModelWithRequiredNonNullablePropertyAnalyzer this$0 -> a
    29:31:void <init>(cn.com.codesec.java.structural.impl.ModelWithRequiredNonNullablePropertyAnalyzer) -> <init>
    33:33:java.util.List getFunDeclList() -> a
    37:67:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.NonSerializableObjectStoredInSessionAnalyzer -> cn.com.codesec.hL:
    13:13:void <init>() -> <init>
    68:70:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    75:75:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.NonSerializableObjectStoredInSessionAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hM:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.NonSerializableObjectStoredInSessionAnalyzer this$0 -> a
    25:27:void <init>(cn.com.codesec.java.structural.impl.NonSerializableObjectStoredInSessionAnalyzer) -> <init>
    29:29:java.util.List getFunDeclList() -> a
    33:62:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.NotImplementEqualsAnalyzer -> cn.com.codesec.hN:
    java.util.regex.Pattern TYPE_NAME -> a
    java.util.regex.Pattern LAMBDA_NAME -> b
    19:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    96:98:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    102:102:java.lang.String getRuleID() -> a
    20:20:java.util.regex.Pattern access$0() -> b
    19:19:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.NotImplementEqualsAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hO:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.NotImplementEqualsAnalyzer this$0 -> a
    39:45:void <init>(cn.com.codesec.java.structural.impl.NotImplementEqualsAnalyzer) -> <init>
    42:42:java.util.List getFunCallList() -> a
    48:81:boolean isMatch(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    86:90:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    69:69:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.impl.NullArgumentAnalyzer -> cn.com.codesec.hP:
    22:22:void <init>() -> <init>
    62:64:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    68:68:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.NullArgumentAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.hQ:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.NullArgumentAnalyzer this$0 -> a
    24:25:void <init>(cn.com.codesec.java.structural.impl.NullArgumentAnalyzer) -> <init>
    28:28:java.util.List getFunDeclList() -> a
    33:57:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R1 -> cn.com.codesec.hR:
    47:47:void <init>() -> <init>
    137:139:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    144:144:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.hS:
    java.util.regex.Pattern pattern -> b
    java.util.regex.Pattern pattern3 -> c
    java.util.regex.Pattern pattern4 -> d
    java.util.regex.Pattern pattern5 -> e
    java.util.List blockList -> f
    cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R1 this$0 -> a
    49:54:void <init>(cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R1) -> <init>
    56:56:java.util.List getBlockList() -> a
    61:87:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    90:115:boolean Judge(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    120:122:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    126:132:void match(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R2 -> cn.com.codesec.hT:
    java.util.regex.Pattern PATTERN_PWD -> a
    java.util.regex.Pattern PATTERN_PWD2 -> b
    27:28:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    67:72:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    77:77:java.lang.String getRuleID() -> a
    27:27:java.util.regex.Pattern access$0() -> b
    28:28:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.hU:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R2 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R2) -> <init>
    33:33:java.util.List getNodeList() -> a
    38:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    44:61:void matchFieldAccess(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R3 -> cn.com.codesec.hV:
    22:22:void <init>() -> <init>
    142:144:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    150:150:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.hW:
    java.util.regex.Pattern pattern -> b
    java.util.regex.Pattern pattern3 -> c
    java.util.regex.Pattern pattern4 -> d
    java.util.regex.Pattern pattern5 -> e
    java.util.List blockList -> f
    cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R3 this$0 -> a
    54:59:void <init>(cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R3) -> <init>
    61:61:java.util.List getBlockList() -> a
    66:92:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    95:120:boolean Judge(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    125:127:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    131:137:void match(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4 -> cn.com.codesec.hX:
    java.util.regex.Pattern PATTERN_PWD -> a
    78:78:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    127:129:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    133:133:java.lang.String getRuleID() -> a
    78:78:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4$MyNSTVisitorAdapter -> cn.com.codesec.hY:
    java.util.List irNodeList -> b
    cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4 this$0 -> a
    79:84:void <init>(cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4) -> <init>
    81:81:java.util.List getIrNodeList() -> a
    88:90:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    94:103:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    106:121:boolean matchArg(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    79:79:void <init>(cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4,cn.com.codesec.java.structural.impl.NullPasswordAnalyzer_R4$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.Obsolete1 -> cn.com.codesec.hZ:
    19:19:void <init>() -> <init>
    66:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    78:78:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.Obsolete1$MyNSTVisitorAdapter -> cn.com.codesec.ia:
    java.util.List varDeclList -> b
    cn.com.codesec.java.structural.impl.Obsolete1 this$0 -> a
    21:23:void <init>(cn.com.codesec.java.structural.impl.Obsolete1) -> <init>
    26:26:java.util.List getVarDeclList() -> a
    30:48:boolean isObsolete(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    54:59:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.Obsolete2 -> cn.com.codesec.ib:
    10:10:void <init>() -> <init>
    14:34:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    40:40:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.Obsolete3 -> cn.com.codesec.ic:
    20:20:void <init>() -> <init>
    78:86:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    92:92:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.Obsolete3$MyNSTVisitorAdapter -> cn.com.codesec.id:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.Obsolete3 this$0 -> a
    22:24:void <init>(cn.com.codesec.java.structural.impl.Obsolete3) -> <init>
    27:27:java.util.List getFunDeclList() -> a
    31:40:boolean isObsolete(cn.com.codesec.scan.metadata.Type) -> a
    45:71:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.Obsolete4 -> cn.com.codesec.ie:
    20:20:void <init>() -> <init>
    72:80:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    86:86:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.Obsolete4$MyNSTVisitorAdapter -> cn.com.codesec.if:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.Obsolete4 this$0 -> a
    22:24:void <init>(cn.com.codesec.java.structural.impl.Obsolete4) -> <init>
    27:27:java.util.List getFunCallList() -> a
    32:56:boolean isObsolete(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    61:65:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.Obsolete5 -> cn.com.codesec.ig:
    23:23:void <init>() -> <init>
    127:135:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    140:140:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.Obsolete5$MyNSTVisitorAdapter -> cn.com.codesec.ih:
    java.util.List fieldAccessList -> b
    cn.com.codesec.java.structural.impl.Obsolete5 this$0 -> a
    25:27:void <init>(cn.com.codesec.java.structural.impl.Obsolete5) -> <init>
    30:30:java.util.List getFieldAccessList() -> a
    34:111:boolean isObsolete(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    116:120:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.Obsolete6 -> cn.com.codesec.ii:
    13:13:void <init>() -> <init>
    17:25:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    30:30:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.OftenMisusedEncodingAnalyzer -> cn.com.codesec.ij:
    java.util.regex.Pattern PATTERN_FUNCTION -> a
    java.util.regex.Pattern PATTERN_TYPE -> b
    11:12:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    20:26:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    31:31:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer -> cn.com.codesec.ik:
    15:15:void <init>() -> <init>
    55:57:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    62:62:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.il:
    java.util.List varDeclList -> b
    cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer this$0 -> a
    22:23:void <init>(cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer) -> <init>
    26:26:java.util.List getVarDeclList() -> a
    30:32:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    36:50:void matchIRVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    22:22:void <init>(cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer,cn.com.codesec.java.structural.impl.OftenMisusedFileUploadAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.OptionalSubmodelRequiredPropertyAnalyzer -> cn.com.codesec.im:
    18:18:void <init>() -> <init>
    89:91:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    96:96:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.OptionalSubmodelRequiredPropertyAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.in:
    java.util.regex.Pattern pattern -> b
    java.util.List funDeclList -> c
    cn.com.codesec.java.structural.impl.OptionalSubmodelRequiredPropertyAnalyzer this$0 -> a
    40:42:void <init>(cn.com.codesec.java.structural.impl.OptionalSubmodelRequiredPropertyAnalyzer) -> <init>
    45:45:java.util.List getFunDeclList() -> a
    50:83:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.OverlyBroadCatchAnalyzer -> cn.com.codesec.io:
    28:28:void <init>() -> <init>
    121:123:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    128:128:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.OverlyBroadCatchAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.ip:
    java.util.List blockList -> b
    cn.com.codesec.java.structural.impl.OverlyBroadCatchAnalyzer this$0 -> a
    30:32:void <init>(cn.com.codesec.java.structural.impl.OverlyBroadCatchAnalyzer) -> <init>
    35:35:java.util.List getBlockList() -> a
    40:115:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.PersistentCookieAnalyzer -> cn.com.codesec.iq:
    20:20:void <init>() -> <init>
    60:62:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    66:66:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.PersistentCookieAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.ir:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.PersistentCookieAnalyzer this$0 -> a
    22:23:void <init>(cn.com.codesec.java.structural.impl.PersistentCookieAnalyzer) -> <init>
    26:26:java.util.List getFunDeclList() -> a
    31:54:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.PredictableSaltAnalyzer -> cn.com.codesec.is:
    java.util.regex.Pattern PATTERN_CLASS -> a
    26:26:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    72:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    79:79:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.PredictableSaltAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.it:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.structural.impl.PredictableSaltAnalyzer this$0 -> a
    27:28:void <init>(cn.com.codesec.java.structural.impl.PredictableSaltAnalyzer) -> <init>
    31:31:java.util.List getIrFunCalls() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    42:59:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    62:67:boolean compareIRExpression(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.java.structural.impl.PrivacyViolationAnalyzer -> cn.com.codesec.iu:
    16:16:void <init>() -> <init>
    63:65:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    71:71:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.PrivacyViolationAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.iv:
    java.util.regex.Pattern pattern -> b
    java.util.List varDeclList -> c
    cn.com.codesec.java.structural.impl.PrivacyViolationAnalyzer this$0 -> a
    18:20:void <init>(cn.com.codesec.java.structural.impl.PrivacyViolationAnalyzer) -> <init>
    23:23:java.util.List getVarDeclList() -> a
    27:49:boolean isMath(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    53:57:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer -> cn.com.codesec.iw:
    21:21:void <init>() -> <init>
    25:42:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    69:69:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.ix:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer this$0 -> a
    45:50:void <init>(cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer) -> <init>
    47:47:java.util.List getIrFieldAccessList() -> a
    53:55:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    59:64:void matchIRFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.metadata.FieldMeta) -> a
    45:45:void <init>(cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer,cn.com.codesec.java.structural.impl.PublicAccessFieldAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1 -> cn.com.codesec.iy:
    java.util.regex.Pattern RETURN_TYPE -> a
    30:30:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    79:81:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    86:86:java.lang.String getRuleID() -> a
    30:30:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.iz:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1 this$0 -> a
    31:36:void <init>(cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1) -> <init>
    33:33:java.util.List getIrFieldAccessList() -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    46:74:void matchIRFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    31:31:void <init>(cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1,cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2 -> cn.com.codesec.iA:
    18:18:void <init>() -> <init>
    75:77:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    81:81:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.iB:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2 this$0 -> a
    30:35:void <init>(cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2) -> <init>
    32:32:java.util.List getIrFieldAccessList() -> a
    39:41:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    45:70:void matchIRFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    30:30:void <init>(cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2,cn.com.codesec.java.structural.impl.ReadonlyCollectionReferenceAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R1 -> cn.com.codesec.iC:
    java.util.regex.Pattern PATTERN_TYPE -> a
    28:28:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    65:67:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    71:71:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.iD:
    java.util.List varDeclList -> b
    cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R1 this$0 -> a
    29:30:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R1) -> <init>
    32:32:java.util.List getVarDeclList() -> a
    36:38:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    42:61:void matchIRVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2 -> cn.com.codesec.iE:
    java.util.regex.Pattern PATTERN_TYPE -> a
    23:23:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    60:62:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    66:66:java.lang.String getRuleID() -> a
    23:23:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.iF:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2 this$0 -> a
    24:25:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2) -> <init>
    27:27:java.util.List getIrFunCalls() -> a
    31:49:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    53:55:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    24:24:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2,cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3 -> cn.com.codesec.iG:
    java.util.regex.Pattern PATTERN_TYPE -> a
    29:29:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    67:69:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    73:73:java.lang.String getRuleID() -> a
    29:29:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.iH:
    java.util.List varDeclList -> b
    cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3 this$0 -> a
    30:32:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3) -> <init>
    34:34:java.util.List getVarDeclList() -> a
    38:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    44:63:void matchIRVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    30:30:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3,cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R3$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4 -> cn.com.codesec.iI:
    java.util.regex.Pattern PATTERN_TYPE -> a
    25:25:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    62:64:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    68:68:java.lang.String getRuleID() -> a
    25:25:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4$MyNSTVisitorAdapter -> cn.com.codesec.iJ:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4 this$0 -> a
    26:27:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4) -> <init>
    29:29:java.util.List getIrFunCalls() -> a
    33:51:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    55:57:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    26:26:void <init>(cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4,cn.com.codesec.java.structural.impl.RequestParametersBoundPersistedObjectsAnalyzer_R4$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R1 -> cn.com.codesec.iK:
    22:22:void <init>() -> <init>
    72:74:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    79:79:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R1$MyNSTVisitorAdapter -> cn.com.codesec.iL:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.RequestValidationDisabled_R1 this$0 -> a
    23:25:void <init>(cn.com.codesec.java.structural.impl.RequestValidationDisabled_R1) -> <init>
    27:27:java.util.List getFunCallList() -> a
    31:57:boolean checkFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    63:67:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R2 -> cn.com.codesec.iM:
    14:14:void <init>() -> <init>
    19:22:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    27:27:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R3 -> cn.com.codesec.iN:
    20:20:void <init>() -> <init>
    25:38:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    43:43:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R4 -> cn.com.codesec.iO:
    21:21:void <init>() -> <init>
    87:90:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    95:95:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R4$MyNSTVisitorAdapter -> cn.com.codesec.iP:
    java.util.List irNodes -> b
    java.util.List irReturnStmts -> c
    cn.com.codesec.java.structural.impl.RequestValidationDisabled_R4 this$0 -> a
    40:52:void <init>(cn.com.codesec.java.structural.impl.RequestValidationDisabled_R4) -> <init>
    43:43:java.util.List getIrNodes() -> a
    49:49:java.util.List getIrReturnStmts() -> b
    56:59:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    63:82:void matchReturnStmt(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.structural.impl.RequestValidationDisabled_R5 -> cn.com.codesec.iQ:
    20:20:void <init>() -> <init>
    33:53:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    58:58:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RoamingDataAccessAnalyzer -> cn.com.codesec.iR:
    14:14:void <init>() -> <init>
    41:43:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    48:48:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.RoamingDataAccessAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.iS:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.RoamingDataAccessAnalyzer this$0 -> a
    18:20:void <init>(cn.com.codesec.java.structural.impl.RoamingDataAccessAnalyzer) -> <init>
    23:23:java.util.List getFunDeclList() -> a
    28:35:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer -> cn.com.codesec.iT:
    java.util.regex.Pattern PATTERN_CLASS -> a
    java.util.regex.Pattern PATTERN_TYPE -> b
    33:34:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    75:77:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    82:82:java.lang.String getRuleID() -> a
    33:33:java.util.regex.Pattern access$0() -> b
    34:34:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.iU:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer this$0 -> a
    35:37:void <init>(cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer) -> <init>
    40:40:java.util.List getNodeList() -> a
    45:47:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    51:70:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    35:35:void <init>(cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer,cn.com.codesec.java.structural.impl.SecurityNotEnabledAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.SensitiveFieldExposureAnalyzer -> cn.com.codesec.iV:
    7:7:void <init>() -> <init>
    21:28:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    33:33:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.SerializableDelegateAnalyzer_R1 -> cn.com.codesec.iW:
    java.util.regex.Pattern PATTERN_DELEGATE -> a
    40:40:void <clinit>() -> <clinit>
    12:12:void <init>() -> <init>
    43:60:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    65:65:java.lang.String getRuleID() -> a
    49:49:boolean lambda$0(cn.com.codesec.scan.metadata.FieldMeta,java.lang.String) -> c
    53:53:boolean lambda$1(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> e
cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer -> cn.com.codesec.iX:
    13:13:void <init>() -> <init>
    103:105:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    110:110:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.iY:
    java.util.List irFunCallList -> b
    cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer this$0 -> a
    26:31:void <init>(cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer) -> <init>
    28:28:java.util.List getIrFunCallList() -> a
    35:37:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    40:68:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    26:26:void <init>(cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer,cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer$MyNSTVisitorAdapter2 -> cn.com.codesec.iZ:
    java.util.List returnStmts -> b
    java.util.List returnFalseStmt -> c
    cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer this$0 -> a
    71:82:void <init>(cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer) -> <init>
    73:73:java.util.List getReturnStmts() -> a
    79:79:java.util.List getReturnFalseStmt() -> b
    86:88:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    91:98:void matchIRReturnStmt(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    71:71:void <init>(cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer,cn.com.codesec.java.structural.impl.ServerIdentityVerificationDisabledAnalyzer$MyNSTVisitorAdapter2) -> <init>
cn.com.codesec.java.structural.impl.ShoulderSurfingAnalyzer -> cn.com.codesec.ja:
    java.util.regex.Pattern PWD_PATTERN -> a
    java.util.regex.Pattern TYPE_PATTERN -> b
    52:53:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    57:93:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    97:107:boolean matchField(cn.com.codesec.scan.metadata.TypeMeta) -> g
    111:111:java.lang.String getRuleID() -> a
    86:86:boolean lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> h
cn.com.codesec.java.structural.impl.SignalRExposedJavaScriptProxyAnalyzer -> cn.com.codesec.jb:
    java.util.regex.Pattern PATTERN_CLASS -> a
    java.util.regex.Pattern PATTERN_NAME -> b
    25:26:void <clinit>() -> <clinit>
    13:13:void <init>() -> <init>
    81:83:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    88:88:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.SignalRExposedJavaScriptProxyAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jc:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.SignalRExposedJavaScriptProxyAnalyzer this$0 -> a
    28:33:void <init>(cn.com.codesec.java.structural.impl.SignalRExposedJavaScriptProxyAnalyzer) -> <init>
    30:30:java.util.List getFunCalls() -> a
    37:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    43:76:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.StringConcatenationInLoop -> cn.com.codesec.jd:
    32:32:void <init>() -> <init>
    95:123:boolean hasThisArg(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    127:129:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    134:134:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.StringConcatenationInLoop$MyNSTVisitorAdapter -> cn.com.codesec.je:
    java.util.List locationList -> b
    cn.com.codesec.java.structural.impl.StringConcatenationInLoop this$0 -> a
    34:36:void <init>(cn.com.codesec.java.structural.impl.StringConcatenationInLoop) -> <init>
    39:39:java.util.List getLocationList() -> a
    43:84:void match(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    88:90:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.StringUseEqualCompareNull -> cn.com.codesec.jf:
    20:20:void <init>() -> <init>
    65:67:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    72:72:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.StringUseEqualCompareNull$MyNSTVisitorAdapter -> cn.com.codesec.jg:
    java.util.List binaryOpExpList -> b
    cn.com.codesec.java.structural.impl.StringUseEqualCompareNull this$0 -> a
    22:24:void <init>(cn.com.codesec.java.structural.impl.StringUseEqualCompareNull) -> <init>
    27:27:java.util.List getBinaryOpExpList() -> a
    31:53:void match(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp) -> a
    57:59:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.ToStringOnArrayAnalyzer -> cn.com.codesec.jh:
    16:16:void <init>() -> <init>
    67:69:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    74:74:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.ToStringOnArrayAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.ji:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.ToStringOnArrayAnalyzer this$0 -> a
    27:29:void <init>(cn.com.codesec.java.structural.impl.ToStringOnArrayAnalyzer) -> <init>
    32:32:java.util.List getFunDeclList() -> a
    37:61:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer -> cn.com.codesec.jj:
    java.util.regex.Pattern PATTERN_CLASS -> a
    java.util.regex.Pattern PATTERN_TYPE -> b
    33:34:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    74:76:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    80:80:java.lang.String getRuleID() -> a
    33:33:java.util.regex.Pattern access$0() -> b
    34:34:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jk:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer this$0 -> a
    35:37:void <init>(cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer) -> <init>
    40:40:java.util.List getNodeList() -> a
    45:47:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    51:70:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    35:35:void <init>(cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer,cn.com.codesec.java.structural.impl.TransportSecurityEnabledAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.UnCorrectImplIDisposableAnalyzer -> cn.com.codesec.jl:
    22:22:void <init>() -> <init>
    55:73:boolean matchTypeMeta(cn.com.codesec.scan.metadata.TypeMeta) -> f
    79:79:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UnCorrectImplIDisposableAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jm:
    java.util.List funCalls -> a
    cn.com.codesec.java.structural.impl.UnCorrectImplIDisposableAnalyzer this$0 -> b
    24:25:void <init>(cn.com.codesec.java.structural.impl.UnCorrectImplIDisposableAnalyzer) -> <init>
    28:28:java.util.List getFunCalls() -> a
    33:35:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    39:50:void matchNode(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer -> cn.com.codesec.jn:
    25:25:void <init>() -> <init>
    71:73:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    77:77:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jo:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer this$0 -> a
    32:37:void <init>(cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer) -> <init>
    34:34:java.util.List getFunCalls() -> a
    41:43:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    47:66:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    32:32:void <init>(cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer,cn.com.codesec.java.structural.impl.UnauthorizedAccessAnalyzer$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.UninitializedVariableAnalyzer -> cn.com.codesec.jp:
    15:15:void <init>() -> <init>
    128:130:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    135:135:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UninitializedVariableAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jq:
    java.util.List irFieldAccessList -> b
    java.util.List excludeFieldAccessList -> c
    cn.com.codesec.java.structural.impl.UninitializedVariableAnalyzer this$0 -> a
    43:54:void <init>(cn.com.codesec.java.structural.impl.UninitializedVariableAnalyzer) -> <init>
    45:45:java.util.List getIrFieldAccessList() -> a
    51:51:java.util.List getExcludeFieldAccessList() -> b
    58:62:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    66:95:void matchNode(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    99:103:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    107:123:void matchAssignNode(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    90:90:boolean lambda$0(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer -> cn.com.codesec.jr:
    83:83:void <init>() -> <init>
    186:222:boolean isMatch(cn.com.codesec.scan.metadata.FunMeta) -> l
    225:233:boolean JudgeParameter(java.util.List,java.util.List) -> a
    236:244:boolean JudgeException(cn.com.codesec.scan.metadata.Type[],cn.com.codesec.scan.metadata.Type[]) -> a
    248:281:boolean isObsolete(cn.com.codesec.scan.metadata.FieldMeta) -> c
    286:298:boolean CheckFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> d
    303:317:boolean CheckLocalFunction(cn.com.codesec.util.fset.FList,cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer$myFunMetaMatcher) -> a
    322:322:boolean matchFieldMeta(cn.com.codesec.scan.metadata.FieldMeta) -> b
    327:327:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.js:
    java.util.List fieldAccessList -> b
    java.util.List funCalls -> c
    java.util.List expressions -> d
    cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer this$0 -> a
    85:96:void <init>(cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer) -> <init>
    88:88:java.util.List getFieldAccessList() -> a
    93:93:java.util.List getFunCalls() -> b
    98:98:java.util.List getExpressions() -> c
    103:112:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    117:143:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    148:169:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer$myFunMetaMatcher -> cn.com.codesec.jt:
    cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer this$0 -> a
    173:173:void <init>(cn.com.codesec.java.structural.impl.UnusedFieldAnalyzer) -> <init>
    176:178:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer -> cn.com.codesec.ju:
    21:21:void <init>() -> <init>
    66:106:boolean isMatch(cn.com.codesec.scan.metadata.FunMeta) -> l
    109:117:boolean JudgeParameter(java.util.List,java.util.List) -> a
    120:128:boolean JudgeException(cn.com.codesec.scan.metadata.Type[],cn.com.codesec.scan.metadata.Type[]) -> a
    245:248:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    252:252:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jv:
    java.util.List funDeclList -> b
    cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer this$0 -> a
    130:132:void <init>(cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer) -> <init>
    134:134:java.util.List getFunDeclList() -> a
    138:163:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    166:192:boolean Judge3(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    196:230:boolean Judge(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    235:239:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer$myFunMetaMatcher -> cn.com.codesec.jw:
    cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer this$0 -> a
    55:55:void <init>(cn.com.codesec.java.structural.impl.UnusedMethodAnalyzer) -> <init>
    58:62:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.structural.impl.UnvalidatedWebAPIModelAnalyzer -> cn.com.codesec.jx:
    48:48:void <init>() -> <init>
    128:130:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    135:135:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UnvalidatedWebAPIModelAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jy:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.UnvalidatedWebAPIModelAnalyzer this$0 -> a
    50:52:void <init>(cn.com.codesec.java.structural.impl.UnvalidatedWebAPIModelAnalyzer) -> <init>
    55:55:java.util.List getFunDeclList() -> a
    58:68:boolean Judge(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    71:97:boolean Judge2(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    100:109:boolean Judge3(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    113:122:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.UseSystemOutputAnalyzer -> cn.com.codesec.jz:
    15:15:void <init>() -> <init>
    51:53:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    58:58:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.UseSystemOutputAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jA:
    java.util.List funCallList -> b
    cn.com.codesec.java.structural.impl.UseSystemOutputAnalyzer this$0 -> a
    21:23:void <init>(cn.com.codesec.java.structural.impl.UseSystemOutputAnalyzer) -> <init>
    26:26:java.util.List getFunDeclList() -> a
    31:45:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1 -> cn.com.codesec.jB:
    17:17:void <init>() -> <init>
    70:72:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    77:77:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.jC:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1 this$0 -> a
    28:33:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1) -> <init>
    30:30:java.util.List getFunCalls() -> a
    37:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    43:65:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    28:28:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1,cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
    62:62:boolean lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2 -> cn.com.codesec.jD:
    java.util.regex.Pattern PATTERN_FUNCTION -> a
    37:37:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    89:91:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    95:95:java.lang.String getRuleID() -> a
    37:37:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.jE:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2 this$0 -> a
    38:43:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2) -> <init>
    40:40:java.util.List getFunCalls() -> a
    47:50:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    54:62:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    64:84:void matchFunCall2(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    38:38:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2,cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
    81:81:boolean lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3 -> cn.com.codesec.jF:
    java.util.regex.Pattern PATTERN_FIELD -> a
    22:22:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    51:53:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    58:58:java.lang.String getRuleID() -> a
    22:22:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.jG:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3 this$0 -> a
    23:28:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3) -> <init>
    25:25:java.util.List getIrFieldAccessList() -> a
    32:34:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    38:46:void matchIRFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    23:23:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3,cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R3$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4 -> cn.com.codesec.jH:
    java.util.regex.Pattern PATTERN_FUNCTION -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    69:71:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    76:76:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4$MyNSTVisitorAdapter -> cn.com.codesec.jI:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4 this$0 -> a
    29:34:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4) -> <init>
    31:31:java.util.List getFunCalls() -> a
    38:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    44:64:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    29:29:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4,cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R4$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5 -> cn.com.codesec.jJ:
    15:15:void <init>() -> <init>
    53:55:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    60:60:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5$MyNSTVisitorAdapter -> cn.com.codesec.jK:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5 this$0 -> a
    21:26:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5) -> <init>
    23:23:java.util.List getFunCalls() -> a
    30:32:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    36:48:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    21:21:void <init>(cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5,cn.com.codesec.java.structural.impl.WeakCryptographicHashAnalyzer_R5$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1 -> cn.com.codesec.jL:
    java.util.regex.Pattern PATTERN_ENTRY -> a
    33:33:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    74:76:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    81:81:java.lang.String getRuleID() -> a
    33:33:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1$MyNSTVisitorAdapter -> cn.com.codesec.jM:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1 this$0 -> a
    34:39:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1) -> <init>
    36:36:java.util.List getFunCalls() -> a
    43:45:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    49:69:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    34:34:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1,cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R1$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2 -> cn.com.codesec.jN:
    22:22:void <init>() -> <init>
    56:58:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    62:62:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2$MyNSTVisitorAdapter -> cn.com.codesec.jO:
    java.util.List nodeList -> b
    cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2 this$0 -> a
    27:29:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2) -> <init>
    32:32:java.util.List getNodeList() -> a
    37:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    43:52:void matchFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    27:27:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2,cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R2$MyNSTVisitorAdapter) -> <init>
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3 -> cn.com.codesec.jP:
    25:25:void <init>() -> <init>
    86:88:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    93:93:java.lang.String getRuleID() -> a
cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3$MyNSTVisitorAdapter -> cn.com.codesec.jQ:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3 this$0 -> a
    38:43:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3) -> <init>
    40:40:java.util.List getFunCalls() -> a
    47:49:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    53:81:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    38:38:void <init>(cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3,cn.com.codesec.java.structural.impl.WeakEncryptionAnalyzer_R3$MyNSTVisitorAdapter) -> <init>
    57:57:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    76:78:boolean lambda$1(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer -> cn.com.codesec.jR:
    java.util.regex.Pattern PATTERN_SSL -> a
    33:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    96:98:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    103:103:java.lang.String getRuleID() -> a
    33:33:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer$MyNSTVisitorAdapter -> cn.com.codesec.jS:
    java.util.List funCalls -> b
    cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer this$0 -> a
    34:39:void <init>(cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer) -> <init>
    36:36:java.util.List getFunCalls() -> a
    43:45:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    49:73:void matchFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    76:82:boolean matchIROpExp(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    86:90:boolean matchEnumConstant(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    34:34:void <init>(cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer,cn.com.codesec.java.structural.impl.WeakSSLProtocolAnalyzer$MyNSTVisitorAdapter) -> <init>
    82:82:boolean lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
cn.com.codesec.java.structural.internal.SafeFunctionPreAnalyse -> cn.com.codesec.jT:
    java.util.Map categoryIdAndSafeFunctionIdentifierListMap -> a
    java.util.Map contextAndRuleSetNameAndBasicBlockIndexAndStatementIndexs -> b
    36:36:java.util.Map getContextAndRuleSetNameAndBasicBlockIndexAndStatementIndexs() -> b
    39:43:void <init>() -> <init>
    152:166:java.util.List matchBodyIRNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> c
    171:171:java.lang.String getRuleID() -> a
    30:30:java.util.Map access$0(cn.com.codesec.java.structural.internal.SafeFunctionPreAnalyse) -> a
cn.com.codesec.java.structural.internal.SafeFunctionPreAnalyse$MyNSTVisitorAdapter -> cn.com.codesec.jU:
    java.util.Map ruleSetNameAndBasicBlockIndexAndStatementIndexs -> b
    cn.com.codesec.java.structural.internal.SafeFunctionPreAnalyse this$0 -> a
    45:47:void <init>(cn.com.codesec.java.structural.internal.SafeFunctionPreAnalyse) -> <init>
    50:50:java.util.Map getRuleSetNameAndBasicBlockIndexAndStatementIndexs() -> a
    55:119:void containsSafeFunction(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map) -> a
    123:125:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    129:146:java.util.List collectBlocks(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
cn.com.codesec.java.taint.CleanseFunctionMatch -> cn.com.codesec.jV:
    9:9:void <init>() -> <init>
    java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.CleanseStructuralMatch -> cn.com.codesec.jW:
    12:12:void <init>() -> <init>
    java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.EntrypointStructuralMatch -> cn.com.codesec.jX:
    8:8:void <init>() -> <init>
    java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.java.taint.SinkFunctionMatch -> cn.com.codesec.jY:
    9:9:void <init>() -> <init>
    java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.SinkStructuralMatch -> cn.com.codesec.jZ:
    12:12:void <init>() -> <init>
    java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.Slot -> cn.com.codesec.ka:
    cn.com.codesec.scan.metadata.FunMeta function -> a
    cn.com.codesec.scan.model.Parameter parameter -> b
    16:16:cn.com.codesec.scan.metadata.FunMeta getFunction() -> a
    20:21:void setFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    24:24:cn.com.codesec.scan.model.Parameter getParameter() -> b
    28:29:void setParameter(cn.com.codesec.scan.model.Parameter) -> a
    35:38:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.Parameter) -> <init>
cn.com.codesec.java.taint.SourceFunctionMatch -> cn.com.codesec.kb:
    9:9:void <init>() -> <init>
    java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.SourceStructuralMatch -> cn.com.codesec.kc:
    13:13:void <init>() -> <init>
    java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.TaintStructuralMatch -> cn.com.codesec.kd:
    5:5:void <init>() -> <init>
    java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.TaintStructuralRuleManager -> cn.com.codesec.ke:
    java.lang.String RULENAME -> a
    java.lang.String MULTIPLEIMPL -> b
    27:27:void <init>() -> <init>
    31:252:java.util.Map load() -> a
cn.com.codesec.java.taint.TransferFunctionMatch -> cn.com.codesec.kf:
    10:10:void <init>() -> <init>
    java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.TransferStructuralMatch -> cn.com.codesec.kg:
    13:13:void <init>() -> <init>
    java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.WriteStructuralMatch -> cn.com.codesec.kh:
    11:11:void <init>() -> <init>
    java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.impl.cleanse.CleanseFunctionMatch2C7FBF2A9BA847478826FB923548DF43 -> cn.com.codesec.ki:
    java.util.regex.Pattern computeMethodPattern -> a
    25:26:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    29:38:cn.com.codesec.java.taint.Slot matach(cn.com.codesec.scan.metadata.FunMeta) -> l
    44:51:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    56:56:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch06C15FB2068541F581D1813E7D134701 -> cn.com.codesec.kj:
    24:24:void <init>() -> <init>
    76:86:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    91:91:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch06C15FB2068541F581D1813E7D134701$MyNSTVisitorAdapter -> cn.com.codesec.kk:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch06C15FB2068541F581D1813E7D134701 this$0 -> a
    25:27:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch06C15FB2068541F581D1813E7D134701) -> <init>
    30:30:java.util.List getExpressionList() -> a
    34:62:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    66:68:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch0F27E770D3CE4A5DA73E8ADC39ADCE25 -> cn.com.codesec.kl:
    java.util.regex.Pattern PATTERN -> a
    28:28:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    92:102:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    107:107:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch0F27E770D3CE4A5DA73E8ADC39ADCE25$MyNSTVisitorAdapter -> cn.com.codesec.km:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch0F27E770D3CE4A5DA73E8ADC39ADCE25 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch0F27E770D3CE4A5DA73E8ADC39ADCE25) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:78:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    82:84:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch2C1FFA80EEC848CEAB65DC2740A0175B -> cn.com.codesec.kn:
    java.util.regex.Pattern PATTERN -> a
    37:37:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    70:80:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    85:85:java.lang.String getRuleID() -> a
    37:37:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch2C1FFA80EEC848CEAB65DC2740A0175B$MyNSTVisitorAdapter -> cn.com.codesec.ko:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch2C1FFA80EEC848CEAB65DC2740A0175B this$0 -> a
    38:40:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch2C1FFA80EEC848CEAB65DC2740A0175B) -> <init>
    43:43:java.util.List getExpressionList() -> a
    47:56:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    60:62:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch3A71749954794C68BA5AFDAED692DC84 -> cn.com.codesec.kp:
    30:30:void <init>() -> <init>
    79:89:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch3A71749954794C68BA5AFDAED692DC84$MyNSTVisitorAdapter -> cn.com.codesec.kq:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch3A71749954794C68BA5AFDAED692DC84 this$0 -> a
    31:33:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch3A71749954794C68BA5AFDAED692DC84) -> <init>
    36:36:java.util.List getExpressionList() -> a
    40:65:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    69:71:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch65A81521E4CF4BEFA77B8C21202FFAA7 -> cn.com.codesec.kr:
    java.util.regex.Pattern PATTERN -> a
    java.util.regex.Pattern PATTERN2 -> b
    25:26:void <clinit>() -> <clinit>
    24:24:void <init>() -> <init>
    79:89:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
    25:25:java.util.regex.Pattern access$0() -> b
    26:26:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch65A81521E4CF4BEFA77B8C21202FFAA7$MyNSTVisitorAdapter -> cn.com.codesec.ks:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch65A81521E4CF4BEFA77B8C21202FFAA7 this$0 -> a
    27:29:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatch65A81521E4CF4BEFA77B8C21202FFAA7) -> <init>
    32:32:java.util.List getExpressionList() -> a
    36:65:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    69:71:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchB50AD1144A974FC38CB0C78D7023591F -> cn.com.codesec.kt:
    java.util.regex.Pattern PATTERN -> a
    28:28:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    92:102:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    107:107:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchB50AD1144A974FC38CB0C78D7023591F$MyNSTVisitorAdapter -> cn.com.codesec.ku:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchB50AD1144A974FC38CB0C78D7023591F this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchB50AD1144A974FC38CB0C78D7023591F) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:78:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    82:84:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchF9FD002561914DF4B55DE2944515B499 -> cn.com.codesec.kv:
    30:30:void <init>() -> <init>
    82:92:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchF9FD002561914DF4B55DE2944515B499$MyNSTVisitorAdapter -> cn.com.codesec.kw:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchF9FD002561914DF4B55DE2944515B499 this$0 -> a
    31:33:void <init>(cn.com.codesec.java.taint.impl.cleanse.CleanseStructuralMatchF9FD002561914DF4B55DE2944515B499) -> <init>
    36:36:java.util.List getExpressionList() -> a
    40:68:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch030137EDBFDE42D595BF27127B469E25 -> cn.com.codesec.kx:
    21:21:void <init>() -> <init>
    73:75:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    80:80:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch030137EDBFDE42D595BF27127B469E25$MyNSTVisitorAdapter -> cn.com.codesec.ky:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch030137EDBFDE42D595BF27127B469E25 this$0 -> a
    35:40:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch030137EDBFDE42D595BF27127B469E25) -> <init>
    37:37:java.util.List getIrVarDecls() -> a
    44:46:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    50:69:void matchVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch20E64E951E06496CA55B24C525EFE3DF -> cn.com.codesec.kz:
    20:20:void <init>() -> <init>
    61:63:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    68:68:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch20E64E951E06496CA55B24C525EFE3DF$MyNSTVisitorAdapter -> cn.com.codesec.kA:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch20E64E951E06496CA55B24C525EFE3DF this$0 -> a
    31:36:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch20E64E951E06496CA55B24C525EFE3DF) -> <init>
    33:33:java.util.List getIrVarDecls() -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    46:57:void matchVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch252348907C734D5FB6F75AEF412C918A -> cn.com.codesec.kB:
    22:22:void <init>() -> <init>
    76:78:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    83:83:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch252348907C734D5FB6F75AEF412C918A$MyNSTVisitorAdapter -> cn.com.codesec.kC:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch252348907C734D5FB6F75AEF412C918A this$0 -> a
    35:40:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch252348907C734D5FB6F75AEF412C918A) -> <init>
    37:37:java.util.List getIrVarDecls() -> a
    44:46:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    50:71:void matchIRFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    63:63:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6993EF53F00C4378A791117C3E467391 -> cn.com.codesec.kD:
    18:18:void <init>() -> <init>
    58:60:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    65:65:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6993EF53F00C4378A791117C3E467391$MyNSTVisitorAdapter -> cn.com.codesec.kE:
    java.util.List varDeclList -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6993EF53F00C4378A791117C3E467391 this$0 -> a
    20:21:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6993EF53F00C4378A791117C3E467391) -> <init>
    24:24:java.util.List getVarDeclList() -> a
    28:47:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    50:52:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6C6D1E4162DD47A59897D1C40B797B99 -> cn.com.codesec.kF:
    26:26:void <init>() -> <init>
    76:78:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    83:83:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6C6D1E4162DD47A59897D1C40B797B99$MyNSTVisitorAdapter -> cn.com.codesec.kG:
    java.util.List varDeclList -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6C6D1E4162DD47A59897D1C40B797B99 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch6C6D1E4162DD47A59897D1C40B797B99) -> <init>
    34:34:java.util.List getVarDeclList() -> a
    38:64:void matchVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    68:70:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch87C9372CA7B9414A8DAEBFBA869E3CC5 -> cn.com.codesec.kH:
    20:20:void <init>() -> <init>
    57:59:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    64:64:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch87C9372CA7B9414A8DAEBFBA869E3CC5$MyNSTVisitorAdapter -> cn.com.codesec.kI:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch87C9372CA7B9414A8DAEBFBA869E3CC5 this$0 -> a
    26:31:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch87C9372CA7B9414A8DAEBFBA869E3CC5) -> <init>
    28:28:java.util.List getIrVarDecls() -> a
    35:37:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    41:52:void matchIRFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch8D4C9DBF4DB4459CA52E5A71AA4FAB2C -> cn.com.codesec.kJ:
    25:25:void <init>() -> <init>
    84:86:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    91:91:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch8D4C9DBF4DB4459CA52E5A71AA4FAB2C$MyNSTVisitorAdapter -> cn.com.codesec.kK:
    java.util.List varDeclList -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch8D4C9DBF4DB4459CA52E5A71AA4FAB2C this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch8D4C9DBF4DB4459CA52E5A71AA4FAB2C) -> <init>
    33:33:java.util.List getVarDeclList() -> a
    37:70:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    74:76:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch95C9F2C980BF4FF98E70728AE138152F -> cn.com.codesec.kL:
    20:20:void <init>() -> <init>
    59:61:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    66:66:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch95C9F2C980BF4FF98E70728AE138152F$MyNSTVisitorAdapter -> cn.com.codesec.kM:
    java.util.List irVarDecls -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch95C9F2C980BF4FF98E70728AE138152F this$0 -> a
    26:31:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch95C9F2C980BF4FF98E70728AE138152F) -> <init>
    28:28:java.util.List getIrVarDecls() -> a
    35:37:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    41:55:void matchVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatch9748A9C9739F41619D38E461B876F9F6 -> cn.com.codesec.kN:
    17:17:void <init>() -> <init>
    37:38:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    43:43:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatchBA761786FD8A4176970F74476AB4C204 -> cn.com.codesec.kO:
    23:23:void <init>() -> <init>
    71:73:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    78:78:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatchBA761786FD8A4176970F74476AB4C204$MyNSTVisitorAdapter -> cn.com.codesec.kP:
    java.util.List varDeclList -> b
    cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatchBA761786FD8A4176970F74476AB4C204 this$0 -> a
    24:26:void <init>(cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatchBA761786FD8A4176970F74476AB4C204) -> <init>
    29:29:java.util.List getVarDeclList() -> a
    33:57:void match(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    61:63:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.entrypoint.EntrypointStructuralMatchD261179FC6C240AAB19C33587510D988 -> cn.com.codesec.kQ:
    17:17:void <init>() -> <init>
    20:32:java.util.List matchFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    37:37:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkFunctionMatch0BEDBE5CA8C5420689445D4D0FD94972 -> cn.com.codesec.kR:
    java.util.regex.Pattern TYPE_NAME -> a
    49:49:void <clinit>() -> <clinit>
    47:47:void <init>() -> <init>
    53:60:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    64:74:cn.com.codesec.java.taint.Slot match(cn.com.codesec.scan.metadata.FunMeta) -> l
    79:101:boolean matchAnnotation(java.util.Set) -> a
    105:121:boolean matchAnnotation2(java.util.Set) -> b
    126:126:java.lang.String getRuleID() -> a
    95:95:boolean lambda$0(java.util.Map$Entry) -> a
    117:117:boolean lambda$1(java.util.Map$Entry) -> b
cn.com.codesec.java.taint.impl.sink.SinkFunctionMatchC40AE531BD7C4700B839B2DBDC2E3145 -> cn.com.codesec.kS:
    29:29:void <init>() -> <init>
    32:48:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    53:53:java.lang.String getRuleID() -> a
    46:46:void lambda$0(java.util.List,cn.com.codesec.java.taint.Slot) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533 -> cn.com.codesec.kT:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    114:123:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    127:127:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533$MyNSTVisitorAdapter -> cn.com.codesec.kU:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:77:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    81:83:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    64:64:boolean lambda$0(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533$MyNSTVisitorAdapter2 -> cn.com.codesec.kV:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533 this$0 -> a
    88:90:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch08E83F4B378A46FF968F9C7D20A3B533) -> <init>
    93:93:java.util.List getExpressionList() -> a
    97:100:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    104:106:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC -> cn.com.codesec.kW:
    java.util.regex.Pattern pattern -> a
    java.util.regex.Pattern pattern2 -> b
    21:42:void <init>() -> <init>
    103:113:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    117:117:java.lang.String getRuleID() -> a
    41:41:java.util.regex.Pattern access$0(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC) -> a
    42:42:java.util.regex.Pattern access$1(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC) -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC$MyNSTVisitorAdapter -> cn.com.codesec.kX:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC this$0 -> a
    43:45:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch0958AFFC3E00440D85C252A9B77BA8DC) -> <init>
    48:48:java.util.List getExpressionList() -> a
    52:89:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    93:95:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch134D2857ADBF4BECA383F93E33CB7A11 -> cn.com.codesec.kY:
    17:17:void <init>() -> <init>
    83:93:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch134D2857ADBF4BECA383F93E33CB7A11$MyNSTVisitorAdapter -> cn.com.codesec.kZ:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch134D2857ADBF4BECA383F93E33CB7A11 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch134D2857ADBF4BECA383F93E33CB7A11) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:69:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    73:75:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1BF70E7632B547C592DB2AB30A18F207 -> cn.com.codesec.la:
    17:17:void <init>() -> <init>
    88:97:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    101:101:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1BF70E7632B547C592DB2AB30A18F207$MyNSTVisitorAdapter -> cn.com.codesec.lb:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1BF70E7632B547C592DB2AB30A18F207 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1BF70E7632B547C592DB2AB30A18F207) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:74:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    78:80:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1E3174C6ECCF474FBA922493FD51C45D -> cn.com.codesec.lc:
    java.util.regex.Pattern pattern -> a
    42:42:void <clinit>() -> <clinit>
    25:25:void <init>() -> <init>
    92:101:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    105:105:java.lang.String getRuleID() -> a
    42:42:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1E3174C6ECCF474FBA922493FD51C45D$MyNSTVisitorAdapter -> cn.com.codesec.ld:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1E3174C6ECCF474FBA922493FD51C45D this$0 -> a
    43:45:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch1E3174C6ECCF474FBA922493FD51C45D) -> <init>
    47:47:java.util.List getExpressionList() -> a
    52:54:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    58:86:void match(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch272CFFC4FABF4568914A49D9819B3049 -> cn.com.codesec.le:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    77:87:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    91:91:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch272CFFC4FABF4568914A49D9819B3049$MyNSTVisitorAdapter -> cn.com.codesec.lf:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch272CFFC4FABF4568914A49D9819B3049 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch272CFFC4FABF4568914A49D9819B3049) -> <init>
    33:33:java.util.List getExpressionList() -> a
    39:41:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    45:70:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch2A40F8EABE1B408B936577C7CC4A7FC4 -> cn.com.codesec.lg:
    17:17:void <init>() -> <init>
    88:97:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    101:101:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch2A40F8EABE1B408B936577C7CC4A7FC4$MyNSTVisitorAdapter -> cn.com.codesec.lh:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch2A40F8EABE1B408B936577C7CC4A7FC4 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch2A40F8EABE1B408B936577C7CC4A7FC4) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:74:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    78:80:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch318931F79A6C421185F2EBD4D6FC16DD -> cn.com.codesec.li:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    82:92:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    96:96:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch318931F79A6C421185F2EBD4D6FC16DD$MyNSTVisitorAdapter -> cn.com.codesec.lj:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch318931F79A6C421185F2EBD4D6FC16DD this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch318931F79A6C421185F2EBD4D6FC16DD) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:68:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch38A1298C649D42BE8D8CD0FD66649D78 -> cn.com.codesec.lk:
    19:19:void <init>() -> <init>
    76:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    92:92:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch38A1298C649D42BE8D8CD0FD66649D78$MyNSTVisitorAdapter -> cn.com.codesec.ll:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch38A1298C649D42BE8D8CD0FD66649D78 this$0 -> a
    34:36:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch38A1298C649D42BE8D8CD0FD66649D78) -> <init>
    38:38:java.util.List getExpressionList() -> a
    44:46:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    50:69:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    62:62:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch47B7A5C528D8423AA9ECC24F5F8AF84D -> cn.com.codesec.lm:
    16:16:void <init>() -> <init>
    73:83:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    87:87:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch47B7A5C528D8423AA9ECC24F5F8AF84D$MyNSTVisitorAdapter -> cn.com.codesec.ln:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch47B7A5C528D8423AA9ECC24F5F8AF84D this$0 -> a
    25:27:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch47B7A5C528D8423AA9ECC24F5F8AF84D) -> <init>
    30:30:java.util.List getExpressionList() -> a
    34:59:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    63:65:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch4DAB603D026C45FB80856DC90B895F34 -> cn.com.codesec.lo:
    16:16:void <init>() -> <init>
    75:85:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    89:89:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch4DAB603D026C45FB80856DC90B895F34$MyNSTVisitorAdapter -> cn.com.codesec.lp:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch4DAB603D026C45FB80856DC90B895F34 this$0 -> a
    24:26:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch4DAB603D026C45FB80856DC90B895F34) -> <init>
    29:29:java.util.List getExpressionList() -> a
    33:61:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    65:67:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch50B7C832C0574870B2E5AE0FC8290F5C -> cn.com.codesec.lq:
    17:17:void <init>() -> <init>
    98:108:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    112:112:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch50B7C832C0574870B2E5AE0FC8290F5C$MyNSTVisitorAdapter -> cn.com.codesec.lr:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch50B7C832C0574870B2E5AE0FC8290F5C this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch50B7C832C0574870B2E5AE0FC8290F5C) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:84:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    88:90:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch516660E9DDC640E4AD1ED7B33031AEE8 -> cn.com.codesec.ls:
    java.util.regex.Pattern PATTERN2 -> a
    29:29:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    86:96:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    100:100:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch516660E9DDC640E4AD1ED7B33031AEE8$MyNSTVisitorAdapter -> cn.com.codesec.lt:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch516660E9DDC640E4AD1ED7B33031AEE8 this$0 -> a
    30:32:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch516660E9DDC640E4AD1ED7B33031AEE8) -> <init>
    35:35:java.util.List getExpressionList() -> a
    39:72:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    76:78:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch54E4C62D73AB4194A2CA01D5BC7069C4 -> cn.com.codesec.lu:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    88:98:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    102:102:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch54E4C62D73AB4194A2CA01D5BC7069C4$MyNSTVisitorAdapter -> cn.com.codesec.lv:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch54E4C62D73AB4194A2CA01D5BC7069C4 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch54E4C62D73AB4194A2CA01D5BC7069C4) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:74:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    78:80:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5A84E99581624A26B958BE337E9440EE -> cn.com.codesec.lw:
    17:17:void <init>() -> <init>
    89:98:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    102:102:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5A84E99581624A26B958BE337E9440EE$MyNSTVisitorAdapter -> cn.com.codesec.lx:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5A84E99581624A26B958BE337E9440EE this$0 -> a
    30:32:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5A84E99581624A26B958BE337E9440EE) -> <init>
    35:35:java.util.List getExpressionList() -> a
    39:75:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    79:81:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5B99BCE949594A64AE378A33629A4F9B -> cn.com.codesec.ly:
    16:16:void <init>() -> <init>
    78:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    92:92:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5B99BCE949594A64AE378A33629A4F9B$MyNSTVisitorAdapter -> cn.com.codesec.lz:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5B99BCE949594A64AE378A33629A4F9B this$0 -> a
    26:28:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch5B99BCE949594A64AE378A33629A4F9B) -> <init>
    31:31:java.util.List getExpressionList() -> a
    35:64:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    68:70:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B -> cn.com.codesec.lA:
    java.util.regex.Pattern pattern -> a
    java.util.regex.Pattern pattern2 -> b
    21:38:void <init>() -> <init>
    107:117:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    121:121:java.lang.String getRuleID() -> a
    37:37:java.util.regex.Pattern access$0(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B) -> a
    38:38:java.util.regex.Pattern access$1(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B) -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B$MyNSTVisitorAdapter -> cn.com.codesec.lB:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B this$0 -> a
    39:41:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch658C7AD0F9184ED19087A644F724690B) -> <init>
    44:44:java.util.List getExpressionList() -> a
    48:93:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    97:99:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch70205B3F9DF146A2BDA85A83538A3485 -> cn.com.codesec.lC:
    25:25:void <init>() -> <init>
    37:37:java.lang.String getRuleID() -> a
    95:105:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch70205B3F9DF146A2BDA85A83538A3485$MyNSTVisitorAdapter -> cn.com.codesec.lD:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch70205B3F9DF146A2BDA85A83538A3485 this$0 -> a
    40:42:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch70205B3F9DF146A2BDA85A83538A3485) -> <init>
    45:45:java.util.List getExpressionList() -> a
    49:82:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    86:88:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch77B74D20E7CA48F493B36415CAB28304 -> cn.com.codesec.lE:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    78:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    92:92:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch77B74D20E7CA48F493B36415CAB28304$MyNSTVisitorAdapter -> cn.com.codesec.lF:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch77B74D20E7CA48F493B36415CAB28304 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch77B74D20E7CA48F493B36415CAB28304) -> <init>
    33:33:java.util.List getExpressionList() -> a
    39:41:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    45:71:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch7D9A52EFC2394026BFDC4BF74F03EFE8 -> cn.com.codesec.lG:
    java.util.regex.Pattern PATTERN2 -> a
    39:39:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    82:92:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    96:96:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch7D9A52EFC2394026BFDC4BF74F03EFE8$MyNSTVisitorAdapter -> cn.com.codesec.lH:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch7D9A52EFC2394026BFDC4BF74F03EFE8 this$0 -> a
    40:42:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch7D9A52EFC2394026BFDC4BF74F03EFE8) -> <init>
    44:44:java.util.List getExpressionList() -> a
    50:52:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    56:75:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    68:68:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch81E0E3986B0E42738A7524C9E0877C34 -> cn.com.codesec.lI:
    19:19:void <init>() -> <init>
    118:128:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    132:132:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch81E0E3986B0E42738A7524C9E0877C34$MyNSTVisitorAdapter -> cn.com.codesec.lJ:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch81E0E3986B0E42738A7524C9E0877C34 this$0 -> a
    43:45:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch81E0E3986B0E42738A7524C9E0877C34) -> <init>
    48:48:java.util.List getExpressionList() -> a
    52:104:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    108:110:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch878B8C323BE2498B82FCD633A0596308 -> cn.com.codesec.lK:
    java.util.regex.Pattern PATTERN2 -> a
    27:27:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    83:93:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch878B8C323BE2498B82FCD633A0596308$MyNSTVisitorAdapter -> cn.com.codesec.lL:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch878B8C323BE2498B82FCD633A0596308 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch878B8C323BE2498B82FCD633A0596308) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:69:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    73:75:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8BC385ED2DF64B1D9E3B4931CDFF5C9A -> cn.com.codesec.lM:
    java.util.regex.Pattern PATTERN2 -> a
    31:31:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    81:91:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    95:95:java.lang.String getRuleID() -> a
    31:31:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8BC385ED2DF64B1D9E3B4931CDFF5C9A$MyNSTVisitorAdapter -> cn.com.codesec.lN:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8BC385ED2DF64B1D9E3B4931CDFF5C9A this$0 -> a
    32:34:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8BC385ED2DF64B1D9E3B4931CDFF5C9A) -> <init>
    36:36:java.util.List getExpressionList() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    48:74:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8FA4B5CDBBC94A7DA17B4505B3AFF957 -> cn.com.codesec.lO:
    java.util.regex.Pattern PATTERN2 -> a
    31:31:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    81:90:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
    31:31:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8FA4B5CDBBC94A7DA17B4505B3AFF957$MyNSTVisitorAdapter -> cn.com.codesec.lP:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8FA4B5CDBBC94A7DA17B4505B3AFF957 this$0 -> a
    32:34:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch8FA4B5CDBBC94A7DA17B4505B3AFF957) -> <init>
    36:36:java.util.List getExpressionList() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    48:74:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9D9DF56C96644ACFB7AFEB92EA1454AC -> cn.com.codesec.lQ:
    14:14:void <init>() -> <init>
    66:74:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    78:78:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9D9DF56C96644ACFB7AFEB92EA1454AC$MyNSTVisitorAdapter -> cn.com.codesec.lR:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9D9DF56C96644ACFB7AFEB92EA1454AC this$0 -> a
    23:25:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9D9DF56C96644ACFB7AFEB92EA1454AC) -> <init>
    27:27:java.util.List getExpressionList() -> a
    32:34:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    38:60:void match(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9EF25CA9A7104510ABA7F36260121C96 -> cn.com.codesec.lS:
    java.util.regex.Pattern PATTERN2 -> a
    27:27:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    79:89:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    93:93:java.lang.String getRuleID() -> a
    27:27:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9EF25CA9A7104510ABA7F36260121C96$MyNSTVisitorAdapter -> cn.com.codesec.lT:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9EF25CA9A7104510ABA7F36260121C96 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatch9EF25CA9A7104510ABA7F36260121C96) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:65:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    69:71:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchA454432176934775819A2D956C7CA24F -> cn.com.codesec.lU:
    java.util.regex.Pattern PATTERN2 -> a
    30:30:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    85:94:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    98:98:java.lang.String getRuleID() -> a
    30:30:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchA454432176934775819A2D956C7CA24F$MyNSTVisitorAdapter -> cn.com.codesec.lV:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchA454432176934775819A2D956C7CA24F this$0 -> a
    31:33:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchA454432176934775819A2D956C7CA24F) -> <init>
    36:36:java.util.List getExpressionList() -> a
    40:71:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    75:77:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB278988399CB4401A3A57C1A4A66EA6A -> cn.com.codesec.lW:
    java.util.regex.Pattern PATTERN_NAME -> a
    java.util.regex.Pattern PATTERN_CLASS -> b
    48:49:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    53:53:java.lang.String getRuleID() -> a
    112:122:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    48:48:java.util.regex.Pattern access$0() -> b
    49:49:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB278988399CB4401A3A57C1A4A66EA6A$MyNSTVisitorAdapter -> cn.com.codesec.lX:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB278988399CB4401A3A57C1A4A66EA6A this$0 -> a
    56:58:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB278988399CB4401A3A57C1A4A66EA6A) -> <init>
    61:61:java.util.List getExpressionList() -> a
    65:98:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    102:104:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB857FD6A8EED4CF5B8239B035749ED01 -> cn.com.codesec.lY:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    85:95:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    99:99:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB857FD6A8EED4CF5B8239B035749ED01$MyNSTVisitorAdapter -> cn.com.codesec.lZ:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB857FD6A8EED4CF5B8239B035749ED01 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchB857FD6A8EED4CF5B8239B035749ED01) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:71:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    75:77:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchBC662D91BBEB4938A317D8ECCCDEA642 -> cn.com.codesec.ma:
    17:17:void <init>() -> <init>
    84:94:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    98:98:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchBC662D91BBEB4938A317D8ECCCDEA642$MyNSTVisitorAdapter -> cn.com.codesec.mb:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchBC662D91BBEB4938A317D8ECCCDEA642 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchBC662D91BBEB4938A317D8ECCCDEA642) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:70:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    74:76:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchC9A1A2751E474C43BF13C439E843970B -> cn.com.codesec.mc:
    15:15:void <init>() -> <init>
    84:94:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    98:98:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchC9A1A2751E474C43BF13C439E843970B$MyNSTVisitorAdapter -> cn.com.codesec.md:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchC9A1A2751E474C43BF13C439E843970B this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchC9A1A2751E474C43BF13C439E843970B) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:70:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    74:76:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCA37F4BBA9D54BFBB2DA1F74A4685556 -> cn.com.codesec.me:
    16:16:void <init>() -> <init>
    76:86:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    90:90:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCA37F4BBA9D54BFBB2DA1F74A4685556$MyNSTVisitorAdapter -> cn.com.codesec.mf:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCA37F4BBA9D54BFBB2DA1F74A4685556 this$0 -> a
    25:27:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCA37F4BBA9D54BFBB2DA1F74A4685556) -> <init>
    30:30:java.util.List getExpressionList() -> a
    34:62:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    66:68:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF54281837F84B4F97090D059CF2B8C1 -> cn.com.codesec.mg:
    17:17:void <init>() -> <init>
    87:97:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    101:101:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF54281837F84B4F97090D059CF2B8C1$MyNSTVisitorAdapter -> cn.com.codesec.mh:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF54281837F84B4F97090D059CF2B8C1 this$0 -> a
    28:30:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF54281837F84B4F97090D059CF2B8C1) -> <init>
    33:33:java.util.List getExpressionList() -> a
    37:73:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    77:79:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF705171372244618866FCFE448A2EC3 -> cn.com.codesec.mi:
    19:19:void <init>() -> <init>
    80:90:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF705171372244618866FCFE448A2EC3$MyNSTVisitorAdapter -> cn.com.codesec.mj:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF705171372244618866FCFE448A2EC3 this$0 -> a
    38:40:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchCF705171372244618866FCFE448A2EC3) -> <init>
    42:42:java.util.List getExpressionList() -> a
    48:50:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    54:73:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    66:66:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchDEF7BC2128A74D0ABF0673D2613E1C27 -> cn.com.codesec.mk:
    java.util.regex.Pattern PATTERN2 -> a
    29:29:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    76:86:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    90:90:java.lang.String getRuleID() -> a
    29:29:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchDEF7BC2128A74D0ABF0673D2613E1C27$MyNSTVisitorAdapter -> cn.com.codesec.ml:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchDEF7BC2128A74D0ABF0673D2613E1C27 this$0 -> a
    30:32:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchDEF7BC2128A74D0ABF0673D2613E1C27) -> <init>
    34:34:java.util.List getExpressionList() -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    46:69:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchE0B4A97F11684CC6A12F0E00CAFC8FA8 -> cn.com.codesec.mm:
    java.util.regex.Pattern PATTERN2 -> a
    29:29:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    80:90:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
    29:29:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchE0B4A97F11684CC6A12F0E00CAFC8FA8$MyNSTVisitorAdapter -> cn.com.codesec.mn:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchE0B4A97F11684CC6A12F0E00CAFC8FA8 this$0 -> a
    30:32:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchE0B4A97F11684CC6A12F0E00CAFC8FA8) -> <init>
    34:34:java.util.List getExpressionList() -> a
    40:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    46:73:void match(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchEC448CD9CA8043B7B3A17FC74CD977B8 -> cn.com.codesec.mo:
    17:17:void <init>() -> <init>
    83:93:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchEC448CD9CA8043B7B3A17FC74CD977B8$MyNSTVisitorAdapter -> cn.com.codesec.mp:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchEC448CD9CA8043B7B3A17FC74CD977B8 this$0 -> a
    27:29:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchEC448CD9CA8043B7B3A17FC74CD977B8) -> <init>
    32:32:java.util.List getExpressionList() -> a
    36:69:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    73:75:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF26A84215EDC496D861DD096D393B057 -> cn.com.codesec.mq:
    16:16:void <init>() -> <init>
    80:90:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    94:94:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF26A84215EDC496D861DD096D393B057$MyNSTVisitorAdapter -> cn.com.codesec.mr:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF26A84215EDC496D861DD096D393B057 this$0 -> a
    26:28:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF26A84215EDC496D861DD096D393B057) -> <init>
    31:31:java.util.List getExpressionList() -> a
    35:66:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    70:72:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF7AA4D79C8454513A0BE027045056799 -> cn.com.codesec.ms:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    88:98:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    102:102:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF7AA4D79C8454513A0BE027045056799$MyNSTVisitorAdapter -> cn.com.codesec.mt:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF7AA4D79C8454513A0BE027045056799 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchF7AA4D79C8454513A0BE027045056799) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:74:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    78:80:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1 -> cn.com.codesec.mu:
    java.util.regex.Pattern PATTERN2 -> a
    28:28:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    114:124:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    128:128:java.lang.String getRuleID() -> a
    28:28:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1$MyNSTVisitorAdapter -> cn.com.codesec.mv:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:77:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    81:83:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    64:64:boolean lambda$0(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1$MyNSTVisitorAdapter2 -> cn.com.codesec.mw:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1 this$0 -> a
    87:89:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFBD6FA5564CB4B77A8DA7B82B10F3EB1) -> <init>
    92:92:java.util.List getExpressionList() -> a
    96:99:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    103:105:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFF81C098CD1044FE82B6943E69E08953 -> cn.com.codesec.mx:
    java.util.regex.Pattern PATTERN2 -> a
    26:26:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    78:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    92:92:java.lang.String getRuleID() -> a
    26:26:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFF81C098CD1044FE82B6943E69E08953$MyNSTVisitorAdapter -> cn.com.codesec.my:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFF81C098CD1044FE82B6943E69E08953 this$0 -> a
    27:29:void <init>(cn.com.codesec.java.taint.impl.sink.SinkStructuralMatchFF81C098CD1044FE82B6943E69E08953) -> <init>
    32:32:java.util.List getExpressionList() -> a
    36:64:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    68:70:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.source.SourceFunctionMatch47C28F0ED0C5420F95718D58DA82A7B7 -> cn.com.codesec.mz:
    java.util.regex.Pattern DBSET_TYPE -> a
    34:34:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    37:43:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    47:55:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    60:60:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceFunctionMatch7F31FD0167774E27BFB6FF800DFFBA26 -> cn.com.codesec.mA:
    java.util.regex.Pattern DBSET_TYPE -> a
    33:33:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    36:42:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    46:54:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    59:59:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceFunctionMatchB03E809F6E5F43E0A6C14DC6380F6E7C -> cn.com.codesec.mB:
    java.util.regex.Pattern RETURN_TYPE -> a
    java.util.regex.Pattern PATTERN_CLASS -> b
    28:29:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    32:38:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    42:51:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    56:56:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceFunctionMatchF136CA4FF033427F9C2402C4F2EE61A4 -> cn.com.codesec.mC:
    20:20:void <init>() -> <init>
    31:37:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    41:46:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    51:51:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceFunctionMatchF9770C0CA97C481CAD065A97EFF1CE0D -> cn.com.codesec.mD:
    java.util.regex.Pattern typeName -> a
    28:28:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    31:37:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    41:48:boolean match(cn.com.codesec.scan.metadata.FunMeta) -> l
    53:53:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatch05A534D4DFA545ECB74C6CA86A980EA6 -> cn.com.codesec.mE:
    23:23:void <init>() -> <init>
    57:66:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    71:71:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatch05A534D4DFA545ECB74C6CA86A980EA6$MyNSTVisitorAdapter -> cn.com.codesec.mF:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructMatch05A534D4DFA545ECB74C6CA86A980EA6 this$0 -> a
    28:33:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructMatch05A534D4DFA545ECB74C6CA86A980EA6) -> <init>
    30:30:java.util.List getIrFunCalls() -> a
    37:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    43:52:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatch18DB0239FF3B4FB59C7456C951DD1997 -> cn.com.codesec.mG:
    java.util.regex.Pattern pattern -> a
    46:46:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    95:104:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    109:109:java.lang.String getRuleID() -> a
    46:46:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructMatch18DB0239FF3B4FB59C7456C951DD1997$MyNSTVisitorAdapter -> cn.com.codesec.mH:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructMatch18DB0239FF3B4FB59C7456C951DD1997 this$0 -> a
    47:52:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructMatch18DB0239FF3B4FB59C7456C951DD1997) -> <init>
    49:49:java.util.List getIrFunCalls() -> a
    56:58:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    62:90:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatch929A3B8168C84BE7B223AF59CEF5A9AF -> cn.com.codesec.mI:
    java.util.regex.Pattern pattern -> a
    46:46:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    95:104:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    109:109:java.lang.String getRuleID() -> a
    46:46:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructMatch929A3B8168C84BE7B223AF59CEF5A9AF$MyNSTVisitorAdapter -> cn.com.codesec.mJ:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructMatch929A3B8168C84BE7B223AF59CEF5A9AF this$0 -> a
    47:52:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructMatch929A3B8168C84BE7B223AF59CEF5A9AF) -> <init>
    49:49:java.util.List getIrFunCalls() -> a
    56:58:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    62:90:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatchEB36A59179DE4779B3F279030B8C7277 -> cn.com.codesec.mK:
    25:25:void <init>() -> <init>
    79:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    93:93:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatchEB36A59179DE4779B3F279030B8C7277$MyNSTVisitorAdapter -> cn.com.codesec.mL:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructMatchEB36A59179DE4779B3F279030B8C7277 this$0 -> a
    40:45:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructMatchEB36A59179DE4779B3F279030B8C7277) -> <init>
    42:42:java.util.List getIrFunCalls() -> a
    49:51:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    55:74:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    68:68:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatchFF7677AAC2FC4171BB28499D01B997DD -> cn.com.codesec.mM:
    23:23:void <init>() -> <init>
    62:71:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    76:76:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructMatchFF7677AAC2FC4171BB28499D01B997DD$MyNSTVisitorAdapter -> cn.com.codesec.mN:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructMatchFF7677AAC2FC4171BB28499D01B997DD this$0 -> a
    33:38:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructMatchFF7677AAC2FC4171BB28499D01B997DD) -> <init>
    35:35:java.util.List getIrFunCalls() -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    48:57:void matchIRFunCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch0AB7493074E54E2AB25DB16EBA8CA9D1 -> cn.com.codesec.mO:
    java.util.regex.Pattern VARIABLE -> a
    17:17:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    73:82:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    86:86:java.lang.String getRuleID() -> a
    17:17:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch0AB7493074E54E2AB25DB16EBA8CA9D1$MyNSTVisitorAdapter -> cn.com.codesec.mP:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatch0AB7493074E54E2AB25DB16EBA8CA9D1 this$0 -> a
    18:23:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatch0AB7493074E54E2AB25DB16EBA8CA9D1) -> <init>
    20:20:java.util.List getIrFieldAccessList() -> a
    28:31:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    35:40:void matchIRFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    44:46:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    50:69:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch83A1B940E383431298506990AFC5723C -> cn.com.codesec.mQ:
    java.util.regex.Pattern constantValuePattern -> a
    java.util.regex.Pattern constantValuePattern2 -> b
    23:24:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    59:68:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    73:73:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch83A1B940E383431298506990AFC5723C$MyNSTVisitorAdapter -> cn.com.codesec.mR:
    java.util.List literCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatch83A1B940E383431298506990AFC5723C this$0 -> a
    26:28:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatch83A1B940E383431298506990AFC5723C) -> <init>
    33:33:java.util.List getLiteralExps() -> a
    38:52:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch8DA01A328C0349AABA8EFF2FDED15E90 -> cn.com.codesec.mS:
    java.util.regex.Pattern ValuePattern -> a
    21:21:void <clinit>() -> <clinit>
    13:13:void <init>() -> <init>
    59:68:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    73:73:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch8DA01A328C0349AABA8EFF2FDED15E90$MyNSTVisitorAdapter -> cn.com.codesec.mT:
    java.util.List varAccesses -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatch8DA01A328C0349AABA8EFF2FDED15E90 this$0 -> a
    22:24:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatch8DA01A328C0349AABA8EFF2FDED15E90) -> <init>
    26:26:java.util.List getVarAccesses() -> a
    31:39:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    44:53:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch93661CD5D9394A34883F4FF8560013FA -> cn.com.codesec.mU:
    19:19:void <init>() -> <init>
    73:82:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    87:87:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatch93661CD5D9394A34883F4FF8560013FA$MyNSTVisitorAdapter -> cn.com.codesec.mV:
    java.util.List varAccesses -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatch93661CD5D9394A34883F4FF8560013FA this$0 -> a
    21:23:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatch93661CD5D9394A34883F4FF8560013FA) -> <init>
    25:25:java.util.List getVarAccesses() -> a
    30:32:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    35:43:void matchIRVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    47:50:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    54:68:void matchIRAssignmentStmt(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    63:65:void lambda$0(cn.com.codesec.scan.ir.nodes.IRLocation,java.util.List,cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchA4AEFCB3EFDE45BD8FEC74C3C8F67151 -> cn.com.codesec.mW:
    java.util.regex.Pattern SUPER_CLASS -> a
    java.util.regex.Pattern CONSTANT_VALUE -> b
    40:41:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    97:106:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    110:110:java.lang.String getRuleID() -> a
    40:40:java.util.regex.Pattern access$0() -> b
    41:41:java.util.regex.Pattern access$1() -> c
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchA4AEFCB3EFDE45BD8FEC74C3C8F67151$MyNSTVisitorAdapter -> cn.com.codesec.mX:
    java.util.List irFunCalls -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchA4AEFCB3EFDE45BD8FEC74C3C8F67151 this$0 -> a
    42:47:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchA4AEFCB3EFDE45BD8FEC74C3C8F67151) -> <init>
    44:44:java.util.List getIrFunCalls() -> a
    51:53:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    57:91:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchB9633299DF9A4AB1A6A951FA5D5CFF1A -> cn.com.codesec.mY:
    java.util.regex.Pattern constantValuePattern -> a
    java.util.regex.Pattern getFunCallPattern -> b
    java.util.regex.Pattern setFunCallPattern -> c
    18:20:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    98:113:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    118:118:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchB9633299DF9A4AB1A6A951FA5D5CFF1A$MyNSTVisitorAdapter -> cn.com.codesec.mZ:
    java.util.List fieldAccessList -> b
    java.util.List funCalls -> c
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchB9633299DF9A4AB1A6A951FA5D5CFF1A this$0 -> a
    21:69:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchB9633299DF9A4AB1A6A951FA5D5CFF1A) -> <init>
    25:25:java.util.List getFieldAccessList() -> a
    29:36:boolean match(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    41:45:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    49:60:void matchAssign(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    64:66:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    72:83:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    87:89:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    93:93:java.util.List getFunCalls() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchC9C6592B99784953B7CCB7E1DD9CF43D -> cn.com.codesec.na:
    java.util.regex.Pattern VARIABLE -> a
    17:17:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    72:81:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    86:86:java.lang.String getRuleID() -> a
    17:17:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchC9C6592B99784953B7CCB7E1DD9CF43D$MyNSTVisitorAdapter -> cn.com.codesec.nb:
    java.util.List irVarAccessList -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchC9C6592B99784953B7CCB7E1DD9CF43D this$0 -> a
    18:23:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchC9C6592B99784953B7CCB7E1DD9CF43D) -> <init>
    20:20:java.util.List getIrVarAccessList() -> a
    27:29:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    33:38:void matchVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    48:67:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchCC1F2050FBF1A46859F7E495DA4F39357 -> cn.com.codesec.nc:
    java.util.regex.Pattern patternType -> a
    26:26:void <clinit>() -> <clinit>
    25:25:void <init>() -> <init>
    164:179:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    184:184:java.lang.String getRuleID() -> a
    26:26:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchCC1F2050FBF1A46859F7E495DA4F39357$MyNSTVisitorAdapter -> cn.com.codesec.nd:
    java.util.List irFieldAccessList -> b
    java.util.List irFieldAccessListAssign -> c
    java.util.List irFieldAccessListCall -> d
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchCC1F2050FBF1A46859F7E495DA4F39357 this$0 -> a
    27:44:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchCC1F2050FBF1A46859F7E495DA4F39357) -> <init>
    29:29:java.util.List getIrFieldAccessList() -> a
    35:35:java.util.List getIrFieldAccessListAssign() -> b
    41:41:java.util.List getIrFieldAccessListCall() -> c
    48:50:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    54:68:void matchVarAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    78:85:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    89:91:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    94:104:void matchIRCallStmt(cn.com.codesec.scan.ir.nodes.IRCallStmt) -> a
    107:150:boolean matchFunMeta(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FieldMeta) -> a
    154:158:boolean matchTypeName(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.String) -> a
    100:100:boolean lambda$0(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    101:101:cn.com.codesec.scan.ir.nodes.IRFieldAccess lambda$1(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD5A281405A594F738C2A4948739A0788 -> cn.com.codesec.ne:
    java.util.regex.Pattern VARIABLE -> a
    17:17:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    72:81:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    85:85:java.lang.String getRuleID() -> a
    17:17:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD5A281405A594F738C2A4948739A0788$MyNSTVisitorAdapter -> cn.com.codesec.nf:
    java.util.List irFieldAccessList -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD5A281405A594F738C2A4948739A0788 this$0 -> a
    18:23:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD5A281405A594F738C2A4948739A0788) -> <init>
    20:20:java.util.List getIrFieldAccessList() -> a
    27:29:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    33:38:void matchVarAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    48:67:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD9630DFC059741C4A0014191BFAB7D8B -> cn.com.codesec.ng:
    21:21:void <init>() -> <init>
    77:86:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    90:90:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD9630DFC059741C4A0014191BFAB7D8B$MyNSTVisitorAdapter -> cn.com.codesec.nh:
    java.util.List irVarAccessList -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD9630DFC059741C4A0014191BFAB7D8B this$0 -> a
    22:27:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchD9630DFC059741C4A0014191BFAB7D8B) -> <init>
    24:24:java.util.List getIrVarAccessList() -> a
    31:33:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    37:47:void matchVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    51:53:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    57:72:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchE2F47C211D6547D5BC79FC8757F440BD -> cn.com.codesec.ni:
    java.util.regex.Pattern VARIABLE -> a
    17:17:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    72:81:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    85:85:java.lang.String getRuleID() -> a
    17:17:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.source.SourceStructuralMatchE2F47C211D6547D5BC79FC8757F440BD$MyNSTVisitorAdapter -> cn.com.codesec.nj:
    java.util.List irVarAccessList -> b
    cn.com.codesec.java.taint.impl.source.SourceStructuralMatchE2F47C211D6547D5BC79FC8757F440BD this$0 -> a
    18:23:void <init>(cn.com.codesec.java.taint.impl.source.SourceStructuralMatchE2F47C211D6547D5BC79FC8757F440BD) -> <init>
    20:20:java.util.List getIrVarAccessList() -> a
    27:29:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    33:38:void matchVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    42:44:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    48:67:void matchAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.java.taint.impl.transfer.TransferFunctionMatch0089D56B9B6147389CDB97D9680DA243 -> cn.com.codesec.nk:
    java.util.List rmList -> a
    java.util.regex.Pattern pattern -> b
    32:32:void <clinit>() -> <clinit>
    21:31:void <init>() -> <init>
    35:36:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    40:55:void matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> l
    59:59:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferFunctionMatch35604BB9EC2E49BFA027FA61C7F5CAC5 -> cn.com.codesec.nl:
    java.lang.String typeName -> a
    java.util.regex.Pattern pattern -> b
    21:21:void <clinit>() -> <clinit>
    20:22:void <init>() -> <init>
    25:44:cn.com.codesec.scan.util.Twin match(cn.com.codesec.scan.metadata.FunMeta) -> l
    51:57:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    62:62:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferFunctionMatchDA83CBF72FF54605A50FB41A0F95FAD6 -> cn.com.codesec.nm:
    java.util.List rmList -> a
    20:28:void <init>() -> <init>
    32:33:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    37:51:void matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> l
    55:55:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferFunctionMatchDF3BD4ACC9FA4C11AD3CEA3567469DEE -> cn.com.codesec.nn:
    java.util.List rmList -> a
    20:28:void <init>() -> <init>
    32:33:java.util.List matchFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    37:51:void matchFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> l
    55:55:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch35EF336B731D4CC59C6F4CE2167F500A -> cn.com.codesec.no:
    27:27:void <init>() -> <init>
    100:112:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    117:117:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch35EF336B731D4CC59C6F4CE2167F500A$MyNSTVisitorAdapter -> cn.com.codesec.np:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch35EF336B731D4CC59C6F4CE2167F500A this$0 -> a
    38:40:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch35EF336B731D4CC59C6F4CE2167F500A) -> <init>
    43:43:java.util.List getExpressionPairList() -> a
    47:88:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    92:94:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    64:64:boolean lambda$0(cn.com.codesec.scan.metadata.annotations.AnnotationElement) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch845A5AB6CA294ED9A23DA53261C95BA8 -> cn.com.codesec.nq:
    java.util.regex.Pattern pattern -> a
    34:34:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    83:96:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    101:101:java.lang.String getRuleID() -> a
    34:34:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch845A5AB6CA294ED9A23DA53261C95BA8$MyNSTVisitorAdapter -> cn.com.codesec.nr:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch845A5AB6CA294ED9A23DA53261C95BA8 this$0 -> a
    35:37:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch845A5AB6CA294ED9A23DA53261C95BA8) -> <init>
    40:40:java.util.List getExpressionPairList() -> a
    44:71:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    75:77:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch89DB5F27686A4A66A243CB356E580C4D -> cn.com.codesec.ns:
    27:27:void <init>() -> <init>
    88:101:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    106:106:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch89DB5F27686A4A66A243CB356E580C4D$MyNSTVisitorAdapter -> cn.com.codesec.nt:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch89DB5F27686A4A66A243CB356E580C4D this$0 -> a
    37:39:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch89DB5F27686A4A66A243CB356E580C4D) -> <init>
    42:42:java.util.List getExpressionPairList() -> a
    46:76:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    80:82:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    63:63:boolean lambda$0(cn.com.codesec.scan.metadata.annotations.AnnotationElement) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch8BAAACACE26C4CB2BA418470A4DCE008 -> cn.com.codesec.nu:
    java.util.regex.Pattern pattern -> a
    35:35:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    90:102:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    107:107:java.lang.String getRuleID() -> a
    35:35:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch8BAAACACE26C4CB2BA418470A4DCE008$MyNSTVisitorAdapter -> cn.com.codesec.nv:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch8BAAACACE26C4CB2BA418470A4DCE008 this$0 -> a
    36:38:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatch8BAAACACE26C4CB2BA418470A4DCE008) -> <init>
    41:41:java.util.List getExpressionPairList() -> a
    45:78:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    82:84:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchAC65535B8A154D368677AC3FB414C2BB -> cn.com.codesec.nw:
    25:25:void <init>() -> <init>
    89:101:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    106:106:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchAC65535B8A154D368677AC3FB414C2BB$MyNSTVisitorAdapter -> cn.com.codesec.nx:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchAC65535B8A154D368677AC3FB414C2BB this$0 -> a
    35:37:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchAC65535B8A154D368677AC3FB414C2BB) -> <init>
    40:40:java.util.List getExpressionPairList() -> a
    44:77:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    81:83:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchC855EB9C6B134E6CB11A5D35C918D160 -> cn.com.codesec.ny:
    25:25:void <init>() -> <init>
    81:94:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    99:99:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchC855EB9C6B134E6CB11A5D35C918D160$MyNSTVisitorAdapter -> cn.com.codesec.nz:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchC855EB9C6B134E6CB11A5D35C918D160 this$0 -> a
    34:36:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchC855EB9C6B134E6CB11A5D35C918D160) -> <init>
    39:39:java.util.List getExpressionPairList() -> a
    43:69:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    73:75:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchD1AE7DBF3DD845ED8FB8E67DCC1D72FA -> cn.com.codesec.nA:
    java.util.regex.Pattern pattern -> a
    34:34:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    84:97:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    102:102:java.lang.String getRuleID() -> a
    34:34:java.util.regex.Pattern access$0() -> b
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchD1AE7DBF3DD845ED8FB8E67DCC1D72FA$MyNSTVisitorAdapter -> cn.com.codesec.nB:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchD1AE7DBF3DD845ED8FB8E67DCC1D72FA this$0 -> a
    35:37:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchD1AE7DBF3DD845ED8FB8E67DCC1D72FA) -> <init>
    40:40:java.util.List getExpressionPairList() -> a
    44:72:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    76:78:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchE8ECBDC98A0142DFB68EC63823686E5E -> cn.com.codesec.nC:
    25:25:void <init>() -> <init>
    80:93:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    98:98:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchE8ECBDC98A0142DFB68EC63823686E5E$MyNSTVisitorAdapter -> cn.com.codesec.nD:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchE8ECBDC98A0142DFB68EC63823686E5E this$0 -> a
    33:35:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchE8ECBDC98A0142DFB68EC63823686E5E) -> <init>
    38:38:java.util.List getExpressionPairList() -> a
    42:68:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchF9C053FB416B422FB73F8CD82F40A785 -> cn.com.codesec.nE:
    25:25:void <init>() -> <init>
    76:88:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    93:93:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchF9C053FB416B422FB73F8CD82F40A785$MyNSTVisitorAdapter -> cn.com.codesec.nF:
    java.util.List expressionPairList -> b
    cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchF9C053FB416B422FB73F8CD82F40A785 this$0 -> a
    34:36:void <init>(cn.com.codesec.java.taint.impl.transfer.TransferStructuralMatchF9C053FB416B422FB73F8CD82F40A785) -> <init>
    39:39:java.util.List getExpressionPairList() -> a
    43:64:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    68:70:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch49F831F146BC446288AEE065F8A15F4B -> cn.com.codesec.nG:
    22:22:void <init>() -> <init>
    93:103:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    108:108:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch49F831F146BC446288AEE065F8A15F4B$MyNSTVisitorAdapter -> cn.com.codesec.nH:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.write.WriteStructuralMatch49F831F146BC446288AEE065F8A15F4B this$0 -> a
    36:38:void <init>(cn.com.codesec.java.taint.impl.write.WriteStructuralMatch49F831F146BC446288AEE065F8A15F4B) -> <init>
    41:41:java.util.List getExpressionList() -> a
    45:79:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    83:85:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch5B0B77B72E9D4E348CE47C5A2294A388 -> cn.com.codesec.nI:
    23:23:void <init>() -> <init>
    82:92:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch5B0B77B72E9D4E348CE47C5A2294A388$MyNSTVisitorAdapter -> cn.com.codesec.nJ:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.write.WriteStructuralMatch5B0B77B72E9D4E348CE47C5A2294A388 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.write.WriteStructuralMatch5B0B77B72E9D4E348CE47C5A2294A388) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:68:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch6D9B922A4132472395B30824BFB09BD8 -> cn.com.codesec.nK:
    24:24:void <init>() -> <init>
    96:106:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    111:111:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch6D9B922A4132472395B30824BFB09BD8$MyNSTVisitorAdapter -> cn.com.codesec.nL:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.write.WriteStructuralMatch6D9B922A4132472395B30824BFB09BD8 this$0 -> a
    40:42:void <init>(cn.com.codesec.java.taint.impl.write.WriteStructuralMatch6D9B922A4132472395B30824BFB09BD8) -> <init>
    45:45:java.util.List getExpressionList() -> a
    49:82:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    86:88:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch976521052B26476DB65D26ADBD5BF6F6 -> cn.com.codesec.nM:
    23:23:void <init>() -> <init>
    82:92:java.util.List matchBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    97:97:java.lang.String getRuleID() -> a
cn.com.codesec.java.taint.impl.write.WriteStructuralMatch976521052B26476DB65D26ADBD5BF6F6$MyNSTVisitorAdapter -> cn.com.codesec.nN:
    java.util.List expressionList -> b
    cn.com.codesec.java.taint.impl.write.WriteStructuralMatch976521052B26476DB65D26ADBD5BF6F6 this$0 -> a
    29:31:void <init>(cn.com.codesec.java.taint.impl.write.WriteStructuralMatch976521052B26476DB65D26ADBD5BF6F6) -> <init>
    34:34:java.util.List getExpressionList() -> a
    38:68:void match(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:74:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.java.template.common.Generator -> cn.com.codesec.nO:
    cn.com.codesec.java.template.common.ServletWriter out -> a
    java.lang.String servletPackageName -> b
    java.lang.String servletClassName -> c
    java.lang.String EL_EXPRESSIONFACTORY -> d
    java.lang.String JSP_INSTANCEMANAGER -> e
    java.lang.String EQUAL_NULL -> f
    20:24:void <init>() -> <init>
    34:131:void generatePreamble() -> a
    void generateSelfDefinedVariables() -> b
    141:149:void genPreambleStaticInitializers() -> f
    152:159:void genPreambleClassVariableDeclarations() -> g
    163:173:void genPreambleMethods() -> h
    176:181:void generateInit() -> i
    188:193:void generateDestroy() -> j
    196:254:void generateGetters() -> k
    257:261:void genPreamblePackage(java.lang.String) -> a
    264:269:void genPreambleImports() -> l
    void genPreambleSelfDefinedImports() -> c
    274:311:void generatePostamble() -> d
    315:317:void genCommonPostamble() -> e
cn.com.codesec.java.template.common.ServletWriter -> cn.com.codesec.nP:
    int TAB_WIDTH -> a
    java.lang.String SPACES -> b
    int indent -> c
    int virtual_indent -> d
    java.io.PrintWriter writer -> e
    int javaLine -> f
    int javaColumn -> g
    int preLineJavaColumn -> h
    13:32:void <init>(java.io.PrintWriter) -> <init>
    36:37:void close() -> close
    43:43:int getJavaLine() -> a
    47:47:int getJavaColumn() -> b
    51:51:int getPreLineJavaColumn() -> c
    57:60:void pushIndent() -> d
    63:66:void popIndent() -> e
    73:77:void println(java.lang.String) -> a
    83:87:void println() -> f
    93:96:void printin() -> g
    103:107:void printin(java.lang.String) -> b
    114:120:void printil(java.lang.String) -> c
    129:131:void print(char) -> a
    138:140:void print(int) -> a
    150:152:void print(java.lang.String) -> d
    162:178:void printMultiLn(java.lang.String) -> e
cn.com.codesec.java.translator.IRFileCreater -> cn.com.codesec.nQ:
    java.util.Map NST_FILES -> a
    20:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    23:30:cn.com.codesec.util.IRFile nstFile(cn.com.codesec.util.SourceFile) -> a
cn.com.codesec.java.translator.PHPSystemName -> cn.com.codesec.nR:
    java.lang.String SKY -> a
    java.lang.String SKY_PREFIX -> b
    java.lang.String CASTTO_PREFIX -> c
    java.lang.String SKY_CASTTO_PREFIX -> d
    java.lang.String SKY_CASTTO_UNSET -> e
    java.lang.String SKY_CASTTO_STRING -> f
    java.lang.String SKY_CASTTO_INT -> g
    java.lang.String SKY_CASTTO_FLOAT -> h
    java.lang.String SKY_CASTTO_BOOL -> i
    java.lang.String SKY_CASTTO_ARRAY -> j
    java.lang.String SKY_CASTTO_OBJECT -> k
    java.lang.String SKY_CASTTO_BINARY -> l
    java.lang.String ANNOTATION_SKY -> m
    java.lang.String ANNOTATION_SKY_CALL_TARGET -> n
    java.lang.String ANNOTATION_SKY_RETURN_TYPE -> o
    java.lang.String WAVE -> p
    java.lang.String DATAFLOWBRIDGE -> q
    java.lang.String WAVE_DATAFLOWBRIDGE -> r
    java.lang.String SKY_ASM -> s
    java.lang.String SKY_ASM_USE -> t
    java.lang.String SKY_ASM_DEF -> u
    java.lang.String WAVE_SOURCEANNOTATIONS -> v
    java.lang.String BSKSY -> w
    java.lang.String SKSY -> x
    java.lang.String SY_ANNOTATIONS_FUNCTION -> y
    java.lang.String SY_DUMMY -> z
    java.lang.String SY_SCHEMA -> A
    java.lang.String BOX_ENUM -> B
    java.lang.String FILE_SCOPE_INIT -> C
    10:10:void <init>() -> <init>
cn.com.codesec.java.translator.TypeSystemName -> cn.com.codesec.nS:
    java.lang.String BSSY -> a
    java.lang.String SSY -> b
    java.lang.String SKY_TMP -> c
    java.lang.String SKY_OBJECT -> d
    java.lang.String SKY_TOPLEVEL_METHOD -> e
    java.lang.String SKY_EXTERN -> f
    java.lang.String SKY_EXTERN_POINT -> g
    java.lang.String SKY_HASEXCEPTIONOCCURRED -> h
    java.lang.String SKY_DOTNET -> i
    java.lang.String SKY_UNKNOWN -> j
    java.lang.String SKY_VALIDATEREQUESTFALSE -> k
    java.lang.String SKY_VALIDATEREQUESTOMITTED -> l
    java.lang.String SKY_TYPE_INFO -> m
    java.lang.String SKY_RUNTIME_SIZEOF -> n
    java.lang.String SKY_DYNAMIC_CAST -> o
    java.lang.String SKY_CPP_SOME_INT -> p
    java.lang.String SKY_ATOMIC_INIT -> q
    java.lang.String SKY_ATOMICT -> r
    10:10:void <init>() -> <init>
cn.com.codesec.java.util.LoggerUtil -> cn.com.codesec.nT:
    16:16:void <init>() -> <init>
    20:20:org.apache.log4j.Logger getLogger() -> a
cn.com.codesec.java.util.PathUtil -> cn.com.codesec.nU:
    5:5:void <init>() -> <init>
    10:19:java.lang.String clearPath(java.lang.String) -> a
cn.com.codesec.java.util.ProjectUtil -> cn.com.codesec.nV:
    13:13:void <init>() -> <init>
    17:17:cn.com.codesec.java.common.SkyCSharpProject getProject() -> a
cn.com.codesec.java.util.Sky_CharacterEnding -> cn.com.codesec.nW:
    19:19:void <init>() -> <init>
    31:63:java.lang.String getFileEcoding(java.io.File,java.lang.String) -> a
cn.com.codesec.java.util.Sky_CharacterEnding$ZHComparator -> cn.com.codesec.nX:
    68:68:void <init>() -> <init>
    73:73:boolean isGB(com.ibm.icu.text.CharsetMatch) -> a
    78:78:boolean isUTF8(com.ibm.icu.text.CharsetMatch) -> b
    83:83:boolean isUNICODE(com.ibm.icu.text.CharsetMatch) -> c
    88:88:boolean isUTF8OrGB(com.ibm.icu.text.CharsetMatch) -> d
    93:93:boolean isISO88591(com.ibm.icu.text.CharsetMatch) -> e
    98:99:boolean isCnOrEn(com.ibm.icu.text.CharsetMatch) -> f
    106:161:int compare(com.ibm.icu.text.CharsetMatch,com.ibm.icu.text.CharsetMatch) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.java.util.ZipUtils -> cn.com.codesec.nY:
    char SUFFIX -> a
    int BUFF_SIZE -> b
    15:15:void <init>() -> <init>
    30:109:void unzip(java.lang.String,java.lang.String,java.lang.String) -> a
cn.com.codesec.messaging.LocalizationDelegate -> cn.com.codesec.nZ:
    java.lang.String getMessage(java.lang.String) -> a
cn.com.codesec.messaging.LogReceiver -> cn.com.codesec.oa:
    java.util.logging.Logger logger -> a
    boolean includeCaller -> b
    java.lang.String MSG_HANDLER_CLASSNAME -> c
    75:76:void <clinit>() -> <clinit>
    16:17:void <init>(java.util.logging.Logger) -> <init>
    19:22:void <init>(java.util.logging.Logger,boolean) -> <init>
    25:26:void setIncludeCaller(boolean) -> a
    30:31:void receive(cn.com.codesec.messaging.Message) -> a
    35:36:void receive(cn.com.codesec.java.common.SkyException) -> a
    40:41:void receive(cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
    44:72:void log(java.util.logging.Level,cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
cn.com.codesec.messaging.Message -> cn.com.codesec.ob:
    int UNKNOWN -> a
    int INFORMATIONAL -> b
    int INFO_VERBOSE -> c
    int WARNING -> d
    int ERROR -> e
    int LOG -> f
    int INTERNAL_WARNING -> g
    int EXCEPTION -> h
    int BUG -> i
    int LOG_VERBOSE -> j
    int LOG_STATUS -> k
    int severity -> l
    int errorCode -> m
    java.lang.String message -> n
    java.util.ArrayList parameters -> o
    java.lang.String HEX -> p
    java.lang.String[] severityToLogLevel -> q
    280:281:void <clinit>() -> <clinit>
    28:33:void <init>(int,java.lang.String) -> <init>
    35:43:void <init>(int,java.lang.String,java.lang.Object[]) -> <init>
    45:53:void <init>(int,int,java.lang.Object[]) -> <init>
    56:60:void setParameter(int,java.lang.Object) -> a
    63:63:boolean hasErrorCode() -> b
    67:67:int getErrorCode() -> c
    71:71:int getSeverity() -> d
    75:79:java.lang.String getLocalizedMessage() -> e
    83:87:java.lang.String getLocalizedMessage(java.lang.String) -> a
    91:93:java.lang.String getSymbolicMessage() -> f
    97:122:void getSymbolicMessage(java.lang.StringBuffer) -> a
    125:142:void quote(java.lang.StringBuffer,java.lang.String) -> a
    145:151:void hex(java.lang.StringBuffer,char) -> a
    154:154:java.util.Iterator getParameters() -> g
    158:158:java.lang.String toString() -> toString
    162:162:java.lang.String getLogLevel() -> h
    167:167:cn.com.codesec.messaging.Message getSkyMessage() -> a
    171:212:java.lang.String parameterize(java.lang.String) -> b
    216:217:void <init>(int,cn.com.codesec.messaging.Message$Code0) -> <init>
    220:221:void <init>(int,cn.com.codesec.messaging.Message$Code1,java.lang.Object) -> <init>
    224:225:void <init>(int,cn.com.codesec.messaging.Message$Code2,java.lang.Object,java.lang.Object) -> <init>
    228:229:void <init>(int,cn.com.codesec.messaging.Message$Code3,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    232:233:void <init>(int,cn.com.codesec.messaging.Message$Code4,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    236:237:void <init>(int,cn.com.codesec.messaging.Message$Code5,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    240:241:void <init>(int,cn.com.codesec.messaging.Message$CodeV,java.lang.Object[]) -> <init>
    244:244:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code0) -> a
    248:248:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code1,java.lang.Object) -> a
    252:252:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code2,java.lang.Object,java.lang.Object) -> a
    256:256:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code3,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    260:260:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code4,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    264:264:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$Code5,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    268:268:cn.com.codesec.messaging.Message mk(cn.com.codesec.messaging.Message$CodeV,java.lang.Object[]) -> a
    272:272:cn.com.codesec.messaging.Message mk(int) -> a
    276:276:cn.com.codesec.messaging.Message mk(int,java.lang.Object[]) -> a
cn.com.codesec.messaging.Message$Code -> cn.com.codesec.oc:
    int index -> a
    287:289:void <init>(int) -> <init>
    int getNumParams() -> a
cn.com.codesec.messaging.Message$Code0 -> cn.com.codesec.od:
    319:320:void <init>(int) -> <init>
    324:324:int getNumParams() -> a
    328:328:cn.com.codesec.messaging.Message mk() -> b
cn.com.codesec.messaging.Message$Code1 -> cn.com.codesec.oe:
    335:336:void <init>(int) -> <init>
    340:340:int getNumParams() -> a
    344:344:cn.com.codesec.messaging.Message mk(java.lang.Object) -> a
cn.com.codesec.messaging.Message$Code2 -> cn.com.codesec.of:
    351:352:void <init>(int) -> <init>
    356:356:int getNumParams() -> a
    360:360:cn.com.codesec.messaging.Message mk(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.messaging.Message$Code3 -> cn.com.codesec.og:
    367:368:void <init>(int) -> <init>
    372:372:int getNumParams() -> a
    376:376:cn.com.codesec.messaging.Message mk(java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.messaging.Message$Code4 -> cn.com.codesec.oh:
    383:384:void <init>(int) -> <init>
    388:388:int getNumParams() -> a
    392:392:cn.com.codesec.messaging.Message mk(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.messaging.Message$Code5 -> cn.com.codesec.oi:
    399:400:void <init>(int) -> <init>
    404:404:int getNumParams() -> a
    408:408:cn.com.codesec.messaging.Message mk(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.messaging.Message$CodeF -> cn.com.codesec.oj:
    312:313:void <init>(int) -> <init>
cn.com.codesec.messaging.Message$CodeV -> cn.com.codesec.ok:
    int numParams -> b
    299:301:void <init>(int,int) -> <init>
    305:305:int getNumParams() -> a
cn.com.codesec.messaging.MessageManager -> cn.com.codesec.ol:
    java.util.Set RECEIVERS -> a
    cn.com.codesec.messaging.LocalizationDelegate localizationDelegate -> b
    java.util.Map localizationBundlesMap -> c
    261:262:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    24:27:void setLocalizationDelegate(cn.com.codesec.messaging.LocalizationDelegate) -> a
    30:33:java.util.Map getLocalizationBundlesMap() -> a
    37:38:void addMessageReceiver(cn.com.codesec.messaging.MessageReceiver) -> a
    41:42:void removeMessageReceiver(cn.com.codesec.messaging.MessageReceiver) -> b
    45:58:void send(cn.com.codesec.messaging.Message) -> a
    61:74:void handleException(cn.com.codesec.java.common.SkyException) -> a
    77:90:void handleException(cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
    93:94:void error(int,java.lang.Object[]) -> a
    97:98:void error(java.lang.String,java.lang.Object[]) -> a
    101:102:void warning(int,java.lang.Object[]) -> b
    105:106:void warning(java.lang.String,java.lang.Object[]) -> b
    109:110:void info(int,java.lang.Object[]) -> c
    113:114:void verbose(int,java.lang.Object[]) -> d
    117:118:void error(int,java.lang.Throwable,java.lang.Object[]) -> a
    121:122:void warning(int,java.lang.Throwable,java.lang.Object[]) -> b
    125:126:void warning(java.lang.String,java.lang.Throwable,java.lang.Object[]) -> a
    129:130:void log(java.lang.String) -> a
    133:134:void log(java.lang.String,java.lang.Throwable) -> a
    137:138:void logVerbose(java.lang.String) -> b
    141:142:void logVerbose(java.lang.String,java.lang.Throwable) -> b
    145:146:void logStatus(java.lang.String) -> c
    149:150:void logStatus(java.lang.String,java.lang.Throwable) -> c
    153:154:void warnInternal(java.lang.String) -> d
    157:158:void warnInternal(java.lang.String,java.lang.Throwable) -> d
    161:162:void warnInternal(int,java.lang.Throwable,java.lang.Object[]) -> c
    165:166:void warnInternal(int,java.lang.Object[]) -> e
    169:170:void warnInternal(java.lang.String,java.lang.Object[]) -> c
    173:173:java.lang.String getLocalString(java.lang.String,java.lang.Object[]) -> d
    177:177:java.lang.String getLocalString(int,java.lang.Object[]) -> f
    181:181:java.lang.String getLocalString(java.lang.String,int,java.lang.Object[]) -> a
    185:188:java.lang.String getLocalizedMessage(cn.com.codesec.messaging.Message,java.lang.String) -> a
    192:210:java.lang.String getLocalizedMessage(java.lang.String) -> e
    214:233:java.lang.String getLocalizedMessage(java.lang.String,java.lang.String) -> a
    237:238:void error(cn.com.codesec.messaging.Message$Code,java.lang.Object[]) -> a
    241:242:void info(cn.com.codesec.messaging.Message$Code,java.lang.Object[]) -> b
    245:246:void verbose(cn.com.codesec.messaging.Message$Code,java.lang.Object[]) -> c
    249:250:void error(cn.com.codesec.messaging.Message$Code,java.lang.Throwable,java.lang.Object[]) -> a
    253:254:void warning(cn.com.codesec.messaging.Message$Code,java.lang.Throwable,java.lang.Object[]) -> b
    257:257:java.lang.String getLocalString(cn.com.codesec.messaging.Message$Code,java.lang.Object[]) -> d
cn.com.codesec.messaging.MessageManagerEscapeException -> cn.com.codesec.om:
cn.com.codesec.messaging.MessageReceiver -> cn.com.codesec.on:
    void receive(cn.com.codesec.messaging.Message) -> a
    void receive(cn.com.codesec.java.common.SkyException) -> a
    void receive(cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
cn.com.codesec.messaging.SkyLogRecord -> cn.com.codesec.oo:
    cn.com.codesec.messaging.Message message -> a
    11:13:void <init>(java.util.logging.Level,cn.com.codesec.messaging.Message) -> <init>
    16:16:cn.com.codesec.messaging.Message getSkyMessage() -> a
cn.com.codesec.messaging.SkyMessageHolder -> cn.com.codesec.op:
    cn.com.codesec.messaging.Message getSkyMessage() -> a
cn.com.codesec.messaging.TestLogReceiver -> cn.com.codesec.oq:
    13:13:void <init>() -> <init>
    19:20:void receive(cn.com.codesec.messaging.Message) -> a
    24:26:void receive(cn.com.codesec.java.common.SkyException) -> a
    30:31:void receive(cn.com.codesec.messaging.Message,java.lang.Throwable) -> a
cn.com.codesec.parse.ir.IRConstants -> cn.com.codesec.or:
    java.lang.String SQLSTMT_SELECT -> a
    java.lang.String SQLSTMT_UPDATE -> b
    java.lang.String SQLSTMT_INSERT -> c
    java.lang.String SQLSTMT_DELETE -> d
    java.lang.String SQLSTMT_EXECUTE -> e
    java.lang.String SQLSTMT_CREATECURSOR -> f
    java.lang.String SQLSTMT_OPENCURSOR -> g
    java.lang.String SQLSTMT_CLOSECURSOR -> h
    java.lang.String SQLSTMT_FETCH -> i
    java.lang.String SQLSTMT_RAISE -> j
    java.lang.String SQLCURSOR_ROWCOUNT -> k
    java.lang.String SQLCURSOR_FOUND -> l
    java.lang.String SQLCURSOR_NOTFOUND -> m
    java.lang.String SQLCURSOR_ISOPEN -> n
    java.lang.String SQLCURSOR_BULKROWCOUNT -> o
    java.lang.String SQLCURSOR_BULKEXCEPTIONS -> p
    java.lang.String CURSOR_ROWCOUNT -> q
    java.lang.String CURSOR_FOUND -> r
    java.lang.String CURSOR_NOTFOUND -> s
    java.lang.String CURSOR_ISOPEN -> t
    java.lang.String SQL_PSEUDOFUN -> u
    java.lang.String PLSQL_BLOCK -> v
    java.lang.String PLSQL_TRIGGER -> w
    java.lang.String NST_TMP_PREFIX -> x
    java.lang.String CPLUSPLUS_EXCEPTION -> y
    java.lang.String ANNOTATION_FUNCTION -> z
cn.com.codesec.parse.ir.IRModifierSet -> cn.com.codesec.os:
    java.util.EnumSet modifiers -> b
    cn.com.codesec.parse.ir.IRModifierSet EMPTY -> a
    139:140:void <clinit>() -> <clinit>
    18:20:void <init>() -> <init>
    22:32:void <init>(java.util.List) -> <init>
    34:36:void <init>(cn.com.codesec.parse.ir.IRModifiers) -> <init>
    38:40:void <init>(cn.com.codesec.parse.ir.IRModifiers,cn.com.codesec.parse.ir.IRModifiers[]) -> <init>
    42:44:void <init>(java.util.EnumSet) -> <init>
    47:47:int size() -> a
    52:52:java.util.Iterator iterator() -> iterator
    56:58:cn.com.codesec.parse.ir.IRModifierSet add(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    62:64:cn.com.codesec.parse.ir.IRModifierSet add(cn.com.codesec.parse.ir.IRModifierSet) -> a
    68:70:cn.com.codesec.parse.ir.IRModifierSet remove(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    74:74:boolean contains(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    79:86:boolean equals(java.lang.Object) -> equals
    91:91:int hashCode() -> hashCode
    96:116:int compareTo(cn.com.codesec.parse.ir.IRModifierSet) -> b
    121:135:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.parse.ir.IRModifiers -> cn.com.codesec.ot:
    cn.com.codesec.parse.ir.IRModifiers ABSTRACT -> a
    cn.com.codesec.parse.ir.IRModifiers ANDROID -> b
    cn.com.codesec.parse.ir.IRModifiers ANNOTATION -> c
    cn.com.codesec.parse.ir.IRModifiers CONST -> d
    cn.com.codesec.parse.ir.IRModifiers DYNAMIC -> e
    cn.com.codesec.parse.ir.IRModifiers ENUM -> f
    cn.com.codesec.parse.ir.IRModifiers ENVIRONMENT -> g
    cn.com.codesec.parse.ir.IRModifiers EVENT -> h
    cn.com.codesec.parse.ir.IRModifiers EXTERN -> i
    cn.com.codesec.parse.ir.IRModifiers FINAL -> j
    cn.com.codesec.parse.ir.IRModifiers INFERRED -> k
    cn.com.codesec.parse.ir.IRModifiers INLINE -> l
    cn.com.codesec.parse.ir.IRModifiers INTERFACE -> m
    cn.com.codesec.parse.ir.IRModifiers LIBRARY -> n
    cn.com.codesec.parse.ir.IRModifiers MAP_REST_PARAM -> o
    cn.com.codesec.parse.ir.IRModifiers MODULE -> p
    cn.com.codesec.parse.ir.IRModifiers NATIVE -> q
    cn.com.codesec.parse.ir.IRModifiers PRIVATE -> r
    cn.com.codesec.parse.ir.IRModifiers PROPERTY -> s
    cn.com.codesec.parse.ir.IRModifiers PROTECTED -> t
    cn.com.codesec.parse.ir.IRModifiers PUBLIC -> u
    cn.com.codesec.parse.ir.IRModifiers REST_PARAM -> v
    cn.com.codesec.parse.ir.IRModifiers SERIALIZABLE -> w
    cn.com.codesec.parse.ir.IRModifiers STATIC -> x
    cn.com.codesec.parse.ir.IRModifiers STRICTFP -> y
    cn.com.codesec.parse.ir.IRModifiers SYNCHRONIZED -> z
    cn.com.codesec.parse.ir.IRModifiers SYNTHETIC -> A
    cn.com.codesec.parse.ir.IRModifiers TRANSIENT -> B
    cn.com.codesec.parse.ir.IRModifiers UNION -> C
    cn.com.codesec.parse.ir.IRModifiers VIRTUAL -> D
    cn.com.codesec.parse.ir.IRModifiers VOLATILE -> E
    cn.com.codesec.parse.ir.IRModifiers WEBSERVICE -> F
    cn.com.codesec.parse.ir.IRModifiers[] ENUM$VALUES -> G
    3:36:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.ir.IRModifiers[] values() -> values
    1:1:cn.com.codesec.parse.ir.IRModifiers valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.ir.IROperators -> cn.com.codesec.ou:
    cn.com.codesec.parse.ir.IROperators Empty -> a
    cn.com.codesec.parse.ir.IROperators ADD -> b
    cn.com.codesec.parse.ir.IROperators SUBTRACT -> c
    cn.com.codesec.parse.ir.IROperators MULTIPLY -> d
    cn.com.codesec.parse.ir.IROperators DIVIDE -> e
    cn.com.codesec.parse.ir.IROperators MOD -> f
    cn.com.codesec.parse.ir.IROperators AND -> g
    cn.com.codesec.parse.ir.IROperators OR -> h
    cn.com.codesec.parse.ir.IROperators XOR -> i
    cn.com.codesec.parse.ir.IROperators LSHIFT -> j
    cn.com.codesec.parse.ir.IROperators RSHIFT -> k
    cn.com.codesec.parse.ir.IROperators BWRSHIFT -> l
    cn.com.codesec.parse.ir.IROperators EQUAL -> m
    cn.com.codesec.parse.ir.IROperators NOT_EQUAL -> n
    cn.com.codesec.parse.ir.IROperators LESS_THAN -> o
    cn.com.codesec.parse.ir.IROperators GREATER_THAN -> p
    cn.com.codesec.parse.ir.IROperators LESS_THAN_EQUAL -> q
    cn.com.codesec.parse.ir.IROperators GREATER_THAN_EQUAL -> r
    cn.com.codesec.parse.ir.IROperators IN -> s
    cn.com.codesec.parse.ir.IROperators BETWEEN -> t
    cn.com.codesec.parse.ir.IROperators LIKE -> u
    cn.com.codesec.parse.ir.IROperators CONCATENATE -> v
    cn.com.codesec.parse.ir.IROperators IS -> w
    cn.com.codesec.parse.ir.IROperators EXPONENT -> x
    cn.com.codesec.parse.ir.IROperators BWCOMPLEMENT -> y
    cn.com.codesec.parse.ir.IROperators REF -> z
    cn.com.codesec.parse.ir.IROperators ARRAYLEN -> A
    cn.com.codesec.parse.ir.IROperators NOT -> B
    cn.com.codesec.parse.ir.IROperators COALESCE -> C
    cn.com.codesec.parse.ir.IROperators AS -> D
    cn.com.codesec.parse.ir.IROperators[] ENUM$VALUES -> E
    3:345:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    355:355:boolean isUnary() -> a
    359:359:boolean isPostfix() -> b
    364:364:java.lang.String toString() -> toString
    java.lang.String nstString() -> c
    java.lang.String prettyString() -> d
    1:1:cn.com.codesec.parse.ir.IROperators[] values() -> values
    1:1:cn.com.codesec.parse.ir.IROperators valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators) -> <init>
cn.com.codesec.parse.ir.IROperators$1 -> cn.com.codesec.ov:
    1:5:void <init>(java.lang.String,int) -> <init>
    8:8:java.lang.String prettyString() -> d
    13:13:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$10 -> cn.com.codesec.ow:
    1:104:void <init>(java.lang.String,int) -> <init>
    107:107:java.lang.String prettyString() -> d
    112:112:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$11 -> cn.com.codesec.ox:
    1:115:void <init>(java.lang.String,int) -> <init>
    118:118:java.lang.String prettyString() -> d
    123:123:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$12 -> cn.com.codesec.oy:
    1:126:void <init>(java.lang.String,int) -> <init>
    129:129:java.lang.String prettyString() -> d
    134:134:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$13 -> cn.com.codesec.oz:
    1:137:void <init>(java.lang.String,int) -> <init>
    140:140:java.lang.String prettyString() -> d
    145:145:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$14 -> cn.com.codesec.oA:
    1:148:void <init>(java.lang.String,int) -> <init>
    151:151:java.lang.String prettyString() -> d
    156:156:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$15 -> cn.com.codesec.oB:
    1:159:void <init>(java.lang.String,int) -> <init>
    162:162:java.lang.String prettyString() -> d
    167:167:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$16 -> cn.com.codesec.oC:
    1:170:void <init>(java.lang.String,int) -> <init>
    173:173:java.lang.String prettyString() -> d
    178:178:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$17 -> cn.com.codesec.oD:
    1:181:void <init>(java.lang.String,int) -> <init>
    184:184:java.lang.String prettyString() -> d
    189:189:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$18 -> cn.com.codesec.oE:
    1:192:void <init>(java.lang.String,int) -> <init>
    195:195:java.lang.String prettyString() -> d
    200:200:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$19 -> cn.com.codesec.oF:
    1:203:void <init>(java.lang.String,int) -> <init>
    206:206:java.lang.String prettyString() -> d
    211:211:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$2 -> cn.com.codesec.oG:
    1:16:void <init>(java.lang.String,int) -> <init>
    19:19:java.lang.String prettyString() -> d
    24:24:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$20 -> cn.com.codesec.oH:
    1:214:void <init>(java.lang.String,int) -> <init>
    217:217:java.lang.String prettyString() -> d
    222:222:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$21 -> cn.com.codesec.oI:
    1:225:void <init>(java.lang.String,int) -> <init>
    228:228:java.lang.String prettyString() -> d
    233:233:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$22 -> cn.com.codesec.oJ:
    1:236:void <init>(java.lang.String,int) -> <init>
    239:239:java.lang.String prettyString() -> d
    244:244:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$23 -> cn.com.codesec.oK:
    1:247:void <init>(java.lang.String,int) -> <init>
    250:250:java.lang.String prettyString() -> d
    255:255:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$24 -> cn.com.codesec.oL:
    1:258:void <init>(java.lang.String,int) -> <init>
    261:261:java.lang.String prettyString() -> d
    266:266:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$25 -> cn.com.codesec.oM:
    1:269:void <init>(java.lang.String,int) -> <init>
    272:272:boolean isUnary() -> a
    277:277:java.lang.String prettyString() -> d
    282:282:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$26 -> cn.com.codesec.oN:
    1:285:void <init>(java.lang.String,int) -> <init>
    288:288:boolean isUnary() -> a
    293:293:java.lang.String prettyString() -> d
    298:298:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$27 -> cn.com.codesec.oO:
    1:301:void <init>(java.lang.String,int) -> <init>
    304:304:boolean isUnary() -> a
    309:309:boolean isPostfix() -> b
    314:314:java.lang.String prettyString() -> d
    319:319:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$28 -> cn.com.codesec.oP:
    1:322:void <init>(java.lang.String,int) -> <init>
    325:325:boolean isUnary() -> a
    330:330:java.lang.String prettyString() -> d
    335:335:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$29 -> cn.com.codesec.oQ:
    1:338:void <init>(java.lang.String,int) -> <init>
    340:340:java.lang.String nstString() -> c
    343:343:java.lang.String prettyString() -> d
cn.com.codesec.parse.ir.IROperators$3 -> cn.com.codesec.oR:
    1:27:void <init>(java.lang.String,int) -> <init>
    30:30:java.lang.String prettyString() -> d
    35:35:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$30 -> cn.com.codesec.oS:
    1:345:void <init>(java.lang.String,int) -> <init>
    347:347:java.lang.String nstString() -> c
    350:350:java.lang.String prettyString() -> d
cn.com.codesec.parse.ir.IROperators$4 -> cn.com.codesec.oT:
    1:38:void <init>(java.lang.String,int) -> <init>
    41:41:java.lang.String prettyString() -> d
    46:46:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$5 -> cn.com.codesec.oU:
    1:49:void <init>(java.lang.String,int) -> <init>
    52:52:java.lang.String prettyString() -> d
    57:57:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$6 -> cn.com.codesec.oV:
    1:60:void <init>(java.lang.String,int) -> <init>
    63:63:java.lang.String prettyString() -> d
    68:68:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$7 -> cn.com.codesec.oW:
    1:71:void <init>(java.lang.String,int) -> <init>
    74:74:java.lang.String prettyString() -> d
    79:79:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$8 -> cn.com.codesec.oX:
    1:82:void <init>(java.lang.String,int) -> <init>
    85:85:java.lang.String prettyString() -> d
    90:90:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.IROperators$9 -> cn.com.codesec.oY:
    1:93:void <init>(java.lang.String,int) -> <init>
    96:96:java.lang.String prettyString() -> d
    101:101:java.lang.String nstString() -> c
cn.com.codesec.parse.ir.Modifiable -> cn.com.codesec.oZ:
    void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
cn.com.codesec.parse.ir.NoSourceInfo -> cn.com.codesec.pa:
    cn.com.codesec.parse.ir.NoSourceInfo CANON -> a
    17:18:void <clinit>() -> <clinit>
    8:9:void <init>() -> <init>
    13:13:int getLineStart() -> a
cn.com.codesec.parse.ir.PrimitiveType -> cn.com.codesec.pb:
    cn.com.codesec.parse.ir.PrimitiveType EMPTY -> a
    cn.com.codesec.parse.ir.PrimitiveType INT -> b
    cn.com.codesec.parse.ir.PrimitiveType SHORT -> c
    cn.com.codesec.parse.ir.PrimitiveType LONG -> d
    cn.com.codesec.parse.ir.PrimitiveType INT128 -> e
    cn.com.codesec.parse.ir.PrimitiveType BYTE -> f
    cn.com.codesec.parse.ir.PrimitiveType CHAR -> g
    cn.com.codesec.parse.ir.PrimitiveType CHAR16 -> h
    cn.com.codesec.parse.ir.PrimitiveType CHAR32 -> i
    cn.com.codesec.parse.ir.PrimitiveType WCHAR -> j
    cn.com.codesec.parse.ir.PrimitiveType BOOLEAN -> k
    cn.com.codesec.parse.ir.PrimitiveType DOUBLE -> l
    cn.com.codesec.parse.ir.PrimitiveType FLOAT -> m
    cn.com.codesec.parse.ir.PrimitiveType FLOAT128 -> n
    cn.com.codesec.parse.ir.PrimitiveType HALF -> o
    cn.com.codesec.parse.ir.PrimitiveType VOID -> p
    cn.com.codesec.parse.ir.PrimitiveType NULL -> q
    cn.com.codesec.parse.ir.PrimitiveType VARCHAR -> r
    cn.com.codesec.parse.ir.PrimitiveType VARCHAR2 -> s
    cn.com.codesec.parse.ir.PrimitiveType NUMBER -> t
    cn.com.codesec.parse.ir.PrimitiveType NATURAL -> u
    cn.com.codesec.parse.ir.PrimitiveType REAL -> v
    cn.com.codesec.parse.ir.PrimitiveType DATE -> w
    cn.com.codesec.parse.ir.PrimitiveType BINARY_INTEGER -> x
    cn.com.codesec.parse.ir.PrimitiveType LONGLONG -> y
    cn.com.codesec.parse.ir.PrimitiveType UCHAR -> z
    cn.com.codesec.parse.ir.PrimitiveType UCHAR16 -> A
    cn.com.codesec.parse.ir.PrimitiveType UCHAR32 -> B
    cn.com.codesec.parse.ir.PrimitiveType UWCHAR -> C
    cn.com.codesec.parse.ir.PrimitiveType USHORT -> D
    cn.com.codesec.parse.ir.PrimitiveType UINT -> E
    cn.com.codesec.parse.ir.PrimitiveType ULONG -> F
    cn.com.codesec.parse.ir.PrimitiveType ULONGLONG -> G
    cn.com.codesec.parse.ir.PrimitiveType UINT128 -> H
    cn.com.codesec.parse.ir.PrimitiveType LONGDOUBLE -> I
    cn.com.codesec.parse.ir.PrimitiveType PTR_TYPE -> J
    cn.com.codesec.parse.ir.PrimitiveType SIZE_TYPE -> K
    cn.com.codesec.parse.ir.PrimitiveType RAW -> L
    cn.com.codesec.parse.ir.PrimitiveType LONG_RAW -> M
    cn.com.codesec.parse.ir.PrimitiveType DECIMAL -> N
    cn.com.codesec.parse.ir.PrimitiveType BLOB -> O
    cn.com.codesec.parse.ir.PrimitiveType CLOB -> P
    cn.com.codesec.parse.ir.PrimitiveType NCLOB -> Q
    cn.com.codesec.parse.ir.PrimitiveType BFILE -> R
    cn.com.codesec.parse.ir.PrimitiveType LONG_CHAR -> S
    cn.com.codesec.parse.ir.PrimitiveType NCHAR -> T
    cn.com.codesec.parse.ir.PrimitiveType NVARCHAR2 -> U
    cn.com.codesec.parse.ir.PrimitiveType TIMESTAMP -> V
    cn.com.codesec.parse.ir.PrimitiveType INTERVAL_YEAR -> W
    cn.com.codesec.parse.ir.PrimitiveType INTERVAL_DAY -> X
    cn.com.codesec.parse.ir.PrimitiveType ROWID -> Y
    cn.com.codesec.parse.ir.PrimitiveType UROWID -> Z
    cn.com.codesec.parse.ir.PrimitiveType CURSOR -> aa
    java.lang.String displayName -> ab
    java.util.Map SOURCE_CODE_NAMES -> ac
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> ad
    cn.com.codesec.parse.ir.PrimitiveType[] ENUM$VALUES -> ae
    8:148:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:21:void <init>(java.lang.String,int) -> <init>
    25:25:java.lang.String getDisplayName() -> a
    30:45:boolean isSigned() -> b
    50:59:boolean isFloatingPoint() -> c
    64:86:boolean isNumericType() -> d
    91:103:boolean isCharacterType() -> e
    108:108:cn.com.codesec.parse.ir.PrimitiveType getBySourceCodeName(java.lang.String) -> a
    1:1:cn.com.codesec.parse.ir.PrimitiveType[] values() -> values
    1:1:cn.com.codesec.parse.ir.PrimitiveType valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> f
cn.com.codesec.parse.ir.STCreationException -> cn.com.codesec.pc:
    cn.com.codesec.parse.translator.nodes.STNode sourceNode -> a
    10:12:void <init>(cn.com.codesec.parse.translator.nodes.STNode,java.lang.String) -> <init>
cn.com.codesec.parse.ir.STVisitor -> cn.com.codesec.pd:
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAllocation,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAssignmentStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STBlock,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCallStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STClassDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCompilationUnit,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STDeclStatement,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STExtendsList,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunIdentifier,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STGoto,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STImplementsList,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STIfElse,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STIndex,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAssociativeIndex,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STLiteralExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STNoOpStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STOpExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STReturnStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STType,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STUnresolvedLocation,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STUnresolvedType,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STWhileStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STExpressionList,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STArrayAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STDereference,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STSwitch,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCase,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STContinue,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STBreak,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STThrow,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunctionReference,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STLambda,java.lang.Object) -> a
cn.com.codesec.parse.ir.STVisitorAdapter -> cn.com.codesec.pe:
    49:49:void <init>() -> <init>
    52:53:void defaultVisit(cn.com.codesec.parse.translator.nodes.STNode,java.lang.Object) -> a
    56:61:void visitSourceAnnotations(cn.com.codesec.parse.translator.nodes.STDecl,java.lang.Object) -> a
    64:67:java.lang.Object visitExpressionTypeCast(cn.com.codesec.parse.translator.nodes.STExpression,java.lang.Object) -> a
    72:74:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAllocation,java.lang.Object) -> a
    79:80:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAssignmentStmt,java.lang.Object) -> a
    85:86:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STBlock,java.lang.Object) -> a
    91:92:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCallStmt,java.lang.Object) -> a
    97:99:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STClassDecl,java.lang.Object) -> a
    104:105:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCompilationUnit,java.lang.Object) -> a
    110:111:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STDeclStatement,java.lang.Object) -> a
    116:117:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STExtendsList,java.lang.Object) -> a
    122:123:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STIfElse,java.lang.Object) -> a
    128:130:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldAccess,java.lang.Object) -> a
    135:137:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldDecl,java.lang.Object) -> a
    142:144:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
    149:151:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunDecl,java.lang.Object) -> a
    156:157:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunIdentifier,java.lang.Object) -> a
    162:163:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STGoto,java.lang.Object) -> a
    168:169:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STImplementsList,java.lang.Object) -> a
    174:175:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STIndex,java.lang.Object) -> a
    180:181:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAssociativeIndex,java.lang.Object) -> a
    186:188:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STLiteralExp,java.lang.Object) -> a
    193:194:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STNoOpStmt,java.lang.Object) -> a
    199:201:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STOpExp,java.lang.Object) -> a
    206:207:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STReturnStmt,java.lang.Object) -> a
    212:213:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STType,java.lang.Object) -> a
    218:220:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STUnresolvedLocation,java.lang.Object) -> a
    225:226:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STUnresolvedType,java.lang.Object) -> a
    231:233:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarAccess,java.lang.Object) -> a
    238:240:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarDecl,java.lang.Object) -> a
    245:246:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STWhileStmt,java.lang.Object) -> a
    251:253:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STExpressionList,java.lang.Object) -> a
    258:260:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STArrayAccess,java.lang.Object) -> a
    265:267:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STDereference,java.lang.Object) -> a
    272:273:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STSwitch,java.lang.Object) -> a
    278:279:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STCase,java.lang.Object) -> a
    284:285:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STContinue,java.lang.Object) -> a
    290:291:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STBreak,java.lang.Object) -> a
    296:297:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STThrow,java.lang.Object) -> a
    302:303:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunctionReference,java.lang.Object) -> a
    308:309:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STLambda,java.lang.Object) -> a
cn.com.codesec.parse.ir.SourceInfo -> cn.com.codesec.pf:
    long serialVersionUID -> serialVersionUID
    int lineStart -> a
    int lineEnd -> b
    int columnStart -> c
    int columnEnd -> d
    boolean isMacroExpansion -> e
    cn.com.codesec.util.FilePath file -> f
    23:30:void <init>() -> <init>
    32:39:void <init>(int,int,int,int,boolean,cn.com.codesec.util.FilePath) -> <init>
    41:55:void <init>(int,int,int,int,java.io.File) -> <init>
    58:59:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    62:63:void <init>(int,cn.com.codesec.util.SKYFile) -> <init>
    66:67:void <init>(int,int,int,int,cn.com.codesec.util.FilePath) -> <init>
    69:76:void <init>(int,int,int,int,cn.com.codesec.util.FilePath,boolean) -> <init>
    79:80:void <init>(int,int,int,int,java.lang.String) -> <init>
    83:84:void <init>(int,java.lang.String) -> <init>
    87:88:void <init>(int,cn.com.codesec.util.FilePath) -> <init>
    91:92:void <init>(int,int,java.lang.String) -> <init>
    95:96:void <init>(int,int,cn.com.codesec.util.FilePath) -> <init>
    99:100:void <init>(int,int,int,cn.com.codesec.util.FilePath,boolean) -> <init>
    103:104:void <init>(int,int,cn.com.codesec.util.FilePath,boolean) -> <init>
    107:107:cn.com.codesec.parse.ir.SourceInfo withLineStart(int) -> a
    111:111:cn.com.codesec.parse.ir.SourceInfo withLineEnd(int) -> b
    115:115:cn.com.codesec.parse.ir.SourceInfo withColumn(int) -> c
    119:121:java.lang.String toString() -> toString
    127:133:java.lang.String toShortString() -> b
    137:137:boolean equals(java.lang.Object) -> equals
    141:141:boolean equals(cn.com.codesec.parse.ir.SourceInfo) -> a
    145:150:int hashCode() -> hashCode
    155:157:java.lang.String getStringRepresentation() -> c
    162:162:int getLineStart() -> a
    167:167:int getLineEnd() -> d
    172:172:int getColumnStart() -> e
    177:177:int getColumnEnd() -> f
    183:183:cn.com.codesec.util.FilePath getFile() -> g
    187:187:boolean isReal(cn.com.codesec.util.FilePath) -> a
    192:192:boolean isReal() -> h
    197:197:boolean isMacroExpansion() -> i
    202:202:cn.com.codesec.util.FilePath getAuxFile() -> j
    207:207:int getAuxLine() -> k
    211:214:cn.com.codesec.parse.ir.SourceInfo withIsMacro(boolean) -> a
    218:218:boolean columnIsExplicit() -> l
    222:225:cn.com.codesec.parse.ir.SourceInfo withStart(int,int) -> a
    229:232:cn.com.codesec.parse.ir.SourceInfo withEnd(int,int) -> b
cn.com.codesec.parse.ir.SourceInfoProducer -> cn.com.codesec.pg:
    int getLineStart() -> a
    int getLineEnd() -> d
    int getColumnStart() -> e
    int getColumnEnd() -> f
    cn.com.codesec.util.FilePath getFile() -> g
    boolean isMacroExpansion() -> i
    cn.com.codesec.util.FilePath getAuxFile() -> j
    int getAuxLine() -> k
cn.com.codesec.parse.ir.SourceLocation -> cn.com.codesec.ph:
    11:11:void <init>() -> <init>
    int getLineStart() -> a
    int getLineEnd() -> d
    int getColumnStart() -> e
    int getColumnEnd() -> f
    cn.com.codesec.util.FilePath getFile() -> g
    java.lang.String toShortString() -> b
    boolean isReal() -> h
    java.lang.String getStringRepresentation() -> c
    32:48:int compareTo(cn.com.codesec.parse.ir.SourceLocation) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.parse.ir.symbols.FrontendSymbolTable -> cn.com.codesec.pi:
    cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    cn.com.codesec.parse.ir.symbols.FrontendSymbolTable getEnclosingTable() -> b
cn.com.codesec.parse.ir.util.AnnotationKey -> cn.com.codesec.pj:
    java.lang.String key -> a
    boolean copyOnClone -> b
    9:10:void <init>(java.lang.String) -> <init>
    12:15:void <init>(java.lang.String,boolean) -> <init>
    18:18:boolean copyOnClone() -> a
    23:23:java.lang.String toString() -> toString
cn.com.codesec.parse.ir.util.IRAssembler -> cn.com.codesec.pk:
    cn.com.codesec.parse.translator.nodes.STNode result -> a
    java.util.LinkedList nodeStack -> b
    23:26:void <init>() -> <init>
    29:32:cn.com.codesec.parse.translator.nodes.STNode getCurrentNode() -> a
    36:36:int getDepth() -> b
    40:40:cn.com.codesec.parse.translator.nodes.STNode getNode(int) -> a
    44:44:cn.com.codesec.parse.translator.nodes.STNode getResult() -> c
    48:52:void startNode(cn.com.codesec.parse.translator.nodes.STNode) -> b
    55:68:void endNode() -> l
    74:76:void startCompilationUnit(cn.com.codesec.scan.meta.Language,cn.com.codesec.util.SKYFile,cn.com.codesec.parse.ir.SourceInfo) -> a
    82:86:void endCompilationUnit() -> d
    89:91:void startClassDecl(cn.com.codesec.parse.ir.SourceInfo) -> a
    97:98:void endClassDecl() -> e
    101:103:void startFunDecl(cn.com.codesec.parse.ir.SourceInfo) -> b
    109:110:void endFunDecl() -> f
    116:117:void endNestedFunDecl() -> g
    120:122:cn.com.codesec.parse.translator.nodes.STBlock startBlock(cn.com.codesec.parse.ir.SourceInfo) -> c
    129:130:void endBlock() -> h
    133:135:void startWhileStmt(cn.com.codesec.parse.ir.SourceInfo) -> d
    141:142:void endWhileStmt() -> i
    145:147:void startIfElse(cn.com.codesec.parse.ir.SourceInfo) -> e
    153:154:void endIfElse() -> j
    160:165:void append(cn.com.codesec.parse.ir.util.StatementList) -> a
    171:173:void append(cn.com.codesec.parse.translator.nodes.STStatement) -> a
    176:179:cn.com.codesec.parse.translator.nodes.STNode removeCurrentNode() -> k
    183:184:void setCurrentNode(cn.com.codesec.parse.translator.nodes.STNode) -> a
cn.com.codesec.parse.ir.util.StatementList -> cn.com.codesec.pl:
    java.util.LinkedList stmtList -> a
    int pos -> b
    12:15:void <init>() -> <init>
    18:19:void prepend(cn.com.codesec.parse.translator.nodes.STStatement) -> a
    22:23:void append(cn.com.codesec.parse.translator.nodes.STStatement) -> b
    26:28:cn.com.codesec.parse.translator.nodes.STStatement[] getStatements() -> a
    32:32:int getNumStatements() -> b
    36:36:int getInsertPosition() -> c
    41:45:java.lang.Object clone() -> clone
    49:53:void prepend(cn.com.codesec.parse.ir.util.StatementList) -> a
    56:57:void remove(cn.com.codesec.parse.translator.nodes.STStatement) -> c
cn.com.codesec.parse.ir.util.Tools -> cn.com.codesec.pm:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STType$Kind -> a
    31:31:void <init>() -> <init>
    34:48:java.lang.String getCanonicalTypeName(cn.com.codesec.parse.translator.nodes.STClassDecl) -> a
    53:59:java.util.List convertTypeArgumentsToSTType(java.util.List) -> a
    63:69:java.util.List convertTypeArguments(java.util.List) -> b
    73:119:cn.com.codesec.parse.metadata.Type sttypeToType(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STType) -> a
    124:124:java.lang.String primitiveTypeToString(cn.com.codesec.parse.ir.PrimitiveType) -> a
    134:134:java.lang.String trimDelimiterAndUnescape(java.lang.String) -> a
    138:202:java.lang.String unescape(java.lang.String) -> b
    206:246:cn.com.codesec.parse.translator.java.TypeSystem$Type convertToType(cn.com.codesec.parse.translator.nodes.STType) -> a
    250:304:cn.com.codesec.parse.metadata.FunMeta createFunMeta(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STFunDecl) -> a
    308:327:cn.com.codesec.parse.translator.nodes.STDecl resolveStorage(java.lang.String,cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    331:331:boolean isTempVarName(java.lang.String) -> c
    335:335:java.lang.String addEscapes(java.lang.String) -> d
    339:393:java.lang.String addEscapes(java.lang.String,boolean) -> a
    397:410:boolean isSubType(cn.com.codesec.parse.metadata.TypeMeta,cn.com.codesec.parse.metadata.TypeMeta) -> a
    414:470:cn.com.codesec.parse.translator.nodes.STType typeToSTType(cn.com.codesec.parse.metadata.Type) -> a
    31:31:int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STType$Kind() -> a
cn.com.codesec.parse.meta.Annotation -> cn.com.codesec.pn:
    cn.com.codesec.parse.meta.TypeSymbol getAnnotationType() -> a
    cn.com.codesec.parse.meta.AnnotationElement getElement(java.lang.String) -> a
    java.util.Map getElements() -> b
cn.com.codesec.parse.meta.AnnotationElement -> cn.com.codesec.po:
    cn.com.codesec.parse.meta.FieldSymbol getField() -> a
    java.lang.String getValueString() -> b
    java.lang.Object getValue() -> c
    java.lang.String getName() -> d
cn.com.codesec.parse.meta.ClassSymbol -> cn.com.codesec.pp:
    boolean isInterface() -> a
    cn.com.codesec.parse.meta.FunctionSymbol[] getMemberFunctions() -> b
    cn.com.codesec.parse.meta.ClassSymbol[] getSuperClasses() -> c
    cn.com.codesec.parse.meta.ClassSymbol[] getSubClasses() -> d
    cn.com.codesec.parse.meta.FieldSymbol[] getFields() -> e
    java.util.Set getAllSupers() -> f
    cn.com.codesec.scan.meta.Language getSourceLanguage() -> g
    boolean checkModifiers(long) -> a
cn.com.codesec.parse.meta.CommentKind -> cn.com.codesec.pq:
    cn.com.codesec.parse.meta.CommentKind DOC_COMMENT -> a
    cn.com.codesec.parse.meta.CommentKind MULTI_LINE_COMMENT -> b
    cn.com.codesec.parse.meta.CommentKind HTML_COMMENT -> c
    cn.com.codesec.parse.meta.CommentKind LINE_END_COMMENT -> d
    cn.com.codesec.parse.meta.CommentKind[] ENUM$VALUES -> e
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.meta.CommentKind[] values() -> values
    1:1:cn.com.codesec.parse.meta.CommentKind valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.meta.FieldSymbol -> cn.com.codesec.pr:
cn.com.codesec.parse.meta.FileType -> cn.com.codesec.ps:
    cn.com.codesec.parse.meta.FileType ACTIONSCRIPT -> a
    cn.com.codesec.parse.meta.FileType C -> b
    cn.com.codesec.parse.meta.FileType CPP -> c
    cn.com.codesec.parse.meta.FileType OBJC -> d
    cn.com.codesec.parse.meta.FileType BITCODE -> e
    cn.com.codesec.parse.meta.FileType JAVA -> f
    cn.com.codesec.parse.meta.FileType JSP -> g
    cn.com.codesec.parse.meta.FileType JSPX -> h
    cn.com.codesec.parse.meta.FileType BYTECODE -> i
    cn.com.codesec.parse.meta.FileType TLD -> j
    cn.com.codesec.parse.meta.FileType SQL -> k
    cn.com.codesec.parse.meta.FileType PLSQL -> l
    cn.com.codesec.parse.meta.FileType TSQL -> m
    cn.com.codesec.parse.meta.FileType MSIL -> n
    cn.com.codesec.parse.meta.FileType CSHARP -> o
    cn.com.codesec.parse.meta.FileType VB -> p
    cn.com.codesec.parse.meta.FileType ASP -> q
    cn.com.codesec.parse.meta.FileType XML -> r
    cn.com.codesec.parse.meta.FileType PROPERTIES -> s
    cn.com.codesec.parse.meta.FileType HTML -> t
    cn.com.codesec.parse.meta.FileType ARCHIVE -> u
    cn.com.codesec.parse.meta.FileType ANDROIDARCHIVE -> v
    cn.com.codesec.parse.meta.FileType OBJECT -> w
    cn.com.codesec.parse.meta.FileType IR -> x
    cn.com.codesec.parse.meta.FileType JAVASCRIPT -> y
    cn.com.codesec.parse.meta.FileType VBSCRIPT -> z
    cn.com.codesec.parse.meta.FileType VB6 -> A
    cn.com.codesec.parse.meta.FileType CFML -> B
    cn.com.codesec.parse.meta.FileType COBOL -> C
    cn.com.codesec.parse.meta.FileType PHP -> D
    cn.com.codesec.parse.meta.FileType INI -> E
    cn.com.codesec.parse.meta.FileType PYTHON -> F
    cn.com.codesec.parse.meta.FileType ABAP -> G
    cn.com.codesec.parse.meta.FileType BSP -> H
    cn.com.codesec.parse.meta.FileType MXML -> I
    cn.com.codesec.parse.meta.FileType SECONDARY -> J
    cn.com.codesec.parse.meta.FileType SWC -> K
    cn.com.codesec.parse.meta.FileType SWF -> L
    cn.com.codesec.parse.meta.FileType ASPX -> M
    cn.com.codesec.parse.meta.FileType WSDD -> N
    cn.com.codesec.parse.meta.FileType XMI -> O
    cn.com.codesec.parse.meta.FileType XSD -> P
    cn.com.codesec.parse.meta.FileType RUBY -> Q
    cn.com.codesec.parse.meta.FileType SMALI -> R
    cn.com.codesec.parse.meta.FileType YAML -> S
    cn.com.codesec.parse.meta.FileType Config -> T
    cn.com.codesec.parse.meta.FileType Settings -> U
    cn.com.codesec.parse.meta.FileType Appxmanifest -> V
    cn.com.codesec.parse.meta.FileType[] ENUM$VALUES -> W
    3:97:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    99:99:java.lang.String toString() -> toString
    103:103:boolean isSourcecodeFileType() -> a
    1:1:cn.com.codesec.parse.meta.FileType[] values() -> values
    1:1:cn.com.codesec.parse.meta.FileType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int,cn.com.codesec.parse.meta.FileType) -> <init>
cn.com.codesec.parse.meta.FileType$1 -> cn.com.codesec.pt:
    1:9:void <init>(java.lang.String,int) -> <init>
    12:12:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$2 -> cn.com.codesec.pu:
    1:18:void <init>(java.lang.String,int) -> <init>
    21:21:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$3 -> cn.com.codesec.pv:
    1:28:void <init>(java.lang.String,int) -> <init>
    31:31:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$4 -> cn.com.codesec.pw:
    1:40:void <init>(java.lang.String,int) -> <init>
    43:43:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$5 -> cn.com.codesec.px:
    1:46:void <init>(java.lang.String,int) -> <init>
    48:48:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$6 -> cn.com.codesec.py:
    1:51:void <init>(java.lang.String,int) -> <init>
    54:54:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$7 -> cn.com.codesec.pz:
    1:69:void <init>(java.lang.String,int) -> <init>
    72:72:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$8 -> cn.com.codesec.pA:
    1:75:void <init>(java.lang.String,int) -> <init>
    78:78:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FileType$9 -> cn.com.codesec.pB:
    1:81:void <init>(java.lang.String,int) -> <init>
    84:84:boolean isSourcecodeFileType() -> a
cn.com.codesec.parse.meta.FunctionSymbol -> cn.com.codesec.pC:
    cn.com.codesec.parse.meta.TypeSymbol getReturnType() -> a
    cn.com.codesec.parse.meta.TypeSymbol[] getParameterTypes() -> b
    java.lang.String[] getParameterNames() -> c
    boolean isVarArg() -> d
    cn.com.codesec.parse.meta.TypeSymbol[] getExceptions() -> e
    cn.com.codesec.scan.meta.Language getSourceLanguage() -> g
    boolean checkModifiers(long) -> a
    cn.com.codesec.parse.meta.FunctionSymbol[] getGenericFunctions() -> f
    java.util.Collection getSuperFunctions() -> h
    boolean isConstructor() -> i
    java.util.Collection getMatchedRules() -> j
    boolean isCovered() -> k
    boolean isUsed() -> l
cn.com.codesec.parse.meta.MetaTable -> cn.com.codesec.pD:
    java.util.Collection getAllClasses() -> a
    java.util.Collection getAllFunctions() -> b
    cn.com.codesec.parse.meta.SourceLocation getDeclarationForLocation(java.util.zip.ZipFile,java.lang.String,int,int) -> a
    cn.com.codesec.parse.meta.Symbol getSymbolAtLocation(java.util.zip.ZipFile,java.lang.String,int,int) -> b
    java.util.Collection findUsages(java.util.zip.ZipFile,cn.com.codesec.parse.meta.Symbol) -> a
    cn.com.codesec.parse.meta.FileType getFileType(java.lang.String) -> a
cn.com.codesec.parse.meta.MetaTableFactory -> cn.com.codesec.pE:
    11:11:void <init>() -> <init>
    14:31:cn.com.codesec.parse.meta.MetaTable create(java.io.InputStream) -> a
cn.com.codesec.parse.meta.NamespaceSymbol -> cn.com.codesec.pF:
    java.lang.String getNamespaceName() -> a
    boolean isDefault() -> b
    cn.com.codesec.scan.meta.Language getSourceLanguage() -> c
cn.com.codesec.parse.meta.Rule -> cn.com.codesec.pG:
    java.lang.String getRuleID() -> a
    java.lang.String getCategory() -> b
    java.lang.String getSubcategory() -> c
    java.lang.String getSourceFilePath() -> d
cn.com.codesec.parse.meta.SourceLocation -> cn.com.codesec.pH:
    int getLineStart() -> a
    int getLineEnd() -> b
    int getColStart() -> c
    int getColEnd() -> d
    java.lang.String getFile() -> e
    java.lang.String toShortString() -> f
cn.com.codesec.parse.meta.Symbol -> cn.com.codesec.pI:
    cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    java.lang.String getSimpleName() -> n
    java.lang.String getCanonicalName() -> o
    cn.com.codesec.parse.meta.SourceLocation getSourceLocation() -> p
    cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    cn.com.codesec.parse.meta.ClassSymbol getEnclosingType() -> r
    cn.com.codesec.parse.meta.NamespaceSymbol getNamespace() -> s
    void setIndex(int) -> a
cn.com.codesec.parse.meta.SymbolKind -> cn.com.codesec.pJ:
    cn.com.codesec.parse.meta.SymbolKind TYPE -> a
    cn.com.codesec.parse.meta.SymbolKind FUNCTION -> b
    cn.com.codesec.parse.meta.SymbolKind FIELD -> c
    cn.com.codesec.parse.meta.SymbolKind VARIABLE -> d
    cn.com.codesec.parse.meta.SymbolKind LABEL -> e
    cn.com.codesec.parse.meta.SymbolKind MACRO -> f
    cn.com.codesec.parse.meta.SymbolKind TYPEDEF -> g
    cn.com.codesec.parse.meta.SymbolKind PROPERTY -> h
    cn.com.codesec.parse.meta.SymbolKind[] ENUM$VALUES -> i
    3:12:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.meta.SymbolKind[] values() -> values
    1:1:cn.com.codesec.parse.meta.SymbolKind valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.meta.TypeDefSymbol -> cn.com.codesec.pK:
cn.com.codesec.parse.meta.TypeSymbol -> cn.com.codesec.pL:
    cn.com.codesec.parse.meta.ClassSymbol getClassSymbol() -> a
    java.lang.String getDisplayString() -> b
cn.com.codesec.parse.meta.VariableSymbol -> cn.com.codesec.pM:
    boolean isParameter() -> a
    boolean checkModifiers(long) -> a
cn.com.codesec.parse.meta.impl.Class -> cn.com.codesec.pN:
    boolean isInterface -> c
    cn.com.codesec.parse.meta.impl.Function[] functions -> d
    cn.com.codesec.parse.meta.impl.Class[] supers -> e
    long serialVersionUID -> serialVersionUID
    24:28:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation,boolean,cn.com.codesec.parse.meta.impl.Function[],cn.com.codesec.parse.meta.impl.Class[]) -> <init>
    32:32:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    37:37:boolean isInterface() -> a
    42:42:cn.com.codesec.parse.meta.impl.Function[] getMemberFunctions() -> h
    46:47:void setMemberFunctions(cn.com.codesec.parse.meta.impl.Function[]) -> a
    51:51:cn.com.codesec.parse.meta.impl.Class[] getSuperClasses() -> i
    56:56:cn.com.codesec.parse.meta.impl.Class[] getSubClasses() -> j
    60:61:void setSupers(cn.com.codesec.parse.meta.impl.Class[]) -> a
    65:65:cn.com.codesec.parse.meta.FieldSymbol[] getFields() -> e
    69:69:void setFields(cn.com.codesec.parse.meta.FieldSymbol[]) -> a
    73:73:cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    78:78:java.util.Set getAllSupers() -> f
    82:88:void readObject(java.io.ObjectInputStream) -> readObject
    91:97:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1:1:cn.com.codesec.parse.meta.ClassSymbol[] getSubClasses() -> d
    1:1:cn.com.codesec.parse.meta.ClassSymbol[] getSuperClasses() -> c
    1:1:cn.com.codesec.parse.meta.FunctionSymbol[] getMemberFunctions() -> b
cn.com.codesec.parse.meta.impl.Element -> cn.com.codesec.pO:
    cn.com.codesec.scan.meta.Language language -> c
    java.lang.String simpleName -> d
    cn.com.codesec.parse.meta.impl.Namespace namespace -> e
    cn.com.codesec.parse.meta.SourceLocation sourceLocation -> f
    long modifiers -> g
    cn.com.codesec.parse.meta.ClassSymbol enclosingType -> h
    int index -> a
    int version -> b
    long serialVersionUID -> serialVersionUID
    26:33:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation) -> <init>
    36:36:cn.com.codesec.scan.meta.Language getSourceLanguage() -> g
    41:41:java.lang.String getSimpleName() -> n
    46:46:cn.com.codesec.parse.meta.NamespaceSymbol getNamespace() -> s
    51:51:java.lang.String getCanonicalName() -> o
    56:56:cn.com.codesec.parse.meta.SourceLocation getSourceLocation() -> p
    60:60:long getModifiers() -> t
    64:64:java.lang.String toString() -> toString
    69:69:cn.com.codesec.parse.meta.ClassSymbol getEnclosingType() -> r
    73:73:boolean checkModifiers(long) -> a
    77:88:void readObject(java.io.ObjectInputStream) -> readObject
    91:102:void writeObject(java.io.ObjectOutputStream) -> writeObject
    105:109:boolean equals(java.lang.Object) -> equals
    113:113:int hashCode() -> hashCode
    118:119:void setIndex(int) -> a
cn.com.codesec.parse.meta.impl.Field -> cn.com.codesec.pP:
    long serialVersionUID -> serialVersionUID
    18:19:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation) -> <init>
    23:23:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    28:28:cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    32:35:void readObject(java.io.ObjectInputStream) -> readObject
    38:41:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.meta.impl.Function -> cn.com.codesec.pQ:
    boolean isStatic -> c
    boolean isCovered -> d
    java.util.Collection matchedRules -> e
    boolean isUsed -> f
    boolean isVarArg -> g
    cn.com.codesec.parse.meta.impl.Class enclosingClass -> h
    cn.com.codesec.parse.meta.impl.Type returnType -> i
    cn.com.codesec.parse.meta.impl.Type[] paramTypes -> j
    long serialVersionUID -> serialVersionUID
    30:35:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation,boolean,boolean,java.util.Collection,boolean,boolean) -> <init>
    39:39:boolean isCovered() -> k
    44:44:java.util.Collection getMatchedRules() -> j
    48:48:boolean isStatic() -> u
    53:53:boolean isUsed() -> l
    57:58:void setEnclosingType(cn.com.codesec.parse.meta.impl.Class) -> a
    62:62:cn.com.codesec.parse.meta.ClassSymbol getEnclosingType() -> r
    66:74:java.lang.String toString() -> toString
    79:79:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    83:84:void setReturnType(cn.com.codesec.parse.meta.impl.Type) -> a
    87:88:void setParamTypes(cn.com.codesec.parse.meta.impl.Type[]) -> a
    92:92:cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    97:97:cn.com.codesec.parse.meta.TypeSymbol getReturnType() -> a
    102:102:cn.com.codesec.parse.meta.impl.Type[] getParameterTypes() -> v
    107:107:java.lang.String[] getParameterNames() -> c
    112:112:boolean isVarArg() -> d
    117:117:cn.com.codesec.parse.meta.TypeSymbol[] getExceptions() -> e
    122:122:cn.com.codesec.parse.meta.FunctionSymbol[] getGenericFunctions() -> f
    127:127:java.util.Collection getSuperFunctions() -> h
    132:132:boolean isConstructor() -> i
    136:147:void readObject(java.io.ObjectInputStream) -> readObject
    150:161:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1:1:cn.com.codesec.parse.meta.TypeSymbol[] getParameterTypes() -> b
cn.com.codesec.parse.meta.impl.MetaTableImpl -> cn.com.codesec.pR:
    int version -> a
    int myVersion -> c
    java.lang.String XREFDATA_PREFIX -> b
    java.lang.String INDEX_NAME -> d
    java.util.List types -> e
    java.util.List functions -> f
    java.util.Map fileTypes -> g
    java.util.Map fileEncodings -> h
    java.util.Map references -> i
    java.util.Properties fileIndex -> j
    long serialVersionUID -> serialVersionUID
    407:408:void <clinit>() -> <clinit>
    49:56:void <init>() -> <init>
    58:75:void <init>(java.util.List,java.util.List,java.util.Map,java.util.Map) -> <init>
    78:88:void addNewElements(java.util.Collection,java.util.Collection) -> a
    91:92:void addTypes(java.util.Collection) -> a
    95:96:void addFunctions(java.util.Collection) -> b
    99:100:void addFileTypes(java.util.Map) -> a
    103:104:void addFileEncodings(java.util.Map) -> b
    108:108:java.util.Collection getAllClasses() -> a
    113:113:java.util.Collection getAllFunctions() -> b
    117:120:void registerSymbol(java.lang.String,int,int,int,cn.com.codesec.parse.meta.Symbol) -> a
    123:126:void registerSymbol(java.lang.String,int,int,int,cn.com.codesec.parse.meta.SourceLocation) -> a
    129:138:void putSymbol(java.lang.String,int,cn.com.codesec.parse.meta.impl.MetaTableImpl$Use) -> a
    142:145:cn.com.codesec.parse.meta.SourceLocation getDeclarationForLocation(java.util.zip.ZipFile,java.lang.String,int,int) -> a
    150:155:cn.com.codesec.parse.meta.Symbol getSymbolAtLocation(java.util.zip.ZipFile,java.lang.String,int,int) -> b
    159:159:cn.com.codesec.parse.meta.impl.MetaTableImpl$Use getRef(java.lang.String,int,int) -> a
    163:175:cn.com.codesec.parse.meta.impl.MetaTableImpl$Use getRef(java.util.Map,int,int) -> b
    180:196:java.util.Collection findUsages(java.util.zip.ZipFile,cn.com.codesec.parse.meta.Symbol) -> a
    201:201:cn.com.codesec.parse.meta.FileType getFileType(java.lang.String) -> a
    279:296:void readFileIndex(java.util.zip.ZipFile) -> a
    299:335:java.util.Map readSourceMarkupData(java.util.zip.ZipFile,java.lang.String) -> a
    339:345:int getIndex(cn.com.codesec.parse.meta.Symbol) -> a
    349:349:cn.com.codesec.parse.meta.ClassSymbol getType(int) -> a
    353:353:cn.com.codesec.parse.meta.FunctionSymbol getFunction(int) -> b
    357:371:void writeObject(java.io.ObjectOutputStream) -> writeObject
    374:400:void readObject(java.io.ObjectInputStream) -> readObject
    403:403:java.util.Map getReferences() -> c
    162:162:cn.com.codesec.parse.meta.impl.MetaTableImpl$Use access$0(java.util.Map,int,int) -> a
cn.com.codesec.parse.meta.impl.MetaTableImpl$1 -> cn.com.codesec.pS:
    cn.com.codesec.parse.meta.impl.MetaTableImpl this$0 -> a
    1:378:void <init>(cn.com.codesec.parse.meta.impl.MetaTableImpl,int) -> <init>
    381:381:boolean remove(java.lang.Object) -> remove
cn.com.codesec.parse.meta.impl.MetaTableImpl$2 -> cn.com.codesec.pT:
    cn.com.codesec.parse.meta.impl.MetaTableImpl this$0 -> a
    1:388:void <init>(cn.com.codesec.parse.meta.impl.MetaTableImpl,int) -> <init>
    391:391:boolean remove(java.lang.Object) -> remove
cn.com.codesec.parse.meta.impl.MetaTableImpl$CrossReferenceDataImpl -> cn.com.codesec.pU:
    long serialVersionUID -> serialVersionUID
    java.util.Map locationRefs -> a
    cn.com.codesec.parse.meta.FileType fileType -> b
    java.lang.String encoding -> c
    493:497:void <init>(cn.com.codesec.parse.meta.FileType,java.lang.String,java.util.Map) -> <init>
    501:502:cn.com.codesec.parse.meta.SourceLocation getDeclarationForSourceElement(cn.com.codesec.parse.sourcemarkup.SourceElement) -> a
    507:507:cn.com.codesec.parse.meta.FileType getFileType() -> a
    512:512:java.lang.String getFileEncoding() -> b
    516:516:java.lang.String toString() -> toString
    520:520:java.util.Map getLocationRefs() -> c
    524:525:void setLocationRefs(java.util.Map) -> a
    528:529:void setFileType(cn.com.codesec.parse.meta.FileType) -> a
    532:532:java.lang.String getEncoding() -> d
    536:537:void setEncoding(java.lang.String) -> a
cn.com.codesec.parse.meta.impl.MetaTableImpl$LocationBackedUse -> cn.com.codesec.pV:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.parse.meta.SourceLocation definitionLocation -> a
    476:478:void <init>(int,int,cn.com.codesec.parse.meta.SourceLocation) -> <init>
    482:482:cn.com.codesec.parse.meta.SourceLocation getDefinitionLocation() -> a
cn.com.codesec.parse.meta.impl.MetaTableImpl$SymbolAndLocationUse -> cn.com.codesec.pW:
    long serialVersionUID -> serialVersionUID
    int symbolIndex -> b
    cn.com.codesec.parse.meta.SymbolKind symbolKind -> c
    460:463:void <init>(cn.com.codesec.parse.meta.impl.MetaTableImpl$Use,cn.com.codesec.parse.meta.SymbolKind,int) -> <init>
    466:466:cn.com.codesec.parse.meta.Symbol getSymbol(cn.com.codesec.parse.meta.impl.MetaTableImpl) -> a
cn.com.codesec.parse.meta.impl.MetaTableImpl$SymbolBackedUse -> cn.com.codesec.pX:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.parse.meta.Symbol symbol -> a
    438:440:void <init>(int,int,cn.com.codesec.parse.meta.Symbol) -> <init>
    444:444:cn.com.codesec.parse.meta.SourceLocation getDefinitionLocation() -> a
    449:449:cn.com.codesec.parse.meta.Symbol getDefinition() -> b
cn.com.codesec.parse.meta.impl.MetaTableImpl$Use -> cn.com.codesec.pY:
    long serialVersionUID -> serialVersionUID
    int startCol -> d
    int endCol -> e
    416:419:void <init>(int,int) -> <init>
    422:422:cn.com.codesec.parse.meta.Symbol getDefinition() -> b
    cn.com.codesec.parse.meta.SourceLocation getDefinitionLocation() -> a
    428:428:java.lang.String toString() -> toString
cn.com.codesec.parse.meta.impl.Namespace -> cn.com.codesec.pZ:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> a
    boolean isDefault -> b
    cn.com.codesec.scan.meta.Language language -> c
    int version -> d
    19:24:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language,boolean) -> <init>
    28:28:java.lang.String getNamespaceName() -> a
    33:33:boolean isDefault() -> b
    38:38:cn.com.codesec.scan.meta.Language getSourceLanguage() -> c
    42:49:void readObject(java.io.ObjectInputStream) -> readObject
    52:59:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.meta.impl.RuleImpl -> cn.com.codesec.qa:
    long serialVersionUID -> serialVersionUID
    java.lang.String ruleID -> b
    java.lang.String category -> c
    java.lang.String subcategory -> d
    java.lang.String sourceFilePath -> e
    int version -> a
    19:25:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    29:29:java.lang.String getRuleID() -> a
    34:34:java.lang.String getCategory() -> b
    39:39:java.lang.String getSubcategory() -> c
    44:44:java.lang.String getSourceFilePath() -> d
    48:56:void readObject(java.io.ObjectInputStream) -> readObject
    59:67:void writeObject(java.io.ObjectOutputStream) -> writeObject
    70:71:void setRuleID(java.lang.String) -> a
    74:75:void setCategory(java.lang.String) -> b
    78:79:void setSubcategory(java.lang.String) -> c
    82:83:void setSourceFilePath(java.lang.String) -> d
cn.com.codesec.parse.meta.impl.SourceLocationImpl -> cn.com.codesec.qb:
    java.lang.String fileName -> a
    int lineStart -> b
    int lineEnd -> c
    int column -> d
    int version -> e
    long serialVersionUID -> serialVersionUID
    18:24:void <init>(java.lang.String,int,int,int) -> <init>
    28:28:int getLineStart() -> a
    33:33:int getLineEnd() -> b
    38:38:int getColStart() -> c
    43:43:int getColEnd() -> d
    48:48:java.lang.String getFile() -> e
    53:53:java.lang.String toShortString() -> f
    58:58:int compareTo(java.lang.Object) -> compareTo
    62:62:java.lang.String toString() -> toString
    66:74:void readObject(java.io.ObjectInputStream) -> readObject
    77:85:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.meta.impl.Type -> cn.com.codesec.qc:
    long serialVersionUID -> serialVersionUID
    java.lang.String displayString -> a
    int version -> b
    17:20:void <init>(java.lang.String) -> <init>
    24:24:cn.com.codesec.parse.meta.ClassSymbol getClassSymbol() -> a
    29:29:java.lang.String getDisplayString() -> b
    33:33:java.lang.String toString() -> toString
    37:42:void readObject(java.io.ObjectInputStream) -> readObject
    45:50:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.meta.impl.TypeDef -> cn.com.codesec.qd:
    cn.com.codesec.parse.meta.impl.Type type -> c
    long serialVersionUID -> serialVersionUID
    20:22:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation,cn.com.codesec.parse.meta.impl.Type) -> <init>
    26:26:cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    31:31:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    35:39:void readObject(java.io.ObjectInputStream) -> readObject
    42:46:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.meta.impl.Variable -> cn.com.codesec.qe:
    boolean isParameter -> c
    long serialVersionUID -> serialVersionUID
    19:21:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.parse.meta.impl.Namespace,cn.com.codesec.parse.meta.SourceLocation,boolean) -> <init>
    25:25:boolean isParameter() -> a
    30:30:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> m
    35:35:cn.com.codesec.parse.meta.TypeSymbol getType() -> q
    39:43:void readObject(java.io.ObjectInputStream) -> readObject
    46:50:void writeObject(java.io.ObjectOutputStream) -> writeObject
cn.com.codesec.parse.metadata.FieldMeta -> cn.com.codesec.qf:
    java.lang.String name -> a
    cn.com.codesec.parse.metadata.Type type -> b
    cn.com.codesec.parse.metadata.TypeMeta enclosingType -> c
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> g
    java.lang.Object constVal -> h
    26:27:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.parse.translator.nodes.STLiteralExp) -> <init>
    31:36:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.parse.translator.nodes.STLiteralExp,cn.com.codesec.parse.translator.nodes.STFieldDecl) -> <init>
    39:39:boolean isStatic() -> b
    43:53:cn.com.codesec.parse.metadata.Type getType() -> c
    58:58:cn.com.codesec.parse.metadata.TypeMeta getEnclosingType() -> d
    62:63:void setType(cn.com.codesec.parse.metadata.Type) -> a
    67:67:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    72:72:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    77:77:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    82:82:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    86:91:java.lang.String getCanonicalName() -> e
    95:95:java.lang.String getSimpleName() -> f
    99:100:cn.com.codesec.parse.metadata.FieldMeta createClone(cn.com.codesec.parse.metadata.TypeMeta,cn.com.codesec.parse.metadata.Type) -> a
    104:107:java.lang.String toString() -> toString
    111:111:boolean isArtificialField() -> g
    115:116:void setConstVal(java.lang.Object) -> a
    119:119:java.lang.Object getConstVal() -> h
cn.com.codesec.parse.metadata.FrontEndNameTable -> cn.com.codesec.qg:
    cn.com.codesec.scan.meta.Language language -> a
    cn.com.codesec.parse.metadata.TypeMeta[] EMPTY_TYPE_ARRAY -> b
    java.util.Map globals -> c
    java.util.Map fieldsByName -> d
    java.util.Map types -> e
    java.util.Map functions -> f
    39:39:void <clinit>() -> <clinit>
    40:49:void <init>(cn.com.codesec.scan.meta.Language) -> <init>
    53:53:cn.com.codesec.parse.metadata.TypeMeta getType(java.lang.String) -> a
    58:67:cn.com.codesec.parse.metadata.TypeMeta getType(java.lang.String,boolean) -> a
    72:72:boolean typeExists(java.lang.String) -> b
    77:77:java.util.Collection getAllClasses() -> a
    82:82:java.util.Collection getAllTypes() -> b
    88:93:void addType(cn.com.codesec.parse.metadata.TypeMeta) -> a
    97:98:void removeType(cn.com.codesec.parse.metadata.TypeMeta) -> b
    102:102:cn.com.codesec.parse.metadata.FunMeta getFunction(java.lang.String) -> c
    107:107:java.util.Collection getAllFunctions() -> c
    112:124:void addFunction(cn.com.codesec.parse.metadata.FunMeta) -> a
    128:129:void removeFunction(cn.com.codesec.parse.metadata.FunMeta) -> b
    133:141:void registerField(cn.com.codesec.parse.metadata.FieldMeta,cn.com.codesec.parse.translator.nodes.STFieldDecl) -> a
    145:145:java.util.LinkedHashMap createTypeArguments(cn.com.codesec.parse.translator.nodes.STClassDecl) -> a
    150:244:void load(cn.com.codesec.parse.translator.nodes.STCompilationUnit,boolean) -> a
    248:250:cn.com.codesec.parse.metadata.FunMeta addFun(cn.com.codesec.parse.translator.nodes.STFunDecl) -> a
    255:268:cn.com.codesec.parse.translator.nodes.STVarDecl resolveGlobal(java.lang.String) -> d
    273:273:java.util.Set getFieldsByName(java.lang.String) -> e
    278:278:cn.com.codesec.parse.translator.nodes.STClassDecl getDecl(cn.com.codesec.parse.metadata.TypeMeta) -> c
    283:283:cn.com.codesec.parse.translator.nodes.STFieldDecl getDecl(cn.com.codesec.parse.metadata.FieldMeta) -> a
    288:288:cn.com.codesec.parse.translator.nodes.STFunDecl getDecl(cn.com.codesec.parse.metadata.FunMeta) -> c
    293:293:cn.com.codesec.scan.meta.Language getLanguage() -> d
    298:302:void clear() -> e
cn.com.codesec.parse.metadata.FrontEndNameTable$1 -> cn.com.codesec.qh:
    cn.com.codesec.parse.metadata.FrontEndNameTable this$0 -> a
    java.util.Map val$typeArguments -> j
    1:161:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STClassDecl,java.util.Map) -> <init>
    166:166:java.util.Map getTypeArguments() -> b
cn.com.codesec.parse.metadata.FunMeta -> cn.com.codesec.qi:
    cn.com.codesec.parse.metadata.Type returnType -> c
    java.lang.String uniqueName -> g
    java.lang.String simpleName -> h
    cn.com.codesec.parse.metadata.Type[] arguments -> i
    cn.com.codesec.parse.metadata.Type[] exceptions -> j
    cn.com.codesec.parse.metadata.Namespace namespace -> a
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> k
    boolean isVarArg -> l
    java.util.Map generics -> b
    35:37:void <init>(java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Namespace,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean) -> <init>
    42:44:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean) -> <init>
    50:52:void <init>(java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Namespace,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.translator.nodes.STFunDecl,java.util.Map) -> <init>
    58:60:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.translator.nodes.STFunDecl,java.util.Map) -> <init>
    28:80:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Namespace,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.translator.nodes.STFunDecl,java.util.Map) -> <init>
    83:87:void <init>(cn.com.codesec.parse.metadata.FunMeta) -> <init>
    90:91:void setExceptions(cn.com.codesec.parse.metadata.Type[]) -> a
    94:94:cn.com.codesec.parse.metadata.Type[] getExceptions() -> b
    98:99:cn.com.codesec.scan.meta.Language getSourceLanguage() -> c
    103:103:java.util.Map getGenerics() -> e
    107:107:boolean isPublic() -> f
    111:111:boolean isStatic() -> g
    115:115:boolean isFinal() -> h
    119:119:boolean isOverridable() -> i
    124:137:boolean isConstructor() -> j
    141:141:cn.com.codesec.parse.metadata.Type getType() -> k
    145:145:cn.com.codesec.parse.metadata.Namespace getNamespace() -> l
    149:159:java.lang.String toString(int) -> a
    163:173:java.lang.String getCanonicalName() -> m
    177:177:java.lang.String toString() -> toString
    181:187:boolean hasImplicitThisArg() -> n
    192:192:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    197:197:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    202:203:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    207:208:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    211:211:java.lang.String getSimpleName() -> o
    215:215:cn.com.codesec.parse.metadata.FunMeta getGenericFunction() -> p
    220:222:cn.com.codesec.parse.metadata.FunMeta createClone(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[]) -> a
    241:241:boolean isVarArg() -> q
    245:245:cn.com.codesec.parse.metadata.Type[] getParameterTypes() -> r
    249:249:cn.com.codesec.parse.metadata.Type getReturnType() -> s
    253:253:java.lang.String getUniqueName() -> t
cn.com.codesec.parse.metadata.FunMeta$1 -> cn.com.codesec.qj:
    cn.com.codesec.parse.metadata.FunMeta this$0 -> c
    1:220:void <init>(cn.com.codesec.parse.metadata.FunMeta,cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.translator.nodes.STFunDecl,java.util.Map) -> <init>
    226:230:cn.com.codesec.parse.metadata.FunMeta getGenericFunction() -> p
    235:235:cn.com.codesec.parse.metadata.Type[] getExceptions() -> b
cn.com.codesec.parse.metadata.Namespace -> cn.com.codesec.qk:
    java.util.LinkedHashMap NAMESPACES -> c
    cn.com.codesec.scan.meta.Language sourceLanguage -> a
    java.lang.String namespaceName -> b
    20:20:void <clinit>() -> <clinit>
    26:27:void clearCache() -> a
    31:36:cn.com.codesec.parse.metadata.Namespace getNamespace(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    41:41:cn.com.codesec.parse.metadata.Namespace getDefaultNamespace(cn.com.codesec.scan.meta.Language) -> a
    44:48:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    52:52:java.lang.String toString() -> toString
    57:57:cn.com.codesec.scan.meta.Language getSourceLanguage() -> b
    62:62:java.lang.String getNamespaceSeparator() -> c
    67:67:java.lang.String getNamespaceName() -> d
    72:72:boolean isDefault() -> e
    77:95:boolean equals(java.lang.Object) -> equals
    100:100:int hashCode() -> hashCode
cn.com.codesec.parse.metadata.Symbol -> cn.com.codesec.ql:
    java.lang.ref.Reference declNode -> d
    cn.com.codesec.parse.metadata.TypeMeta enclosingType -> e
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> f
    24:25:void <init>(cn.com.codesec.parse.translator.nodes.STDecl) -> <init>
    27:35:void <init>(cn.com.codesec.parse.translator.nodes.STDecl,cn.com.codesec.parse.metadata.TypeMeta) -> <init>
    39:42:cn.com.codesec.parse.translator.nodes.STDecl getDeclNode() -> u
    47:47:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> v
    52:53:void setEnclosingType(cn.com.codesec.parse.metadata.TypeMeta) -> a
    57:57:cn.com.codesec.parse.metadata.TypeMeta getEnclosingType() -> d
cn.com.codesec.parse.metadata.Type -> cn.com.codesec.qm:
    java.util.LinkedHashMap TYPES -> F
    cn.com.codesec.parse.metadata.Type UNKNOWN -> a
    cn.com.codesec.parse.metadata.Type$Primitive VOID -> b
    cn.com.codesec.parse.metadata.Type$Primitive NULL -> c
    cn.com.codesec.parse.metadata.Type$Primitive INT -> d
    cn.com.codesec.parse.metadata.Type$Primitive SHORT -> e
    cn.com.codesec.parse.metadata.Type$Primitive LONG -> f
    cn.com.codesec.parse.metadata.Type$Primitive LONGLONG -> g
    cn.com.codesec.parse.metadata.Type$Primitive BYTE -> h
    cn.com.codesec.parse.metadata.Type$Primitive CHAR -> i
    cn.com.codesec.parse.metadata.Type$Primitive BOOLEAN -> j
    cn.com.codesec.parse.metadata.Type$Primitive DOUBLE -> k
    cn.com.codesec.parse.metadata.Type$Primitive LONGDOUBLE -> l
    cn.com.codesec.parse.metadata.Type$Primitive FLOAT -> m
    cn.com.codesec.parse.metadata.Type$Primitive NUMBER -> n
    cn.com.codesec.parse.metadata.Type$Primitive DATE -> o
    cn.com.codesec.parse.metadata.Type$Primitive TIMESTAMP -> p
    cn.com.codesec.parse.metadata.Type$Primitive INTERVAL -> q
    cn.com.codesec.parse.metadata.Type$Primitive BFILE -> r
    cn.com.codesec.parse.metadata.Type$Primitive ROWID -> s
    cn.com.codesec.parse.metadata.Type$Primitive BLOB -> t
    cn.com.codesec.parse.metadata.Type$Primitive CLOB -> u
    cn.com.codesec.parse.metadata.Type$Primitive NCLOB -> v
    cn.com.codesec.parse.metadata.Type$Primitive RAW -> w
    cn.com.codesec.parse.metadata.Type$Primitive CURSOR -> x
    cn.com.codesec.parse.metadata.Type$Primitive UCHAR -> y
    cn.com.codesec.parse.metadata.Type$Primitive UINT -> z
    cn.com.codesec.parse.metadata.Type$Primitive USHORT -> A
    cn.com.codesec.parse.metadata.Type$Primitive ULONG -> B
    cn.com.codesec.parse.metadata.Type$Primitive ULONGLONG -> C
    cn.com.codesec.parse.metadata.Type$Primitive PTR_TYPE -> D
    cn.com.codesec.parse.metadata.Type$Primitive SIZET -> E
    1052:1099:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    960:960:cn.com.codesec.parse.metadata.Type createClone(cn.com.codesec.parse.metadata.TypeMeta) -> a
    964:964:cn.com.codesec.parse.metadata.Type unwrapOuterTypedefs() -> a
    969:969:java.lang.String toStringBase() -> b
    973:974:void resetCache() -> c
    980:985:cn.com.codesec.parse.metadata.Type getCached(cn.com.codesec.parse.metadata.Type) -> a
    989:989:cn.com.codesec.parse.metadata.Type get(cn.com.codesec.parse.metadata.TypeMeta) -> b
    993:993:cn.com.codesec.parse.metadata.Type get(cn.com.codesec.parse.metadata.TypeMeta,java.util.List) -> a
    997:997:cn.com.codesec.parse.metadata.Type$Primitive get(cn.com.codesec.parse.ir.PrimitiveType) -> a
    1001:1002:cn.com.codesec.parse.metadata.Type$Function get(cn.com.codesec.parse.metadata.FunMeta) -> a
    1006:1006:cn.com.codesec.parse.metadata.Type$Variable getTypeVariable(java.lang.String) -> a
    1010:1010:cn.com.codesec.parse.metadata.Type$Wildcard getWildcard() -> d
    1014:1014:cn.com.codesec.parse.metadata.Type$Wildcard getWildcard(cn.com.codesec.parse.metadata.Type$Wildcard$Kind,cn.com.codesec.parse.metadata.Type) -> a
    1018:1018:cn.com.codesec.parse.metadata.Type$Function get(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[]) -> a
    1023:1024:cn.com.codesec.parse.metadata.Type$Function get(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],boolean,boolean) -> a
    1028:1028:cn.com.codesec.parse.metadata.Type$FunctionReference get(cn.com.codesec.parse.metadata.Type$Function[]) -> a
    1032:1032:cn.com.codesec.parse.metadata.Type$Typedef getTypedef(java.lang.String) -> b
    1036:1036:cn.com.codesec.parse.metadata.Type$PlainPointer getPointer() -> e
    1040:1040:cn.com.codesec.parse.metadata.Type$CppReference getCppReference() -> f
    1044:1044:cn.com.codesec.parse.metadata.Type$Array getArray() -> g
    1048:1048:cn.com.codesec.parse.metadata.Type$Array$Fixed getArray(int) -> a
    1104:1116:cn.com.codesec.parse.metadata.Type applyIndirection(int,int,int[]) -> a
    1121:1121:boolean isPrimitive() -> h
    1126:1126:boolean isDefinedType() -> i
    1130:1130:boolean isVariable() -> j
    1135:1135:boolean isFunPtr() -> k
    1140:1140:boolean isFunctionReference() -> l
    1145:1165:cn.com.codesec.parse.metadata.Type getBase() -> m
    1170:1174:cn.com.codesec.parse.ir.PrimitiveType getPrimitiveType() -> n
    1178:1182:java.util.List getTypeArguments() -> o
    1186:1193:cn.com.codesec.parse.metadata.TypeMeta getDefinedType() -> p
    1197:1201:cn.com.codesec.parse.metadata.Type$Variable getVariable() -> q
    1206:1210:cn.com.codesec.parse.metadata.Type getReturnType() -> r
    1215:1219:cn.com.codesec.parse.metadata.Type[] getArgTypes() -> s
    1224:1241:int getPointerDepth() -> t
    1246:1260:int getArrayDims() -> u
    1265:1277:boolean hasArrayDims() -> v
    1282:1287:boolean hasPointer() -> w
    1292:1292:boolean hasIndirection() -> x
    1297:1315:int getArrayDimSize(int) -> b
    1323:1335:cn.com.codesec.parse.metadata.Type getDimensionType(int) -> c
    1340:1354:int getIndirectionLevel() -> y
    1359:1363:java.lang.String getFullyQualifiedName() -> z
    1368:1375:java.lang.String getSimpleName() -> A
    1379:1379:java.util.Collection getAllTypes() -> B
    cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    java.lang.String toString() -> toString
    cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    java.lang.String getDisplayString() -> E
cn.com.codesec.parse.metadata.Type$Array -> cn.com.codesec.qn:
    cn.com.codesec.parse.metadata.Type element -> F
    317:322:void <init>(cn.com.codesec.parse.metadata.Type) -> <init>
    325:325:cn.com.codesec.parse.metadata.Type getElement() -> F
    430:430:java.lang.String getDisplayString() -> E
    317:317:void <init>(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type$Array) -> <init>
cn.com.codesec.parse.metadata.Type$Array$Fixed -> cn.com.codesec.qo:
    int numElements -> G
    377:382:void <init>(cn.com.codesec.parse.metadata.Type,int) -> <init>
    386:387:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    392:394:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    398:398:java.lang.String toString() -> toString
    402:403:boolean equals(java.lang.Object) -> equals
    407:408:boolean equals(cn.com.codesec.parse.metadata.Type$Array$Fixed) -> a
    412:412:int hashCode() -> hashCode
    417:418:cn.com.codesec.parse.metadata.Type$Array$Fixed unwrapAllTypedefs() -> G
    423:424:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    376:376:void <init>(cn.com.codesec.parse.metadata.Type,int,cn.com.codesec.parse.metadata.Type$Array$Fixed) -> <init>
cn.com.codesec.parse.metadata.Type$Array$Variable -> cn.com.codesec.qp:
    330:331:void <init>(cn.com.codesec.parse.metadata.Type) -> <init>
    335:335:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    340:342:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    346:346:java.lang.String toString() -> toString
    350:351:boolean equals(java.lang.Object) -> equals
    355:355:boolean equals(cn.com.codesec.parse.metadata.Type$Array$Variable) -> a
    359:359:int hashCode() -> hashCode
    364:364:cn.com.codesec.parse.metadata.Type$Array unwrapAllTypedefs() -> G
    369:369:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    329:329:void <init>(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type$Array$Variable) -> <init>
cn.com.codesec.parse.metadata.Type$Base -> cn.com.codesec.qq:
    63:64:void <init>() -> <init>
    68:68:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    62:62:void <init>(cn.com.codesec.parse.metadata.Type$Base) -> <init>
cn.com.codesec.parse.metadata.Type$CppReference -> cn.com.codesec.qr:
    506:507:void <init>(cn.com.codesec.parse.metadata.Type) -> <init>
    511:511:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    515:515:java.lang.String toString() -> toString
    519:520:boolean equals(java.lang.Object) -> equals
    524:524:boolean equals(cn.com.codesec.parse.metadata.Type$CppReference) -> a
    529:529:cn.com.codesec.parse.metadata.Type$CppReference unwrapAllTypedefs() -> F
    533:533:int hashCode() -> hashCode
    538:538:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    543:543:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$Defined -> cn.com.codesec.qs:
    cn.com.codesec.parse.metadata.TypeMeta def -> F
    java.util.List typeArguments -> G
    186:192:void <init>(cn.com.codesec.parse.metadata.TypeMeta,java.util.List) -> <init>
    196:197:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    202:213:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    217:217:java.lang.String toString() -> toString
    221:222:boolean equals(java.lang.Object) -> equals
    227:232:boolean equals(cn.com.codesec.parse.metadata.Type$Defined) -> a
    236:236:int hashCode() -> hashCode
    241:241:cn.com.codesec.parse.metadata.Type$Defined unwrapAllTypedefs() -> F
    246:246:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$Function -> cn.com.codesec.qt:
    cn.com.codesec.parse.metadata.Type[] params -> F
    cn.com.codesec.parse.metadata.Type ret -> G
    boolean isStatic -> H
    boolean varArg -> I
    553:565:void <init>(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type[],boolean,boolean) -> <init>
    568:568:cn.com.codesec.parse.metadata.Type[] getParameters() -> F
    572:572:cn.com.codesec.parse.metadata.Type getReturn() -> G
    576:582:cn.com.codesec.parse.translator.java.TypeSystem$Function getTypeSystemFunction() -> H
    587:589:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    593:593:boolean isStatic() -> I
    598:598:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    602:613:java.lang.String toString() -> toString
    617:618:boolean equals(java.lang.Object) -> equals
    622:639:boolean equals(cn.com.codesec.parse.metadata.Type$Function) -> a
    643:650:int hashCode() -> hashCode
    655:660:cn.com.codesec.parse.metadata.Type$Function unwrapAllTypedefs() -> J
    665:665:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    670:670:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$FunctionReference -> cn.com.codesec.qu:
    cn.com.codesec.parse.metadata.Type$Function[] functions -> F
    677:682:void <init>(cn.com.codesec.parse.metadata.Type$Function[]) -> <init>
    686:686:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    690:690:cn.com.codesec.parse.metadata.Type$Function[] getFunctions() -> F
    695:699:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    703:707:java.lang.String toString() -> toString
    712:716:cn.com.codesec.parse.metadata.Type$FunctionReference unwrapAllTypedefs() -> G
    721:721:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    725:726:boolean equals(java.lang.Object) -> equals
    730:738:boolean equals(cn.com.codesec.parse.metadata.Type$FunctionReference) -> a
    742:746:int hashCode() -> hashCode
    751:751:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$PlainPointer -> cn.com.codesec.qv:
    463:464:void <init>(cn.com.codesec.parse.metadata.Type) -> <init>
    468:468:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    472:472:java.lang.String toString() -> toString
    476:477:boolean equals(java.lang.Object) -> equals
    481:481:boolean equals(cn.com.codesec.parse.metadata.Type$PlainPointer) -> a
    486:486:cn.com.codesec.parse.metadata.Type$PlainPointer unwrapAllTypedefs() -> F
    490:490:int hashCode() -> hashCode
    495:495:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    500:500:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$Pointer -> cn.com.codesec.qw:
    cn.com.codesec.parse.metadata.Type target -> F
    437:439:void <init>(cn.com.codesec.parse.metadata.Type) -> <init>
    443:443:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    448:448:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    453:453:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    457:457:cn.com.codesec.parse.metadata.Type getTarget() -> G
    437:437:void <init>(cn.com.codesec.parse.metadata.Type,cn.com.codesec.parse.metadata.Type$Pointer) -> <init>
cn.com.codesec.parse.metadata.Type$Primitive -> cn.com.codesec.qx:
    cn.com.codesec.parse.ir.PrimitiveType def -> F
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> G
    75:77:void <init>(cn.com.codesec.parse.ir.PrimitiveType) -> <init>
    81:81:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    87:122:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    128:128:java.lang.String toString() -> toString
    132:133:boolean equals(java.lang.Object) -> equals
    137:137:boolean equals(cn.com.codesec.parse.metadata.Type$Primitive) -> a
    141:141:int hashCode() -> hashCode
    146:146:cn.com.codesec.parse.metadata.Type$Primitive unwrapAllTypedefs() -> F
    151:171:boolean isSigned() -> G
    178:178:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    72:72:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> H
    75:75:void <init>(cn.com.codesec.parse.ir.PrimitiveType,cn.com.codesec.parse.metadata.Type$Primitive) -> <init>
cn.com.codesec.parse.metadata.Type$Typedef -> cn.com.codesec.qy:
    java.lang.String name -> F
    cn.com.codesec.parse.metadata.Type target -> G
    254:263:void <init>(java.lang.String,cn.com.codesec.parse.metadata.Type) -> <init>
    267:267:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    272:272:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    276:276:java.lang.String toString() -> toString
    280:281:boolean equals(java.lang.Object) -> equals
    285:286:boolean equals(cn.com.codesec.parse.metadata.Type$Typedef) -> a
    290:290:int hashCode() -> hashCode
    295:295:cn.com.codesec.parse.metadata.Type unwrapOuterTypedefs() -> a
    300:300:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    305:305:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    310:310:java.lang.String getDisplayString() -> E
cn.com.codesec.parse.metadata.Type$Unknown -> cn.com.codesec.qz:
    cn.com.codesec.parse.metadata.Type$Unknown INSTANCE -> F
    927:927:void <clinit>() -> <clinit>
    923:925:void <init>() -> <init>
    931:931:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    936:936:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    940:940:java.lang.String toString() -> toString
    945:945:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    950:950:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    955:955:java.lang.String getDisplayString() -> E
cn.com.codesec.parse.metadata.Type$Variable -> cn.com.codesec.qA:
    java.lang.String name -> F
    870:872:void <init>(java.lang.String) -> <init>
    876:876:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    881:884:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    888:888:java.lang.String getName() -> F
    892:892:java.lang.String toString() -> toString
    897:897:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    902:902:cn.com.codesec.parse.metadata.Type$Variable unwrapAllTypedefs() -> G
    906:907:boolean equals(java.lang.Object) -> equals
    910:910:int hashCode() -> hashCode
    913:913:boolean equals(cn.com.codesec.parse.metadata.Type$Variable) -> a
    918:918:java.lang.String getDisplayString() -> E
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
cn.com.codesec.parse.metadata.Type$Wildcard -> cn.com.codesec.qB:
    cn.com.codesec.parse.metadata.Type bound -> F
    cn.com.codesec.parse.metadata.Type$Wildcard$Kind kind -> G
    int[] $SWITCH_TABLE$cn$com$codesec$parse$metadata$Type$Wildcard$Kind -> H
    764:765:void <init>() -> <init>
    767:770:void <init>(cn.com.codesec.parse.metadata.Type$Wildcard$Kind,cn.com.codesec.parse.metadata.Type) -> <init>
    774:778:int hashCode() -> hashCode
    783:797:boolean equals(java.lang.Object) -> equals
    802:810:java.lang.String toString() -> toString
    816:816:cn.com.codesec.parse.metadata.Type cloneWithNewBase(cn.com.codesec.parse.metadata.Type) -> b
    821:821:java.lang.String getDisplayString() -> E
    826:829:cn.com.codesec.parse.metadata.Type$Wildcard unwrapAllTypedefs() -> F
    834:838:cn.com.codesec.parse.metadata.Type instantiateVariables(java.util.Map) -> a
    845:863:cn.com.codesec.parse.translator.java.TypeSystem$Type getType() -> C
    1:1:cn.com.codesec.parse.metadata.Type unwrapAllTypedefs() -> D
    755:755:int[] $SWITCH_TABLE$cn$com$codesec$parse$metadata$Type$Wildcard$Kind() -> G
cn.com.codesec.parse.metadata.Type$Wildcard$Kind -> cn.com.codesec.qC:
    cn.com.codesec.parse.metadata.Type$Wildcard$Kind WILD -> a
    cn.com.codesec.parse.metadata.Type$Wildcard$Kind EXTENDS -> b
    cn.com.codesec.parse.metadata.Type$Wildcard$Kind SUPER -> c
    cn.com.codesec.parse.metadata.Type$Wildcard$Kind[] ENUM$VALUES -> d
    759:760:void <clinit>() -> <clinit>
    759:759:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.metadata.Type$Wildcard$Kind[] values() -> values
    1:1:cn.com.codesec.parse.metadata.Type$Wildcard$Kind valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.metadata.TypeArgument -> cn.com.codesec.qD:
    cn.com.codesec.parse.metadata.Type instance -> a
    java.lang.String name -> b
    14:17:void <init>(java.lang.String) -> <init>
    19:23:void <init>(java.lang.String,cn.com.codesec.parse.metadata.Type) -> <init>
    27:27:boolean hasInstance() -> a
    32:32:cn.com.codesec.parse.metadata.Type getInstance() -> b
    37:37:java.lang.String getName() -> c
    42:46:int hashCode() -> hashCode
    51:68:boolean equals(java.lang.Object) -> equals
cn.com.codesec.parse.metadata.TypeMeta -> cn.com.codesec.qE:
    cn.com.codesec.parse.metadata.FrontEndNameTable nameTable -> a
    java.lang.String uniqueName -> j
    cn.com.codesec.parse.metadata.Namespace namespace -> k
    java.lang.String simpleName -> l
    java.lang.String canonicalName -> m
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> b
    java.util.Map fieldMap -> c
    java.util.Map funMap -> g
    cn.com.codesec.parse.metadata.TypeMeta[] supers -> h
    boolean loaded -> i
    boolean isInner -> n
    java.util.LinkedHashSet dfSuperSet -> o
    60:61:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STClassDecl) -> <init>
    65:66:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,java.lang.String,cn.com.codesec.parse.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet) -> <init>
    51:401:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,java.lang.String,cn.com.codesec.parse.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.parse.translator.nodes.STClassDecl) -> <init>
    97:97:java.util.List getTypeInstances() -> c
    102:104:void reLoadSupers() -> e
    108:109:void setInnerClass(boolean) -> a
    113:113:boolean isInnerClass() -> f
    118:136:java.util.Set getAllSupers(java.util.List) -> a
    141:145:cn.com.codesec.parse.metadata.TypeMeta instantiateSuper(java.util.List,cn.com.codesec.parse.metadata.TypeMeta) -> a
    175:217:void loadSupers() -> g
    221:221:boolean isUserDefined() -> h
    226:259:void loadFunctions() -> i
    263:277:void loadFields() -> j
    281:281:cn.com.codesec.scan.meta.Language getSourceLanguage() -> k
    286:286:cn.com.codesec.parse.metadata.FrontEndNameTable getNameTable() -> l
    291:300:boolean isA(cn.com.codesec.parse.metadata.TypeMeta) -> b
    305:320:boolean isA(java.lang.String) -> a
    325:326:java.lang.String toString() -> toString
    331:331:java.lang.String getSimpleName() -> m
    337:337:java.lang.String getName() -> n
    342:342:java.lang.String getUniqueName() -> o
    347:347:java.lang.String getCanonicalName() -> p
    352:352:boolean isNestedClass() -> q
    357:363:java.lang.String getTrueSimpleName() -> r
    368:368:boolean isInterface() -> s
    373:373:boolean allowsAccess(java.lang.String) -> b
    378:378:cn.com.codesec.parse.metadata.Type getType() -> t
    384:387:cn.com.codesec.parse.metadata.TypeMeta getEnclosingType() -> d
    392:392:cn.com.codesec.parse.metadata.TypeMeta[] getSuperClasses() -> w
    397:398:cn.com.codesec.parse.metadata.TypeMeta[] getSupers() -> x
    405:414:java.util.Set getAllSupers() -> y
    419:427:void buildSuperSet(cn.com.codesec.parse.metadata.TypeMeta,java.util.Set) -> a
    431:432:java.util.Map getFieldMap() -> z
    437:438:java.util.Map getFunctions() -> A
    443:443:cn.com.codesec.parse.metadata.FieldMeta getField(java.lang.String) -> c
    448:459:cn.com.codesec.parse.metadata.FieldMeta getField(java.lang.String,boolean) -> a
    464:470:cn.com.codesec.parse.metadata.FieldMeta defineJavaScriptField(java.lang.String) -> g
    475:478:cn.com.codesec.parse.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> d
    483:486:void addField(cn.com.codesec.parse.metadata.FieldMeta) -> a
    490:491:void removeField(cn.com.codesec.parse.metadata.FieldMeta) -> b
    495:496:java.util.Collection getLocalFields() -> B
    501:503:cn.com.codesec.parse.metadata.FieldMeta[] getFields() -> C
    508:510:java.util.Collection getFunctions(java.lang.String) -> e
    515:535:boolean isSame(cn.com.codesec.parse.metadata.FunMeta,cn.com.codesec.parse.metadata.FunMeta) -> a
    540:545:boolean sameFunction(java.util.Set,cn.com.codesec.parse.metadata.FunMeta) -> a
    550:552:java.util.Set getAllFunctions() -> D
    557:568:void getAllFunctions(java.util.Set) -> a
    572:585:void getFunctions(java.util.Set,java.lang.String) -> a
    589:612:void addFun(cn.com.codesec.parse.metadata.FunMeta) -> a
    616:624:void removeFun(cn.com.codesec.parse.metadata.FunMeta) -> b
    628:638:cn.com.codesec.parse.metadata.FunMeta[] getLocalFunctions(java.lang.String) -> f
    643:650:java.util.Collection getLocalFunctions() -> E
    655:668:cn.com.codesec.parse.metadata.FunMeta getLocalFunction(java.lang.String,cn.com.codesec.parse.metadata.Type[],boolean) -> a
    673:686:void load() -> F
    691:692:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    698:699:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    705:705:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    711:711:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    716:716:cn.com.codesec.parse.metadata.TypeMeta getGenericType() -> G
    721:721:java.util.Map getTypeArguments() -> b
    726:726:cn.com.codesec.parse.metadata.TypeMeta createClone(java.lang.String,java.util.Map) -> a
    754:755:void setSupers(cn.com.codesec.parse.metadata.TypeMeta[]) -> a
    759:759:cn.com.codesec.parse.metadata.Namespace getNamespace() -> H
    764:764:boolean isLoaded() -> I
    769:772:void reload() -> J
    776:779:void unload() -> K
cn.com.codesec.parse.metadata.TypeMeta$1 -> cn.com.codesec.qF:
    cn.com.codesec.parse.metadata.TypeMeta this$0 -> a
    java.util.List val$converted -> j
    cn.com.codesec.parse.metadata.TypeMeta val$superType -> k
    1:145:void <init>(cn.com.codesec.parse.metadata.TypeMeta,cn.com.codesec.parse.metadata.FrontEndNameTable,java.lang.String,cn.com.codesec.parse.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.parse.translator.nodes.STClassDecl,java.util.List,cn.com.codesec.parse.metadata.TypeMeta) -> <init>
    150:150:java.util.List getTypeInstances() -> c
    156:156:cn.com.codesec.parse.metadata.TypeMeta[] getSupers() -> x
    162:162:java.util.Map getFunctions() -> A
    168:168:java.util.Map getFieldMap() -> z
cn.com.codesec.parse.metadata.TypeMeta$2 -> cn.com.codesec.qG:
    cn.com.codesec.parse.metadata.TypeMeta this$0 -> a
    java.util.Map val$typeArgs -> j
    1:731:void <init>(cn.com.codesec.parse.metadata.TypeMeta,cn.com.codesec.parse.metadata.FrontEndNameTable,java.lang.String,cn.com.codesec.parse.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.parse.translator.nodes.STClassDecl,java.util.Map) -> <init>
    737:741:cn.com.codesec.parse.metadata.TypeMeta getGenericType() -> G
    747:747:java.util.Map getTypeArguments() -> b
cn.com.codesec.parse.metadata.UnknownFieldMeta -> cn.com.codesec.qH:
    cn.com.codesec.parse.metadata.UnknownFieldMeta UNKNOWN_FIELD -> a
    14:14:void <clinit>() -> <clinit>
    18:19:void <init>() -> <init>
cn.com.codesec.parse.metadata.UnknownFunMeta -> cn.com.codesec.qI:
    java.util.Set EMPTY_SET -> c
    35:35:void <clinit>() -> <clinit>
    21:22:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    26:29:boolean equals(java.lang.Object) -> equals
    33:33:int hashCode() -> hashCode
    39:39:java.util.Set getCallers() -> w
    42:42:void addCaller(cn.com.codesec.parse.metadata.FunMeta) -> a
cn.com.codesec.parse.metadata.UnknownTypeMeta -> cn.com.codesec.qJ:
    java.lang.String UNKNOWN_TYPEMETA_NAME -> a
    cn.com.codesec.parse.metadata.UnknownTypeMeta UNKNOWN_TYPE -> j
    22:22:void <clinit>() -> <clinit>
    26:27:void <init>() -> <init>
    32:32:cn.com.codesec.parse.metadata.TypeMeta[] getSupers() -> x
    37:37:java.util.Set getAllSupers(boolean) -> b
    43:43:cn.com.codesec.parse.metadata.FieldMeta getField(java.lang.String) -> c
    49:49:cn.com.codesec.parse.metadata.FieldMeta getField(java.lang.String,boolean) -> a
    55:55:java.util.Collection getFunctions(java.lang.String) -> e
    59:59:void getFunctions(java.util.Set,java.lang.String) -> a
    64:64:cn.com.codesec.parse.metadata.FunMeta[] getLocalFunctions(java.lang.String) -> f
    70:70:java.util.Collection getLocalFields() -> B
    76:76:java.util.Collection getLocalFunctions() -> E
    82:82:boolean isA(cn.com.codesec.parse.metadata.TypeMeta) -> b
    88:88:boolean isA(java.lang.String) -> a
    94:94:cn.com.codesec.parse.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> d
    100:100:cn.com.codesec.parse.metadata.FunMeta getLocalFunction(java.lang.String,cn.com.codesec.parse.metadata.Type[],boolean) -> a
    106:107:void loadSupers() -> g
    112:113:void loadFields() -> j
    118:119:void loadFunctions() -> i
    124:124:java.util.Map getFieldMap() -> z
    130:130:java.util.Map getFunctions() -> A
    134:134:void removeField(cn.com.codesec.parse.metadata.FieldMeta) -> b
    137:137:void removeFun(cn.com.codesec.parse.metadata.FunMeta) -> b
    140:140:void addFun(cn.com.codesec.parse.metadata.FunMeta) -> a
    143:143:void addField(cn.com.codesec.parse.metadata.FieldMeta) -> a
    147:147:boolean equals(java.lang.Object) -> equals
    151:151:int hashCode() -> hashCode
cn.com.codesec.parse.sourcemarkup.CrossReferenceData -> cn.com.codesec.qK:
    cn.com.codesec.parse.meta.SourceLocation getDeclarationForSourceElement(cn.com.codesec.parse.sourcemarkup.SourceElement) -> a
    cn.com.codesec.parse.meta.FileType getFileType() -> a
    java.lang.String getFileEncoding() -> b
cn.com.codesec.parse.sourcemarkup.SourceElement -> cn.com.codesec.qL:
    java.lang.String getImage() -> a
    int getBeginLine() -> b
    int getEndLine() -> c
    int getBeginOffset() -> d
    int getEndOffset() -> e
    boolean isKeyword() -> f
    boolean isIdentifier() -> g
    boolean isOperator() -> h
    boolean isComment() -> i
    boolean isWhitespace() -> j
    cn.com.codesec.parse.meta.CommentKind getCommentKind() -> k
    cn.com.codesec.scan.meta.Language getLanguage() -> l
    boolean isIncludeFile() -> m
    java.lang.String getIncludeFileName() -> n
    boolean isStringLiteral() -> o
    boolean isCharLiteral() -> p
    cn.com.codesec.parse.meta.Symbol getDeclaration() -> q
    cn.com.codesec.parse.meta.SourceLocation getDeclarationLocation() -> r
    cn.com.codesec.parse.meta.SourceLocation getLocationOfMatchingBrace() -> s
cn.com.codesec.parse.translator.Constants -> cn.com.codesec.qM:
    java.lang.String SC_SUCCESS_LABEL_PREFIX -> a
    java.lang.String SC_FAILURE_LABEL_PREFIX -> b
    java.lang.String THROW_PREFIX -> c
    java.lang.String CATCH_PREFIX -> d
    java.lang.String TRY_PREFIX -> e
    java.lang.String FINALLY_PREFIX -> f
    java.lang.String LABEL_PREFIX -> g
    java.lang.String AFTER_SWITCH_PREFIX -> h
    java.lang.String INLINE_PREFIX -> i
    java.lang.String SWITCH_PREFIX -> j
    java.lang.String JUMP_TABLE_PREFIX -> k
    java.lang.String DEFAULT_PREFIX -> l
    java.lang.String CHECK_PREFIX -> m
    java.lang.String CONDITIONAL_ACCESS_PREFIX -> n
    java.lang.String DEFAULT_EMPTY_PREFIX -> o
    java.lang.String CASE_PREFIX -> p
    java.lang.String CONTINUE_PREFIX -> q
    java.lang.String BREAK_PREFIX -> r
    java.lang.String INSTANCE_INITS -> s
    java.lang.String INSTANCEOF -> t
    java.lang.String SNYCHRONIZE -> u
    java.lang.String SNYCHRONIZE_PREFIX -> v
    java.lang.String ConditionalAccess_PREFIX -> w
cn.com.codesec.parse.translator.TypePropogator -> cn.com.codesec.qN:
    cn.com.codesec.parse.ir.util.AnnotationKey REAPED_PARENTS_KEY -> l
    cn.com.codesec.parse.ir.util.AnnotationKey UNKNOWN_TYPES_KEY -> m
    cn.com.codesec.parse.ir.util.AnnotationKey POSSIBLE_TYPES_KEY -> a
    cn.com.codesec.parse.ir.util.AnnotationKey TYPES_KEY -> b
    cn.com.codesec.parse.ir.util.AnnotationKey ANNOTATED_RETURN_TYPES_KEY -> c
    cn.com.codesec.parse.ir.util.AnnotationKey ANNOTATED_CALL_TARGETS_KEY -> d
    java.util.HashMap SUB_CLASS_MAP -> n
    java.util.HashMap canonicalGlobals -> o
    java.util.HashMap stubclasses -> p
    java.util.LinkedList newclasses -> q
    cn.com.codesec.parse.metadata.FrontEndNameTable globalNameTable -> e
    cn.com.codesec.parse.translator.nodes.STCompilationUnit cu -> r
    cn.com.codesec.parse.translator.nodes.STClassDecl masterGlobalClass -> s
    cn.com.codesec.scan.meta.Language sourceLanguage -> t
    java.lang.String genericTypeName -> f
    java.lang.String stringTypeName -> g
    java.lang.String methodCallerName -> h
    java.lang.String globalTypeName -> i
    java.util.HashSet referencedMethods -> j
    int thisArgOffset -> k
    boolean iAmFirst -> u
    cn.com.codesec.parse.translator.nodes.STClassDecl globalClass -> v
    554:562:void <clinit>() -> <clinit>
    82:116:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STCompilationUnit,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.HashMap,java.util.HashMap) -> <init>
    119:120:void clearCache() -> a
    123:128:void checkOrCreateType(java.lang.String) -> a
    131:133:void runPropogate() -> b
    136:137:int runCommit() -> c
    141:148:int runCommit(cn.com.codesec.parse.translator.TypePropogator$TypeCommittingVisitor) -> a
    152:213:void finish(boolean) -> a
    216:216:java.util.Set getReferencedMethods() -> d
    220:220:cn.com.codesec.parse.translator.nodes.STExpression getThisArgument(cn.com.codesec.parse.translator.nodes.STFunCall) -> a
    227:238:cn.com.codesec.parse.translator.nodes.STExpression getThisReference(cn.com.codesec.parse.translator.nodes.STFunCall) -> b
    242:242:cn.com.codesec.parse.translator.nodes.STNode rewriteFunCall(cn.com.codesec.parse.translator.nodes.STFunCall) -> c
    246:246:java.util.List getAlternateTargets(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
    250:258:cn.com.codesec.parse.metadata.TypeMeta makeExternClassStub(java.lang.String) -> b
    262:283:cn.com.codesec.parse.metadata.FunMeta makeExternClassMethod(java.lang.String,java.lang.String) -> a
    287:335:void makeGlobalClassField(java.lang.String,cn.com.codesec.parse.ir.SourceInfo) -> a
    338:346:cn.com.codesec.parse.translator.nodes.STVarDecl getCanonicalVarDecl(cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    350:386:cn.com.codesec.parse.translator.nodes.STFunDecl getCanonicalFunDecl(cn.com.codesec.parse.translator.nodes.STFunDecl) -> a
    390:506:cn.com.codesec.parse.translator.nodes.STFunDecl getFunDecl(cn.com.codesec.parse.translator.TypePropogator$BoxOfTypes,java.lang.String,cn.com.codesec.parse.translator.nodes.STFunCall) -> a
    510:550:cn.com.codesec.parse.translator.nodes.STFieldDecl getFieldDecl(cn.com.codesec.parse.translator.nodes.STType,java.lang.String,cn.com.codesec.parse.translator.nodes.STFieldAccess,boolean) -> a
    337:337:cn.com.codesec.parse.translator.nodes.STVarDecl access$0(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    59:59:cn.com.codesec.parse.ir.util.AnnotationKey access$1() -> e
    349:349:cn.com.codesec.parse.translator.nodes.STFunDecl access$2(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STFunDecl) -> a
    69:69:cn.com.codesec.parse.translator.nodes.STCompilationUnit access$3(cn.com.codesec.parse.translator.TypePropogator) -> a
    64:64:java.util.HashMap access$4() -> f
    58:58:cn.com.codesec.parse.ir.util.AnnotationKey access$5() -> g
cn.com.codesec.parse.translator.TypePropogator$BoxOfTypes -> cn.com.codesec.qO:
    cn.com.codesec.parse.metadata.FrontEndNameTable nameTable -> a
    java.util.HashMap types -> b
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> c
    569:573:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable) -> <init>
    575:582:void <init>(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STType) -> <init>
    585:586:void clear() -> a
    589:600:void put(cn.com.codesec.parse.translator.nodes.STType) -> a
    603:608:void put(cn.com.codesec.parse.metadata.TypeMeta) -> a
    611:613:void remove(cn.com.codesec.parse.translator.nodes.STType) -> b
    616:622:void put(cn.com.codesec.parse.translator.TypePropogator$BoxOfTypes) -> a
    625:628:void subtract(cn.com.codesec.parse.translator.TypePropogator$BoxOfTypes) -> b
    631:631:int size() -> b
    635:643:cn.com.codesec.parse.translator.nodes.STType[] getTypes() -> c
    647:669:void forceToNumeric(java.lang.String) -> a
    672:711:cn.com.codesec.parse.metadata.TypeMeta getCommonParent() -> d
    717:717:java.lang.String toString() -> toString
    564:564:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> e
cn.com.codesec.parse.translator.TypePropogator$TypeCommittingVisitor -> cn.com.codesec.qP:
    int changes -> b
    int stubFunNum -> c
    cn.com.codesec.parse.translator.TypePropogator this$0 -> a
    828:831:void <init>(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STCompilationUnit) -> <init>
    834:834:int getChangeCount() -> a
    839:854:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarDecl,java.lang.Object) -> a
    859:907:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldDecl,java.lang.Object) -> a
    912:980:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunDecl,java.lang.Object) -> a
    984:995:cn.com.codesec.parse.metadata.FunMeta getFunMetaFromTargetName(java.lang.String) -> a
    1000:1057:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
cn.com.codesec.parse.translator.TypePropogator$TypeCopyingVisitor -> cn.com.codesec.qQ:
    cn.com.codesec.parse.translator.TypePropogator this$0 -> a
    762:763:void <init>(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STCompilationUnit) -> <init>
    767:791:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarDecl,java.lang.Object) -> a
    796:819:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldAccess,java.lang.Object) -> a
cn.com.codesec.parse.translator.TypePropogator$TypePropFinishVisitor -> cn.com.codesec.qR:
    int stubFunNum -> b
    boolean reportUnresolvedFunCalls -> c
    cn.com.codesec.parse.translator.TypePropogator this$0 -> a
    726:730:void <init>(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STCompilationUnit,boolean) -> <init>
    734:756:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
cn.com.codesec.parse.translator.TypePropogator$TypePropogationVisitor -> cn.com.codesec.qS:
    cn.com.codesec.parse.translator.nodes.STCompilationUnit topLevel -> b
    cn.com.codesec.parse.translator.TypePropogator$BoxOfTypes returnTypes -> c
    cn.com.codesec.parse.translator.nodes.STFunDecl enclosingFunDecl -> d
    cn.com.codesec.parse.translator.TypePropogator this$0 -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> e
    int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STLiteralExp$Type -> f
    1068:1073:void <init>(cn.com.codesec.parse.translator.TypePropogator,cn.com.codesec.parse.translator.nodes.STCompilationUnit) -> <init>
    1077:1140:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunDecl,java.lang.Object) -> a
    1145:1158:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarDecl,java.lang.Object) -> a
    1163:1168:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STVarAccess,java.lang.Object) -> a
    1173:1223:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFieldAccess,java.lang.Object) -> a
    1228:1335:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunCall,java.lang.Object) -> a
    1340:1416:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAssignmentStmt,java.lang.Object) -> a
    1421:1495:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STOpExp,java.lang.Object) -> a
    1500:1514:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STReturnStmt,java.lang.Object) -> a
    1519:1519:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STAllocation,java.lang.Object) -> a
    1524:1548:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STFunIdentifier,java.lang.Object) -> a
    1553:1594:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STLiteralExp,java.lang.Object) -> a
    1599:1636:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STClassDecl,java.lang.Object) -> a
    1061:1061:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> a
    1061:1061:int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STLiteralExp$Type() -> b
cn.com.codesec.parse.translator.java.TypeSystem -> cn.com.codesec.qT:
    28:28:void <init>() -> <init>
    31:40:java.lang.String join(java.util.List,java.lang.String) -> b
    30:30:java.lang.String access$0(java.util.List,java.lang.String) -> a
cn.com.codesec.parse.translator.java.TypeSystem$Counter -> cn.com.codesec.qU:
    int temporaryCount -> a
    47:49:void <init>() -> <init>
    52:53:java.lang.String generateTemporary(java.lang.String) -> a
    57:57:java.lang.String generateTemporary() -> a
    61:65:java.util.List generateNames(java.lang.String,int) -> a
cn.com.codesec.parse.translator.java.TypeSystem$Function -> cn.com.codesec.qV:
    cn.com.codesec.parse.translator.java.TypeSystem$Type returnType -> a
    java.util.List parameters -> b
    java.util.List exceptions -> c
    java.util.List typeParameters -> d
    java.lang.String name -> e
    boolean staticK -> f
    boolean varArg -> g
    cn.com.codesec.parse.translator.java.TypeSystem$Type owner -> h
    cn.com.codesec.parse.translator.java.TypeSystem$Function genericFunction -> i
    665:675:void <init>(java.lang.String,cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.translator.java.TypeSystem$Type,java.util.List,java.util.List,java.util.List,boolean,boolean) -> <init>
    678:678:cn.com.codesec.parse.translator.java.TypeSystem$Function copy() -> a
    681:682:void <init>() -> <init>
    686:697:int hashCode() -> hashCode
    702:702:boolean equals(java.lang.Object) -> equals
    706:715:boolean equals(cn.com.codesec.parse.translator.java.TypeSystem$Function) -> a
    719:719:cn.com.codesec.parse.translator.java.TypeSystem$Function getGenericFunction() -> b
    723:724:void setGenericFunction(cn.com.codesec.parse.translator.java.TypeSystem$Function) -> b
    727:727:boolean isVarArg() -> c
    731:732:void setVarArg(boolean) -> a
    736:736:java.lang.String toString() -> toString
    740:740:boolean isGeneric() -> d
    744:749:boolean hasGenericArguments() -> e
    753:753:boolean hasGenericReturn() -> f
    757:763:java.lang.String toPrototype() -> g
    767:767:java.lang.String getName() -> h
    771:772:void setName(java.lang.String) -> a
    775:775:boolean isStatic() -> i
    779:780:void setStatic(boolean) -> b
    783:784:void setTypeParameters(java.util.List) -> a
    787:787:java.util.List getTypeParameters() -> j
    791:792:void setParameters(java.util.List) -> b
    795:798:java.util.List getExplicitParameters() -> k
    802:802:java.util.List getParameters() -> l
    806:806:cn.com.codesec.parse.translator.java.TypeSystem$Type getReturnType() -> m
    810:811:void setReturnType(cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    814:814:cn.com.codesec.parse.translator.java.TypeSystem$Type getOwner() -> n
    818:822:cn.com.codesec.parse.translator.java.TypeSystem$Function instantiateFromBounds() -> o
    826:836:cn.com.codesec.parse.translator.java.TypeSystem$Function replaceType(java.util.Map) -> a
    840:844:cn.com.codesec.parse.translator.java.TypeSystem$Function replace(java.util.Map) -> b
cn.com.codesec.parse.translator.java.TypeSystem$Type -> cn.com.codesec.qW:
    java.lang.String name -> a
    boolean typeVariable -> b
    java.util.List generics -> c
    int arrayDimensions -> d
    java.util.List functionReference -> e
    cn.com.codesec.parse.translator.java.TypeSystem$Type lowerBound -> f
    cn.com.codesec.parse.translator.java.TypeSystem$Type upperBound -> g
    boolean captured -> h
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind kind -> i
    int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$java$TypeSystem$Type$Kind -> j
    125:125:cn.com.codesec.parse.translator.java.TypeSystem$Type createType(java.lang.String) -> a
    129:129:cn.com.codesec.parse.translator.java.TypeSystem$Type createType(java.lang.String,java.util.List) -> a
    133:133:cn.com.codesec.parse.translator.java.TypeSystem$Type createType(cn.com.codesec.parse.translator.java.TypeSystem$Type,java.util.List) -> a
    137:140:cn.com.codesec.parse.translator.java.TypeSystem$Type createFunctionReference(java.util.List) -> a
    144:144:cn.com.codesec.parse.translator.java.TypeSystem$Type createVariable(java.lang.String) -> b
    148:148:cn.com.codesec.parse.translator.java.TypeSystem$Type createVariable(java.lang.String,cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    152:152:cn.com.codesec.parse.translator.java.TypeSystem$Type createWildcard() -> a
    156:158:cn.com.codesec.parse.translator.java.TypeSystem$Type createWildcard(cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind) -> a
    162:162:cn.com.codesec.parse.translator.java.TypeSystem$Type createIntersection(java.util.List) -> b
    165:177:void <init>(cn.com.codesec.parse.translator.java.TypeSystem$Type,java.util.List) -> <init>
    179:191:void <init>(cn.com.codesec.parse.translator.java.TypeSystem$Type) -> <init>
    193:204:void <init>(java.lang.String,boolean,cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> <init>
    207:208:void <init>(java.lang.String,boolean) -> <init>
    211:212:void <init>(java.lang.String) -> <init>
    215:216:void <init>(java.lang.String,java.util.List,boolean) -> <init>
    218:228:void <init>(java.lang.String,java.util.List,boolean,cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind) -> <init>
    231:231:cn.com.codesec.parse.translator.java.TypeSystem$Type copy() -> b
    235:236:void setCaptured(boolean) -> a
    239:239:boolean isCaptured() -> c
    243:246:cn.com.codesec.parse.translator.java.TypeSystem$Type getLowerBound() -> d
    250:253:cn.com.codesec.parse.translator.java.TypeSystem$Type getUpperBound() -> e
    257:261:boolean isPrimitive() -> f
    265:269:boolean isPrimitiveArray() -> g
    273:273:boolean isNullType() -> h
    277:307:cn.com.codesec.parse.translator.java.TypeSystem$Type unboxType() -> i
    311:344:cn.com.codesec.parse.translator.java.TypeSystem$Type boxType() -> j
    348:348:boolean isIntersection() -> k
    352:357:cn.com.codesec.parse.translator.java.TypeSystem$Type nonWild() -> l
    361:361:java.util.List getFunctionReferences() -> m
    365:365:boolean isFunctionReference() -> n
    369:369:boolean isTypeVariable() -> o
    373:374:void setKind(cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind) -> a
    377:377:cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind getKind() -> p
    381:381:boolean isWildcard() -> q
    385:399:boolean hasGenericTypeParameter(java.util.IdentityHashMap) -> b
    403:403:boolean hasGenericTypeParameter() -> r
    407:409:cn.com.codesec.parse.translator.java.TypeSystem$Type replace(cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    413:415:cn.com.codesec.parse.translator.java.TypeSystem$Type applyArray(cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    419:421:cn.com.codesec.parse.translator.java.TypeSystem$Type stripArray() -> s
    425:429:cn.com.codesec.parse.translator.java.TypeSystem$Type elementType() -> t
    433:433:cn.com.codesec.parse.translator.java.TypeSystem$Type replace(java.util.Map) -> a
    437:441:cn.com.codesec.parse.translator.java.TypeSystem$Type replaceByName(java.util.Map) -> b
    445:454:void update(cn.com.codesec.parse.translator.java.TypeSystem$Type) -> b
    457:486:cn.com.codesec.parse.translator.java.TypeSystem$Type replace(java.util.IdentityHashMap,java.util.Map) -> a
    491:532:java.lang.String toString(java.util.IdentityHashMap) -> c
    536:536:java.lang.String toStringNoSpaces() -> u
    541:541:java.lang.String toString() -> toString
    545:546:void setArrayDimensions(int) -> a
    549:549:int getArrayDimensions() -> v
    553:563:boolean mentions(java.util.Collection) -> a
    568:568:boolean equals(java.lang.Object) -> equals
    572:606:boolean equals(java.util.IdentityHashMap,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    610:628:int hashCode(java.util.IdentityHashMap) -> a
    633:633:int hashCode() -> hashCode
    637:637:java.lang.String getName() -> w
    641:641:java.util.List getGenerics() -> x
    112:112:int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$java$TypeSystem$Type$Kind() -> y
cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind -> cn.com.codesec.qX:
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind NORMAL -> a
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind EXTENDS -> b
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind SUPER -> c
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind WILD -> d
    cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind[] ENUM$VALUES -> e
    644:649:void <clinit>() -> <clinit>
    644:644:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind[] values() -> values
    1:1:cn.com.codesec.parse.translator.java.TypeSystem$Type$Kind valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.translator.java.TypeSystem$TypeParameter -> cn.com.codesec.qY:
    java.lang.String name -> a
    java.util.List bounds -> b
    75:76:void <init>(java.lang.String) -> <init>
    78:81:void <init>(java.lang.String,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> <init>
    83:86:void <init>(java.lang.String,java.util.List) -> <init>
    89:89:java.lang.String getName() -> a
    93:93:java.util.List getBounds() -> b
    97:97:cn.com.codesec.parse.translator.java.TypeSystem$TypeParameter copy() -> c
    102:108:java.lang.String toString() -> toString
cn.com.codesec.parse.translator.java.TypeSystem$Utils -> cn.com.codesec.qZ:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$java$TypeSystem$Type$Kind -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STType$Kind -> b
    848:848:void <init>() -> <init>
    851:851:cn.com.codesec.parse.metadata.Type convertToMetadataType(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    855:859:java.util.List convert(java.util.Collection) -> a
    863:870:boolean isInner(cn.com.codesec.parse.metadata.FunMeta) -> d
    874:885:cn.com.codesec.parse.translator.java.TypeSystem$Function convert(cn.com.codesec.parse.metadata.FunMeta) -> a
    918:977:cn.com.codesec.parse.translator.nodes.STType convertToSTType(java.util.IdentityHashMap,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    981:981:cn.com.codesec.parse.translator.nodes.STType convertToSTType(cn.com.codesec.parse.translator.java.TypeSystem$Type) -> a
    985:1025:cn.com.codesec.parse.translator.java.TypeSystem$Type convert(cn.com.codesec.parse.translator.nodes.STType) -> a
    1029:1046:java.util.Map createTypeMapping(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> b
    1050:1070:java.util.Set getSupers(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> c
    1074:1097:java.util.Set getRawSupers(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> d
    1101:1107:java.util.Map createGenericInstantiation(java.util.List,java.util.List) -> a
    1111:1115:java.util.Map createGenericInstantiation(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> g
    1119:1119:java.util.List sublist(int,java.util.List) -> a
    1123:1133:java.util.List getFunctions(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type,java.lang.String) -> a
    1137:1158:cn.com.codesec.parse.translator.java.TypeSystem$Function instantiateFunction(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type,cn.com.codesec.parse.metadata.FunMeta) -> a
    1162:1169:cn.com.codesec.parse.translator.java.TypeSystem$Function findFunctionalMethod(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> h
    1173:1173:boolean isPossibleFunctionalInterfaceMethod(cn.com.codesec.parse.metadata.FunMeta) -> b
    1177:1177:boolean isObjectMethod(cn.com.codesec.parse.metadata.FunMeta) -> e
    1181:1190:cn.com.codesec.parse.translator.java.TypeSystem$Function getFunctionalMethod(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> e
    1194:1199:cn.com.codesec.parse.translator.java.TypeSystem$Type instantiateFromBounds(cn.com.codesec.parse.metadata.TypeMeta) -> a
    1203:1204:cn.com.codesec.parse.translator.java.TypeSystem$Type instantiateFromBounds(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.java.TypeSystem$Type) -> f
    1208:1212:void getClassTypeParameters(java.util.Map,cn.com.codesec.parse.metadata.TypeMeta) -> a
    1215:1217:java.util.Map getClassTypeParameters(cn.com.codesec.parse.metadata.TypeMeta) -> b
    1221:1225:java.util.Map getClassTypeParameters(java.util.Collection) -> b
    1242:1247:java.util.Map getFunctionTypeParameters(cn.com.codesec.parse.metadata.FunMeta) -> c
    1251:1263:java.util.Map instantiateTypes(java.util.Map) -> a
    1267:1289:java.util.Map instantiateTypeParameters(cn.com.codesec.parse.metadata.FrontEndNameTable,cn.com.codesec.parse.translator.nodes.STNode) -> a
    848:848:int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$java$TypeSystem$Type$Kind() -> a
    848:848:int[] $SWITCH_TABLE$cn$com$codesec$parse$translator$nodes$STType$Kind() -> b
cn.com.codesec.parse.translator.nodes.JJTPLSQLParserState -> cn.com.codesec.ra:
    java.util.Stack nodes -> a
    java.util.Stack marks -> b
    int sp -> c
    int mk -> d
    boolean nodeCreated -> e
    13:18:void <init>() -> <init>
    21:21:boolean nodeCreated() -> a
    25:29:void reset() -> b
    32:32:cn.com.codesec.parse.translator.nodes.Node rootNode() -> c
    36:38:void pushNode(cn.com.codesec.parse.translator.nodes.Node) -> a
    41:46:cn.com.codesec.parse.translator.nodes.Node popNode() -> d
    50:50:cn.com.codesec.parse.translator.nodes.Node peekNode() -> e
    54:54:int nodeArity() -> f
    58:62:void clearNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> b
    65:68:void openNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> c
    71:80:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,int) -> a
    83:99:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,boolean) -> a
cn.com.codesec.parse.translator.nodes.JJTSTReaderState -> cn.com.codesec.rb:
    java.util.Stack nodes -> a
    java.util.Stack marks -> b
    int sp -> c
    int mk -> d
    boolean nodeCreated -> e
    13:18:void <init>() -> <init>
    21:21:boolean nodeCreated() -> a
    25:29:void reset() -> b
    32:32:cn.com.codesec.parse.translator.nodes.Node rootNode() -> c
    36:38:void pushNode(cn.com.codesec.parse.translator.nodes.Node) -> a
    41:46:cn.com.codesec.parse.translator.nodes.Node popNode() -> d
    50:50:cn.com.codesec.parse.translator.nodes.Node peekNode() -> e
    54:54:int nodeArity() -> f
    58:62:void clearNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> b
    65:68:void openNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> c
    71:80:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,int) -> a
    83:99:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,boolean) -> a
cn.com.codesec.parse.translator.nodes.Node -> cn.com.codesec.rc:
    void jjtOpen() -> c
    void jjtClose() -> d
    void jjtSetParent(cn.com.codesec.parse.translator.nodes.Node) -> a
    cn.com.codesec.parse.translator.nodes.Node jjtGetParent() -> e
    void jjtAddChild(cn.com.codesec.parse.translator.nodes.Node,int) -> a
    cn.com.codesec.parse.translator.nodes.Node jjtGetChild(int) -> a
    int jjtGetNumChildren() -> f
cn.com.codesec.parse.translator.nodes.PLSQLParserTreeConstants -> cn.com.codesec.rd:
    int JJTSTFUNCALL -> a
    int JJTSTBLOCK -> b
    int JJTSTCLASSDECLSTATEMENT -> c
    int JJTSTFUNDECLSTATEMENT -> d
    int JJTVOID -> e
    int JJTSTCLASSDECLPLSQL -> f
    int JJTSTVARDECL -> g
    int JJTSTNOOPSTMT -> h
    int JJTSTASSIGNMENTSTMT -> i
    int JJTSTIFELSE -> j
    int JJTSTOPEXP -> k
    int JJTSTFUNDECL -> l
    int JJTSTGOTO -> m
    int JJTSTWHILESTMT -> n
    int JJTSTVARACCESS -> o
    int JJTSTEMPTYSTATEMENT -> p
    int JJTSTFIELDDECL -> q
    int JJTSTRETURNSTMT -> r
    int JJTSTCALLSTMT -> s
    int JJTSTCOMPILATIONUNIT -> t
cn.com.codesec.parse.translator.nodes.STAllocation -> cn.com.codesec.re:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STAllocation) -> <init>
    24:24:cn.com.codesec.parse.translator.nodes.STType getType() -> a
    28:33:cn.com.codesec.parse.translator.nodes.STIndex[] getDimensions() -> g
    38:47:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    50:51:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    54:55:void addChild(cn.com.codesec.parse.translator.nodes.STIndex) -> a
    59:61:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    66:67:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    71:71:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STArrayAccess -> cn.com.codesec.rf:
    11:12:void <init>(int) -> <init>
    14:15:void <init>() -> <init>
    18:19:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    22:25:void <init>(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.parse.translator.nodes.STLocation,cn.com.codesec.parse.translator.nodes.STIndex) -> <init>
    28:29:void <init>(cn.com.codesec.parse.translator.nodes.STArrayAccess) -> <init>
    33:33:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    38:40:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    45:46:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    49:49:cn.com.codesec.parse.translator.nodes.STLocation getBase() -> a
    53:53:cn.com.codesec.parse.translator.nodes.STIndex getIndex() -> g
    58:64:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    69:69:cn.com.codesec.parse.translator.nodes.STLocation getBaseLocation() -> h
    74:78:void jjtAddChild(cn.com.codesec.parse.translator.nodes.Node,int) -> a
cn.com.codesec.parse.translator.nodes.STAssignmentStmt -> cn.com.codesec.rg:
    cn.com.codesec.parse.ir.util.AnnotationKey INCR_DECR -> a
    103:104:void <clinit>() -> <clinit>
    13:14:void <init>(int) -> <init>
    16:17:void <init>() -> <init>
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:25:void <init>(cn.com.codesec.parse.translator.nodes.STAssignmentStmt) -> <init>
    28:28:cn.com.codesec.parse.translator.nodes.STExpression getLhs() -> a
    32:32:cn.com.codesec.parse.translator.nodes.STExpression getRhs() -> g
    36:39:void setLhs(cn.com.codesec.parse.translator.nodes.STLocation) -> a
    42:45:void setRhs(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    50:67:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    71:71:int getChildCount() -> j_
    76:78:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    83:84:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    88:88:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    92:92:boolean isIncrDecr() -> i
    97:99:java.lang.String toString() -> toString
cn.com.codesec.parse.translator.nodes.STAssociativeIndex -> cn.com.codesec.rh:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STAssociativeIndex) -> <init>
    25:25:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STBlock -> cn.com.codesec.ri:
    java.util.Map storageMap -> a
    22:23:void <init>(int) -> <init>
    25:27:void <init>() -> <init>
    30:32:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    35:37:void <init>(cn.com.codesec.parse.translator.nodes.STBlock) -> <init>
    41:42:void insertChild(cn.com.codesec.parse.translator.nodes.STNode,int) -> a
    45:46:void insertChildBefore(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> a
    49:50:void insertChildBefore(cn.com.codesec.parse.translator.nodes.STVarDecl,cn.com.codesec.parse.translator.nodes.STNode) -> a
    53:54:void insertChildAfter(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> b
    57:60:void insertChild(cn.com.codesec.parse.translator.nodes.STVarDecl,int) -> a
    63:68:void insertChild(cn.com.codesec.parse.translator.nodes.STStatement,int) -> a
    72:95:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    98:103:void addChild(cn.com.codesec.parse.translator.nodes.STStatement) -> a
    106:106:cn.com.codesec.parse.translator.nodes.STStatement getStatement(int) -> b
    110:110:int getNumStatements() -> a
    114:115:boolean isTryBlock() -> g
    119:120:boolean isCatchBlock() -> i
    124:125:boolean isFinallyBlock() -> j
    129:130:boolean isInlineFinallyBlock() -> k
    134:135:boolean isSynchronizedBlock() -> l
    140:140:java.util.Map getFunMap() -> m
    145:148:java.util.Map getStorageMap() -> n
    153:153:cn.com.codesec.parse.translator.nodes.STCompilationUnit getCompilationUnit() -> o
    158:159:void setParent(cn.com.codesec.parse.translator.nodes.STNode) -> d
    163:165:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    170:179:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    183:186:cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    190:193:java.util.Iterator getStorageIterator() -> p
    198:198:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    202:206:cn.com.codesec.parse.translator.nodes.STExpression getSynchronizedObject() -> q
    210:211:boolean isSwitchBlock() -> r
    215:216:boolean isJumpTable() -> s
    220:238:java.util.List getCases() -> t
    242:261:java.util.List makeCases(cn.com.codesec.parse.translator.nodes.STBlock) -> a
cn.com.codesec.parse.translator.nodes.STBreak -> cn.com.codesec.rj:
    java.lang.String labelToBreak -> a
    11:12:void <init>(int) -> <init>
    14:15:void <init>() -> <init>
    18:19:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    22:23:void <init>(cn.com.codesec.parse.translator.nodes.STBreak) -> <init>
    27:27:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    31:32:void setLabelToBreak(java.lang.String) -> a
    35:35:java.lang.String getLabelToBreak() -> a
cn.com.codesec.parse.translator.nodes.STCallStmt -> cn.com.codesec.rk:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STCallStmt) -> <init>
    24:24:cn.com.codesec.parse.translator.nodes.STFunCall getCall() -> a
    29:33:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    37:38:void addChild(cn.com.codesec.parse.translator.nodes.STFunCall) -> a
    42:44:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    49:50:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    54:54:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STCase -> cn.com.codesec.rl:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STCase) -> <init>
    24:30:void setCaseBody(cn.com.codesec.parse.translator.nodes.STBlock) -> a
    33:33:cn.com.codesec.parse.translator.nodes.STBlock getCaseBody() -> a
    38:47:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    50:50:void doAssemble() -> g
    54:56:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    61:62:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    66:66:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    70:70:boolean isDefault() -> i
cn.com.codesec.parse.translator.nodes.STClassDecl -> cn.com.codesec.rm:
    java.lang.String name -> l
    java.lang.String canonicalName -> m
    cn.com.codesec.parse.metadata.Namespace namespace -> n
    java.lang.String namespaceName -> o
    java.lang.String namespaceLocalName -> p
    boolean isLocal -> q
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> r
    boolean interfaceK -> s
    java.util.Map funMap -> a
    java.util.Map storageMap -> b
    int size -> t
    java.lang.String trueSimpleName -> u
    35:36:void <init>(int) -> <init>
    39:39:java.lang.String getNamespaceName() -> g
    43:44:void setNamespaceName(java.lang.String) -> b
    46:58:void <init>() -> <init>
    61:73:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    76:88:void <init>(cn.com.codesec.parse.translator.nodes.STClassDecl) -> <init>
    91:91:java.lang.String getName() -> i
    95:95:boolean isInterface() -> j
    99:100:void setIsInterface(boolean) -> a
    103:103:java.lang.String getCanonicalName() -> k
    108:112:void setName(java.lang.String) -> c
    115:116:void setCanonicalName(java.lang.String) -> d
    119:126:cn.com.codesec.parse.metadata.Namespace getNamespace() -> l
    130:130:java.lang.String getNamespaceLocalName() -> p
    134:135:void setNamespaceLocalName(java.lang.String) -> e
    141:141:java.lang.String getTrueSimpleName() -> q
    145:161:void setTrueSimpleName(java.lang.String) -> f
    164:169:cn.com.codesec.parse.translator.nodes.STExtendsList getExtendsList() -> r
    173:178:cn.com.codesec.parse.translator.nodes.STImplementsList getImplementsList() -> s
    182:182:int getSize() -> t
    186:187:void setSize(int) -> b
    191:191:java.util.Map getFunMap() -> m
    196:196:java.util.Map getStorageMap() -> n
    200:205:boolean hasFunctions() -> u
    209:214:boolean hasFields() -> v
    218:226:cn.com.codesec.parse.translator.nodes.STFieldDecl[] getFieldDecls() -> w
    230:238:cn.com.codesec.parse.translator.nodes.STFunDecl[] getFunDecls() -> x
    243:243:java.lang.String getSymbol() -> y
    247:247:cn.com.codesec.parse.metadata.TypeMeta findTypeMeta(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    252:281:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    284:285:void addChild(cn.com.codesec.parse.translator.nodes.STExtendsList) -> a
    288:289:void addChild(cn.com.codesec.parse.translator.nodes.STImplementsList) -> a
    292:297:void addChild(cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    300:302:void addChild(cn.com.codesec.parse.translator.nodes.STFieldDecl) -> a
    305:307:void addChild(cn.com.codesec.parse.translator.nodes.STFunDecl) -> a
    311:318:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    323:324:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    328:328:java.lang.String toString() -> toString
    333:333:cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    337:338:cn.com.codesec.parse.translator.nodes.STFunDecl[] getFunDecl(java.lang.String) -> g
    343:343:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    348:349:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    352:353:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    357:358:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    362:362:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    367:367:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
cn.com.codesec.parse.translator.nodes.STCompilationUnit -> cn.com.codesec.rn:
    cn.com.codesec.scan.meta.Language sourceLanguage -> l
    cn.com.codesec.util.SKYFile sourceFile -> m
    java.util.LinkedHashMap funMap -> a
    java.util.LinkedHashMap storageMap -> b
    boolean cleared -> n
    cn.com.codesec.parse.translator.nodes.STBlock topLevelBlock -> o
    26:27:void <init>(int) -> <init>
    29:33:void <init>() -> <init>
    36:42:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.meta.Language,cn.com.codesec.util.SKYFile) -> <init>
    45:53:void <init>(cn.com.codesec.parse.translator.nodes.STCompilationUnit) -> <init>
    56:57:void enableFunctionMap() -> a
    61:70:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    73:75:void addChild(cn.com.codesec.parse.translator.nodes.STDecl) -> a
    78:79:void addPseudoGlobal(cn.com.codesec.parse.translator.nodes.STDecl) -> b
    83:83:cn.com.codesec.parse.metadata.Namespace getNamespaceMeta() -> i_
    88:88:java.util.Map getFunMap() -> m
    93:93:java.util.Map getStorageMap() -> n
    98:98:void removeChild(cn.com.codesec.parse.translator.nodes.STNode) -> e
    103:105:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    110:111:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    115:115:cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    119:123:cn.com.codesec.parse.translator.nodes.STFunDecl[] getFunDecl(java.lang.String) -> b
    128:128:cn.com.codesec.util.SKYFile getSourceFile() -> i
    132:133:void setSourceFile(cn.com.codesec.util.SKYFile) -> a
    137:137:cn.com.codesec.parse.translator.nodes.STCompilationUnit getCompilationUnit() -> o
    141:141:cn.com.codesec.scan.meta.Language getSourceLanguage() -> j
    145:146:void setSourceLanguage(cn.com.codesec.scan.meta.Language) -> a
    149:149:boolean isCleared() -> k
    153:172:void clear() -> l
    176:176:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    180:181:void startTopLevelFunction() -> p
    184:202:void startTopLevelFunction(java.lang.String,java.lang.String) -> a
cn.com.codesec.parse.translator.nodes.STConditional -> cn.com.codesec.ro:
    8:9:void <init>(int) -> <init>
    11:12:void <init>() -> <init>
    15:16:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    19:20:void <init>(cn.com.codesec.parse.translator.nodes.STStatement) -> <init>
    cn.com.codesec.parse.translator.nodes.STExpression getPredicate() -> a
cn.com.codesec.parse.translator.nodes.STContinue -> cn.com.codesec.rp:
    java.lang.String labelToContinue -> a
    11:12:void <init>(int) -> <init>
    14:15:void <init>() -> <init>
    18:19:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    22:23:void <init>(cn.com.codesec.parse.translator.nodes.STContinue) -> <init>
    27:27:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    31:32:void setLabelToContinue(java.lang.String) -> a
    35:35:java.lang.String getLabelToContinue() -> a
cn.com.codesec.parse.translator.nodes.STDecl -> cn.com.codesec.rq:
    java.util.List NO_SOURCEANNOTATIONS -> a
    java.util.List sourceAnnotations -> b
    48:49:void <clinit>() -> <clinit>
    18:19:void <init>(int) -> <init>
    21:23:void <init>() -> <init>
    26:28:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    31:33:void <init>(cn.com.codesec.parse.translator.nodes.STDecl) -> <init>
    java.lang.String getSymbol() -> y
    void setName(java.lang.String) -> c
    40:41:void setSourceAnnotations(java.util.List) -> a
    44:44:java.util.List getSourceAnnotations() -> z
cn.com.codesec.parse.translator.nodes.STDeclStatement -> cn.com.codesec.rr:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STDeclStatement) -> <init>
    24:24:cn.com.codesec.parse.translator.nodes.STVarDecl getDecl() -> a
    29:33:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    37:38:void addChild(cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    42:44:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    49:50:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    54:54:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STDereference -> cn.com.codesec.rs:
    cn.com.codesec.parse.translator.nodes.STLocation base -> a
    12:13:void <init>(int) -> <init>
    15:16:void <init>() -> <init>
    19:20:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.translator.nodes.STLocation) -> <init>
    29:30:void <init>(cn.com.codesec.parse.translator.nodes.STDereference) -> <init>
    34:34:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    39:44:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    49:53:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    56:56:cn.com.codesec.parse.translator.nodes.STLocation getBase() -> a
    60:61:void setBase(cn.com.codesec.parse.translator.nodes.STLocation) -> a
    65:65:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    70:76:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
cn.com.codesec.parse.translator.nodes.STEmptyStatement -> cn.com.codesec.rt:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfo) -> <init>
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    25:25:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    29:29:void addChild(cn.com.codesec.parse.translator.nodes.STStatement) -> a
cn.com.codesec.parse.translator.nodes.STExpression -> cn.com.codesec.ru:
    cn.com.codesec.parse.translator.nodes.STType typeCast -> a
    10:11:void <init>(int) -> <init>
    13:15:void <init>() -> <init>
    18:20:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    23:25:void <init>(cn.com.codesec.parse.translator.nodes.STExpression) -> <init>
    28:28:boolean hasTypeCast() -> i
    32:32:cn.com.codesec.parse.translator.nodes.STType getTypeCast() -> j
    36:38:void setTypeCast(cn.com.codesec.parse.translator.nodes.STType) -> b
    42:46:void nodeCloneStart(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> b_
    50:54:void nodeCloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> f
cn.com.codesec.parse.translator.nodes.STExpressionList -> cn.com.codesec.rv:
    cn.com.codesec.parse.translator.nodes.STExpression[] list -> a
    11:12:void <init>(int) -> <init>
    14:16:void <init>() -> <init>
    19:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:26:void <init>(cn.com.codesec.parse.translator.nodes.STExpressionList) -> <init>
    29:36:cn.com.codesec.parse.translator.nodes.STExpression[] getList() -> a
    41:45:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    49:51:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    55:57:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    62:63:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    67:67:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STExtendsList -> cn.com.codesec.rw:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STExtendsList) -> <init>
    24:29:cn.com.codesec.parse.translator.nodes.STType[] getTypes() -> a
    34:38:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    42:43:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    47:49:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    54:55:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    59:59:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STFieldAccess -> cn.com.codesec.rx:
    java.lang.String name -> a
    cn.com.codesec.parse.translator.nodes.STType type -> b
    cn.com.codesec.parse.metadata.FieldMeta fieldResolution -> l
    22:23:void <init>(int) -> <init>
    25:28:void <init>() -> <init>
    31:34:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    37:40:void <init>(cn.com.codesec.parse.translator.nodes.STFieldAccess) -> <init>
    43:46:cn.com.codesec.parse.translator.nodes.STExpression getInstance() -> a
    50:50:cn.com.codesec.parse.translator.nodes.STType getType() -> k
    55:55:java.lang.String getName() -> l
    59:60:void setName(java.lang.String) -> a
    63:76:void setInstance(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    79:82:void setType(cn.com.codesec.parse.translator.nodes.STType) -> a
    85:119:void resolve(cn.com.codesec.parse.metadata.FieldMeta) -> a
    122:122:boolean isResoved() -> p
    126:136:cn.com.codesec.parse.metadata.FieldMeta getFieldResolution(cn.com.codesec.parse.metadata.FrontEndNameTable) -> b
    141:147:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    152:153:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    157:157:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    162:162:java.lang.String toString() -> toString
    167:180:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
cn.com.codesec.parse.translator.nodes.STFieldDecl -> cn.com.codesec.ry:
    java.lang.String name -> b
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> l
    cn.com.codesec.parse.translator.nodes.STExpression constantValue -> m
    cn.com.codesec.parse.metadata.FieldMeta fieldMeta -> a
    17:18:void <init>(int) -> <init>
    20:23:void <init>() -> <init>
    26:29:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    32:35:void <init>(cn.com.codesec.parse.translator.nodes.STFieldDecl) -> <init>
    38:41:cn.com.codesec.parse.translator.nodes.STType getType() -> i
    45:45:java.lang.String getName() -> j
    50:51:void setName(java.lang.String) -> c
    55:55:java.lang.String getSymbol() -> y
    60:69:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    72:79:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    83:87:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    92:93:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    97:97:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    102:102:java.lang.String toString() -> toString
    107:108:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    111:112:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    116:117:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    121:121:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    126:126:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    130:131:void setFieldResolution(cn.com.codesec.parse.metadata.FieldMeta) -> a
    134:134:cn.com.codesec.parse.metadata.FieldMeta getFieldResolution() -> k
    138:139:void setConstantValue(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    142:142:cn.com.codesec.parse.translator.nodes.STLiteralExp getConstantValue() -> l
cn.com.codesec.parse.translator.nodes.STFunCall -> cn.com.codesec.rz:
    cn.com.codesec.parse.ir.util.AnnotationKey ANN_ARG_NAME -> a
    cn.com.codesec.parse.translator.nodes.STExpression pointer -> b
    cn.com.codesec.parse.translator.nodes.STType type -> l
    java.lang.String name -> m
    cn.com.codesec.parse.metadata.FunMeta resolution -> n
    java.util.List extraArgs -> o
    cn.com.codesec.parse.translator.nodes.STExpression[] arglist -> p
    317:318:void <clinit>() -> <clinit>
    31:32:void <init>(int) -> <init>
    34:41:void <init>() -> <init>
    44:51:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    54:61:void <init>(cn.com.codesec.parse.translator.nodes.STFunCall) -> <init>
    64:64:cn.com.codesec.parse.translator.nodes.STExpression getPointer() -> a
    68:76:void clearPointer() -> k
    79:82:void setPointer(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    85:85:cn.com.codesec.parse.translator.nodes.STType getType() -> p
    89:89:java.lang.String getSimpleName() -> q
    94:94:java.lang.String getName() -> l
    98:98:boolean isNamedCall() -> r
    102:103:void setName(java.lang.String) -> a
    106:106:java.lang.String getUniqueName() -> s
    110:114:cn.com.codesec.parse.translator.nodes.STExpression[] getFullArglist() -> t
    118:118:java.util.List getExtraArgs() -> u
    122:123:void setExtraArgs(java.util.List) -> a
    126:127:void addExtraArg(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    130:147:cn.com.codesec.parse.translator.nodes.STExpression[] getArglist() -> v
    151:151:int getArgCount() -> w
    155:155:cn.com.codesec.parse.translator.nodes.STExpression getArg(int) -> b
    159:161:void insertArg(cn.com.codesec.parse.translator.nodes.STExpression,int) -> a
    165:175:void replaceChild(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> a_
    178:182:void setArg(cn.com.codesec.parse.translator.nodes.STExpression,int) -> b
    186:195:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    201:202:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    205:210:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> c
    213:218:void setType(cn.com.codesec.parse.translator.nodes.STType) -> c
    221:226:void resolve(cn.com.codesec.parse.metadata.FunMeta) -> a
    229:230:void resolveUnknown() -> x
    233:233:boolean isResoved() -> y
    237:240:cn.com.codesec.parse.metadata.FunMeta getFunResolution(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    244:263:cn.com.codesec.parse.metadata.FunMeta findMatchingFunction(cn.com.codesec.parse.metadata.TypeMeta,java.lang.String,java.lang.String,boolean) -> a
    268:286:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    291:295:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    300:300:java.lang.String toString() -> toString
    305:305:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    309:314:void resolve(cn.com.codesec.parse.metadata.FrontEndNameTable,java.lang.String,java.lang.String,cn.com.codesec.scan.meta.Language) -> a
cn.com.codesec.parse.translator.nodes.STFunDecl -> cn.com.codesec.rA:
    java.lang.String name -> l
    java.lang.String uniqueName -> m
    cn.com.codesec.parse.translator.nodes.STVarDecl[] arglist -> n
    boolean isVarArg -> o
    java.lang.String namespace -> p
    java.util.List overrides -> q
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> r
    short localDeclCount -> a
    java.util.Set exceptions -> s
    java.util.Map storageMap -> b
    java.util.Map labelMap -> t
    32:33:void <init>(int) -> <init>
    24:45:void <init>() -> <init>
    24:58:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:71:void <init>(cn.com.codesec.parse.translator.nodes.STFunDecl) -> <init>
    75:76:void setOverrides(java.util.List) -> b
    80:80:java.util.List getOverrides() -> i
    84:89:cn.com.codesec.parse.translator.nodes.STType getReturnType() -> j
    93:93:java.lang.String getName() -> k
    97:97:java.lang.String getUniqueName() -> l
    101:102:void setUniqueName(java.lang.String) -> b
    105:106:void setNamespace(java.lang.String) -> d
    109:109:java.lang.String getNamespace() -> p
    113:114:void setSimpleName(java.lang.String) -> e
    118:123:void setName(java.lang.String) -> c
    126:144:cn.com.codesec.parse.translator.nodes.STVarDecl[] getArglist() -> q
    148:149:void setExceptions(java.util.Set) -> a
    152:152:java.util.Set getExceptions() -> r
    157:157:java.lang.String getSymbol() -> y
    161:161:boolean isVarArg() -> s
    165:166:void setIsVarArg(boolean) -> a
    169:169:cn.com.codesec.parse.translator.nodes.STBlock getBody() -> t
    174:177:java.util.Map getStorageMap() -> n
    182:194:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    197:203:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    206:216:void addChild(cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    219:220:void addChild(cn.com.codesec.parse.translator.nodes.STBlock) -> a
    224:228:void insertChild(cn.com.codesec.parse.translator.nodes.STNode,int) -> a
    232:236:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    241:242:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    246:246:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    251:254:cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    259:259:java.lang.String toString() -> toString
    263:269:int getArgNum(cn.com.codesec.parse.translator.nodes.STVarDecl) -> b
    273:276:cn.com.codesec.parse.translator.nodes.STStatement getLabeledStatement(java.lang.String) -> f
    280:284:void addLabeledStatements(java.util.Map) -> a
    288:289:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    292:293:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    297:298:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    302:302:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    307:307:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    311:317:int paramIndexOf(cn.com.codesec.parse.translator.nodes.STVarDecl) -> c
    321:321:boolean isTopLevelPageMethod() -> u
cn.com.codesec.parse.translator.nodes.STFunIdentifier -> cn.com.codesec.rB:
    java.lang.String name -> a
    cn.com.codesec.parse.metadata.FunMeta[] funResolution -> b
    13:14:void <init>(int) -> <init>
    16:17:void <init>() -> <init>
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:25:void <init>(cn.com.codesec.parse.translator.nodes.STFunIdentifier) -> <init>
    29:29:java.lang.String getName() -> l
    33:34:void setName(java.lang.String) -> a
    37:37:boolean isResoved() -> a
    42:42:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    47:50:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    55:56:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    60:60:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STFunctionReference -> cn.com.codesec.rC:
    cn.com.codesec.parse.translator.nodes.STExpression source -> a
    cn.com.codesec.parse.translator.nodes.STType sourceType -> b
    java.lang.String function -> l
    cn.com.codesec.parse.metadata.Type$FunctionReference type -> m
    14:15:void <init>() -> <init>
    18:19:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    22:23:void <init>(cn.com.codesec.parse.translator.nodes.STFunctionReference) -> <init>
    26:27:void setType(cn.com.codesec.parse.metadata.Type$FunctionReference) -> a
    30:30:cn.com.codesec.parse.metadata.Type$FunctionReference getType() -> a
    34:35:void setSource(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    38:38:cn.com.codesec.parse.translator.nodes.STExpression getSource() -> k
    42:43:void setSourceType(cn.com.codesec.parse.translator.nodes.STType) -> a
    46:46:cn.com.codesec.parse.translator.nodes.STType getSourceType() -> l
    50:51:void setFunction(java.lang.String) -> a
    54:54:java.lang.String getFunction() -> p
    59:59:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    64:74:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    79:86:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    90:90:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
cn.com.codesec.parse.translator.nodes.STGoto -> cn.com.codesec.rD:
    java.lang.String ANN_CLONE_TARGET -> m
    java.lang.String THROWING_CALL -> a
    java.lang.String CAUGHT -> b
    java.lang.String targetLabel -> n
    16:17:void <init>(int) -> <init>
    19:21:void <init>() -> <init>
    24:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    29:31:void <init>(cn.com.codesec.parse.translator.nodes.STGoto) -> <init>
    35:42:boolean checkPredicate(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    47:53:java.lang.Boolean scJumpSide() -> a
    58:64:cn.com.codesec.parse.translator.nodes.STStatement getSCSuccessTarget(cn.com.codesec.parse.translator.nodes.STStatement) -> a
    69:83:cn.com.codesec.parse.translator.nodes.STStatement getSCFailTarget(cn.com.codesec.parse.translator.nodes.STStatement) -> b
    89:94:cn.com.codesec.parse.translator.nodes.STStatement nextStatement(cn.com.codesec.parse.translator.nodes.STStatement) -> d
    98:98:java.lang.String getTargetLabel() -> i
    102:103:void setTargetLabel(java.lang.String) -> a
    106:110:void setTarget(cn.com.codesec.parse.translator.nodes.STStatement) -> c
    114:114:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    119:122:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    127:128:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    132:132:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    137:137:boolean isToolGenerated() -> k_
    141:142:boolean isSwitchDefault() -> k
cn.com.codesec.parse.translator.nodes.STIfElse -> cn.com.codesec.rE:
    10:11:void <init>(int) -> <init>
    13:14:void <init>() -> <init>
    17:18:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    21:22:void <init>(cn.com.codesec.parse.translator.nodes.STIfElse) -> <init>
    25:25:cn.com.codesec.parse.translator.nodes.STBlock getIfBody() -> i
    29:30:void setIfBody(cn.com.codesec.parse.translator.nodes.STBlock) -> a
    33:33:cn.com.codesec.parse.translator.nodes.STBlock getElseBody() -> k
    37:38:void setElseBody(cn.com.codesec.parse.translator.nodes.STBlock) -> b
    42:42:cn.com.codesec.parse.translator.nodes.STExpression getPredicate() -> a
    49:50:void setPredicate(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    54:63:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    66:76:void addChild(cn.com.codesec.parse.translator.nodes.STBlock) -> c
    79:80:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    83:83:void doAssemble() -> l
    87:87:int getChildCount() -> j_
    92:94:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    99:100:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    104:104:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    108:109:boolean isConditionShortCircuit() -> p
cn.com.codesec.parse.translator.nodes.STImplementsList -> cn.com.codesec.rF:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STImplementsList) -> <init>
    24:29:cn.com.codesec.parse.translator.nodes.STType[] getTypes() -> a
    34:38:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    42:43:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> a
    47:49:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    54:55:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    59:59:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STIndex -> cn.com.codesec.rG:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:22:void <init>(cn.com.codesec.parse.translator.nodes.STExpression) -> <init>
    25:26:void <init>(cn.com.codesec.parse.translator.nodes.STIndex) -> <init>
    29:29:cn.com.codesec.parse.translator.nodes.STExpression getExpression() -> a
    33:37:void setExpression(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    41:45:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    49:50:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    54:56:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    61:62:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    66:66:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STLambda -> cn.com.codesec.rH:
    cn.com.codesec.parse.translator.nodes.STBlock body -> a
    java.util.Collection arguments -> b
    16:17:void <init>() -> <init>
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:25:void <init>(cn.com.codesec.parse.translator.nodes.STLambda) -> <init>
    28:29:void setBody(cn.com.codesec.parse.translator.nodes.STBlock) -> a
    33:38:cn.com.codesec.parse.translator.nodes.STDecl getStorageDecl(java.lang.String) -> a
    42:57:java.util.Collection findReturns() -> a
    77:79:boolean isVoid() -> k
    83:83:cn.com.codesec.parse.translator.nodes.STBlock getBody() -> l
    87:88:void setArguments(java.util.Collection) -> a
    91:91:java.util.Collection getArguments() -> p
    95:99:java.util.Collection getArgumentTypes() -> q
    103:110:boolean isExplicitlyTyped() -> r
    115:115:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    120:132:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    137:146:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    150:150:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
cn.com.codesec.parse.translator.nodes.STLambda$1FindReturn -> cn.com.codesec.rI:
    cn.com.codesec.parse.translator.nodes.STLambda this$0 -> a
    java.util.Collection val$returns -> b
    43:43:void <init>(cn.com.codesec.parse.translator.nodes.STLambda,java.util.Collection) -> <init>
    48:51:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STReturnStmt,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STLambda$2FindReturn -> cn.com.codesec.rJ:
    boolean isVoid -> b
    cn.com.codesec.parse.translator.nodes.STLambda this$0 -> a
    65:67:void <init>(cn.com.codesec.parse.translator.nodes.STLambda) -> <init>
    71:74:java.lang.Object visit(cn.com.codesec.parse.translator.nodes.STReturnStmt,java.lang.Object) -> a
    63:63:boolean access$0(cn.com.codesec.parse.translator.nodes.STLambda$2FindReturn) -> a
cn.com.codesec.parse.translator.nodes.STLiteralExp -> cn.com.codesec.rK:
    cn.com.codesec.parse.ir.util.AnnotationKey STRING_LENGTH -> a
    161:162:void <clinit>() -> <clinit>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:20:cn.com.codesec.parse.translator.nodes.STLiteralExp$String create(java.lang.String) -> a
    24:24:cn.com.codesec.parse.translator.nodes.STLiteralExp$String create(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String) -> a
    28:28:cn.com.codesec.parse.translator.nodes.STLiteralExp$Char create(char) -> a
    32:32:cn.com.codesec.parse.translator.nodes.STLiteralExp$Char create(cn.com.codesec.parse.ir.SourceInfoProducer,char) -> a
    36:36:cn.com.codesec.parse.translator.nodes.STLiteralExp$Boolean create(boolean) -> a
    40:40:cn.com.codesec.parse.translator.nodes.STLiteralExp$Boolean create(cn.com.codesec.parse.ir.SourceInfoProducer,boolean) -> a
    44:44:cn.com.codesec.parse.translator.nodes.STLiteralExp$Int create(int) -> b
    48:48:cn.com.codesec.parse.translator.nodes.STLiteralExp$Int create(cn.com.codesec.parse.ir.SourceInfoProducer,int) -> a
    52:52:cn.com.codesec.parse.translator.nodes.STLiteralExp$Long create(long) -> a
    56:56:cn.com.codesec.parse.translator.nodes.STLiteralExp$Long create(cn.com.codesec.parse.ir.SourceInfoProducer,long) -> a
    60:60:cn.com.codesec.parse.translator.nodes.STLiteralExp$Float create(float) -> a
    64:64:cn.com.codesec.parse.translator.nodes.STLiteralExp$Float create(cn.com.codesec.parse.ir.SourceInfoProducer,float) -> a
    68:68:cn.com.codesec.parse.translator.nodes.STLiteralExp$Double create(double) -> a
    72:72:cn.com.codesec.parse.translator.nodes.STLiteralExp$Double create(cn.com.codesec.parse.ir.SourceInfoProducer,double) -> a
    76:76:cn.com.codesec.parse.translator.nodes.STLiteralExp$Null create() -> a
    80:80:cn.com.codesec.parse.translator.nodes.STLiteralExp$Null create(cn.com.codesec.parse.ir.SourceInfoProducer) -> a
    java.lang.String literalString() -> k
    cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    89:91:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    96:97:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    101:101:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    106:106:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    112:112:java.lang.String getStringValue() -> q
    116:116:char getCharValue() -> r
    120:120:boolean isBooleanValue() -> s
    124:124:int getIntValue() -> t
    128:128:long getLongValue() -> u
    132:132:float getFloatValue() -> v
    136:136:double getDoubleValue() -> w
    140:140:boolean getBooleanValue() -> x
    144:144:java.lang.Number getNumber() -> y
    148:148:void negate() -> z
    152:152:boolean isTrue() -> A
    157:157:java.lang.String toString() -> toString
    15:15:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.translator.nodes.STLiteralExp) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Boolean -> cn.com.codesec.rL:
    boolean booleanValue -> b
    258:260:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,boolean) -> <init>
    264:264:java.lang.String literalString() -> k
    269:269:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    274:274:java.lang.Number getNumber() -> y
    279:279:boolean getBooleanValue() -> x
    284:284:void negate() -> z
    289:289:boolean isBooleanValue() -> s
    294:294:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    299:299:boolean isTrue() -> A
    257:257:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,boolean,cn.com.codesec.parse.translator.nodes.STLiteralExp$Boolean) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Char -> cn.com.codesec.rM:
    char charValue -> b
    218:220:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,char) -> <init>
    224:224:java.lang.String literalString() -> k
    229:229:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    234:234:java.lang.Number getNumber() -> y
    239:239:void negate() -> z
    244:244:char getCharValue() -> r
    249:249:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    217:217:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,char,cn.com.codesec.parse.translator.nodes.STLiteralExp$Char) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Double -> cn.com.codesec.rN:
    double doubleValue -> b
    438:440:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,double) -> <init>
    444:444:java.lang.String literalString() -> k
    449:449:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    454:454:java.lang.Number getNumber() -> y
    459:460:void negate() -> z
    464:464:double getDoubleValue() -> w
    469:469:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    437:437:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,double,cn.com.codesec.parse.translator.nodes.STLiteralExp$Double) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Float -> cn.com.codesec.rO:
    float floatValue -> b
    398:400:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,float) -> <init>
    404:404:java.lang.String literalString() -> k
    409:409:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    414:414:java.lang.Number getNumber() -> y
    419:420:void negate() -> z
    424:424:float getFloatValue() -> v
    429:429:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    397:397:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,float,cn.com.codesec.parse.translator.nodes.STLiteralExp$Float) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Int -> cn.com.codesec.rP:
    int intValue -> b
    308:310:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,int) -> <init>
    314:314:java.lang.String literalString() -> k
    319:319:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    324:324:java.lang.Number getNumber() -> y
    329:330:void negate() -> z
    334:334:int getIntValue() -> t
    339:339:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    344:344:boolean isTrue() -> A
    307:307:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,int,cn.com.codesec.parse.translator.nodes.STLiteralExp$Int) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Long -> cn.com.codesec.rQ:
    long longValue -> b
    353:355:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,long) -> <init>
    359:359:java.lang.String literalString() -> k
    364:364:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    369:369:java.lang.Number getNumber() -> y
    374:375:void negate() -> z
    379:379:long getLongValue() -> u
    384:384:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    389:389:boolean isTrue() -> A
    352:352:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,long,cn.com.codesec.parse.translator.nodes.STLiteralExp$Long) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Null -> cn.com.codesec.rR:
    476:477:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    481:481:java.lang.String literalString() -> k
    486:486:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    491:491:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    475:475:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.translator.nodes.STLiteralExp$Null) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$String -> cn.com.codesec.rS:
    java.lang.String stringValue -> b
    181:183:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String) -> <init>
    187:187:java.lang.String literalString() -> k
    192:192:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type getType() -> p
    197:197:java.lang.String getStringValue() -> q
    202:202:cn.com.codesec.parse.translator.nodes.STLiteralExp makeClone() -> l
    206:209:int getStringLength() -> B
    180:180:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String,cn.com.codesec.parse.translator.nodes.STLiteralExp$String) -> <init>
cn.com.codesec.parse.translator.nodes.STLiteralExp$Type -> cn.com.codesec.rT:
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type STRING -> a
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type CHAR -> b
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type BOOLEAN -> c
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type INT -> d
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type LONG -> e
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type FLOAT -> f
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type DOUBLE -> g
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type NULL -> h
    cn.com.codesec.parse.translator.nodes.STLiteralExp$Type[] ENUM$VALUES -> i
    164:173:void <clinit>() -> <clinit>
    164:164:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type[] values() -> values
    1:1:cn.com.codesec.parse.translator.nodes.STLiteralExp$Type valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.translator.nodes.STLocation -> cn.com.codesec.rU:
    cn.com.codesec.parse.translator.nodes.STIndex[] EMPTY_INDICES -> a
    cn.com.codesec.parse.translator.nodes.STIndex[] indices -> b
    63:64:void <clinit>() -> <clinit>
    12:13:void <init>(int) -> <init>
    15:17:void <init>() -> <init>
    20:22:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    25:27:void <init>(cn.com.codesec.parse.translator.nodes.STLocation) -> <init>
    30:34:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    38:38:void resolve(cn.com.codesec.parse.translator.nodes.STFieldAccess) -> a
    42:42:void resolve(cn.com.codesec.parse.translator.nodes.STVarAccess) -> a
    47:47:java.lang.String getName() -> l
    51:51:cn.com.codesec.parse.translator.nodes.STLocation getBaseLocation() -> h
    56:60:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
cn.com.codesec.parse.translator.nodes.STNoOpStmt -> cn.com.codesec.rV:
    10:11:void <init>(int) -> <init>
    13:14:void <init>() -> <init>
    17:18:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    21:22:void <init>(cn.com.codesec.parse.translator.nodes.STNoOpStmt) -> <init>
    26:26:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    31:33:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    38:39:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    43:43:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STNode -> cn.com.codesec.rW:
    java.util.Map numInst -> a
    cn.com.codesec.parse.translator.nodes.STNode parent -> b
    cn.com.codesec.parse.translator.nodes.STNode childHead -> c
    cn.com.codesec.parse.translator.nodes.STNode childTail -> d
    cn.com.codesec.util.FilePath srcFile -> e
    int lineStart -> f
    int lineEnd -> g
    int columnStart -> h
    int columnEnd -> i
    java.util.Map annotations -> j
    cn.com.codesec.parse.translator.nodes.STNode next -> k
    cn.com.codesec.parse.ir.util.AnnotationKey FROM_MACRO_KEY -> l
    cn.com.codesec.parse.ir.util.AnnotationKey AUX_SOURCEINFO_KEY -> m
    690:693:void <clinit>() -> <clinit>
    41:41:java.util.Map getFunMap() -> m
    45:45:java.util.Map getStorageMap() -> n
    48:66:void <init>(cn.com.codesec.util.FilePath,int,int) -> <init>
    68:81:void <init>() -> <init>
    83:111:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    114:117:void <init>(cn.com.codesec.parse.translator.nodes.STNode) -> <init>
    120:129:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    132:146:void removeChild(cn.com.codesec.parse.translator.nodes.STNode) -> e
    149:156:void clearChildren() -> C
    159:184:void replaceChild(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> a_
    187:206:void insertChild(cn.com.codesec.parse.translator.nodes.STNode,int) -> a
    209:219:cn.com.codesec.parse.translator.nodes.STNode getChild(int) -> c
    223:223:boolean hasChildren() -> D
    227:231:int getChildCount() -> j_
    235:235:java.util.Iterator getChildren() -> E
    240:240:java.util.Iterator iterator() -> iterator
    244:250:int indexOf(cn.com.codesec.parse.translator.nodes.STNode) -> g
    254:254:cn.com.codesec.parse.translator.nodes.STNode getParent() -> F
    258:259:void setParent(cn.com.codesec.parse.translator.nodes.STNode) -> d
    262:262:cn.com.codesec.parse.translator.nodes.STNode getNextSibling() -> G
    266:267:cn.com.codesec.parse.translator.nodes.STCompilationUnit getCompilationUnit() -> o
    271:271:cn.com.codesec.scan.meta.Language getLanguage() -> H
    275:280:cn.com.codesec.parse.translator.nodes.STClassDecl getEnclosingClass() -> I
    284:289:cn.com.codesec.parse.translator.nodes.STStatement getEnclosingStatement() -> J
    293:301:cn.com.codesec.parse.translator.nodes.STFunCall getEnclosingCall() -> K
    305:310:cn.com.codesec.parse.translator.nodes.STBlock getEnclosingBlock() -> L
    314:319:cn.com.codesec.parse.translator.nodes.STFunDecl getEnclosingFunDecl() -> M
    323:323:cn.com.codesec.parse.metadata.Namespace getNamespaceMeta() -> i_
    327:332:boolean isChildOf(cn.com.codesec.parse.translator.nodes.STNode) -> h
    336:344:cn.com.codesec.parse.translator.nodes.STDecl getTopmostDecl() -> N
    348:363:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> O
    367:367:cn.com.codesec.parse.ir.SourceInfo getAuxiliarySourceInfo() -> P
    371:371:boolean isSourceInfoReal() -> Q
    375:376:void setLineEnd(int) -> d
    379:381:void setLineNumbers(int,int) -> a
    384:385:void setColumnStart(int) -> e
    388:393:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfoProducer) -> b
    396:404:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    407:407:int getLineStart() -> R
    411:411:int getLineEnd() -> S
    415:415:int getColumnStart() -> T
    419:419:int getColumnEnd() -> U
    424:430:void dump(java.io.OutputStream) -> a
    433:434:void dump(char,java.io.Writer) -> a
    437:443:void dump(java.lang.String,char,cn.com.codesec.parse.translator.nodes.STNode,java.io.Writer) -> a
    447:451:java.lang.String toString() -> toString
    cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    459:483:void nodeCloneStart(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> b_
    486:492:void nodeCloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> f
    496:498:java.lang.Object clone() -> clone
    502:532:void stAdd(cn.com.codesec.parse.translator.nodes.STDecl) -> c
    535:574:void stRemove(cn.com.codesec.parse.translator.nodes.STDecl) -> d
    577:578:cn.com.codesec.parse.translator.nodes.STDecl stStorageGet(java.lang.String) -> h
    582:587:cn.com.codesec.parse.ir.symbols.FrontendSymbolTable getEnclosingTable() -> b
    java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    593:596:void childrenAccept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> b
    599:609:java.lang.Object getAnnotation(cn.com.codesec.parse.ir.util.AnnotationKey) -> a
    613:617:void annotate(cn.com.codesec.parse.ir.util.AnnotationKey,java.lang.Object) -> a
    620:627:java.lang.Object removeAnnotation(cn.com.codesec.parse.ir.util.AnnotationKey) -> b
    631:631:cn.com.codesec.util.FilePath getFile() -> V
    636:649:boolean isFromMacro() -> W
    653:653:java.util.Map getAnnotations() -> X
    658:658:void jjtOpen() -> c
    662:662:void jjtClose() -> d
    666:667:void jjtSetParent(cn.com.codesec.parse.translator.nodes.Node) -> a
    671:671:cn.com.codesec.parse.translator.nodes.Node jjtGetParent() -> e
    676:677:void jjtAddChild(cn.com.codesec.parse.translator.nodes.Node,int) -> a
    681:681:cn.com.codesec.parse.translator.nodes.Node jjtGetChild(int) -> a
    686:686:int jjtGetNumChildren() -> f
cn.com.codesec.parse.translator.nodes.STNode$IntCell -> cn.com.codesec.rX:
    int i -> a
    695:695:void <init>() -> <init>
    700:700:java.lang.String toString() -> toString
    695:695:void <init>(cn.com.codesec.parse.translator.nodes.STNode$IntCell) -> <init>
cn.com.codesec.parse.translator.nodes.STNode$NodeIterator -> cn.com.codesec.rY:
    cn.com.codesec.parse.translator.nodes.STNode prev -> b
    cn.com.codesec.parse.translator.nodes.STNode current -> c
    cn.com.codesec.parse.translator.nodes.STNode next -> d
    cn.com.codesec.parse.translator.nodes.STNode this$0 -> a
    709:713:void <init>(cn.com.codesec.parse.translator.nodes.STNode) -> <init>
    717:730:void remove() -> remove
    734:734:boolean hasNext() -> hasNext
    739:745:cn.com.codesec.parse.translator.nodes.STNode next() -> a
    1:1:java.lang.Object next() -> next
cn.com.codesec.parse.translator.nodes.STNodeConstants -> cn.com.codesec.rZ:
    int JJTSTCOMPILATIONUNIT -> a
    int JJTSTCLASSDECL -> b
    int JJTSTVOID -> c
    int JJTSTDECLSTATEMENT -> d
    int JJTSTVARDECL -> e
    int JJTSTINDEX -> f
    int JJTSTUNRESOLVEDLOCATION -> g
    int JJTSTASSIGNMENTSTMT -> h
    int JJTSTFUNDECL -> i
    int JJTSTBLOCK -> j
    int JJTSTRETURNSTMT -> k
    int JJTSTFUNCALL -> l
    int JJTSTCALLSTMT -> m
    int JJTSTIFELSE -> n
    int JJTSTWHILESTMT -> o
    int JJTSTOPEXP -> p
    int JJTSTLOCATION -> q
    int JJTSTARRAYACCESS -> r
    int JJTSTTYPE -> s
    int JJTSTFIELDDECL -> t
    int JJTSTALLOCATION -> u
    int JJTSTNOOPSTMT -> v
    int JJTSTFIELDACCESS -> w
    int JJTSTGOTO -> x
    int JJTSTIMPLEMENTSLIST -> y
    int JJTSTVARACCESS -> z
    int JJTSTSWITCH -> A
    int JJTSTCASE -> B
    int JJTSTBREAK -> C
    int JJTSTCONTINUE -> D
    int JJTSTEXTENDSLIST -> E
    int JJTSTUNRESOLVEDTYPE -> F
    int JJTSTTHROW -> G
cn.com.codesec.parse.translator.nodes.STOpExp -> cn.com.codesec.sa:
    cn.com.codesec.parse.ir.IROperators operator -> a
    13:14:void <init>(int) -> <init>
    16:18:void <init>() -> <init>
    21:23:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    26:29:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.ir.IROperators) -> <init>
    32:34:void <init>(cn.com.codesec.parse.translator.nodes.STOpExp) -> <init>
    37:37:cn.com.codesec.parse.translator.nodes.STExpression getLhs() -> a
    41:41:cn.com.codesec.parse.translator.nodes.STExpression getRhs() -> k
    45:52:void setLhs(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    55:58:void setRhs(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    65:66:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    69:69:boolean isUnary() -> l
    74:74:int getChildCount() -> j_
    78:78:cn.com.codesec.parse.ir.IROperators getOperator() -> p
    82:83:void setOperator(cn.com.codesec.parse.ir.IROperators) -> a
    87:90:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    95:96:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    100:100:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    105:105:java.lang.String toString() -> toString
cn.com.codesec.parse.translator.nodes.STParserState -> cn.com.codesec.sb:
    java.util.Stack nodes -> a
    java.util.Stack marks -> b
    int sp -> c
    int mk -> d
    boolean nodeCreated -> e
    13:18:void <init>() -> <init>
    21:21:boolean nodeCreated() -> a
    25:29:void reset() -> b
    32:32:cn.com.codesec.parse.translator.nodes.Node rootNode() -> c
    36:38:void pushNode(cn.com.codesec.parse.translator.nodes.Node) -> a
    41:46:cn.com.codesec.parse.translator.nodes.Node popNode() -> d
    50:53:cn.com.codesec.parse.translator.nodes.Node peekNode() -> e
    57:57:int nodeArity() -> f
    61:62:void clearNodeScope() -> g
    65:71:void clearNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> b
    74:77:void openNodeScope(cn.com.codesec.parse.translator.nodes.Node) -> c
    80:97:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,int) -> a
    100:126:void closeNodeScope(cn.com.codesec.parse.translator.nodes.Node,boolean) -> a
    129:132:cn.com.codesec.parse.translator.nodes.Node mark() -> h
    136:141:void cleanUp(cn.com.codesec.parse.translator.nodes.Node) -> d
    144:144:int getSp() -> i
    148:148:int getMk() -> j
cn.com.codesec.parse.translator.nodes.STReferenceNode -> cn.com.codesec.sc:
    java.lang.String getName() -> l
cn.com.codesec.parse.translator.nodes.STReturnStmt -> cn.com.codesec.sd:
    10:11:void <init>(int) -> <init>
    13:14:void <init>() -> <init>
    17:18:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    21:22:void <init>(cn.com.codesec.parse.translator.nodes.STReturnStmt) -> <init>
    25:25:cn.com.codesec.parse.translator.nodes.STExpression getExpression() -> a
    29:33:void setExpression(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    37:41:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    45:46:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    50:52:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    57:58:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    62:62:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    66:71:boolean isFinalReturn() -> i
cn.com.codesec.parse.translator.nodes.STStatement -> cn.com.codesec.se:
    java.lang.String TOOL_GENERATED -> a
    cn.com.codesec.parse.ir.util.AnnotationKey ANN_LABEL -> l
    44:46:void <clinit>() -> <clinit>
    12:13:void <init>(int) -> <init>
    15:16:void <init>() -> <init>
    19:20:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    23:24:void <init>(cn.com.codesec.parse.translator.nodes.STStatement) -> <init>
    27:27:java.lang.String getLabel() -> u
    31:32:void setLabel(java.lang.String) -> b
    35:36:void removeLabel() -> v
    39:40:boolean isToolGenerated() -> k_
cn.com.codesec.parse.translator.nodes.STSwitch -> cn.com.codesec.sf:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STSwitch) -> <init>
    24:24:cn.com.codesec.parse.translator.nodes.STExpression getExpression() -> a
    28:34:void setExpression(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    38:47:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    50:51:void addChild(cn.com.codesec.parse.translator.nodes.STExpression) -> b
    54:54:void doAssemble() -> i
    58:58:int getChildCount() -> j_
    63:65:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    70:71:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    75:75:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STThrow -> cn.com.codesec.sg:
    9:10:void <init>(int) -> <init>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void <init>(cn.com.codesec.parse.translator.nodes.STThrow) -> <init>
    25:25:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STType -> cn.com.codesec.sh:
    cn.com.codesec.parse.ir.PrimitiveType ptType -> b
    java.lang.String namedType -> l
    boolean typeVariable -> m
    cn.com.codesec.parse.translator.nodes.STType$Kind kind -> n
    byte pointerDepth -> o
    byte arrayDimensions -> p
    java.util.ArrayList arrayDimSizes -> q
    cn.com.codesec.parse.translator.nodes.STType UNKNOWN_TYPE -> a
    335:337:void <clinit>() -> <clinit>
    23:24:void <init>(int) -> <init>
    26:34:void <init>() -> <init>
    36:45:void <init>(cn.com.codesec.parse.ir.PrimitiveType) -> <init>
    47:56:void <init>(java.lang.String) -> <init>
    59:67:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    70:70:cn.com.codesec.parse.ir.PrimitiveType getPrimitiveType() -> a
    77:79:void setPrimitiveType(cn.com.codesec.parse.ir.PrimitiveType) -> a
    82:82:cn.com.codesec.parse.translator.nodes.STUnresolvedType getUnresolvedType() -> i
    86:86:boolean isFunPtr() -> j
    90:91:void setKind(cn.com.codesec.parse.translator.nodes.STType$Kind) -> a
    94:94:cn.com.codesec.parse.translator.nodes.STType$Kind getKind() -> k
    98:98:boolean isWild() -> l
    102:103:void setTypeVariable(boolean) -> a
    106:106:boolean isTypeVariable() -> p
    110:110:cn.com.codesec.parse.translator.nodes.STType[] getFunArgs() -> q
    114:114:cn.com.codesec.parse.translator.nodes.STType getReturnType() -> r
    118:124:void resolve(java.lang.String) -> a
    127:133:void resolve(cn.com.codesec.parse.ir.PrimitiveType) -> b
    136:136:java.lang.String getNamedType() -> s
    143:145:void setNamedType(java.lang.String) -> b
    148:148:int getPointerDepth() -> t
    152:152:int getArrayDimensions() -> u
    159:165:cn.com.codesec.parse.translator.nodes.STIndex getArrayDimSize(int) -> b
    170:183:int[] getStaticDimSizes() -> v
    187:203:void setArrayDimSize(int,cn.com.codesec.parse.translator.nodes.STIndex) -> a
    206:207:void setPointerDepth(int) -> f
    210:211:void setArrayDimensions(int) -> g
    214:214:boolean isPrimitiveType() -> w
    218:218:boolean isNamedType() -> x
    222:222:boolean isUnresolvedType() -> y
    227:241:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    244:245:void addChild(cn.com.codesec.parse.translator.nodes.STUnresolvedType) -> a
    249:265:java.lang.String toString() -> toString
    270:290:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    295:296:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    300:300:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    305:317:boolean equals(java.lang.Object) -> equals
    322:331:int hashCode() -> hashCode
cn.com.codesec.parse.translator.nodes.STType$Kind -> cn.com.codesec.si:
    cn.com.codesec.parse.translator.nodes.STType$Kind NORMAL -> a
    cn.com.codesec.parse.translator.nodes.STType$Kind EXTENDS -> b
    cn.com.codesec.parse.translator.nodes.STType$Kind SUPER -> c
    cn.com.codesec.parse.translator.nodes.STType$Kind WILD -> d
    cn.com.codesec.parse.translator.nodes.STType$Kind[] ENUM$VALUES -> e
    339:344:void <clinit>() -> <clinit>
    339:339:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.parse.translator.nodes.STType$Kind[] values() -> values
    1:1:cn.com.codesec.parse.translator.nodes.STType$Kind valueOf(java.lang.String) -> valueOf
cn.com.codesec.parse.translator.nodes.STType$STFunPtrType -> cn.com.codesec.sj:
    349:351:void <init>() -> <init>
    353:356:void <init>(cn.com.codesec.parse.translator.nodes.STType) -> <init>
    360:360:boolean isFunPtr() -> j
    365:372:cn.com.codesec.parse.translator.nodes.STType[] getFunArgs() -> q
    377:377:cn.com.codesec.parse.translator.nodes.STType getReturnType() -> r
    349:349:void <init>(cn.com.codesec.parse.translator.nodes.STType$STFunPtrType) -> <init>
cn.com.codesec.parse.translator.nodes.STUnresolvedLocation -> cn.com.codesec.sk:
    java.lang.String name -> b
    cn.com.codesec.parse.translator.nodes.STLocation resolution -> a
    17:18:void <init>(int) -> <init>
    21:23:void <init>() -> <init>
    26:28:void <init>(cn.com.codesec.parse.translator.nodes.STUnresolvedLocation) -> <init>
    31:34:void <init>(java.lang.String,cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    37:38:void <init>(java.lang.String) -> <init>
    42:42:java.lang.String getName() -> l
    46:47:void setName(java.lang.String) -> a
    51:51:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    56:60:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    65:66:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    70:70:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    75:75:java.lang.String toString() -> toString
    80:87:void resolve(cn.com.codesec.parse.translator.nodes.STFieldAccess) -> a
    91:98:void resolve(cn.com.codesec.parse.translator.nodes.STVarAccess) -> a
    101:110:void mergeAnnotations(cn.com.codesec.parse.translator.nodes.STNode) -> i
    113:113:cn.com.codesec.parse.translator.nodes.STLocation getResolution() -> a
    117:117:boolean isResolved() -> k
    122:129:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
cn.com.codesec.parse.translator.nodes.STUnresolvedType -> cn.com.codesec.sl:
    cn.com.codesec.parse.translator.nodes.STExpression expression -> a
    12:13:void <init>(int) -> <init>
    15:17:void <init>() -> <init>
    20:23:void <init>(cn.com.codesec.parse.translator.nodes.STExpression) -> <init>
    26:28:void <init>(cn.com.codesec.parse.translator.nodes.STUnresolvedType) -> <init>
    31:32:void setResolutionDependancy(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    35:35:cn.com.codesec.parse.translator.nodes.STExpression getResolutionDependancy() -> a
    40:44:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    49:52:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    57:58:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    62:62:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
cn.com.codesec.parse.translator.nodes.STVarAccess -> cn.com.codesec.sm:
    java.lang.String name -> a
    cn.com.codesec.parse.translator.nodes.STVarDecl resolvedDecl -> b
    15:16:void <init>(int) -> <init>
    18:21:void <init>() -> <init>
    24:27:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    30:33:void <init>(cn.com.codesec.parse.translator.nodes.STVarAccess) -> <init>
    36:41:void <init>(cn.com.codesec.parse.translator.nodes.STVarDecl) -> <init>
    44:46:void <init>(java.lang.String,cn.com.codesec.parse.ir.SourceInfo) -> <init>
    49:52:void <init>(cn.com.codesec.parse.translator.nodes.STVarDecl,cn.com.codesec.parse.ir.SourceInfo) -> <init>
    56:56:java.lang.String getName() -> l
    60:61:void setName(java.lang.String) -> a
    64:64:boolean isThis() -> a
    68:68:boolean isOuterThis() -> k
    73:73:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    77:77:boolean isResolved() -> p
    81:89:cn.com.codesec.parse.translator.nodes.STVarDecl getResolvedDecl(cn.com.codesec.parse.metadata.FrontEndNameTable) -> b
    93:95:void resolve(cn.com.codesec.parse.translator.nodes.STVarDecl) -> a
    99:102:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    107:108:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    112:112:java.lang.String toString() -> toString
    117:117:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    122:133:cn.com.codesec.parse.translator.nodes.STType getSTType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
cn.com.codesec.parse.translator.nodes.STVarDecl -> cn.com.codesec.sn:
    java.lang.String name -> a
    java.lang.String namespaceLocalName -> b
    java.lang.String namespace -> l
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> m
    22:23:void <init>(int) -> <init>
    25:30:void <init>() -> <init>
    33:38:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    41:46:void <init>(cn.com.codesec.parse.translator.nodes.STVarDecl) -> <init>
    49:49:cn.com.codesec.parse.metadata.Type getType(cn.com.codesec.parse.metadata.FrontEndNameTable) -> a
    53:59:void setType(cn.com.codesec.parse.translator.nodes.STType) -> a
    62:65:cn.com.codesec.parse.translator.nodes.STType getSTType() -> i
    69:69:java.lang.String getSimpleName() -> j
    73:73:java.lang.String getName() -> k
    78:79:void setName(java.lang.String) -> c
    82:83:void setNamespace(java.lang.String) -> a
    86:86:java.lang.String getNamespace() -> l
    90:91:void setNamespaceLocalName(java.lang.String) -> b
    94:94:java.lang.String getNamespaceLocalName() -> p
    99:99:java.lang.String getSymbol() -> y
    104:113:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    116:125:void setInit(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    128:136:cn.com.codesec.parse.translator.nodes.STExpression getInit() -> q
    140:141:void addChild(cn.com.codesec.parse.translator.nodes.STType) -> b
    144:145:void nodeAddChild(cn.com.codesec.parse.translator.nodes.STNode) -> i
    148:148:boolean isStatic() -> r
    153:155:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    160:163:void nodeCloneStart(cn.com.codesec.parse.translator.nodes.STNode,cn.com.codesec.parse.translator.nodes.STNode) -> b_
    167:168:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    172:172:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    177:177:java.lang.String toString() -> toString
    182:183:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    186:187:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    191:192:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    196:196:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    201:201:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    205:205:boolean isFunArg() -> s
    209:209:cn.com.codesec.parse.translator.nodes.STNode getDefinition() -> t
    213:213:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> u
cn.com.codesec.parse.translator.nodes.STWhileStmt -> cn.com.codesec.so:
    boolean testAfter -> a
    11:12:void <init>(int) -> <init>
    14:16:void <init>() -> <init>
    19:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:26:void <init>(cn.com.codesec.parse.translator.nodes.STWhileStmt) -> <init>
    29:32:cn.com.codesec.parse.translator.nodes.STBlock getBody() -> i
    36:40:void setBody(cn.com.codesec.parse.translator.nodes.STBlock) -> a
    44:44:cn.com.codesec.parse.translator.nodes.STExpression getPredicate() -> a
    48:52:void setPredicate(cn.com.codesec.parse.translator.nodes.STExpression) -> a
    56:65:void addChild(cn.com.codesec.parse.translator.nodes.STNode) -> a
    69:71:cn.com.codesec.parse.translator.nodes.STNode cloneStart(cn.com.codesec.parse.translator.nodes.STNode) -> b
    76:77:void cloneFinish(cn.com.codesec.parse.translator.nodes.STNode) -> c
    81:81:java.lang.Object accept(cn.com.codesec.parse.ir.STVisitor,java.lang.Object) -> a
    85:86:boolean isConditionShortCircuit() -> k
    90:91:void setTestAfter(boolean) -> a
    94:94:boolean isTestAfter() -> l
cn.com.codesec.scan.Main -> cn.com.codesec.sp:
    java.io.PrintStream STDOUT -> a
    java.io.PrintStream STDERR -> b
    7:8:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
cn.com.codesec.scan.analyzer.AnalysisUtils -> cn.com.codesec.sq:
    16:16:void <init>() -> <init>
    65:73:boolean isNonReturningFunction(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    77:87:boolean isNonReturningFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    104:112:java.util.Collection getAliasList(cn.com.codesec.scan.metadata.FunMeta) -> b
cn.com.codesec.scan.analyzer.Analyzer -> cn.com.codesec.sr:
    boolean MULTITHREADED -> a
    cn.com.codesec.scan.backend.BackEnd backend -> b
    41:42:void <clinit>() -> <clinit>
    16:18:void <init>() -> <init>
    20:22:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    void run() -> e
    java.lang.String getName() -> a
    java.lang.String getPoolSize() -> b
    java.lang.String getDirective() -> c
    void expireProgramModelData() -> d
cn.com.codesec.scan.analyzer.AnalyzerException -> cn.com.codesec.ss:
    9:10:void <init>() -> <init>
    13:14:void <init>(java.lang.String) -> <init>
    17:18:void <init>(java.lang.Throwable) -> <init>
    21:22:void <init>(java.lang.String,java.lang.Throwable) -> <init>
cn.com.codesec.scan.analyzer.MultiVisitAnalyzer -> cn.com.codesec.st:
    cn.com.codesec.scan.util.Parallelizer$WorkQueue queue -> e
    java.util.concurrent.atomic.AtomicInteger visits -> f
    24:26:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    cn.com.codesec.scan.util.Parallelizer$WorkQueue getNewQueue() -> f
    33:38:void runFunctionVisits() -> g
    42:59:java.util.Set analyze(cn.com.codesec.scan.metadata.FunMeta) -> a
    java.util.Set analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    72:72:int getRemaining() -> j
cn.com.codesec.scan.analyzer.PriorityWorkQueue -> cn.com.codesec.su:
    cn.com.codesec.util.fset.FSet universe -> a
    java.util.Set uniques -> b
    java.util.LinkedList queue -> c
    java.util.Map counts -> d
    boolean needsReSort -> e
    31:37:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    40:42:int compare(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    47:47:int size() -> a
    54:81:cn.com.codesec.scan.metadata.FunMeta pollExcluding(java.util.Collection) -> a
    86:92:void add(java.util.Set) -> a
    95:95:int uniqueNameCompare(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
    1:1:java.lang.Object pollExcluding(java.util.Collection) -> b
    86:86:boolean lambda$2(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.SingleVisitAnalyzer -> cn.com.codesec.sv:
    16:17:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    21:26:void runFunctionVisits() -> g
    29:46:void analyze(cn.com.codesec.scan.metadata.FunMeta) -> a
    49:49:void analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.scan.analyzer.TimeLimitExceededException -> cn.com.codesec.sw:
    14:15:void <init>(cn.com.codesec.messaging.Message) -> <init>
    18:19:void <init>(cn.com.codesec.messaging.Message,java.lang.Throwable) -> <init>
cn.com.codesec.scan.analyzer.VisitingAnalyzer -> cn.com.codesec.sx:
    cn.com.codesec.java.progress.ProgressUtil$Proportion proportion -> c
    cn.com.codesec.util.fset.FSet universe -> d
    19:22:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    26:30:void run() -> e
    void runFunctionVisits() -> g
    35:35:void initialize() -> h
    38:38:void complete() -> i
    void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer -> cn.com.codesec.sy:
    int ALIAS_SET_LIMIT -> a
    boolean ENABLED -> d
    long FTIME -> e
    java.util.Set BLACKLIST -> f
    cn.com.codesec.scan.metadata.FunMeta meta -> b
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder cgb -> c
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver cvr -> g
    boolean enableForcedGlobals -> h
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Timeout functionTimeLimit -> i
    279:285:void <clinit>() -> <clinit>
    66:99:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer mk(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean,cn.com.codesec.scan.analyzer.taint.ProfileCache,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    102:108:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean) -> <init>
    java.lang.String getName() -> a
    115:115:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath) -> a
    120:120:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    124:124:java.util.List getAliasLocs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath) -> b
    128:136:java.util.List getAliasLocs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.util.Location) -> a
    cn.com.codesec.util.fset.FSet getAliasesPreceding(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.analyzer.util.Location) -> a
    143:143:java.util.List getForcedGlobalAliasLocs(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    147:147:java.util.List getForcedGlobalAliasLocs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath) -> c
    151:168:java.util.List getForcedGlobalAliasLocs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.util.Location) -> b
    173:176:cn.com.codesec.scan.analyzer.util.Location locationWithPath(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.model.AccessPath) -> a
    181:184:cn.com.codesec.scan.analyzer.util.Location locationWithSelector(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    188:202:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasByGCR getGCRLoc(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.util.Location) -> c
    206:213:void buildAliasesTimeLimited(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    void buildAliases(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    218:221:void pollTimeout() -> b
    266:274:boolean checkPath(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias -> cn.com.codesec.sz:
    cn.com.codesec.scan.analyzer.util.Location aliasLoc -> a
    cn.com.codesec.scan.analyzer.util.Location spellingLoc -> b
    292:295:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location) -> <init>
    299:299:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc() -> a
    303:303:boolean isNonTemp() -> b
    308:308:boolean isAlias() -> c
    313:313:cn.com.codesec.scan.analyzer.util.Location getLoc() -> d
    318:318:cn.com.codesec.scan.model.AccessPath getPath() -> e
    323:323:int hashCode() -> hashCode
    328:335:boolean equals(java.lang.Object) -> equals
    340:340:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasByDeduction -> cn.com.codesec.sA:
    cn.com.codesec.util.fset.FSet why -> a
    393:395:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.util.fset.FSet) -> <init>
    398:398:java.lang.Iterable getEvidence() -> f
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasByGCR -> cn.com.codesec.sB:
    cn.com.codesec.java.rules.GlobalClassRule rule -> a
    378:380:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.java.rules.GlobalClassRule) -> <init>
    384:384:cn.com.codesec.scan.analyzer.taint.model.RuleReason getReason() -> f
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasByGFR -> cn.com.codesec.sC:
    cn.com.codesec.java.rules.GlobalFieldRule rule -> a
    363:365:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.java.rules.GlobalFieldRule) -> <init>
    369:369:cn.com.codesec.scan.analyzer.taint.model.RuleReason getReason() -> f
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasByRule -> cn.com.codesec.sD:
    347:348:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location) -> <init>
    352:352:boolean isNonTemp() -> b
    cn.com.codesec.scan.analyzer.taint.model.RuleReason getReason() -> f
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence -> cn.com.codesec.sE:
    402:402:void <init>() -> <init>
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode generateTPN(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta) -> a
    cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> a
    412:412:int compareTo(cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasRuleEvidence -> cn.com.codesec.sF:
    cn.com.codesec.java.rules.SKYRule rule -> e
    512:514:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.SKYRule) -> <init>
    519:519:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode generateTPN(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta) -> a
    524:536:int compareTo(cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AssignmentEvidence -> cn.com.codesec.sG:
    cn.com.codesec.scan.ir.nodes.IRAssignmentStmt assn -> a
    420:422:void <init>(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> <init>
    427:428:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode generateTPN(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta) -> a
    434:434:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> a
    439:450:int compareTo(cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$CallEvidence -> cn.com.codesec.sH:
    cn.com.codesec.scan.ir.nodes.IRFunCall call -> a
    cn.com.codesec.scan.analyzer.callgraph.CallTarget tgt -> b
    cn.com.codesec.scan.model.ParameterLocation in -> c
    cn.com.codesec.scan.model.ParameterLocation out -> d
    461:466:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation) -> <init>
    471:471:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> a
    476:503:int compareTo(cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$PassthroughEvidence -> cn.com.codesec.sI:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subpath -> e
    545:547:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    552:552:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode generateTPN(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta) -> a
    557:569:int compareTo(cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Timeout -> cn.com.codesec.sJ:
    boolean expired -> a
    long millis -> b
    578:581:void <init>(long) -> <init>
    585:586:void timeExpired() -> a
    589:591:void start() -> b
    594:596:void end(boolean) -> a
    599:599:boolean isExpired() -> c
    603:604:void setExpired(boolean) -> b
cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$TooComplexForAliasesException -> cn.com.codesec.sK:
    java.lang.String why -> a
    611:613:void <init>(java.lang.String) -> <init>
    616:616:java.lang.String getWhy() -> a
cn.com.codesec.scan.analyzer.alias.FlowInsensitive -> cn.com.codesec.sL:
    java.util.Map LIMITERS -> d
    boolean ENABLE_INTERPROCEDURAL_ALIASES -> e
    cn.com.codesec.scan.analyzer.alias.FlowInsensitive$AliasGraph graph -> f
    cn.com.codesec.scan.analyzer.taint.ProfileCache profileCache -> g
    java.util.Map cache -> h
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit limit -> i
    cn.com.codesec.scan.analyzer.taint.model.Debug$Visit debug -> j
    452:455:void <clinit>() -> <clinit>
    68:74:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean,cn.com.codesec.scan.analyzer.taint.ProfileCache,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> <init>
    79:79:java.lang.String getName() -> a
    85:85:cn.com.codesec.util.fset.FSet getAliasesPreceding(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.analyzer.util.Location) -> a
    90:98:void buildAliases(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    101:117:void processBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    120:121:void processCallStmt(cn.com.codesec.scan.ir.nodes.IRCallStmt) -> a
    124:136:void processCallAliases(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    194:252:void processPassesAtCall(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.FunctionProfile) -> a
    256:328:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.ParameterLocation) -> a
    332:335:cn.com.codesec.scan.model.AccessPath ensureDeref(cn.com.codesec.scan.model.AccessPath) -> a
    339:342:cn.com.codesec.scan.model.AccessPath ensureNoDeref(cn.com.codesec.scan.model.AccessPath) -> b
    346:391:void processAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    394:423:void computeNames() -> c
    428:447:boolean compact() -> d
cn.com.codesec.scan.analyzer.alias.FlowInsensitive$AliasGraph -> cn.com.codesec.sM:
    int PERMITTED_GROWTH -> a
    java.util.Map roots -> b
    int size -> c
    int growthLimit -> d
    684:685:void <clinit>() -> <clinit>
    581:585:void <init>() -> <init>
    589:593:cn.com.codesec.util.fset.FSet getAliasesFor(cn.com.codesec.scan.analyzer.util.Location) -> a
    598:617:cn.com.codesec.util.fset.FSet getAliases(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.util.Location) -> a
    621:632:void addAlias(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> a
    636:639:cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node newNode() -> a
    644:649:java.util.Set getFrontier(cn.com.codesec.scan.analyzer.util.Location) -> b
    654:669:java.util.Set getFrontier(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node,cn.com.codesec.scan.model.AccessPath,java.util.Set) -> a
    674:679:cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node extend(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node,cn.com.codesec.scan.model.AccessPath) -> a
    581:581:void <init>(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$AliasGraph) -> <init>
    577:577:java.util.Map access$1(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$AliasGraph) -> a
cn.com.codesec.scan.analyzer.alias.FlowInsensitive$CachedAlias -> cn.com.codesec.sN:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc base -> a
    cn.com.codesec.scan.model.AccessPath path -> b
    cn.com.codesec.util.fset.FTreeSet evidence -> c
    694:698:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> <init>
    700:704:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.util.fset.FTreeSet) -> <init>
    708:708:cn.com.codesec.scan.analyzer.util.Location getLocation(cn.com.codesec.scan.model.AccessPath) -> a
    713:713:cn.com.codesec.util.fset.FTreeSet getEvidence() -> a
    718:722:cn.com.codesec.scan.analyzer.alias.FlowInsensitive$CachedAlias extend(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Edge,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    726:726:int compareEvidenceTo(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$CachedAlias) -> a
    731:731:int hashCode() -> hashCode
    736:743:boolean equals(java.lang.Object) -> equals
    748:748:java.lang.String toString() -> toString
    691:691:cn.com.codesec.scan.model.AccessPath access$0(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$CachedAlias) -> b
cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Edge -> cn.com.codesec.sO:
    cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node dest -> a
    cn.com.codesec.scan.model.AccessPath$Selector label -> b
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence why -> c
    517:521:void <init>(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node,cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$AliasEvidence) -> <init>
    524:524:cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node getTo() -> a
    528:528:cn.com.codesec.scan.model.AccessPath$Selector getLabel() -> b
    532:536:cn.com.codesec.util.fset.FTreeSet getEvidence() -> c
    541:541:int hashCode() -> hashCode
    546:553:boolean equals(java.lang.Object) -> equals
    558:565:int compareTo(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Edge) -> a
    570:570:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node -> cn.com.codesec.sP:
    cn.com.codesec.util.fset.FSet forward -> a
    java.util.Map cache -> b
    462:465:void <init>() -> <init>
    469:469:java.util.Collection getNames() -> a
    473:484:boolean addName(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$CachedAlias) -> a
    489:489:cn.com.codesec.util.fset.FSet getForward() -> b
    493:495:boolean addForward(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Edge) -> a
    499:507:boolean compact(cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    462:462:void <init>(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node) -> <init>
    498:498:boolean access$1(cn.com.codesec.scan.analyzer.alias.FlowInsensitive$Node,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
cn.com.codesec.scan.analyzer.alias.FlowSensitive -> cn.com.codesec.sQ:
    long BLOCKTIME -> d
    boolean DEBUG -> e
    cn.com.codesec.scan.analyzer.alias.FlowSensitive$Debug dbg -> f
    java.util.Map aliasesPrecedingCache -> g
    java.util.Map entrySets -> h
    java.util.Map exitSets -> i
    cn.com.codesec.scan.analyzer.util.LivenessAnalyzer liveLocs -> j
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Timeout perBlockTimeLimit -> k
    411:432:void <clinit>() -> <clinit>
    64:70:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean) -> <init>
    75:75:java.lang.String getName() -> a
    81:82:cn.com.codesec.util.fset.FSet getAliasesPreceding(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.analyzer.util.Location) -> a
    87:128:void buildAliases(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    131:134:cn.com.codesec.scan.analyzer.util.Location locationWithPath(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.model.AccessPath$Selector) -> b
    138:159:boolean processBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    163:182:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily computeAliasesAtExit(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    186:190:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily joinExitSets(java.lang.Iterable) -> a
    195:237:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily processCallStmt(cn.com.codesec.scan.ir.nodes.IRCallStmt,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
    242:298:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily processAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
    302:345:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily doAsgnAliasing(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
    349:353:boolean allowSelfAlias(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> a
    398:402:cn.com.codesec.util.fset.FSet appendAll(cn.com.codesec.util.fset.FSet,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    406:406:boolean checkLocation(cn.com.codesec.scan.analyzer.util.Location) -> b
    405:405:boolean access$0(cn.com.codesec.scan.analyzer.util.Location) -> a
    61:61:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Timeout access$1(cn.com.codesec.scan.analyzer.alias.FlowSensitive) -> a
cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily -> cn.com.codesec.sR:
    cn.com.codesec.util.fset.FSet family -> c
    cn.com.codesec.scan.analyzer.alias.FlowSensitive this$0 -> a
    boolean $assertionsDisabled -> b
    598:598:void <clinit>() -> <clinit>
    602:604:void <init>(cn.com.codesec.scan.analyzer.alias.FlowSensitive) -> <init>
    606:608:void <init>(cn.com.codesec.scan.analyzer.alias.FlowSensitive,cn.com.codesec.util.fset.FSet) -> <init>
    612:612:java.util.Iterator iterator() -> iterator
    616:627:cn.com.codesec.util.fset.FSet getAliasesFor(cn.com.codesec.scan.analyzer.util.Location) -> a
    632:640:cn.com.codesec.util.fset.FSet getAllLocsFor(cn.com.codesec.scan.analyzer.util.Location) -> b
    644:656:cn.com.codesec.util.fset.FSet getSuffixAliasesFor(cn.com.codesec.scan.analyzer.util.Location) -> c
    660:673:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily with(cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet) -> a
    677:709:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily join(cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
    713:730:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily kill(cn.com.codesec.scan.analyzer.util.Location) -> d
    734:750:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily restrict(cn.com.codesec.util.fset.FSet) -> a
    755:755:boolean equals(java.lang.Object) -> equals
    760:760:int hashCode() -> hashCode
    765:765:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet -> cn.com.codesec.sS:
    cn.com.codesec.util.fset.FSet pts -> a
    cn.com.codesec.util.fset.FTreeSet assns -> b
    439:442:void <init>(cn.com.codesec.util.fset.FSet,cn.com.codesec.util.fset.FTreeSet) -> <init>
    444:453:void <init>(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.util.Location[]) -> <init>
    456:456:cn.com.codesec.util.fset.FSet getEvidence() -> a
    461:461:java.util.Iterator iterator() -> iterator
    465:465:int size() -> b
    469:472:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet with(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    477:483:cn.com.codesec.util.fset.FList suffixForMatch(cn.com.codesec.scan.analyzer.util.Location) -> c
    488:496:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet suffixSetForMatch(cn.com.codesec.scan.analyzer.util.Location) -> a
    501:516:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet compose(cn.com.codesec.util.fset.FList) -> a
    520:529:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet kill(cn.com.codesec.scan.analyzer.util.Location) -> b
    533:542:cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet killDeadLocs(cn.com.codesec.util.fset.FSet) -> a
    546:546:boolean isSubsetEq(cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet) -> a
    550:571:boolean subsumes(cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet) -> b
    575:575:boolean isEmpty() -> c
    579:579:boolean isStrictPrefixOf(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.util.Location) -> a
    584:584:boolean equals(java.lang.Object) -> equals
    589:589:int hashCode() -> hashCode
    594:594:java.lang.String toString() -> toString
    476:476:cn.com.codesec.util.fset.FList access$0(cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasSet,cn.com.codesec.scan.analyzer.util.Location) -> a
cn.com.codesec.scan.analyzer.alias.FlowSensitive$Debug -> cn.com.codesec.sT:
    java.io.PrintStream out -> a
    774:776:void <init>(java.lang.String) -> <init>
    779:780:void close() -> a
    783:785:void enterFunc(java.lang.String) -> a
    788:791:void enterBlock(int,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
    794:797:void exitBlock(int,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> b
    800:802:void queried(cn.com.codesec.scan.analyzer.util.Location) -> a
    805:806:void results(cn.com.codesec.util.fset.FSet) -> a
    809:812:void afterAssn(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.alias.FlowSensitive$AliasFamily) -> a
cn.com.codesec.scan.analyzer.alias.NopAliasAnalyzer -> cn.com.codesec.sU:
    19:20:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean) -> <init>
    25:25:java.lang.String getName() -> a
    31:31:cn.com.codesec.util.fset.FSet getAliasesPreceding(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.analyzer.util.Location) -> a
    36:36:void buildAliases(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.scan.analyzer.buffer.BufferTools -> cn.com.codesec.sV:
    boolean $assertionsDisabled -> a
    35:35:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    38:42:cn.com.codesec.scan.ir.nodes.IRStatement myGetStartStmt(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    46:62:boolean isCharArrayInitializationAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    66:70:boolean isArrayTypeOrPointerType(cn.com.codesec.scan.metadata.Type) -> a
    74:78:boolean isArrayType(cn.com.codesec.scan.metadata.Type) -> b
    82:86:boolean isFixedArrayType(cn.com.codesec.scan.metadata.Type) -> c
    90:93:cn.com.codesec.scan.metadata.Type unwrap(cn.com.codesec.scan.metadata.Type) -> d
    97:101:boolean isPointer(cn.com.codesec.scan.metadata.Type) -> e
    105:112:cn.com.codesec.scan.metadata.Type getPointerElementType(cn.com.codesec.scan.metadata.Type) -> f
    116:132:boolean isPointerArithmatics(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    136:155:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc getArrayBaseRead(java.util.Map,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.analyzer.constraints.ShadowField) -> a
    181:188:cn.com.codesec.scan.ir.nodes.IRLocation readRealLocation(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    192:203:boolean isDereference(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    207:211:boolean isAddrOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    215:215:boolean isAddrOfZeroIndexedArrayAccess(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    219:219:cn.com.codesec.scan.ir.nodes.IRLocation skipAddrOfZeroIndexedArrayAccess(cn.com.codesec.scan.ir.nodes.IROpExp) -> b
    223:245:cn.com.codesec.scan.ir.nodes.IRLocation getTransitiveBaseLoc(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    249:264:cn.com.codesec.scan.analyzer.util.Ssi$Var[] sortSources(java.util.Collection) -> a
cn.com.codesec.scan.analyzer.buffer.BufferTools$1 -> cn.com.codesec.sW:
    1:251:void <init>() -> <init>
    254:260:int compare(cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.callgraph.ASPCGBuilder -> cn.com.codesec.sX:
    21:21:void <init>() -> <init>
    25:96:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget -> cn.com.codesec.sY:
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> a
    cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall alternativeCall -> b
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor confidence -> c
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type callType -> d
    20:22:void <init>() -> <init>
    25:26:void setCallSite(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    29:30:void setAlternativeCall(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall) -> a
    33:34:void setConfidence(cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    37:38:void setCallType(cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type) -> a
    46:51:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type) -> <init>
    55:55:cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    60:60:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    64:64:cn.com.codesec.messaging.Message getCallType() -> c
    70:70:int getFamilySize() -> d
    76:76:int getFamilyIndex() -> e
    81:81:boolean isDirect() -> f
    86:86:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    91:91:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    96:96:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
    101:101:java.lang.String getKind() -> j
    106:113:boolean equals(java.lang.Object) -> equals
    118:121:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type -> cn.com.codesec.sZ:
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type JAVA_JNI -> a
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type JAVA_WEB_DISPATCH -> b
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type DOTNET_CAB -> c
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type JSP_CUSTOMTAG -> d
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type PHP_LAMBDA -> e
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type SQL_SERVER_SP -> f
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type STORED_PROCEDURE -> g
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type STATE_INJECTION -> h
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type STRUTS_FWD -> i
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type UNKNOWN -> j
    cn.com.codesec.messaging.Message GENERIC_MSG -> k
    cn.com.codesec.messaging.Message JAVA_JNI_MSG -> l
    cn.com.codesec.messaging.Message JAVA_WEB_DISPATCH_MSG -> m
    cn.com.codesec.messaging.Message JSP_CUSTOMTAG_MSG -> n
    cn.com.codesec.messaging.Message PHP_LAMBDA_MSG -> o
    cn.com.codesec.messaging.Message SQL_SERVER_SP_MSG -> p
    cn.com.codesec.messaging.Message STORED_PROCEDURE_MSG -> q
    cn.com.codesec.messaging.Message STATE_INJECTION_MSG -> r
    cn.com.codesec.messaging.Message STRUTS_FWD_MSG -> s
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type[] ENUM$VALUES -> t
    126:209:void <clinit>() -> <clinit>
    124:124:void <init>(java.lang.String,int) -> <init>
    cn.com.codesec.messaging.Message getMessage() -> a
    1:1:cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type valueOf(java.lang.String) -> valueOf
    124:124:void <init>(java.lang.String,int,cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type) -> <init>
    188:188:cn.com.codesec.messaging.Message access$3() -> b
    189:189:cn.com.codesec.messaging.Message access$4() -> c
    187:187:cn.com.codesec.messaging.Message access$5() -> d
    190:190:cn.com.codesec.messaging.Message access$6() -> e
    191:191:cn.com.codesec.messaging.Message access$7() -> f
    192:192:cn.com.codesec.messaging.Message access$8() -> g
    193:193:cn.com.codesec.messaging.Message access$9() -> h
    194:194:cn.com.codesec.messaging.Message access$10() -> i
    195:195:cn.com.codesec.messaging.Message access$11() -> j
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$1 -> cn.com.codesec.ta:
    1:126:void <init>(java.lang.String,int) -> <init>
    129:129:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$10 -> cn.com.codesec.tb:
    1:180:void <init>(java.lang.String,int) -> <init>
    183:183:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$2 -> cn.com.codesec.tc:
    1:132:void <init>(java.lang.String,int) -> <init>
    135:135:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$3 -> cn.com.codesec.td:
    1:138:void <init>(java.lang.String,int) -> <init>
    141:141:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$4 -> cn.com.codesec.te:
    1:144:void <init>(java.lang.String,int) -> <init>
    147:147:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$5 -> cn.com.codesec.tf:
    1:150:void <init>(java.lang.String,int) -> <init>
    153:153:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$6 -> cn.com.codesec.tg:
    1:156:void <init>(java.lang.String,int) -> <init>
    159:159:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$7 -> cn.com.codesec.th:
    1:162:void <init>(java.lang.String,int) -> <init>
    165:165:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$8 -> cn.com.codesec.ti:
    1:168:void <init>(java.lang.String,int) -> <init>
    171:171:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget$Type$9 -> cn.com.codesec.tj:
    1:174:void <init>(java.lang.String,int) -> <init>
    177:177:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver -> cn.com.codesec.tk:
    19:20:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    24:25:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    30:31:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver$AsRHSNode -> cn.com.codesec.tl:
    java.lang.Object value -> a
    cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver this$0 -> b
    38:40:void <init>(cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver,java.lang.Object) -> <init>
    44:44:java.lang.String toString() -> toString
    49:49:int hashCode() -> hashCode
    54:61:boolean equals(java.lang.Object) -> equals
    38:38:void <init>(cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver,java.lang.Object,cn.com.codesec.scan.analyzer.callgraph.AsRHSDefinitionResolver$AsRHSNode) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraph -> cn.com.codesec.tm:
    14:14:void <init>() -> <init>
    18:18:java.lang.Iterable getOutgoing(cn.com.codesec.scan.metadata.FunMeta) -> a
    23:23:java.util.Map createMap() -> a
    28:28:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
    1:1:java.lang.Iterable getOutgoing(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder -> cn.com.codesec.tn:
    cn.com.codesec.scan.backend.data.ModelKey NON_RETURNING_KEY -> a
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$ReachingTypeVisitor rtbuilder -> e
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetVisitor ctbuilder -> f
    cn.com.codesec.util.fset.FSet reifiedFunctions -> g
    java.util.concurrent.locks.Lock reifiedFunctionsWriteLock -> h
    java.util.concurrent.ConcurrentMap funPtrMap -> i
    cn.com.codesec.scan.analyzer.callgraph.VirtualCGBuilder virtualBuilder -> j
    cn.com.codesec.scan.backend.BackEnd backEnd -> k
    int PLUGIN_ANALYSIS_MAX_FUNCTION_REVISITS -> l
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis[] analysisPlugins -> m
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FunctionQueue pluginQueue -> n
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$SchedulerImpl pluginScheduler -> o
    java.util.concurrent.ConcurrentMap functionPointersForField -> p
    cn.com.codesec.scan.analyzer.callgraph.FieldAccessRecorder fieldAccessRecorder -> q
    boolean ENABLE_INFERRED_CONSTANTS -> r
    boolean WARN_ON_HOAFALLBACK -> s
    cn.com.codesec.scan.util.collections.LockingLinkedHashSet functions -> t
    cn.com.codesec.scan.util.collections.Bag pluginRunBag -> u
    java.util.List indirectCGBuildersCallsite -> v
    java.util.List indirectCGBuildersTarget -> w
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$PendingMap pendingMap -> x
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent fieldAccessors -> y
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent fieldAssigners -> z
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis CONTROL_FLOW_GRAPH_ANALYSIS -> b
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis NON_RETURNING_ANALYSIS -> c
    java.util.List topologicalSorts -> A
    java.util.concurrent.ConcurrentMap storageMetaConstantValuesMap -> B
    boolean $assertionsDisabled -> d
    113:937:void <clinit>() -> <clinit>
    143:147:void writeState(java.io.ObjectOutputStream) -> a
    150:156:void readState(java.io.ObjectInputStream) -> a
    158:190:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    193:200:void runReachingTypes(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    204:231:void run(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> b
    234:235:void revisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    239:249:void delayedConstantValues(java.util.concurrent.ConcurrentMap) -> a
    253:276:void complete() -> a
    279:336:cn.com.codesec.util.fset.FList pruneCallGraph() -> g
    343:387:void computeInferredConstants() -> b
    390:405:void computeSortInferredConstants() -> c
    410:422:void buildFieldConstantValue(java.util.List) -> a
    426:446:void buildFieldConstantValue(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> c
    449:455:void exceptionP0(java.lang.Throwable,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    458:458:cn.com.codesec.scan.util.collections.GMultiMap$Concurrent getFieldAccessors() -> d
    462:462:cn.com.codesec.scan.util.collections.GMultiMap$Concurrent getFieldAssigners() -> e
    466:467:void setFieldAccessors(cn.com.codesec.scan.util.collections.GMultiMap$Concurrent) -> a
    470:471:void setFieldAssigners(cn.com.codesec.scan.util.collections.GMultiMap$Concurrent) -> b
    474:475:void exceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.StorageMeta) -> a
    479:486:void resolve(cn.com.codesec.scan.metadata.StorageMeta) -> a
    489:513:boolean attemptResolution(cn.com.codesec.scan.metadata.StorageMeta) -> b
    517:528:cn.com.codesec.scan.metadata.StorageMeta resolveStorage(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    532:532:cn.com.codesec.util.fset.FLinkedHashSet getAllDefinedFunctions() -> f
    536:559:void runAnalysisPluginsInitial(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    562:580:void runAnalysisPluginsTriggered(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    583:592:void completeAnalysisPlugins() -> h
    595:603:void runAnalysisPlugin(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    606:632:java.util.Collection computeLateBoundTargets(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall) -> a
    643:675:java.util.Collection getPotentialPointersForCall(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall) -> a
    679:684:void initCallGraphBuilders() -> i
    687:695:void cacheCallTargets(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    699:713:java.util.List getActualTargetsForCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    718:818:java.util.List getAllTargetsForCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    822:845:boolean matches(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    132:132:cn.com.codesec.scan.util.collections.LockingLinkedHashSet access$0(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> a
    535:535:void access$1(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    119:119:java.util.concurrent.locks.Lock access$2(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> b
    118:118:cn.com.codesec.util.fset.FSet access$3(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> c
    118:118:void access$4(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.util.fset.FSet) -> a
    121:121:cn.com.codesec.scan.analyzer.callgraph.VirtualCGBuilder access$5(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> d
    128:128:cn.com.codesec.scan.analyzer.callgraph.FieldAccessRecorder access$6(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> e
    605:605:java.util.Collection access$7(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall) -> a
    122:122:cn.com.codesec.scan.backend.BackEnd access$8(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> f
    127:127:java.util.concurrent.ConcurrentMap access$9(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> g
    136:136:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$PendingMap access$10(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> h
    133:133:cn.com.codesec.scan.util.collections.Bag access$11(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> i
    1029:1029:java.util.concurrent.ConcurrentMap access$12(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> j
    374:382:void lambda$0(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$StorageSorter,java.util.Set,cn.com.codesec.scan.metadata.StorageMeta) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$1 -> cn.com.codesec.to:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task clearTask -> b
    1:855:void <init>(java.lang.String) -> <init>
    867:867:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task getTask() -> a
    872:872:boolean processInitial(cn.com.codesec.scan.metadata.FunMeta) -> a
    877:885:void processChange(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis) -> a
    889:889:void complete() -> b
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$1$1 -> cn.com.codesec.tp:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$1 this$1 -> a
    1:855:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$1) -> <init>
    858:862:void run(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$2 -> cn.com.codesec.tq:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task returnStatementFinder -> b
    1:892:void <init>(java.lang.String) -> <init>
    915:915:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task getTask() -> a
    920:920:boolean processInitial(cn.com.codesec.scan.metadata.FunMeta) -> a
    925:931:void processChange(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis) -> a
    935:935:void complete() -> b
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$2$1 -> cn.com.codesec.tr:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$2 this$1 -> a
    1:892:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$2) -> <init>
    895:900:void run(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    903:909:boolean hasReturn(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$3 -> cn.com.codesec.ts:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    1:215:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> <init>
    218:224:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$4 -> cn.com.codesec.tt:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    1:430:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> <init>
    433:434:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis -> cn.com.codesec.tu:
    java.lang.String name -> a
    1691:1693:void <init>(java.lang.String) -> <init>
    1697:1697:java.lang.String toString() -> toString
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task getTask() -> a
    boolean processInitial(cn.com.codesec.scan.metadata.FunMeta) -> a
    void processChange(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis) -> a
    void complete() -> b
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler -> cn.com.codesec.tv:
    void triggerChange(cn.com.codesec.scan.metadata.FunMeta) -> a
    void scheduleAnalysis(cn.com.codesec.scan.metadata.FunMeta) -> b
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task -> cn.com.codesec.tw:
    1708:1708:void <init>() -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task$CallPushdown -> cn.com.codesec.tx:
    1715:1715:void <init>() -> <init>
    java.lang.Object gather(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    void push(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Task$Cfg -> cn.com.codesec.ty:
    1710:1710:void <init>() -> <init>
    void run(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis$Scheduler,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallSiteID -> cn.com.codesec.tz:
    cn.com.codesec.parse.ir.SourceLocation si -> a
    int args -> b
    1586:1589:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall) -> <init>
    1593:1600:boolean equals(java.lang.Object) -> equals
    1605:1605:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager -> cn.com.codesec.tA:
    java.util.Map callsByTarget -> a
    java.util.Queue queue -> b
    1514:1517:void <init>() -> <init>
    1520:1528:void runOn(java.lang.Object,java.util.List,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1531:1537:boolean addAll(java.util.Collection) -> a
    1541:1555:boolean add(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1560:1560:java.util.Iterator iterator() -> iterator
    1577:1577:java.util.Collection getTargets() -> a
    1512:1512:java.util.Queue access$0(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager) -> a
    1514:1514:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager$1 -> cn.com.codesec.tB:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager this$1 -> a
    1:1560:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetManager) -> <init>
    1563:1563:boolean hasNext() -> hasNext
    1568:1571:cn.com.codesec.scan.analyzer.callgraph.CallTarget next() -> a
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetVisitor -> cn.com.codesec.tC:
    1499:1499:void <init>() -> <init>
    1503:1505:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Set) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1499:1499:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$CallTargetVisitor) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$DirectCallTarget -> cn.com.codesec.tD:
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> a
    cn.com.codesec.scan.metadata.FunMeta target -> b
    1612:1614:void <init>() -> <init>
    1617:1618:void setCallSite(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1621:1622:void setTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    1627:1630:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    1634:1634:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    1639:1639:cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    1644:1644:java.lang.String getKind() -> j
    1649:1656:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    1661:1661:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    1667:1667:int getFamilySize() -> d
    1673:1673:int getFamilyIndex() -> e
    1678:1678:boolean isDirect() -> f
    1683:1683:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FGVisitor -> cn.com.codesec.tE:
    cn.com.codesec.scan.metadata.FunMeta currentFun -> c
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> d
    cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver fpResolver -> e
    boolean hasNewCallees -> f
    java.util.concurrent.ConcurrentMap storageMetaConstantValuesMap -> g
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    boolean $assertionsDisabled -> b
    1260:1260:void <clinit>() -> <clinit>
    1268:1274:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.concurrent.ConcurrentMap) -> <init>
    1277:1296:void visitFunDecl() -> a
    1300:1314:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Void) -> a
    1319:1321:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Void) -> a
    1326:1357:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1362:1370:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Void) -> a
    1374:1391:void annotateFunctionPointerArguments(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    1395:1421:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Void) -> a
    1426:1428:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    1432:1435:void maybeRegisterStorage(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    1439:1462:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Void) -> a
    1467:1495:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    1268:1268:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.concurrent.ConcurrentMap,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FGVisitor) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FieldConstantValue -> cn.com.codesec.tF:
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> b
    java.util.concurrent.ConcurrentMap storageMetaConstantValuesMap -> c
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    1229:1232:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.concurrent.ConcurrentMap) -> <init>
    1235:1236:void visitFunDecl() -> a
    1240:1255:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1229:1229:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.concurrent.ConcurrentMap,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FieldConstantValue) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FunctionQueue -> cn.com.codesec.tG:
    java.util.Set initial -> c
    java.util.concurrent.PriorityBlockingQueue queue -> d
    java.util.Comparator initialSort -> e
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    boolean $assertionsDisabled -> b
    1733:1733:void <clinit>() -> <clinit>
    1739:1774:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> <init>
    1777:1781:void initializeRevisits(java.util.Collection) -> a
    1784:1792:void add(cn.com.codesec.scan.metadata.FunMeta) -> a
    1795:1797:cn.com.codesec.scan.metadata.FunMeta next() -> a
    1801:1801:boolean isEmpty() -> b
    1805:1849:java.util.Map initializeUniverse(java.util.Collection) -> b
    1739:1739:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FunctionQueue) -> <init>
    1743:1771:int lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    1778:1778:int lambda$1(java.util.Map,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$MicroConstantValueResolver -> cn.com.codesec.tH:
    boolean used -> a
    cn.com.codesec.scan.metadata.FunMeta funMetaBeingAnalyzed -> b
    cn.com.codesec.scan.ir.nodes.IRFunCall objectConstructorFunCall -> c
    java.util.concurrent.ConcurrentMap storageMetaConstantValuesMap -> d
    1038:1041:void <init>(cn.com.codesec.scan.metadata.FunMeta,java.util.concurrent.ConcurrentMap) -> <init>
    1046:1074:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1079:1097:cn.com.codesec.scan.ir.nodes.IRFunCall getFirstFunCall(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1102:1114:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1119:1125:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1130:1136:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1141:1171:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1175:1179:cn.com.codesec.scan.metadata.StorageMeta resolveStorageMeta(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.metadata.StorageMeta) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$PendingMap -> cn.com.codesec.tI:
    java.util.Map values -> b
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    1857:1859:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> <init>
    1862:1862:int get(cn.com.codesec.scan.metadata.FunMeta) -> b
    1866:1869:void add(cn.com.codesec.scan.metadata.FunMeta,int) -> a
    1872:1875:void remove(cn.com.codesec.scan.metadata.FunMeta,int) -> b
    1878:1879:boolean check(cn.com.codesec.scan.metadata.FunMeta,int) -> c
    1883:1883:boolean checkAny(cn.com.codesec.scan.metadata.FunMeta) -> a
    1857:1857:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$PendingMap) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$ReachingTypeVisitor -> cn.com.codesec.tJ:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    1184:1184:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> <init>
    1188:1193:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.metadata.FunMeta) -> a
    1198:1199:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.metadata.FunMeta) -> a
    1204:1205:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.metadata.FunMeta) -> a
    1211:1212:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRType,cn.com.codesec.scan.metadata.FunMeta) -> a
    1218:1219:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.metadata.FunMeta) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1184:1184:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$ReachingTypeVisitor) -> <init>
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$SchedulerImpl -> cn.com.codesec.tK:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FunctionQueue queue -> c
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis[] analyses -> d
    java.lang.ThreadLocal currentAnalysisIndex -> e
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder this$0 -> a
    boolean $assertionsDisabled -> b
    1887:1887:void <clinit>() -> <clinit>
    1893:1902:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$FunctionQueue,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$Analysis[]) -> <init>
    1906:1914:void triggerChange(cn.com.codesec.scan.metadata.FunMeta) -> a
    1918:1929:void scheduleAnalysis(cn.com.codesec.scan.metadata.FunMeta) -> b
    1932:1932:java.lang.ThreadLocal getCurrentAnalysisIndex() -> a
    1936:1937:void setCurrentAnalysisIndex(java.lang.ThreadLocal) -> a
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$SchedulerImpl$1 -> cn.com.codesec.tL:
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$SchedulerImpl this$1 -> a
    1:1894:void <init>(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$SchedulerImpl) -> <init>
    1897:1897:java.lang.Integer initialValue() -> a
    1:1:java.lang.Object initialValue() -> initialValue
cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder$StorageSorter -> cn.com.codesec.tM:
    java.util.Set notDependent -> a
    java.util.concurrent.ConcurrentMap dependencyMap -> b
    java.lang.ThreadLocal currentLHS -> c
    945:950:void <init>(java.util.Set) -> <init>
    954:968:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,org.apache.commons.lang3.tuple.Pair) -> a
    973:983:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRLocation,org.apache.commons.lang3.tuple.Pair) -> a
    991:997:java.util.List complete() -> a
    1001:1006:void sortStorages(java.util.Set,java.util.List,java.util.Set) -> a
    1009:1026:void sortStorages(java.util.Set,java.util.List,java.util.Set,java.util.Set) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.CallTarget -> cn.com.codesec.tN:
    cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    boolean isDirect() -> f
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
    int getFamilySize() -> d
    int getFamilyIndex() -> e
    java.lang.String getKind() -> j
cn.com.codesec.scan.analyzer.callgraph.CallTargetComparator -> cn.com.codesec.tO:
    9:9:void <init>() -> <init>
    13:27:int compare(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.callgraph.DotNetWSCGBuilder -> cn.com.codesec.tP:
    cn.com.codesec.scan.metadata.TypeMeta soapHttpClientProtocol -> a
    java.util.Set wsProxyInits -> b
    java.util.Map wsClassMap -> c
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor DOT_NET_WS_CALL_CONFIDENCE -> d
    169:172:void <clinit>() -> <clinit>
    30:30:void <init>() -> <init>
    39:55:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    58:78:cn.com.codesec.scan.metadata.FunMeta getMatchingWSMethod(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
    82:95:void checkWSProxyConstructor(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    98:137:void buildWsMap() -> a
    140:165:cn.com.codesec.scan.metadata.TypeMeta locateTypeInFile(java.lang.String) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.DotNetWSCGBuilder$1 -> cn.com.codesec.tQ:
    java.util.ArrayList val$al -> a
    1:105:void <init>(java.util.ArrayList) -> <init>
    108:118:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.FieldAccessRecorder -> cn.com.codesec.tR:
    boolean ENABLE_INFERRED_CONSTANTS -> a
    cn.com.codesec.scan.backend.BackEnd backEnd -> b
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent fieldAccessors -> c
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent fieldAssigners -> d
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent typeAccessors -> e
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent typeAssigners -> f
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent varAccessAccessors -> g
    cn.com.codesec.scan.util.collections.GMultiMap$Concurrent varAccessAssigners -> h
    243:244:void <clinit>() -> <clinit>
    38:46:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    49:50:void addAccessor(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    53:54:void addAssigner(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
    57:58:void addAccessor(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    61:62:void addAssigner(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
    65:66:void addAccessor(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    69:70:void addAssigner(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
    73:73:cn.com.codesec.scan.util.collections.GMultiMap$Concurrent getFieldAccessors() -> a
    77:77:cn.com.codesec.scan.util.collections.GMultiMap$Concurrent getFieldAssigners() -> b
    81:158:java.util.Set complete() -> c
    185:192:boolean attemptResolution(cn.com.codesec.scan.metadata.FieldMeta) -> a
    207:216:cn.com.codesec.java.rules.GlobalClassRule isForcedGlobalClass(cn.com.codesec.scan.metadata.TypeMeta) -> a
    220:238:cn.com.codesec.java.rules.GlobalFieldRule isForcedGlobalField(cn.com.codesec.scan.metadata.FieldMeta) -> b
cn.com.codesec.scan.analyzer.callgraph.FunPointerCallTarget -> cn.com.codesec.tS:
    15:17:void <init>() -> <init>
    20:21:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> <init>
    24:25:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> <init>
    29:29:java.lang.String getKind() -> j
    34:34:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
cn.com.codesec.scan.analyzer.callgraph.FunPointerCallTarget$FunPointerCallGraphEdge -> cn.com.codesec.tT:
    39:41:void <init>() -> <init>
    44:45:void <init>(cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget,cn.com.codesec.messaging.Message) -> <init>
    48:49:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.messaging.Message) -> <init>
    53:53:cn.com.codesec.scan.metadata.CallGraphEdge getCopyForTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    43:43:void <init>(cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget,cn.com.codesec.messaging.Message,cn.com.codesec.scan.analyzer.callgraph.FunPointerCallTarget$FunPointerCallGraphEdge) -> <init>
cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver -> cn.com.codesec.tU:
    int RESOLUTION_THRESHOLD -> b
    java.util.Map functionPointersByField -> c
    cn.com.codesec.scan.metadata.FunMeta context -> i
    boolean abandoned -> j
    cn.com.codesec.scan.backend.data.ModelKey KEY -> a
    145:147:void <clinit>() -> <clinit>
    38:42:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.Map) -> <init>
    46:46:boolean useFixedPointResolution() -> l_
    50:89:java.util.Set resolvePointers(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    94:98:java.util.Collection filter(java.util.List) -> a
    103:114:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    119:130:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    135:135:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    140:140:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver$AbandonSearchException -> cn.com.codesec.tV:
    180:180:void <init>() -> <init>
    180:180:void <init>(cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver$AbandonSearchException) -> <init>
cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver$ResolutionTerminal -> cn.com.codesec.tW:
    cn.com.codesec.scan.metadata.FunMeta resolution -> a
    cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver this$0 -> b
    153:155:void <init>(cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    159:159:java.lang.String toString() -> toString
    164:171:boolean equals(java.lang.Object) -> equals
    176:176:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.IDLIndirectCGBuilder -> cn.com.codesec.tX:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor IDL_CALL_CONFIDENCE -> a
    java.util.concurrent.ConcurrentMap loggedCalls -> b
    cn.com.codesec.scan.metadata.TypeMeta corbaObjectJava -> c
    cn.com.codesec.scan.metadata.TypeMeta corbaObjectCPP -> d
    java.util.Set idlTypes -> e
    java.util.Set skelFunctionNames -> f
    java.util.Map idlFunctionsByName -> g
    java.util.HashSet seen -> h
    boolean loaded -> i
    207:213:void <clinit>() -> <clinit>
    40:42:void <init>() -> <init>
    45:74:void markIdlFunctions(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.meta.Language) -> a
    77:88:void markSkelFunctions(cn.com.codesec.scan.metadata.TypeMeta) -> a
    91:103:boolean isIdlType(cn.com.codesec.scan.metadata.TypeMeta) -> b
    108:147:void loadTypes() -> b
    151:196:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    199:199:boolean isLoaded() -> a
    203:204:void setLoaded(boolean) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallGraphBuilder -> cn.com.codesec.tY:
    void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallGraphBuilder$Callsite -> cn.com.codesec.tZ:
cn.com.codesec.scan.analyzer.callgraph.IndirectCallGraphBuilder$Target -> cn.com.codesec.ua:
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget -> cn.com.codesec.ub:
    cn.com.codesec.scan.ir.nodes.IRFunCall call -> a
    cn.com.codesec.scan.metadata.FunMeta target -> b
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor confidence -> c
    int familySize -> d
    int familyIndex -> e
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type callType -> f
    boolean $assertionsDisabled -> g
    18:18:void <clinit>() -> <clinit>
    20:22:void <init>() -> <init>
    25:25:cn.com.codesec.scan.ir.nodes.IRFunCall getCall() -> c
    29:29:cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type getCallType() -> k
    33:34:void setCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    37:38:void setTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    41:42:void setConfidence(cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    45:46:void setFamilySize(int) -> a
    49:50:void setCallType(cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> a
    60:61:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> <init>
    63:70:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> <init>
    73:74:void setFamilyIndex(int) -> b
    79:79:int getFamilySize() -> d
    85:86:int getFamilyIndex() -> e
    91:91:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    96:96:cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    101:101:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    106:106:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    111:111:boolean isDirect() -> f
    116:116:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
    121:121:java.lang.String getKind() -> j
    126:133:boolean equals(java.lang.Object) -> equals
    138:140:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$IndirectCallGraphEdge -> cn.com.codesec.uc:
    cn.com.codesec.messaging.Message callType -> a
    220:222:void <init>() -> <init>
    227:228:void setCallType(cn.com.codesec.messaging.Message) -> a
    231:233:void <init>(cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget,cn.com.codesec.messaging.Message) -> <init>
    236:238:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.messaging.Message) -> <init>
    242:242:java.lang.String getCallTypeString() -> a
    246:246:cn.com.codesec.messaging.Message getCallType() -> b
    251:251:cn.com.codesec.scan.metadata.CallGraphEdge getCopyForTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type -> cn.com.codesec.ud:
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type GENERIC_INDIRECT -> a
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type POINTER -> b
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type THREAD_SPAWN -> c
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type JAVA_WEBSERVICE -> d
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type DOTNET_WEBSERVICE -> e
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type ASP_DLL -> f
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type EJB_DISPATCH -> g
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type IDL_DISPATCH -> h
    cn.com.codesec.messaging.Message GENERIC_MSG -> i
    cn.com.codesec.messaging.Message POINTER_MSG -> j
    cn.com.codesec.messaging.Message THREAD_SPAWN_MSG -> k
    cn.com.codesec.messaging.Message JAVA_WS_MSG -> l
    cn.com.codesec.messaging.Message DOTNET_WS_MSG -> m
    cn.com.codesec.messaging.Message ASP_DLL_MSG -> n
    cn.com.codesec.messaging.Message EJB_DISPATCH_MSG -> o
    cn.com.codesec.messaging.Message IDL_DISPATCH_MSG -> p
    cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type[] ENUM$VALUES -> q
    145:214:void <clinit>() -> <clinit>
    143:143:void <init>(java.lang.String,int) -> <init>
    cn.com.codesec.messaging.Message getMessage() -> a
    1:1:cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type valueOf(java.lang.String) -> valueOf
    143:143:void <init>(java.lang.String,int,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> <init>
    194:194:cn.com.codesec.messaging.Message access$3() -> b
    195:195:cn.com.codesec.messaging.Message access$4() -> c
    196:196:cn.com.codesec.messaging.Message access$5() -> d
    197:197:cn.com.codesec.messaging.Message access$6() -> e
    198:198:cn.com.codesec.messaging.Message access$7() -> f
    199:199:cn.com.codesec.messaging.Message access$8() -> g
    200:200:cn.com.codesec.messaging.Message access$9() -> h
    201:201:cn.com.codesec.messaging.Message access$10() -> i
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$1 -> cn.com.codesec.ue:
    1:145:void <init>(java.lang.String,int) -> <init>
    148:148:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$2 -> cn.com.codesec.uf:
    1:151:void <init>(java.lang.String,int) -> <init>
    154:154:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$3 -> cn.com.codesec.ug:
    1:157:void <init>(java.lang.String,int) -> <init>
    160:160:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$4 -> cn.com.codesec.uh:
    1:163:void <init>(java.lang.String,int) -> <init>
    166:166:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$5 -> cn.com.codesec.ui:
    1:169:void <init>(java.lang.String,int) -> <init>
    172:172:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$6 -> cn.com.codesec.uj:
    1:175:void <init>(java.lang.String,int) -> <init>
    178:178:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$7 -> cn.com.codesec.uk:
    1:181:void <init>(java.lang.String,int) -> <init>
    184:184:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type$8 -> cn.com.codesec.ul:
    1:187:void <init>(java.lang.String,int) -> <init>
    190:190:cn.com.codesec.messaging.Message getMessage() -> a
cn.com.codesec.scan.analyzer.callgraph.JNICGBuilder -> cn.com.codesec.um:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor JNI_CALL_CONFIDENCE -> a
    java.util.concurrent.atomic.AtomicInteger VAR_COUNTER -> b
    67:69:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    33:64:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.JavaWSCGBuilder -> cn.com.codesec.un:
    cn.com.codesec.scan.metadata.TypeMeta javaRmiRemote -> b
    cn.com.codesec.scan.metadata.TypeMeta ejbHome -> c
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor WSCG_CONFIDENCE -> d
    java.util.Map remoteMethodImplementations -> a
    162:166:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    34:40:void setup() -> b
    45:61:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    64:88:void addMatchingWSMethods(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List) -> a
    91:97:boolean implementsRemote(cn.com.codesec.scan.metadata.TypeMeta) -> a
    102:159:void markJavaWebServices() -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.JavaWSCGBuilder$WSIndirectCallTarget -> cn.com.codesec.uo:
    170:172:void <init>() -> <init>
    175:176:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
cn.com.codesec.scan.analyzer.callgraph.LateBoundCallGraphEdge -> cn.com.codesec.up:
    cn.com.codesec.messaging.Message CALL_TYPE -> a
    37:38:void <clinit>() -> <clinit>
    16:18:void <init>() -> <init>
    23:24:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    28:28:java.lang.String getCallTypeString() -> a
    33:33:cn.com.codesec.scan.metadata.CallGraphEdge getCopyForTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.callgraph.LateBoundCallTarget -> cn.com.codesec.uq:
    cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall callsite -> a
    cn.com.codesec.scan.metadata.FunMeta target -> b
    int familySize -> c
    21:23:void <init>() -> <init>
    26:27:void setTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    30:31:void setFamilySize(int) -> a
    37:41:void <init>(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,cn.com.codesec.scan.metadata.FunMeta,int) -> <init>
    45:45:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    50:50:cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    56:56:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    61:61:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    66:66:boolean isDirect() -> f
    71:71:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
    77:77:int getFamilySize() -> d
    83:83:int getFamilyIndex() -> e
    88:88:java.lang.String getKind() -> j
cn.com.codesec.scan.analyzer.callgraph.NewJspCustomTagCGBuilder -> cn.com.codesec.ur:
    28:28:void <init>() -> <init>
    32:122:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.NonLocalizedCallTarget -> cn.com.codesec.us:
    java.lang.String callTypeStr -> a
    16:16:java.lang.String getCallTypeStr() -> k
    20:21:void setCallTypeStr(java.lang.String) -> a
    26:28:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,java.lang.String) -> <init>
    32:32:cn.com.codesec.messaging.Message getCallType() -> c
cn.com.codesec.scan.analyzer.callgraph.PHPLambdaResolver -> cn.com.codesec.ut:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor PHP_CALL_CONFIDENCE -> a
    147:148:void <clinit>() -> <clinit>
    30:30:void <init>() -> <init>
    36:53:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    56:80:java.util.List resolvePHPLambdaCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    84:143:java.util.List resolvePHPIncludeCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver -> cn.com.codesec.uu:
    int MAX_VALUES -> b
    java.util.Set UNRESOLVED_SET -> c
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode unresolved -> a
    376:377:void <clinit>() -> <clinit>
    49:50:cn.com.codesec.scan.analyzer.callgraph.TypeRange getSingleValue(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    54:55:java.util.Set getAllValues(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    59:60:java.util.Set getAllValues(cn.com.codesec.scan.ir.nodes.IRExpression,boolean) -> a
    64:66:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    70:70:boolean useFixedPointResolution() -> l_
    74:78:cn.com.codesec.scan.analyzer.callgraph.TypeRange getSingleType(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    82:86:cn.com.codesec.scan.analyzer.callgraph.TypeRange getSingleType(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> a
    90:90:java.util.Set getAllTypes(cn.com.codesec.scan.ir.nodes.IRExpression) -> e
    94:99:java.util.Set getAllTypes(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,boolean) -> a
    103:111:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> b
    116:119:java.util.Collection filter(java.util.List) -> a
    124:124:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode getDefaultDef() -> b
    144:147:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    152:152:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRAllocation) -> a
    157:178:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    183:183:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    192:269:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    274:284:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    288:311:java.util.List toNodes(java.util.Set) -> a
    315:318:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toNode(cn.com.codesec.scan.analyzer.callgraph.TypeRange) -> a
    322:326:java.util.List toNodesFromTypeMeta(java.util.Set) -> b
    330:348:java.util.Set getValues(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    353:357:java.util.Set getValues(java.util.List) -> b
    361:361:cn.com.codesec.scan.metadata.Type createType(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> b
cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver$1 -> cn.com.codesec.uv:
    cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver this$0 -> a
    cn.com.codesec.scan.model.AccessPath val$extraction -> b
    1:106:void <init>(cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    109:109:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver$2 -> cn.com.codesec.uw:
    cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver this$0 -> a
    1:124:void <init>(cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver) -> <init>
    127:127:int hashCode() -> hashCode
    132:132:boolean equals(java.lang.Object) -> equals
    137:137:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver$ConstantTerminal -> cn.com.codesec.ux:
    cn.com.codesec.scan.analyzer.callgraph.TypeRange value -> a
    cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver this$0 -> b
    383:385:void <init>(cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver,cn.com.codesec.scan.analyzer.callgraph.TypeRange) -> <init>
    389:396:boolean equals(java.lang.Object) -> equals
    401:401:int hashCode() -> hashCode
    406:406:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.callgraph.ReverseCallGraph -> cn.com.codesec.uy:
    14:14:void <init>() -> <init>
    18:18:java.lang.Iterable getOutgoing(cn.com.codesec.scan.metadata.FunMeta) -> a
    23:23:java.util.Map createMap() -> a
    28:28:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
    1:1:java.lang.Iterable getOutgoing(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.SqlServerSPResolver -> cn.com.codesec.uz:
    cn.com.codesec.scan.metadata.TypeMeta dbCommand -> a
    cn.com.codesec.scan.metadata.TypeMeta dbDataAdapter -> b
    cn.com.codesec.scan.metadata.TypeMeta dbParam -> c
    cn.com.codesec.scan.metadata.TypeMeta dbParamCollection -> d
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor SQL_SERVER_SP_CALL_CONFIDENCE -> e
    cn.com.codesec.scan.ir.nodes.IRLocation[] EMPTY_ARGS -> f
    264:270:void <clinit>() -> <clinit>
    43:43:void <init>() -> <init>
    54:69:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    72:116:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall resolveTSQLDotnetCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    120:165:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall resolveSPCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    170:208:cn.com.codesec.scan.metadata.FunMeta findSpFunMeta(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    212:231:cn.com.codesec.scan.metadata.FunMeta locateSPCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    235:250:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall generateSPCall(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.preproc.SSAVar,cn.com.codesec.scan.metadata.FunMeta) -> a
    254:260:cn.com.codesec.scan.metadata.FunMeta lookupSp(java.lang.String) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
    45:45:cn.com.codesec.scan.metadata.TypeMeta access$1() -> a
    48:48:cn.com.codesec.scan.metadata.TypeMeta access$2() -> b
    47:47:cn.com.codesec.scan.metadata.TypeMeta access$3() -> c
cn.com.codesec.scan.analyzer.callgraph.SqlServerSPResolver$SqlParamFinder -> cn.com.codesec.uA:
    java.util.Map sqlParamNames -> a
    java.util.Map sqlParamValues -> b
    java.util.Map namesWithValues -> c
    cn.com.codesec.scan.analyzer.preproc.SSAVar commandVarSsa -> d
    java.util.List commandVarUses -> e
    java.util.HashSet commandVarAccesses -> f
    281:296:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    299:311:boolean isOurCollection(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    315:351:boolean isOurParameter(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    356:423:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    427:443:java.util.Map getSqlParamNamesAndValues(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.SqlServerSPResolver2 -> cn.com.codesec.uB:
    cn.com.codesec.scan.metadata.TypeMeta dbCommand -> b
    cn.com.codesec.scan.metadata.TypeMeta dbDataAdapter -> c
    cn.com.codesec.scan.metadata.TypeMeta dbParam -> d
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor SQL_SERVER_SP_CALL_CONFIDENCE -> e
    int tmpCounter -> f
    boolean $assertionsDisabled -> a
    44:396:void <clinit>() -> <clinit>
    44:44:void <init>() -> <init>
    54:58:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    61:110:void resolveSPCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    113:124:cn.com.codesec.scan.ir.nodes.IRLocation findCommand(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    128:147:cn.com.codesec.scan.ir.nodes.IRFunCall findConstructor(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    151:182:java.util.ArrayList findSpFunMeta(cn.com.codesec.scan.ir.nodes.IRLocation,java.util.ArrayList) -> a
    186:239:cn.com.codesec.scan.metadata.FunMeta locateSPCall(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.ArrayList) -> a
    243:254:cn.com.codesec.scan.ir.nodes.IRExpression checkForParameter(cn.com.codesec.scan.ir.nodes.IRExpression,java.util.Map) -> a
    258:305:cn.com.codesec.util.fset.FList getConcatenatedStrings(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    309:366:cn.com.codesec.scan.ir.nodes.IRExpression[] getProcArgs(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    370:376:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall generateSPCall(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,java.util.ArrayList) -> a
    380:387:cn.com.codesec.scan.metadata.FunMeta lookupSp(java.lang.String) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.StateInjectionCGBuilder -> cn.com.codesec.uC:
    cn.com.codesec.scan.metadata.TypeMeta stateType -> a
    36:36:void <init>() -> <init>
    41:47:boolean isStateIndexer(cn.com.codesec.scan.metadata.FunMeta) -> a
    51:51:boolean isActionTarget(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    55:69:boolean willAddTargets(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    74:128:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    131:137:cn.com.codesec.scan.ir.nodes.IRVarAccess makeDummyArgument(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.String,java.lang.String) -> a
    141:145:cn.com.codesec.scan.ir.nodes.IRFunCall makeAlternateCall(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRCallStmt,cn.com.codesec.scan.metadata.FunMeta) -> a
    149:150:void log(java.lang.String) -> a
    153:154:void log(java.lang.String,java.lang.Throwable) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.StoredProcedureResolver -> cn.com.codesec.uD:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor SP_CALL_CONFIDENCE -> a
    cn.com.codesec.scan.metadata.TypeMeta preparedStatement -> b
    cn.com.codesec.scan.metadata.TypeMeta connection -> c
    java.util.regex.Pattern spCallPattern -> d
    171:174:void <clinit>() -> <clinit>
    37:39:void <init>() -> <init>
    43:47:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    51:167:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall resolveFunction(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.TypeInferenceCGBuilder -> cn.com.codesec.uE:
    11:11:void <init>() -> <init>
    15:15:void addTargetsForCall(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.TypeRange -> cn.com.codesec.uF:
    cn.com.codesec.scan.analyzer.callgraph.TypeRange UNKNOWN -> a
    cn.com.codesec.scan.analyzer.callgraph.TypeRange ANY -> b
    cn.com.codesec.scan.metadata.Type type -> c
    boolean must -> d
    10:11:void <clinit>() -> <clinit>
    17:21:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    25:26:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    28:32:void <init>(cn.com.codesec.scan.metadata.Type,boolean) -> <init>
    35:35:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> a
    39:39:cn.com.codesec.scan.metadata.Type getType() -> b
    43:44:void setType(cn.com.codesec.scan.metadata.Type) -> a
    47:47:boolean isMust() -> c
    51:52:void setMust(boolean) -> a
    56:60:int hashCode() -> hashCode
    65:79:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.callgraph.VirtualCGBuilder -> cn.com.codesec.uG:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor THREAD_START_RUN_CONFIDENCE -> b
    cn.com.codesec.messaging.Message VIRTUAL_CALL_TYPE -> c
    java.lang.ref.Reference virtualsCache -> d
    boolean $assertionsDisabled -> a
    36:268:void <clinit>() -> <clinit>
    42:44:void <init>() -> <init>
    58:68:java.util.List combine(java.util.List,java.util.List) -> a
    86:86:java.util.List functionModelTypes(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    91:192:void addTargetsForCall(java.util.List,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    195:206:void addVirtualTargets(java.util.List,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
    209:238:java.util.List getVirtualTargets(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    242:263:void listVirtuals(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta,java.util.List) -> a
    1:1:void addTargetsForCall(java.util.List,java.lang.Object) -> a
    39:39:cn.com.codesec.messaging.Message access$1() -> a
cn.com.codesec.scan.analyzer.callgraph.VirtualCGBuilder$TypeFunPair -> cn.com.codesec.uH:
    cn.com.codesec.scan.metadata.TypeMeta type -> a
    cn.com.codesec.scan.metadata.FunMeta fun -> b
    275:278:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    282:289:boolean equals(java.lang.Object) -> equals
    294:296:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.VirtualCGBuilder$VirtualCallTarget -> cn.com.codesec.uI:
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> a
    cn.com.codesec.scan.metadata.FunMeta target -> b
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor confidence -> c
    int familySize -> d
    int familyIndex -> e
    303:305:void <init>() -> <init>
    308:309:void setCallSite(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    312:313:void setTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    316:317:void setConfidence(cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    320:321:void setFamilySize(int) -> a
    329:335:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    338:339:void setFamilyIndex(int) -> b
    344:344:int getFamilySize() -> d
    350:350:int getFamilyIndex() -> e
    355:355:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    360:360:cn.com.codesec.scan.metadata.FunMeta getTarget() -> a
    365:365:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> b
    370:370:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAlternativeCall() -> h
    375:375:java.lang.String getKind() -> j
    380:380:boolean isDirect() -> f
    385:385:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidence() -> i
    390:397:boolean equals(java.lang.Object) -> equals
    402:404:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.callgraph.util.AdHocFunMetaFactory -> cn.com.codesec.uJ:
    cn.com.codesec.scan.metadata.TypeMeta enclosingType -> a
    java.lang.String simpleName -> b
    cn.com.codesec.scan.metadata.Type returnType -> c
    java.util.List parameterTypes -> d
    cn.com.codesec.util.SKYFile file -> e
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> f
    boolean isVarArgs -> g
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> h
    30:30:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> a
    34:34:java.lang.String getSimpleName() -> b
    38:38:cn.com.codesec.scan.metadata.Type getReturnType() -> c
    42:42:java.util.List getParameterTypes() -> d
    46:46:cn.com.codesec.scan.metadata.Type[] getParameterTypesAsArray() -> e
    50:50:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> f
    54:55:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    58:58:boolean getVarArgs() -> g
    62:63:void setVarArgs(boolean) -> a
    66:66:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> h
    71:72:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    75:75:cn.com.codesec.util.SKYFile getFile() -> i
    79:80:void setFile(cn.com.codesec.util.SKYFile) -> a
    82:91:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.metadata.Type) -> <init>
    94:95:void addParameterType(cn.com.codesec.scan.metadata.Type) -> a
    98:99:boolean hasFunMeta(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    103:112:cn.com.codesec.scan.metadata.FunMeta create() -> j
    119:122:cn.com.codesec.util.fset.FList getOrElseCreate() -> k
    127:127:cn.com.codesec.scan.metadata.FunMeta primaryGetOrElseCreate() -> l
cn.com.codesec.scan.analyzer.callgraph.util.AdHocFunMetaFactory$FunMetasAlreadyExistException -> cn.com.codesec.uK:
    cn.com.codesec.util.fset.FList existingFunMetas -> a
    135:137:void <init>(java.lang.String,cn.com.codesec.util.fset.FList) -> <init>
    140:140:cn.com.codesec.util.fset.FList getFunMeta() -> a
cn.com.codesec.scan.analyzer.callgraph.util.AdHocTypeMetaFactory -> cn.com.codesec.uL:
    java.lang.String simpleName -> a
    cn.com.codesec.scan.meta.Language language -> b
    java.lang.String uniqueName -> c
    java.lang.String canonicalName -> d
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> e
    cn.com.codesec.scan.metadata.Namespace nameSpace -> f
    25:25:java.lang.String getSimpleName() -> a
    29:29:cn.com.codesec.scan.meta.Language getLanguage() -> b
    33:33:cn.com.codesec.scan.metadata.Namespace getNameSpace() -> c
    37:37:java.lang.String getUniqueName() -> d
    41:42:void setUniqueName(java.lang.String) -> a
    45:45:java.lang.String getCanonicalName() -> e
    49:50:void setCanonicalName(java.lang.String) -> b
    53:53:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> f
    57:58:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    60:68:void <init>(java.lang.String,java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    71:81:cn.com.codesec.scan.metadata.TypeMeta create() -> g
    87:90:cn.com.codesec.scan.metadata.TypeMeta getOrElseCreate() -> h
cn.com.codesec.scan.analyzer.callgraph.util.AdHocTypeMetaFactory$TypeMetaAlreadyExistsException -> cn.com.codesec.uM:
    cn.com.codesec.scan.metadata.TypeMeta typeMeta -> a
    99:99:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> a
    103:105:void <init>(java.lang.String,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil -> cn.com.codesec.uN:
    boolean $assertionsDisabled -> a
    39:39:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    42:43:boolean hasAtLeastOneArgument(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    47:47:boolean hasAtLeastTwoArguments(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    51:51:boolean hasAtLeastThreeArguments(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    55:55:boolean hasSimpleName(cn.com.codesec.scan.meta.Symbol,java.lang.String) -> a
    59:59:cn.com.codesec.util.fset.FList lookUpFunction(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    63:67:cn.com.codesec.util.fset.FList lookUpPrimaryFunction(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> b
    71:71:boolean isNonEmpty(java.lang.Object[]) -> a
    75:75:java.util.List list(java.lang.Object[]) -> b
    79:83:void sortAndNumberInPlace(java.util.List) -> a
    86:91:java.util.List makeIndirectCallTargets(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Collection,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.analyzer.callgraph.IndirectCallTarget$Type) -> a
    95:118:cn.com.codesec.scan.metadata.FunMeta find(cn.com.codesec.scan.meta.Language,java.lang.String,java.lang.String,java.lang.String[]) -> a
    122:122:cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Pair makePair(java.lang.Object,java.lang.Object) -> a
    126:134:java.util.Collection getLocallyDefinedFunctions(cn.com.codesec.scan.metadata.TypeMeta) -> a
    138:152:java.util.Set findCallsWithSimpleName(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> a
    156:161:java.util.Set getOrElseCreate(java.util.Map,java.lang.Object) -> a
    165:171:void putAll(java.util.Map,java.util.Map) -> a
    174:177:cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Option makeOption(java.lang.Object) -> a
    181:181:boolean isA(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
    185:192:java.util.List getPropertySetters(cn.com.codesec.scan.metadata.TypeMeta) -> b
    196:196:java.io.PrintWriter makePrintWriter(java.io.File) -> a
    200:210:void mapInPlaceAssertively(java.util.Iterator,cn.com.codesec.util.Func) -> a
    213:217:java.lang.Object foldLeft(java.util.Iterator,java.lang.Object,cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Function2) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$1 -> cn.com.codesec.uO:
    java.lang.String val$simpleName -> a
    java.util.Set val$calls -> b
    1:139:void <init>(java.lang.String,java.util.Set) -> <init>
    143:148:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Function1 -> cn.com.codesec.uP:
    java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Function2 -> cn.com.codesec.uQ:
    java.lang.Object apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$None -> cn.com.codesec.uR:
    cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$None singleton -> a
    258:258:void <init>() -> <init>
    263:266:cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$None getInstance() -> a
    271:271:java.lang.Object get() -> b
    276:276:java.lang.Object getOrElse(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Option -> cn.com.codesec.uS:
    java.lang.Object get() -> b
    java.lang.Object getOrElse(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Pair -> cn.com.codesec.uT:
    java.lang.Object first -> a
    java.lang.Object second -> b
    226:226:java.lang.Object first() -> a
    230:230:java.lang.Object second() -> b
    233:236:void <init>(java.lang.Object,java.lang.Object) -> <init>
cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Some -> cn.com.codesec.uU:
    java.lang.Object value -> a
    243:245:void <init>(java.lang.Object) -> <init>
    249:249:java.lang.Object get() -> b
    254:254:java.lang.Object getOrElse(java.lang.Object) -> a
    243:243:void <init>(java.lang.Object,cn.com.codesec.scan.analyzer.callgraph.util.CGUtil$Some) -> <init>
cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder -> cn.com.codesec.uV:
    cn.com.codesec.util.fset.FTreeMap caller2callees -> a
    cn.com.codesec.util.fset.FTreeMap callee2callers -> b
    cn.com.codesec.scan.metadata.BackEndNameTable backEndNameTable -> c
    boolean $assertionsDisabled -> d
    28:28:void <clinit>() -> <clinit>
    34:40:void <init>(cn.com.codesec.scan.metadata.BackEndNameTable,cn.com.codesec.util.fset.FSet) -> <init>
    43:59:cn.com.codesec.util.fset.FSet findRoots(cn.com.codesec.util.fset.FSet) -> a
    63:74:cn.com.codesec.util.fset.FSet findRoots(cn.com.codesec.util.fset.FTreeSet,boolean) -> a
    78:88:void mkCallerCalleeMaps(cn.com.codesec.util.fset.FTreeSet) -> a
cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder$SimpleNameCallGraph -> cn.com.codesec.uW:
    cn.com.codesec.util.fset.FTreeMap caller2callees -> a
    cn.com.codesec.util.fset.FTreeSet allFuns -> b
    145:148:void <init>(cn.com.codesec.util.fset.FTreeSet,cn.com.codesec.util.fset.FTreeMap) -> <init>
    152:152:java.lang.Iterable getOutgoing(cn.com.codesec.scan.metadata.FunMeta) -> a
    157:157:java.util.Map createMap() -> a
    162:162:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
    1:1:java.lang.Iterable getOutgoing(java.lang.Object) -> a
    145:145:void <init>(cn.com.codesec.util.fset.FTreeSet,cn.com.codesec.util.fset.FTreeMap,cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder$SimpleNameCallGraph) -> <init>
cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder$SimpleNameFunCallVisitor -> cn.com.codesec.uX:
    cn.com.codesec.util.fset.FTreeSet callees -> b
    cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder this$0 -> a
    94:96:void <init>(cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder) -> <init>
    99:99:cn.com.codesec.util.fset.FTreeSet getCallees() -> a
    104:104:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    109:118:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder$SimpleNameSCCFinder -> cn.com.codesec.uY:
    cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder this$0 -> a
    124:126:void <init>(cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder,cn.com.codesec.util.fset.FTreeSet,cn.com.codesec.util.fset.FTreeMap) -> <init>
    129:136:cn.com.codesec.util.fset.FList getRootSets() -> b
    128:128:cn.com.codesec.util.fset.FList access$0(cn.com.codesec.scan.analyzer.callgraph.util.SimpleNameRootFinder$SimpleNameSCCFinder) -> a
cn.com.codesec.scan.analyzer.constants.ArrayConstant -> cn.com.codesec.uZ:
    cn.com.codesec.scan.analyzer.constants.ArrayConstant EMPTY -> a
    java.util.List contents -> b
    cn.com.codesec.scan.meta.Symbol symbol -> c
    11:11:void <clinit>() -> <clinit>
    15:15:java.lang.String toString() -> toString
    22:23:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    26:26:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    29:31:void <init>(java.util.List) -> <init>
    33:36:void <init>(java.util.List,cn.com.codesec.scan.meta.Symbol) -> <init>
    39:39:java.util.List getContents() -> b
    43:43:int getSize() -> c
    48:63:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    68:68:boolean matchesValueFromRule(java.lang.String) -> a
    73:90:boolean equals(java.lang.Object) -> equals
    95:99:int hashCode() -> hashCode
    104:104:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.BooleanConstant -> cn.com.codesec.va:
    boolean value -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    13:14:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    17:17:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    20:22:void <init>(boolean) -> <init>
    24:27:void <init>(boolean,cn.com.codesec.scan.meta.Symbol) -> <init>
    30:30:boolean getValue() -> b
    35:49:boolean equals(java.lang.Object) -> equals
    54:58:int hashCode() -> hashCode
    63:63:java.lang.String toString() -> toString
    68:73:boolean matchesValueFromRule(java.lang.String) -> a
    78:92:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    97:97:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.ClassLiteralConstant -> cn.com.codesec.vb:
    cn.com.codesec.scan.metadata.Type type -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    10:10:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    17:18:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    20:22:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    24:27:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.meta.Symbol) -> <init>
    30:30:cn.com.codesec.scan.metadata.Type getType() -> b
    35:52:boolean equals(java.lang.Object) -> equals
    57:61:int hashCode() -> hashCode
    66:80:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    85:85:java.lang.String toString() -> toString
    90:90:boolean matchesValueFromRule(java.lang.String) -> a
    95:95:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.ConstantPropagator -> cn.com.codesec.vc:
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator INSTANCE -> b
    boolean completedLocal -> c
    boolean finalPass -> d
    boolean completedGlobal -> e
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker VALUE_WORKER -> f
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker TYPE_WORKER -> g
    int MAX_VISITS_PER_FUNCTION -> h
    int MAX_ENUM_VISITS_PER_FUNCTION -> i
    int MAX_CONSTANT_VALUES -> j
    int MAX_ENUM_CONSTANT_VALUES -> k
    boolean ENABLE_INTERPROCEDURAL_CONSTANT_RESOLUTION -> l
    java.util.Set TOP -> m
    java.util.Set BOTTOM -> n
    java.util.concurrent.ConcurrentMap visits -> o
    cn.com.codesec.scan.backend.BackEnd backEnd -> p
    cn.com.codesec.util.fset.FSet universe -> q
    cn.com.codesec.scan.analyzer.constants.Debug debug -> r
    boolean dEBUG -> s
    boolean vERBOSEDEBUG -> t
    java.util.concurrent.ConcurrentMap RESOLVED_TARGETS -> u
    java.util.concurrent.ConcurrentHashMap LATTICE_MODIFICATION_LOCKS -> v
    boolean $assertionsDisabled -> a
    84:1017:void <clinit>() -> <clinit>
    101:101:java.util.concurrent.ConcurrentMap getVisits() -> a
    113:113:java.util.concurrent.ConcurrentMap createSoftMap() -> h
    117:122:void debugWriteStateOfTheWorld() -> i
    125:185:void analyze(cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> a
    188:188:boolean isComplete() -> b
    192:193:void unexpectedException(java.lang.Throwable,java.lang.Object) -> a
    196:212:cn.com.codesec.scan.analyzer.constants.ConstantPropagator initialize() -> j
    216:221:void complete() -> k
    224:239:void pruneLattice(cn.com.codesec.scan.backend.data.ModelKey) -> a
    242:244:void freeStaticData() -> l
    247:249:void freeData() -> m
    252:255:cn.com.codesec.scan.analyzer.constants.ConstantPropagator getInstance() -> c
    258:266:void <init>() -> <init>
    268:276:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    279:291:void localPass() -> n
    295:306:void propagationPasses() -> o
    309:321:void finalPasses() -> p
    324:335:void resetLocalResolvers() -> q
    339:340:java.util.concurrent.ConcurrentMap getParamLatticeMap(cn.com.codesec.scan.backend.BackEnd,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker) -> a
    344:345:java.lang.Object getLatticeModificationLock(cn.com.codesec.scan.metadata.FunMeta) -> a
    349:350:cn.com.codesec.scan.metadata.FunMeta getFunMeta(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    356:376:java.util.Set processFunction(cn.com.codesec.scan.metadata.FunMeta) -> b
    382:393:java.util.Set processFunction(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,boolean) -> a
    397:402:cn.com.codesec.scan.ir.nodes.IRStatement nextStatement(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    407:470:cn.com.codesec.scan.metadata.FieldMeta getThisEnumFieldMeta(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    474:579:java.util.Collection processCallsites(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver,boolean) -> a
    584:598:boolean isRightType(cn.com.codesec.scan.metadata.Type) -> a
    602:625:java.util.Set processReturns(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,boolean) -> b
    629:724:java.util.Collection processReturns(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver,boolean) -> b
    729:776:java.util.Set getValuesAtReturn(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    784:784:java.util.Set getTypesAtReturn(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    789:813:java.util.Set getLatticeElementAtReturn(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker) -> a
    817:817:java.util.Set getValuesAtParam(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    824:831:java.util.Set getTypesAtParam(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    835:856:java.util.Set getLatticeElementAtParam(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker) -> a
    864:870:java.util.Set scrubTB(java.util.Set) -> c
    874:885:java.util.Set applyJump(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver) -> a
    891:896:cn.com.codesec.scan.ir.nodes.IRLocation getArg(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.Parameter) -> a
    900:908:java.util.Set resolveLatticeValues(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver) -> b
    916:931:java.util.Set scrubRawCVRValuesHelper(java.util.Set) -> d
    936:936:java.util.Set scrubRawValues(java.util.Set) -> a
    940:940:java.util.Set scrubRawTypes(java.util.Set) -> b
    946:962:java.util.Set scrubRawValues(java.util.Set,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker) -> a
    966:966:cn.com.codesec.scan.ir.nodes.IRNode deref(cn.com.codesec.scan.util.Ref) -> a
    970:970:cn.com.codesec.scan.util.Ref ref(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    975:980:void eventFired(cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event) -> a
    983:991:void readState(cn.com.codesec.scan.util.serialization.ProgramModelInputStream,cn.com.codesec.scan.backend.BackEnd) -> a
    994:997:void writeState(cn.com.codesec.scan.util.serialization.ProgramModelOutputStream) -> a
    90:90:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker access$0() -> d
    91:91:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker access$1() -> e
    98:98:java.util.Set access$2() -> f
    97:97:java.util.Set access$3() -> g
    873:873:java.util.Set access$4(cn.com.codesec.scan.analyzer.constants.ConstantPropagator,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver) -> a
    88:88:boolean access$5(cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> a
    108:108:boolean access$6(cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> b
    106:106:cn.com.codesec.scan.analyzer.constants.Debug access$7(cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> c
    206:209:void lambda$0(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$NodeVisitor,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,int,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$1 -> cn.com.codesec.vd:
    java.util.Set moap -> b
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator this$0 -> a
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver val$resolver -> c
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker val$worker -> d
    cn.com.codesec.scan.metadata.FunMeta val$funMeta -> e
    1:644:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator,boolean,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    648:651:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    655:666:java.util.Set visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Void) -> a
    671:671:java.util.Set visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Void) -> a
    676:677:java.util.Set visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$BottomElement -> cn.com.codesec.ve:
    1184:1184:void <init>() -> <init>
    1188:1188:java.lang.String toString() -> toString
    1193:1193:int hashCode() -> hashCode
    1198:1198:boolean equals(java.lang.Object) -> equals
    1202:1202:java.lang.Object readResolve() -> readResolve
    1184:1184:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$BottomElement) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement -> cn.com.codesec.vf:
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TopElement TOP -> a
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$BottomElement BOTTOM -> b
    1116:1118:void <clinit>() -> <clinit>
    1090:1090:void <init>() -> <init>
    1096:1112:java.util.Set meet(java.util.Set,java.util.Set) -> b
    1092:1092:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TopElement access$0() -> a
    1093:1093:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$BottomElement access$1() -> b
    1095:1095:java.util.Set access$2(java.util.Set,java.util.Set) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator -> cn.com.codesec.vg:
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator SINGLE_VALUED -> a
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator UNION -> b
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator INTERSECTION -> c
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator EXACT -> d
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator[] ENUM$VALUES -> e
    1120:1151:void <clinit>() -> <clinit>
    1120:1120:void <init>(java.lang.String,int) -> <init>
    java.util.Set meet(java.util.Set,java.util.Set) -> a
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator valueOf(java.lang.String) -> valueOf
    1120:1120:void <init>(java.lang.String,int,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator$1 -> cn.com.codesec.vh:
    1:1122:void <init>(java.lang.String,int) -> <init>
    1125:1125:java.util.Set meet(java.util.Set,java.util.Set) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator$2 -> cn.com.codesec.vi:
    1:1128:void <init>(java.lang.String,int) -> <init>
    1131:1134:java.util.Set meet(java.util.Set,java.util.Set) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator$3 -> cn.com.codesec.vj:
    1:1137:void <init>(java.lang.String,int) -> <init>
    1141:1148:java.util.Set meet(java.util.Set,java.util.Set) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$LatticeElement$MeetOperator$4 -> cn.com.codesec.vk:
    1:1151:void <init>(java.lang.String,int) -> <init>
    1154:1154:java.util.Set meet(java.util.Set,java.util.Set) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$NodeVisitor -> cn.com.codesec.vl:
    cn.com.codesec.scan.backend.BackEnd backEnd -> a
    1059:1061:void <init>() -> <init>
    1065:1086:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1059:1059:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$NodeVisitor) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$OrderedUniqueQueue -> cn.com.codesec.vm:
    java.util.LinkedHashSet queue -> a
    cn.com.codesec.util.fset.FSet universe -> b
    1024:1028:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    1032:1033:void add(java.util.Set) -> a
    1038:1046:cn.com.codesec.scan.metadata.FunMeta pollExcluding(java.util.Collection) -> a
    1051:1051:int size() -> a
    1:1:java.lang.Object pollExcluding(java.util.Collection) -> b
    1032:1032:boolean lambda$0(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TopElement -> cn.com.codesec.vn:
    1162:1162:void <init>() -> <init>
    1166:1166:java.lang.String toString() -> toString
    1171:1171:int hashCode() -> hashCode
    1176:1176:boolean equals(java.lang.Object) -> equals
    1180:1180:java.lang.Object readResolve() -> readResolve
    1162:1162:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TopElement) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker -> cn.com.codesec.vo:
    1382:1383:void <init>() -> <init>
    1387:1391:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver getResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1396:1397:void resetResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    1401:1401:boolean isTop(cn.com.codesec.scan.analyzer.callgraph.TypeRange) -> a
    1406:1406:boolean isBottom(cn.com.codesec.scan.analyzer.callgraph.TypeRange) -> b
    1411:1411:cn.com.codesec.scan.analyzer.callgraph.TypeRange topElement() -> a
    1416:1416:cn.com.codesec.scan.analyzer.callgraph.TypeRange bottomElement() -> b
    1:1:boolean isBottom(java.lang.Object) -> a
    1:1:java.lang.Object bottomElement() -> c
    1:1:java.lang.Object topElement() -> d
    1:1:boolean isTop(java.lang.Object) -> b
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker$TypeResolver -> cn.com.codesec.vp:
    cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver resolver -> b
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker this$1 -> a
    1423:1425:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$TypeWorker,cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver) -> <init>
    1429:1429:java.util.Set resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker -> cn.com.codesec.vq:
    1324:1325:void <init>() -> <init>
    1329:1333:cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver getResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1338:1341:void resetResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    1345:1345:boolean isTop(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    1350:1350:boolean isBottom(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    1355:1355:cn.com.codesec.scan.analyzer.constants.ConstantValue topElement() -> a
    1360:1360:cn.com.codesec.scan.analyzer.constants.ConstantValue bottomElement() -> b
    1:1:boolean isBottom(java.lang.Object) -> a
    1:1:java.lang.Object bottomElement() -> c
    1:1:java.lang.Object topElement() -> d
    1:1:boolean isTop(java.lang.Object) -> b
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker$ValueResolver -> cn.com.codesec.vr:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver resolver -> b
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker this$1 -> a
    1367:1369:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$ValueWorker,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1374:1374:java.util.Set resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker -> cn.com.codesec.vs:
    cn.com.codesec.scan.backend.data.ModelKey attr -> c
    java.lang.String workerName -> a
    boolean $assertionsDisabled -> b
    1237:1237:void <clinit>() -> <clinit>
    1242:1245:void <init>(java.lang.String) -> <init>
    1248:1248:cn.com.codesec.scan.backend.data.ModelKey getLatticeAttr() -> e
    cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver getResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    void resetResolver(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    1256:1274:java.util.Set wrap(java.util.Set) -> a
    boolean isTop(java.lang.Object) -> b
    boolean isBottom(java.lang.Object) -> a
    1282:1308:java.util.Set unwrap(java.util.Set) -> b
    java.lang.Object topElement() -> d
    java.lang.Object bottomElement() -> c
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker$Resolver -> cn.com.codesec.vt:
    java.util.Set resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.constants.ConstantPropagator$WrapperElement -> cn.com.codesec.vu:
    java.lang.Object wrapped -> a
    1210:1212:void <init>(java.lang.Object) -> <init>
    1216:1216:java.lang.String toString() -> toString
    1221:1221:int hashCode() -> hashCode
    1226:1233:boolean equals(java.lang.Object) -> equals
    1210:1210:void <init>(java.lang.Object,cn.com.codesec.scan.analyzer.constants.ConstantPropagator$WrapperElement) -> <init>
    1208:1208:java.lang.Object access$1(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$WrapperElement) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValue -> cn.com.codesec.vv:
    boolean matchesValueFromRule(java.lang.String) -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    cn.com.codesec.scan.meta.Symbol getSymbol() -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueEnum -> cn.com.codesec.vw:
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Array -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Boolean -> b
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum ClassLiteral -> c
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Enum -> d
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum FloatingPoint -> e
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum FunctionPointer -> f
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Integer -> g
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Null -> h
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum String -> i
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Symbolic -> j
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Unknown -> k
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum Unresolvable -> l
    cn.com.codesec.scan.analyzer.constants.ConstantValueEnum[] ENUM$VALUES -> m
    3:15:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver -> cn.com.codesec.vx:
    int MAX_VALUES -> i
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder builder -> j
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$SimpleResolver simpleResolver -> k
    java.util.Set UNRESOLVED_SET -> l
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode unresolved -> a
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner ASSIGNER -> b
    boolean $assertionsDisabled -> c
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> m
    56:1568:void <clinit>() -> <clinit>
    65:65:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleValue(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    69:69:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleValue(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> a
    73:73:java.util.Set getAllValues(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    77:77:java.util.Set getAllValues(cn.com.codesec.scan.ir.nodes.IRExpression,boolean) -> a
    81:81:java.util.Set getAllValues(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,boolean) -> a
    85:86:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleValue(boolean,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    90:91:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleValue(boolean,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> a
    95:96:java.util.Set getAllValues(boolean,cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    100:101:java.util.Set getAllValues(boolean,cn.com.codesec.scan.ir.nodes.IRExpression,boolean) -> a
    105:106:java.util.Set getAllValues(boolean,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,boolean) -> a
    110:114:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder) -> <init>
    118:121:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver getCvr() -> c
    126:126:boolean useFixedPointResolution() -> l_
    130:134:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleConstantValue(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    138:142:cn.com.codesec.scan.analyzer.constants.ConstantValue getSingleConstantValue(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> b
    146:146:java.util.Set getAllConstantValues(cn.com.codesec.scan.ir.nodes.IRExpression) -> e
    150:197:java.util.Set getAllConstantValues(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,boolean) -> b
    201:209:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath) -> c
    214:217:java.util.Collection filter(java.util.List) -> a
    222:222:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode getDefaultDef() -> b
    227:229:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    235:238:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    242:242:java.util.List calcDefChainNode(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.parse.ir.IROperators) -> a
    246:278:java.util.List calcDefChainNode(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.parse.ir.IROperators,java.util.BitSet) -> a
    283:295:cn.com.codesec.parse.ir.IROperators getReverseOperators(cn.com.codesec.parse.ir.IROperators) -> a
    299:299:boolean isGetType() -> d
    303:304:java.util.List calcDefChainNode(java.util.List,java.util.List,java.util.List,java.util.BitSet) -> a
    308:338:java.util.Set calcConstantValue(java.util.List,java.util.List,java.util.List,java.util.BitSet) -> b
    342:435:cn.com.codesec.scan.analyzer.constants.ConstantValue calcConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean,boolean,java.util.BitSet) -> a
    440:441:java.util.List calcDefChainNode(java.util.List,java.util.List,java.util.BitSet) -> a
    445:459:java.util.Set calcConstantValue(java.util.List,java.util.List,cn.com.codesec.parse.ir.IROperators,java.util.BitSet) -> a
    463:507:java.lang.Boolean compareMaxMinValue(java.util.Set,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.scan.metadata.Type) -> a
    511:554:boolean compare(java.util.Set,java.lang.Number,cn.com.codesec.parse.ir.IROperators) -> a
    559:656:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    660:664:boolean isEqualsMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    668:672:boolean isGetPropertyMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    677:681:boolean isLengthMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> e
    685:689:boolean isGetClassMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    693:697:boolean isStringCharAtMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> f
    701:713:boolean isStringCharAtMethod(cn.com.codesec.scan.metadata.FunMeta) -> a
    717:729:boolean isLengthMethod(cn.com.codesec.scan.metadata.FunMeta) -> b
    734:747:boolean isEqualsMethod(cn.com.codesec.scan.metadata.FunMeta) -> c
    751:774:boolean isGetPropertyMethod(cn.com.codesec.scan.metadata.FunMeta) -> d
    778:786:boolean isGetClassMethod(cn.com.codesec.scan.metadata.FunMeta) -> e
    790:801:java.util.List getParameterTypes(cn.com.codesec.scan.metadata.FunMeta) -> f
    805:808:java.lang.String getTypeMetaName(cn.com.codesec.scan.metadata.TypeMeta) -> a
    813:824:java.lang.String getTypeName(cn.com.codesec.scan.metadata.Type) -> a
    829:829:java.util.Set resolveReturnValue(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> a
    838:849:cn.com.codesec.scan.analyzer.constants.ConstantValue getArrayInitConstant(cn.com.codesec.scan.ir.nodes.IRFunCall) -> g
    854:902:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    906:906:java.util.Set resolve(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.StorageMeta) -> a
    911:919:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    924:944:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    948:953:java.util.Set resolveParamValue(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> a
    957:980:java.util.List toNodes(java.util.Set) -> a
    984:1002:java.util.Set getValues(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    1006:1010:java.util.Set getValues(java.util.List) -> b
    1037:1393:cn.com.codesec.scan.analyzer.constants.ConstantValue calcConstantValue(cn.com.codesec.parse.ir.IROperators,cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.analyzer.constants.ConstantValue,java.util.BitSet) -> a
    1397:1397:cn.com.codesec.scan.analyzer.constants.ConstantValue createConstantValue(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> b
    1401:1401:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder getConservativeBuilder(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    1427:1427:boolean isSymbolicConstant(cn.com.codesec.scan.metadata.StorageMeta) -> a
    302:302:java.util.List access$0(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,java.util.List,java.util.List,java.util.List,java.util.BitSet) -> a
    1:1:boolean access$1(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.model.AccessPath) -> a
    439:439:java.util.List access$2(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,java.util.List,java.util.List,java.util.BitSet) -> a
    56:56:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> e
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$1 -> cn.com.codesec.vy:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver this$0 -> a
    cn.com.codesec.scan.model.AccessPath val$extraction -> b
    1:204:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    207:207:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeBuilder -> cn.com.codesec.vz:
    1493:1494:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    1498:1498:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder -> cn.com.codesec.vA:
    1505:1506:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    1510:1538:void readL(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder$1 -> cn.com.codesec.vB:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder this$1 -> a
    1:1512:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder) -> <init>
    1515:1515:void setVar(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$KillDef,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1519:1519:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder$2 -> cn.com.codesec.vC:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder this$1 -> a
    1:1527:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConservativeUseDefFinder) -> <init>
    1530:1530:void setVar(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$KillDef,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1534:1534:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantTerminal -> cn.com.codesec.vD:
    cn.com.codesec.scan.analyzer.constants.ConstantValue value -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver this$0 -> b
    1463:1465:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> <init>
    1469:1476:boolean equals(java.lang.Object) -> equals
    1481:1481:int hashCode() -> hashCode
    1486:1486:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder -> cn.com.codesec.vE:
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> c
    cn.com.codesec.scan.util.collections.GMultiMap callDefs -> d
    1938:1941:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    1944:1944:java.util.List getCallDefs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1949:1949:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
    1955:1964:cn.com.codesec.scan.analyzer.util.Location getLocForParameter(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    1952:1952:cn.com.codesec.scan.analyzer.util.Location access$0(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    1935:1935:cn.com.codesec.scan.util.collections.GMultiMap access$1(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder$UseDefFinder -> cn.com.codesec.vF:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder this$1 -> a
    1969:1971:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    1975:1981:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse addUse(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    1986:2029:void readL(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    2033:2132:void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1969:1969:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder$UseDefFinder) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder$UseDefFinder$1 -> cn.com.codesec.vG:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder$UseDefFinder this$2 -> a
    1:2017:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder$UseDefFinder) -> <init>
    2021:2021:void setVar(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$KillDef,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    2025:2025:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef -> cn.com.codesec.vH:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse listUse -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse indexUse -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var previous -> d
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VAR_ASSIGNER_ASSIGN_READ -> c
    1768:1779:void <clinit>() -> <clinit>
    1761:1761:cn.com.codesec.scan.analyzer.util.Ssi$Var getPrevious() -> a
    1765:1766:void setPrevious(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1781:1784:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse) -> <init>
    cn.com.codesec.scan.model.AccessPath getPath() -> b
    java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
    1758:1758:void access$0(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$1 -> cn.com.codesec.vI:
    1:1768:void <init>() -> <init>
    1771:1772:void setVar(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Read,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1776:1776:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Complete -> cn.com.codesec.vJ:
    1793:1794:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse) -> <init>
    1798:1798:cn.com.codesec.scan.model.AccessPath getPath() -> b
    1803:1803:java.lang.String toString() -> toString
    1810:1821:java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial -> cn.com.codesec.vK:
    cn.com.codesec.scan.model.AccessPath path -> d
    1831:1833:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.model.AccessPath) -> <init>
    1837:1837:cn.com.codesec.scan.model.AccessPath getPath() -> b
    1842:1842:java.lang.String toString() -> toString
    1849:1886:java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial$1 -> cn.com.codesec.vL:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial this$2 -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver val$constantValueResolver -> b
    1:1861:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1864:1864:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial$2 -> cn.com.codesec.vM:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial this$2 -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver val$constantValueResolver -> b
    1:1876:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Partial,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1879:1882:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef$Read -> cn.com.codesec.vN:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef def -> a
    1895:1897:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ElementFunctionDef) -> <init>
    1901:1901:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse -> cn.com.codesec.vO:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner ASSIGNER -> a
    cn.com.codesec.scan.model.AccessPath path -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> c
    1918:1929:void <clinit>() -> <clinit>
    1913:1915:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
    1911:1911:cn.com.codesec.scan.analyzer.util.Ssi$Var access$0(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse) -> a
    1910:1910:cn.com.codesec.scan.model.AccessPath access$1(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse) -> b
    1911:1911:void access$2(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse$1 -> cn.com.codesec.vP:
    1:1918:void <init>() -> <init>
    1921:1922:void setVar(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1926:1926:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$KillDef -> cn.com.codesec.vQ:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] path -> a
    1545:1547:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef -> cn.com.codesec.vR:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse listUse -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse indexUse -> b
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse valueUse -> c
    cn.com.codesec.java.rules.ListRule$ListOpSubRule listRule -> d
    cn.com.codesec.scan.analyzer.util.Ssi$Var previous -> e
    1581:1581:cn.com.codesec.scan.analyzer.util.Ssi$Var getPrevious() -> a
    1585:1586:void setPrevious(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1588:1593:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.java.rules.ListRule$ListOpSubRule) -> <init>
    cn.com.codesec.scan.model.AccessPath getPath() -> b
    java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Complete -> cn.com.codesec.vS:
    1602:1603:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.java.rules.ListRule$ListOpSubRule) -> <init>
    1607:1607:cn.com.codesec.scan.model.AccessPath getPath() -> b
    1612:1612:java.lang.String toString() -> toString
    1618:1655:java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial -> cn.com.codesec.vT:
    cn.com.codesec.scan.model.AccessPath path -> e
    1665:1667:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$GenericUse,cn.com.codesec.java.rules.ListRule$ListOpSubRule,cn.com.codesec.scan.model.AccessPath) -> <init>
    1671:1671:cn.com.codesec.scan.model.AccessPath getPath() -> b
    1676:1676:java.lang.String toString() -> toString
    1682:1746:java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial$1 -> cn.com.codesec.vU:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial this$2 -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver val$constantValueResolver -> b
    1:1721:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1724:1724:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial$2 -> cn.com.codesec.vV:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial this$2 -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver val$constantValueResolver -> b
    1:1736:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ListFunctionDef$Partial,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1739:1742:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$SimpleResolver -> cn.com.codesec.vW:
    1553:1554:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder) -> <init>
    1558:1558:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1563:1563:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver getCvr() -> c
    1552:1552:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$SimpleResolver) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$UnresolvedNode -> cn.com.codesec.vX:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver this$0 -> a
    1441:1441:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> <init>
    1445:1445:int hashCode() -> hashCode
    1450:1450:boolean equals(java.lang.Object) -> equals
    1455:1455:java.lang.String toString() -> toString
    1441:1441:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$UnresolvedNode) -> <init>
cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator -> cn.com.codesec.vY:
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator EQUALS -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator STRINGLENGTH -> b
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator CHARAT -> c
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator LISTGET -> d
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator LISTADD -> e
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator LISTREMOVE -> f
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator GETPROPERTY1 -> g
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator GETPROPERTY2 -> h
    java.util.BitSet EMPTY -> i
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator[] ENUM$VALUES -> j
    1015:1030:void <clinit>() -> <clinit>
    1013:1013:void <init>(java.lang.String,int) -> <init>
    1025:1027:java.util.BitSet getBitSet() -> a
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$VirtualOperator valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.constants.Debug -> cn.com.codesec.vZ:
    boolean enabled -> a
    boolean verbose -> b
    java.io.PrintStream out -> c
    29:57:void <init>() -> <init>
    60:60:boolean enabled() -> a
    64:64:boolean verbose() -> b
    68:81:void write(java.lang.String,boolean) -> a
    84:85:void write(java.lang.String) -> a
    88:89:void write(java.lang.Object,boolean) -> a
    92:99:void write(java.util.Map) -> a
    102:107:void stateOfWorldPart1(java.util.concurrent.ConcurrentMap) -> a
    110:114:void stateOfWorldPart2(cn.com.codesec.scan.analyzer.constants.ConstantPropagator$Worker,cn.com.codesec.scan.backend.BackEnd) -> a
cn.com.codesec.scan.analyzer.constants.EnumConstant -> cn.com.codesec.wa:
    cn.com.codesec.scan.metadata.Type enumType -> a
    java.lang.String enumeratorName -> b
    cn.com.codesec.scan.meta.Symbol symbol -> c
    cn.com.codesec.scan.meta.Symbol needSymbol -> d
    18:18:java.lang.String toString() -> toString
    26:27:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    30:30:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    33:36:void <init>(cn.com.codesec.scan.metadata.Type,java.lang.String) -> <init>
    41:41:cn.com.codesec.scan.meta.Symbol getNeedSymbol() -> b
    45:46:void setNeedSymbol(cn.com.codesec.scan.meta.Symbol) -> b
    50:50:cn.com.codesec.scan.analyzer.constants.EnumConstant copy() -> c
    54:54:java.lang.String getEnumeratorName() -> e
    58:58:cn.com.codesec.scan.metadata.Type getEnumType() -> f
    63:68:int hashCode() -> hashCode
    72:75:cn.com.codesec.scan.meta.Language getLanguage() -> g
    79:81:java.lang.String getDisplayString() -> i
    86:92:cn.com.codesec.scan.metadata.FieldMeta getFieldMeta() -> j
    97:127:java.util.Set getConstantValues() -> h
    133:161:boolean matchesValueFromRule(java.lang.String) -> a
    166:188:boolean equals(java.lang.Object) -> equals
    193:211:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    216:216:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.FloatingPointConstant -> cn.com.codesec.wb:
    double value -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    10:10:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    14:15:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:21:void <init>(double) -> <init>
    24:24:double doubleValue() -> b
    28:28:long bits() -> c
    33:33:java.lang.String toString() -> toString
    39:42:boolean matchesValueFromRule(java.lang.String) -> a
    48:54:int hashCode() -> hashCode
    59:73:boolean equals(java.lang.Object) -> equals
    78:92:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    97:97:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.FunctionPointerConstant -> cn.com.codesec.wc:
    cn.com.codesec.scan.metadata.FunMeta target -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    10:10:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    14:15:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:23:int hashCode() -> hashCode
    28:45:boolean equals(java.lang.Object) -> equals
    51:53:void <init>(cn.com.codesec.scan.metadata.FunMeta) -> <init>
    56:56:cn.com.codesec.scan.metadata.FunMeta getTarget() -> b
    61:61:boolean matchesValueFromRule(java.lang.String) -> a
    66:66:java.lang.String toString() -> toString
    71:85:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    90:90:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.IntegerConstant -> cn.com.codesec.wd:
    cn.com.codesec.scan.analyzer.constants.IntegerConstant ZERO -> a
    cn.com.codesec.scan.analyzer.constants.IntegerConstant ONE -> b
    long value -> c
    cn.com.codesec.scan.meta.Symbol symbol -> d
    106:108:void <clinit>() -> <clinit>
    13:17:int hashCode() -> hashCode
    22:36:boolean equals(java.lang.Object) -> equals
    43:43:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    47:48:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    50:52:void <init>(long) -> <init>
    54:56:void <init>(int) -> <init>
    59:59:int intValue() -> b
    63:63:long longValue() -> c
    68:68:java.lang.String toString() -> toString
    74:77:boolean matchesValueFromRule(java.lang.String) -> a
    83:97:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    102:102:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.NullConstant -> cn.com.codesec.we:
    cn.com.codesec.scan.analyzer.constants.NullConstant INSTANCE -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    79:80:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    12:12:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    16:17:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    21:21:java.lang.String toString() -> toString
    26:26:boolean matchesValueFromRule(java.lang.String) -> a
    31:34:int hashCode() -> hashCode
    39:51:boolean equals(java.lang.Object) -> equals
    56:66:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    71:71:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    75:75:java.lang.Object readResolve() -> readResolve
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.StringConstant -> cn.com.codesec.wf:
    java.lang.String value -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    9:9:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    13:14:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:21:void <init>(java.lang.String) -> <init>
    24:24:java.lang.String getValue() -> b
    29:29:int hashCode() -> hashCode
    34:34:java.lang.String toString() -> toString
    39:39:boolean matchesValueFromRule(java.lang.String) -> a
    44:44:boolean equals(java.lang.Object) -> equals
    49:63:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    68:68:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.SymbolicConstant -> cn.com.codesec.wg:
    java.lang.String name -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    12:12:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    16:17:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:21:void <init>(java.lang.String) -> <init>
    24:24:java.lang.String getName() -> b
    29:33:int hashCode() -> hashCode
    38:38:java.lang.String toString() -> toString
    43:43:boolean matchesValueFromRule(java.lang.String) -> a
    48:65:boolean equals(java.lang.Object) -> equals
    70:84:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    89:89:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.UnknownConstantValue -> cn.com.codesec.wh:
    cn.com.codesec.scan.analyzer.constants.UnknownConstantValue INSTANCE -> a
    57:58:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    15:15:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:19:java.lang.String toString() -> toString
    24:24:boolean matchesValueFromRule(java.lang.String) -> a
    29:29:int hashCode() -> hashCode
    34:34:boolean equals(java.lang.Object) -> equals
    39:44:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    49:49:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    53:53:java.lang.Object readResolve() -> readResolve
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.UnresolvableConstant -> cn.com.codesec.wi:
    cn.com.codesec.scan.analyzer.constants.UnresolvableConstant INSTANCE -> a
    57:58:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    15:15:void setSymbol(cn.com.codesec.scan.meta.Symbol) -> a
    19:19:java.lang.String toString() -> toString
    24:24:boolean matchesValueFromRule(java.lang.String) -> a
    29:29:int hashCode() -> hashCode
    34:34:boolean equals(java.lang.Object) -> equals
    39:44:int compareTo(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    49:49:cn.com.codesec.scan.analyzer.constants.ConstantValueEnum getConstantValueEnum() -> d
    53:53:java.lang.Object readResolve() -> readResolve
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver -> cn.com.codesec.wj:
    int MAX_SET_SIZE -> a
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder builder -> b
    long MAX_TIME_PER_EXPR -> c
    boolean timeExpired -> i
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> j
    228:232:void <clinit>() -> <clinit>
    47:66:java.util.Set getFragments(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    70:72:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver create(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet) -> a
    76:79:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder) -> <init>
    83:84:void timeExpired() -> a
    88:92:void resolveDefsHook(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    96:96:boolean useFixedPointResolution() -> l_
    102:105:java.util.Collection filter(java.util.List) -> a
    110:110:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode getDefaultDef() -> b
    116:133:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    138:149:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    154:158:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    163:184:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    188:201:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment toFragment(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    205:212:java.util.Set toFragments(java.util.List) -> c
    216:223:java.util.List toNodes(java.util.Collection) -> a
    41:41:int access$0() -> d
    204:204:java.util.Set access$1(java.util.List) -> b
    215:215:java.util.List access$2(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver,java.util.Collection) -> a
    39:39:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> e
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder -> cn.com.codesec.wk:
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> c
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet rules -> d
    cn.com.codesec.scan.util.collections.GMultiMap callDefs -> e
    357:361:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet) -> <init>
    364:364:java.util.List getCallDefs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    369:369:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
    375:384:cn.com.codesec.scan.analyzer.util.Location getLocForParameter(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    353:353:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet access$0(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder) -> a
    372:372:cn.com.codesec.scan.analyzer.util.Location access$1(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    354:354:cn.com.codesec.scan.util.collections.GMultiMap access$2(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder) -> b
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder$UseDefFinder -> cn.com.codesec.wl:
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder this$1 -> a
    389:391:void <init>(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    395:419:void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    389:389:void <init>(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FragmentBuilder$UseDefFinder) -> <init>
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FunctionDef -> cn.com.codesec.wm:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner ASSIGNER -> a
    java.util.List in -> b
    cn.com.codesec.scan.model.AccessPath path -> c
    321:322:void <clinit>() -> <clinit>
    271:274:void <init>(java.util.List,cn.com.codesec.scan.model.AccessPath) -> <init>
    277:300:java.util.Set concatSegments(java.util.List) -> a
    304:317:java.util.List toTerminals(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver) -> a
    303:303:java.util.List access$0(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$FunctionDef,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver) -> a
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse -> cn.com.codesec.wn:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner ASSIGNER -> a
    cn.com.codesec.scan.model.AccessPath path -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> c
    336:347:void <clinit>() -> <clinit>
    331:333:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
    329:329:cn.com.codesec.scan.analyzer.util.Ssi$Var access$0(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse) -> a
    328:328:cn.com.codesec.scan.model.AccessPath access$1(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse) -> b
    329:329:void access$2(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse$1 -> cn.com.codesec.wo:
    1:336:void <init>() -> <init>
    339:340:void setVar(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$GenericUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    344:344:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$StringFragmentTerminal -> cn.com.codesec.wp:
    cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment fragment -> b
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver this$0 -> a
    238:240:void <init>(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver,cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment) -> <init>
    244:251:boolean equals(java.lang.Object) -> equals
    256:256:int hashCode() -> hashCode
    261:261:java.lang.String toString() -> toString
    238:238:void <init>(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver,cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$StringFragmentTerminal) -> <init>
    236:236:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment access$1(cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver$StringFragmentTerminal) -> a
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRule -> cn.com.codesec.wq:
    cn.com.codesec.scan.model.ParameterLocation[] in -> a
    cn.com.codesec.scan.model.ParameterLocation[] out -> b
    15:16:void <init>(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation) -> <init>
    18:21:void <init>(cn.com.codesec.scan.model.ParameterLocation[],cn.com.codesec.scan.model.ParameterLocation[]) -> <init>
cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet -> cn.com.codesec.wr:
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet JAVA_RULES -> a
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet EMPTY_RULES -> b
    java.util.List rules -> c
    84:86:void <clinit>() -> <clinit>
    29:32:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet getRulesForLanguage(cn.com.codesec.scan.meta.Language) -> a
    35:37:void <init>() -> <init>
    40:48:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRule getRule(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    52:53:void add(cn.com.codesec.java.rules.Identifier,cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRule) -> a
    56:56:java.lang.Object[] l(java.lang.Object[]) -> a
    60:80:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentRuleSet initJavaRules() -> a
cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment -> cn.com.codesec.ws:
    cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment UNKNOWN -> a
    cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment EMPTY_STRING -> b
    java.util.Set fragments -> c
    boolean complete -> d
    107:109:void <clinit>() -> <clinit>
    19:19:boolean isComplete() -> a
    23:23:java.util.Set getFragments() -> b
    27:33:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment flattenFragments(java.util.Set) -> a
    37:37:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment createComplete(java.lang.String) -> a
    41:44:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment create(java.util.Set,boolean) -> a
    47:50:void <init>(java.util.Set,boolean) -> <init>
    54:79:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment append(cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment) -> a
    84:91:boolean equals(java.lang.Object) -> equals
    96:98:int hashCode() -> hashCode
    103:103:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragmentAnalysis -> cn.com.codesec.wt:
    11:11:void <init>() -> <init>
    14:16:cn.com.codesec.scan.analyzer.constants.stringfragment.StringFragment getFlattenedFragments(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.constraints.AbstractRenamer -> cn.com.codesec.wu:
    java.util.HashSet exclusedList -> a
    16:18:void <init>() -> <init>
    22:22:boolean rename(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> a
    27:27:boolean rename(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    32:33:void addExcludedSsiLoc(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> b
    37:38:void removeExcludedSsiLoc(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> c
cn.com.codesec.scan.analyzer.constraints.ConstraintOperator -> cn.com.codesec.wv:
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator LT -> a
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator GT -> b
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator LTE -> c
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator GTE -> d
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator EQ -> e
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator NEQ -> f
    java.lang.String stringRep -> h
    boolean $assertionsDisabled -> g
    cn.com.codesec.scan.analyzer.constraints.ConstraintOperator[] ENUM$VALUES -> i
    7:14:void <clinit>() -> <clinit>
    18:20:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    28:47:cn.com.codesec.scan.analyzer.constraints.ConstraintOperator getInverse() -> a
    51:70:cn.com.codesec.scan.analyzer.constraints.ConstraintOperator getOpposite() -> b
    74:74:boolean isInequality() -> c
    1:1:cn.com.codesec.scan.analyzer.constraints.ConstraintOperator[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.constraints.ConstraintOperator valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.constraints.DummyRenamer -> cn.com.codesec.ww:
    7:7:void <init>() -> <init>
cn.com.codesec.scan.analyzer.constraints.Renamer -> cn.com.codesec.wx:
    boolean rename(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    boolean rename(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> a
    void addExcludedSsiLoc(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> b
    void removeExcludedSsiLoc(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> c
cn.com.codesec.scan.analyzer.constraints.ShadowField -> cn.com.codesec.wy:
    cn.com.codesec.scan.util.Canonicalizer canonicalizer -> k
    cn.com.codesec.scan.analyzer.constraints.ShadowField SIZE -> a
    cn.com.codesec.scan.analyzer.constraints.ShadowField OFFSET -> b
    cn.com.codesec.scan.analyzer.constraints.ShadowField STRLEN -> c
    cn.com.codesec.scan.analyzer.constraints.ShadowField ISNULL -> d
    cn.com.codesec.scan.analyzer.constraints.ShadowField VALUE -> e
    cn.com.codesec.scan.analyzer.constraints.ShadowField UNBOUNDED -> f
    java.lang.String name -> g
    int width -> h
    boolean signed -> i
    boolean reportAsSigned -> j
    109:116:void <clinit>() -> <clinit>
    27:27:cn.com.codesec.scan.analyzer.constraints.ShadowField mk(java.lang.String,int,boolean) -> a
    31:31:cn.com.codesec.scan.analyzer.constraints.ShadowField mk(java.lang.String,int,boolean,boolean) -> a
    38:38:cn.com.codesec.scan.analyzer.constraints.ShadowField mkoffset(java.lang.String,int,boolean,boolean) -> b
    42:43:void <init>(java.lang.String,int,boolean) -> <init>
    45:50:void <init>(java.lang.String,int,boolean,boolean) -> <init>
    53:53:java.lang.Object readResolve() -> readResolve
    57:57:org.apache.commons.lang3.tuple.Triple getTypeMatrix(cn.com.codesec.scan.metadata.Type) -> a
    61:61:org.apache.commons.lang3.tuple.Triple getTypeMatrix() -> a
    66:66:java.lang.String toString() -> toString
    71:71:int compareTo(cn.com.codesec.scan.analyzer.constraints.ShadowField) -> a
    75:82:java.lang.String toDebugString() -> b
    87:94:boolean equals(java.lang.Object) -> equals
    98:98:java.lang.String getName(java.lang.String) -> a
    103:105:int hashCode() -> hashCode
    1:1:int compareTo(java.lang.Object) -> compareTo
    41:41:void <init>(java.lang.String,int,boolean,cn.com.codesec.scan.analyzer.constraints.ShadowField) -> <init>
cn.com.codesec.scan.analyzer.constraints.ShadowField$Storage -> cn.com.codesec.wz:
    int storageSize -> k
    123:125:void <init>(int) -> <init>
cn.com.codesec.scan.analyzer.constraints.ShadowField$Value -> cn.com.codesec.wA:
    boolean $assertionsDisabled -> k
    128:128:void <clinit>() -> <clinit>
    131:132:void <init>(int,boolean) -> <init>
    135:136:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    140:140:java.lang.String getName(java.lang.String) -> a
    144:148:boolean isSigned(cn.com.codesec.scan.metadata.Type) -> b
    152:162:int getBitLength(cn.com.codesec.scan.metadata.Type) -> c
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer -> cn.com.codesec.wB:
    boolean ENABLE_WRAPPER_DETECTION -> k
    boolean ENABLE_NESTED_WRAPPERS -> l
    java.util.Set UNANALYZABLE_MAP_OPS -> m
    java.util.Set WRAPPERS -> n
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> a
    cn.com.codesec.scan.metadata.FunMeta context -> b
    cn.com.codesec.scan.backend.BackEnd backEnd -> c
    cn.com.codesec.scan.analyzer.taint.model.TaintModel model -> d
    cn.com.codesec.scan.analyzer.taint.model.Debug$Visit debug -> e
    cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile profile -> f
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver resolvr -> g
    cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory tpnFactory -> h
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired MAPKEYS_REQUIRED -> o
    java.util.Comparator CALL_SORT -> p
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$UseBuilder pathUseBuilder -> i
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VAR_ASSIGNER_PATH_USE -> j
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VarAssigner_BaseUse -> q
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$taint$model$MapFunctionProfile$MapOpType -> r
    175:204:void <clinit>() -> <clinit>
    100:109:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.backend.BackEnd,cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> <init>
    112:115:java.util.List getCachedTargetsForCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    120:130:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapCallAnalyzer mkMapCallAnalyzer(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,boolean,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> a
    136:139:cn.com.codesec.parse.ir.SourceLocation getCallSiteSourceLocation(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef mkPassthroughDef(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,boolean,boolean,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef mkMapDef(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    150:162:cn.com.codesec.scan.model.LocationInfo getReportable(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    166:166:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner getVarAssignerBAseUse() -> b
    170:171:void setVarAssignerBAseUse(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    84:84:java.util.Set access$0() -> c
    82:82:boolean access$1() -> d
    83:83:boolean access$2() -> e
    85:85:java.util.Set access$3() -> f
    94:94:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired access$4() -> g
    80:80:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$taint$model$MapFunctionProfile$MapOpType() -> h
    101:101:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse lambda$0(cn.com.codesec.scan.analyzer.util.Location) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$1 -> cn.com.codesec.wC:
    1:182:void <init>() -> <init>
    185:186:void setVar(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    190:190:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$2 -> cn.com.codesec.wD:
    1:193:void <init>() -> <init>
    196:197:void setVar(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    201:201:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AbstractDataflowSsiBuilder -> cn.com.codesec.wE:
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer aa -> b
    java.util.Map dfreads -> a
    1192:1195:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String,cn.com.codesec.scan.analyzer.taint.ProfileCache,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> <init>
    1198:1198:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer getAliasAnalyzer() -> a
    1202:1205:void addRead(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AdditiveDef -> cn.com.codesec.wF:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    926:928:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    932:932:boolean requiresBaseFlowResolution() -> a
    937:938:void resolveBaseFlow(java.util.List,java.util.List) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasableDef -> cn.com.codesec.wG:
    cn.com.codesec.scan.analyzer.util.DefLocation loc -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> b
    795:797:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.util.DefLocation) -> <init>
    800:800:cn.com.codesec.scan.analyzer.util.Location getDefLoc() -> b
    804:804:cn.com.codesec.scan.model.AccessPath getDefPath() -> c
    808:808:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc() -> d
    812:812:cn.com.codesec.scan.analyzer.util.DefLocation getDefLocationObject() -> e
    816:826:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode wrapAliasNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    831:842:java.util.List resolveDefFlow(java.util.List) -> a
    cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    791:791:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer access$0(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasableDef) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasableDef$1 -> cn.com.codesec.wH:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasableDef this$1 -> a
    cn.com.codesec.scan.model.AccessPath val$defPath -> b
    1:832:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasableDef,cn.com.codesec.scan.model.AccessPath) -> <init>
    835:840:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker -> cn.com.codesec.wI:
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer aa -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BufferingTracker nested -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> c
    boolean $assertionsDisabled -> d
    1316:1316:void <clinit>() -> <clinit>
    1321:1324:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BufferingTracker) -> <init>
    1327:1327:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BufferingTracker unaliased() -> a
    1331:1331:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse addAliasedUse(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$UseBuilder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1336:1350:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse addAliasedUse(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$UseBuilder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1354:1355:void addAliasedDefs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DefBuilder) -> a
    1358:1365:void addAliasedDefs(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DefBuilder) -> a
    1368:1379:void addDef(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DefBuilder) -> a
    1382:1383:void flush() -> b
    1386:1386:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer getAliasAnalyzer() -> c
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef -> cn.com.codesec.wJ:
    cn.com.codesec.scan.ir.nodes.IRLocation lhs -> d
    cn.com.codesec.scan.ir.nodes.IRExpression rhs -> e
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    946:950:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    953:953:cn.com.codesec.scan.ir.nodes.IRLocation getLhs() -> g
    957:957:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> h
    962:962:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    967:967:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    972:972:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse -> cn.com.codesec.wK:
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    761:763:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer) -> <init>
    766:766:cn.com.codesec.scan.analyzer.util.Ssi$Var getVar() -> a
    770:771:void setVar(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    775:775:java.util.List resolve() -> b
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BufferingTracker -> cn.com.codesec.wL:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker tracker -> c
    java.util.Set emptyDefs -> d
    cn.com.codesec.scan.util.collections.GMultiMap defsByBaseLoc -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> b
    1132:1136:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    1140:1141:void addDef(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1145:1146:void addUse(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1150:1151:void addDef(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    1155:1156:void dumpAll() -> a
    1159:1172:void flush() -> b
    1175:1183:void emitDefs(java.util.Map) -> a
    1:1:void addUse(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1:1:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1:1:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowDef -> cn.com.codesec.wM:
    779:779:void <init>() -> <init>
    782:783:java.util.List resolve(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
    java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    java.util.List resolveDefFlow(java.util.List) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowJoinDef -> cn.com.codesec.wN:
    java.util.List defs -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    1107:1109:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,java.util.Collection) -> <init>
    1113:1117:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1122:1122:java.util.List resolveDefFlow(java.util.List) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver -> cn.com.codesec.wO:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    978:980:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowSsi) -> <init>
    984:984:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    989:989:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    993:996:java.util.List resolve(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1001:1005:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1011:1014:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1018:1018:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AliasNode mkAliasNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias,cn.com.codesec.parse.ir.SourceLocation) -> a
    1023:1026:java.util.List resolveDefs(cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    1030:1030:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AssignNode mkAssignNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AliasNode -> cn.com.codesec.wP:
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias alias -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver this$1 -> b
    1037:1040:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias) -> <init>
    1044:1044:int hashCode() -> hashCode
    1049:1056:boolean equals(java.lang.Object) -> equals
    1061:1061:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AssignNode -> cn.com.codesec.wQ:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef def -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver this$1 -> b
    1069:1073:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef) -> <init>
    1076:1076:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef getDef() -> a
    1081:1081:int hashCode() -> hashCode
    1086:1093:boolean equals(java.lang.Object) -> equals
    1098:1098:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowSsiBuilder -> cn.com.codesec.wR:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> b
    1210:1212:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    1214:1216:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> <init>
    1220:1220:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    1225:1225:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
    1230:1230:cn.com.codesec.scan.analyzer.dataflow.DataflowSsi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    1:1:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer getAliasAnalyzer() -> a
    1:1:void addRead(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse) -> a
    1:1:java.lang.Object mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> b
    1:1:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(java.lang.Object) -> a
    1:1:cn.com.codesec.scan.analyzer.util.Ssi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse -> cn.com.codesec.wS:
    752:752:void <init>() -> <init>
    java.util.List resolve() -> b
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUseDefFinder -> cn.com.codesec.wT:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AbstractDataflowSsiBuilder builder -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker tracker -> c
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> a
    1239:1242:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AbstractDataflowSsiBuilder,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> <init>
    1245:1245:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker getTracker() -> a
    1250:1253:void assign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    1256:1257:void doAssign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    1260:1260:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef mkAssignDef(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1265:1268:void read(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1271:1286:void doRead(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    1289:1289:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse mkReadUse(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1294:1297:void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1300:1300:void doCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    1303:1313:void doNestedExprs(cn.com.codesec.scan.ir.nodes.IRLocation) -> c
    1256:1256:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef lambda$0(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> b
    1283:1283:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse lambda$1(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.util.Location) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DefBuilder -> cn.com.codesec.wU:
    cn.com.codesec.scan.analyzer.util.Ssi$DefC build(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> build
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapCallAnalyzer -> cn.com.codesec.wV:
    cn.com.codesec.scan.ir.nodes.IRFunCall call -> a
    cn.com.codesec.scan.metadata.FunMeta targetFun -> b
    boolean targetIsGenerated -> c
    cn.com.codesec.scan.analyzer.taint.model.MapParameter mapP -> d
    cn.com.codesec.scan.analyzer.taint.model.MapParameter valP -> e
    cn.com.codesec.java.rules.MapRule$MapOpSubRule maprule -> f
    cn.com.codesec.scan.analyzer.callgraph.CallTarget tgt -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker tracker -> h
    cn.com.codesec.scan.model.ParameterLocation mapPL -> i
    cn.com.codesec.scan.analyzer.util.Location mapL -> j
    cn.com.codesec.scan.analyzer.constants.ConstantValue key -> k
    cn.com.codesec.scan.model.ParameterLocation valPL -> l
    cn.com.codesec.scan.analyzer.taint.model.MapParameter keyP -> m
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subpath -> n
    cn.com.codesec.scan.analyzer.taint.model.MapParameter mapR -> o
    cn.com.codesec.scan.analyzer.taint.model.MapParameter keyR -> p
    cn.com.codesec.scan.analyzer.util.Location valL -> q
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> r
    boolean $assertionsDisabled -> s
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$dataflow$DataflowAnalyzer$MapKeysRequired -> t
    234:234:void <clinit>() -> <clinit>
    257:275:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,boolean,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> <init>
    278:284:boolean analyze() -> a
    288:293:boolean fail() -> b
    297:305:boolean placeUseDefChecked() -> c
    void placeUseDef() -> d
    boolean placeUDSanityChecks() -> e
    314:324:boolean analyzeOperation() -> f
    328:330:void resolveVal() -> g
    333:333:boolean success() -> h
    337:340:void resolveMap() -> i
    343:343:boolean wrapperCandidate() -> p
    347:358:void makeWrapper() -> q
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile generateWrapper(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    363:369:boolean mapProfileMatchesCandidate() -> r
    373:375:void resolveKey() -> j
    378:405:boolean ignoreMapOperation() -> s
    409:409:cn.com.codesec.scan.analyzer.taint.model.PassthroughNode getPassthroughNode() -> k
    boolean wrapperCandidateSpecificChecks() -> l
    cn.com.codesec.scan.analyzer.taint.model.MapParameter opRuleValue() -> m
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType mapOpType() -> n
    234:234:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$dataflow$DataflowAnalyzer$MapKeysRequired() -> o
    353:353:java.lang.String lambda$0() -> t
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapCallAnalyzer$1 -> cn.com.codesec.wW:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapCallAnalyzer this$1 -> a
    1:409:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapCallAnalyzer) -> <init>
    412:412:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    417:417:cn.com.codesec.java.rules.SKYRule getRule() -> b
    422:422:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    427:427:float getConfidence() -> d
    432:432:int getDepth() -> e
    437:437:boolean isAliasing() -> f
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapGetAnalyzer -> cn.com.codesec.wX:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> t
    451:453:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,boolean,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> <init>
    457:457:boolean placeUDSanityChecks() -> e
    463:483:void placeUseDef() -> d
    487:490:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile generateWrapper(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    495:495:boolean wrapperCandidateSpecificChecks() -> l
    500:500:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType mapOpType() -> n
    505:505:cn.com.codesec.scan.analyzer.taint.model.MapParameter opRuleValue() -> m
    510:527:boolean resultReturnedUnmodified() -> p
    451:451:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,boolean,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapGetAnalyzer) -> <init>
    479:480:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef lambda$0(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    479:479:java.lang.String lambda$1(cn.com.codesec.scan.analyzer.util.DefLocation) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapGetAnalyzer$VarUseCounter -> cn.com.codesec.wY:
    cn.com.codesec.scan.ir.nodes.IRVarDecl varDecl -> b
    int numUses -> c
    int numDirectReturns -> d
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapGetAnalyzer this$1 -> a
    536:540:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapGetAnalyzer,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    544:548:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Void) -> a
    553:558:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Void) -> a
    562:562:cn.com.codesec.scan.ir.nodes.IRVarDecl getVarDecl() -> c
    566:566:int getNumUses() -> a
    570:571:void setNumUses(int) -> a
    574:574:int getNumDirectReturns() -> b
    578:579:void setNumDirectReturns(int) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired -> cn.com.codesec.wZ:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired NEVER -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired STATICFILED -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired CLASSRULE -> c
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired GLOBALS -> d
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired ALWAYS -> e
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired[] ENUM$VALUES -> f
    206:212:void <clinit>() -> <clinit>
    206:206:void <init>(java.lang.String,int) -> <init>
    215:229:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired fromProperty() -> b
    1:1:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired valueOf(java.lang.String) -> valueOf
    214:214:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapKeysRequired access$2() -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer -> cn.com.codesec.xa:
    cn.com.codesec.scan.analyzer.taint.model.MapParameter valR -> u
    cn.com.codesec.scan.analyzer.taint.model.TaintPath keysetSubpath -> v
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> t
    588:592:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,boolean,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> <init>
    596:596:boolean placeUDSanityChecks() -> e
    601:605:void placeUseDef() -> d
    609:629:void generateValueUseDefs() -> p
    633:656:void generateKeyUseDefs() -> q
    660:667:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile generateWrapper(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    672:672:boolean wrapperCandidateSpecificChecks() -> l
    677:679:void resolveVal() -> g
    683:683:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType mapOpType() -> n
    688:688:cn.com.codesec.scan.analyzer.taint.model.MapParameter opRuleValue() -> m
    692:692:cn.com.codesec.scan.analyzer.taint.model.PassthroughNode getKeysetPassthroughNode() -> r
    586:586:cn.com.codesec.scan.analyzer.taint.model.TaintPath access$0(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer) -> a
    588:588:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,boolean,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer) -> <init>
    625:626:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef lambda$0(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    652:653:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef lambda$2(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    625:625:java.lang.String lambda$1(cn.com.codesec.scan.analyzer.util.DefLocation) -> a
    652:652:java.lang.String lambda$3(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.util.Location) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer$1 -> cn.com.codesec.xb:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer this$1 -> a
    1:692:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$MapPutAnalyzer) -> <init>
    695:695:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    700:703:cn.com.codesec.java.rules.SKYRule getRule() -> b
    708:708:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    713:713:float getConfidence() -> d
    718:721:int getDepth() -> e
    726:726:boolean isAliasing() -> f
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef -> cn.com.codesec.xc:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse baseUse -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> c
    854:857:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    860:860:boolean isPartialDef() -> i
    864:864:boolean isCompleteDef() -> j
    868:868:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse getPrevUse() -> k
    872:877:boolean isWeakUpdate() -> h
    882:888:java.util.List resolve(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
    892:892:java.util.List resolveBaseUse() -> l
    896:917:void resolveBaseFlow(java.util.List,java.util.List) -> a
    920:920:boolean requiresBaseFlowResolution() -> a
    850:850:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer access$0(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef$1 -> cn.com.codesec.xd:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef this$1 -> a
    cn.com.codesec.scan.model.AccessPath val$defPath -> b
    1:902:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef,cn.com.codesec.scan.model.AccessPath) -> <init>
    905:912:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse -> cn.com.codesec.xe:
    cn.com.codesec.scan.model.AccessPath path -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer this$0 -> c
    737:739:void <init>(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer,cn.com.codesec.scan.model.AccessPath) -> <init>
    743:744:java.util.List resolve() -> b
    748:749:void setVar(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$UseBuilder -> cn.com.codesec.xf:
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse build(cn.com.codesec.scan.analyzer.util.Location) -> build
cn.com.codesec.scan.analyzer.dataflow.DataflowSsi -> cn.com.codesec.xg:
    java.util.Map dfreads -> f
    19:21:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap,java.util.Map) -> <init>
    24:24:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse getDfRead(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver -> cn.com.codesec.xh:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi ssi -> d
    java.util.List defaultDef -> e
    cn.com.codesec.scan.ir.nodes.IRFunDecl func -> f
    java.util.Set complete -> a
    java.util.Map memo -> b
    java.lang.ThreadLocal memoModCount -> c
    java.util.Set working -> i
    java.util.Set limbo -> j
    boolean useFixedPointResolution -> k
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$NoFlowException NFE -> g
    java.util.Map pathIds -> l
    int pathIdCounter -> m
    boolean $assertionsDisabled -> h
    54:533:void <clinit>() -> <clinit>
    69:87:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    90:90:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver getCvr() -> c
    94:94:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode getDefaultDef() -> b
    98:98:java.util.List resolveDefs(cn.com.codesec.scan.ir.nodes.IRExpression) -> f
    102:117:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    121:121:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    125:125:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRAllocation) -> a
    129:138:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    142:147:java.util.List resolveDefs(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Read,cn.com.codesec.scan.model.AccessPath) -> a
    java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    155:155:boolean useFixedPointResolution() -> l_
    159:159:void resolveDefsHook(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    163:221:java.util.List resolveDefs(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
    226:226:boolean isMonotonicChange(java.util.Collection,java.util.Collection) -> a
    230:257:java.util.Collection merge(java.util.Collection,java.util.Collection) -> b
    261:265:java.util.List toList(java.util.Collection) -> a
    269:286:java.util.Collection filter(java.util.List) -> a
    290:290:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> c
    294:350:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    354:355:cn.com.codesec.scan.util.Twin resolvePartialUpdate(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Partial) -> a
    359:360:boolean isWeakUpdate(cn.com.codesec.scan.model.AccessPath) -> a
    365:378:cn.com.codesec.scan.model.AccessPath$Selector skipJSProtos(cn.com.codesec.scan.model.AccessPath$Selector,java.util.ListIterator) -> a
    383:391:boolean unwindIteratorForJS(cn.com.codesec.scan.model.AccessPath$Selector,java.util.ListIterator) -> b
    395:395:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity getIdentity(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    399:402:cn.com.codesec.scan.model.AccessPath checkAccessPath(cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    406:413:boolean kills(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> a
    417:417:boolean kills(cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    421:440:boolean isMoreSpecificPath(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> b
    444:444:cn.com.codesec.scan.analyzer.util.Location mkLoc(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider) -> a
    448:448:cn.com.codesec.scan.analyzer.util.Location mkLoc(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
    453:454:cn.com.codesec.scan.analyzer.util.Location mkLoc(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider) -> a
    458:458:cn.com.codesec.scan.model.AccessPath convertSsiAccessPath(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    462:462:boolean isZeroArrayIndex(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    466:477:cn.com.codesec.scan.model.AccessPath convertSsiAccessPath(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.meta.Language) -> a
    481:515:cn.com.codesec.scan.model.AccessPath convertSsiSelector(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver,cn.com.codesec.scan.meta.Language) -> a
    521:524:int getId(cn.com.codesec.scan.model.AccessPath) -> b
    528:529:void debug(java.lang.String) -> a
    520:520:int access$0(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath) -> a
    364:364:cn.com.codesec.scan.model.AccessPath$Selector access$1(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath$Selector,java.util.ListIterator) -> a
    382:382:boolean access$2(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath$Selector,java.util.ListIterator) -> b
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$1 -> cn.com.codesec.xi:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    1:72:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver) -> <init>
    75:75:java.lang.Integer initialValue() -> a
    1:1:java.lang.Object initialValue() -> initialValue
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$2 -> cn.com.codesec.xj:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Complete val$def -> b
    1:303:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Complete) -> <init>
    306:306:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$3 -> cn.com.codesec.xk:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Partial val$def2 -> b
    cn.com.codesec.scan.model.AccessPath val$composePath -> c
    1:316:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Partial,cn.com.codesec.scan.model.AccessPath) -> <init>
    319:319:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$4 -> cn.com.codesec.xl:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    cn.com.codesec.scan.model.AccessPath val$composePath -> b
    1:326:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    329:332:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Assign -> cn.com.codesec.xm:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign def -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    1087:1091:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign) -> <init>
    1095:1095:java.lang.String toString() -> toString
    1100:1107:boolean equals(java.lang.Object) -> equals
    1112:1112:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$ChainNodeBuilder -> cn.com.codesec.xn:
    540:540:void <init>() -> <init>
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    545:550:java.util.List apply(java.util.List) -> a
    554:560:void apply(java.util.List,java.util.List) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Compose -> cn.com.codesec.xo:
    cn.com.codesec.scan.model.AccessPath path -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    1156:1160:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath) -> <init>
    1164:1164:java.lang.String toString() -> toString
    1169:1176:boolean equals(java.lang.Object) -> equals
    1181:1181:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$ComposeBuilder -> cn.com.codesec.xp:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    606:608:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    612:612:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Declaration -> cn.com.codesec.xq:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Undefined def -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    1048:1050:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Undefined) -> <init>
    1054:1054:java.lang.String toString() -> toString
    1059:1074:boolean equals(java.lang.Object) -> equals
    1079:1079:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode -> cn.com.codesec.xr:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode prev -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode base -> b
    cn.com.codesec.scan.model.AccessPath composition -> f
    cn.com.codesec.scan.model.AccessPath extraction -> g
    cn.com.codesec.scan.model.AccessPath$Trie pathTrie -> c
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillField killChain -> h
    int len -> i
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity id -> j
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> d
    boolean $assertionsDisabled -> e
    685:685:void <clinit>() -> <clinit>
    696:713:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillField) -> <init>
    716:717:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DoExtractResult) -> <init>
    720:721:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
    724:725:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,org.apache.commons.lang3.tuple.Pair) -> <init>
    727:736:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath$Trie) -> <init>
    739:751:void checkForCycles() -> b
    754:754:cn.com.codesec.scan.model.AccessPath$Trie getPathTrie() -> c
    758:762:void toList(java.util.List) -> a
    765:765:java.lang.String pathToString() -> d
    769:770:java.lang.String pathToString(java.lang.String) -> a
    774:803:boolean isPathKilled(cn.com.codesec.scan.model.AccessPath) -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    816:816:java.lang.Iterable accessPaths() -> e
    821:859:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DoExtractResult doExtract(cn.com.codesec.scan.model.AccessPath) -> b
    863:863:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity getId() -> f
    867:868:void setId(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity) -> a
    871:871:int getLen() -> g
    875:875:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillField getKillChain() -> h
    879:879:cn.com.codesec.scan.model.AccessPath getExtraction() -> i
    883:883:cn.com.codesec.scan.model.AccessPath getComposition() -> j
    887:887:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode getBase() -> k
    891:891:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode getPrev() -> l
    715:715:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DoExtractResult,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
    696:696:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillField,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode$AccessPathIterator -> cn.com.codesec.xs:
    java.util.Iterator pathTrieIter -> a
    boolean single -> b
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode this$1 -> c
    899:907:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
    911:911:boolean hasNext() -> hasNext
    916:925:org.apache.commons.lang3.tuple.Triple next() -> a
    930:930:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode -> cn.com.codesec.xt:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> f
    989:990:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver) -> <init>
    992:994:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath$Trie) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DoExtractResult -> cn.com.codesec.xu:
    cn.com.codesec.scan.model.AccessPath composition -> a
    cn.com.codesec.scan.model.AccessPath extraction -> b
    cn.com.codesec.scan.model.AccessPath$Trie pathTrie -> c
    654:658:void <init>(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie) -> <init>
    661:661:cn.com.codesec.scan.model.AccessPath getComposition() -> a
    665:666:void setComposition(cn.com.codesec.scan.model.AccessPath) -> a
    669:669:cn.com.codesec.scan.model.AccessPath getExtraction() -> b
    673:674:void setExtraction(cn.com.codesec.scan.model.AccessPath) -> b
    677:677:cn.com.codesec.scan.model.AccessPath$Trie getPathTrie() -> c
    681:682:void setPathTrie(cn.com.codesec.scan.model.AccessPath$Trie) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Extract -> cn.com.codesec.xv:
    cn.com.codesec.scan.model.AccessPath path -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    1120:1127:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath) -> <init>
    1131:1131:java.lang.String toString() -> toString
    1136:1143:boolean equals(java.lang.Object) -> equals
    1148:1148:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$ExtractBuilder -> cn.com.codesec.xw:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> a
    594:596:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    600:600:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity -> cn.com.codesec.xx:
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode me -> a
    939:941:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
    944:953:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity pick(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity) -> a
    958:965:boolean equals(java.lang.Object) -> equals
    970:977:int hashCode() -> hashCode
    982:982:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$InputPoint -> cn.com.codesec.xy:
    cn.com.codesec.scan.ir.nodes.IRVarDecl inputVar -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef def -> b
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> g
    1008:1011:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef) -> <init>
    1015:1015:java.lang.String toString() -> toString
    1020:1035:boolean equals(java.lang.Object) -> equals
    1040:1040:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillBuilder -> cn.com.codesec.xz:
    cn.com.codesec.scan.model.AccessPath killPath -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    620:622:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.model.AccessPath) -> <init>
    626:629:java.util.List apply(java.util.List) -> a
    634:640:void apply(java.util.List,java.util.List) -> a
    644:644:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$KillField -> cn.com.codesec.xA:
    java.util.BitSet killSet -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver this$0 -> b
    1190:1206:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath) -> <init>
    1210:1210:java.lang.String toString() -> toString
    1215:1222:boolean equals(java.lang.Object) -> equals
    1227:1227:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$ModifierNode -> cn.com.codesec.xB:
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$NoFlowException -> cn.com.codesec.xC:
    536:536:void <init>() -> <init>
cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$PathAdjuster -> cn.com.codesec.xD:
    cn.com.codesec.scan.model.AccessPath ap -> b
    567:569:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
    574:577:java.util.List apply(java.util.List) -> a
    583:589:void apply(java.util.List,java.util.List) -> a
cn.com.codesec.scan.analyzer.metadata.FunAttribute -> cn.com.codesec.xE:
cn.com.codesec.scan.analyzer.metadata.MapAttribute -> cn.com.codesec.xF:
    java.util.Map map -> a
    15:17:void <init>(java.util.Map) -> <init>
    21:21:java.lang.String toString() -> toString
    25:25:java.util.Map getMap() -> a
    29:30:void setMap(java.util.Map) -> a
cn.com.codesec.scan.analyzer.metadata.MapAttribute$Merger -> cn.com.codesec.xG:
    32:32:void <init>() -> <init>
    36:42:cn.com.codesec.scan.analyzer.metadata.MapAttribute merge(cn.com.codesec.scan.analyzer.metadata.MapAttribute,cn.com.codesec.scan.analyzer.metadata.MapAttribute) -> a
    1:1:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.metadata.ValueMerger -> cn.com.codesec.xH:
    java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.metadata.ValueMerger$AcceptNewValue -> cn.com.codesec.xI:
    18:18:void <init>() -> <init>
    22:22:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.metadata.ValueMerger$ListMerger -> cn.com.codesec.xJ:
    43:43:void <init>() -> <init>
    47:47:cn.com.codesec.util.fset.FTreeList merge(cn.com.codesec.util.fset.FTreeList,cn.com.codesec.util.fset.FTreeList) -> a
    1:1:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.metadata.ValueMerger$SetMerger -> cn.com.codesec.xK:
    35:35:void <init>() -> <init>
    39:39:cn.com.codesec.util.fset.FHashSet merge(cn.com.codesec.util.fset.FHashSet,cn.com.codesec.util.fset.FHashSet) -> a
    1:1:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.metadata.ValueMerger$WriteOnceValue -> cn.com.codesec.xL:
    boolean $assertionsDisabled -> a
    26:26:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    30:31:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.preproc.BasicBlock -> cn.com.codesec.xM:
    java.util.concurrent.atomic.AtomicInteger maxId -> k
    java.util.List preds -> l
    java.util.List succs -> m
    java.util.Map phiMap -> n
    java.util.Map phiFieldMap -> o
    cn.com.codesec.scan.ir.nodes.IRBlock nstBlock -> p
    int start -> q
    int end -> r
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph graph -> s
    int id -> t
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType endOfScopeType -> u
    cn.com.codesec.scan.ir.nodes.IRBlock nextScope -> v
    cn.com.codesec.scan.analyzer.preproc.BlockSet dependencies -> w
    cn.com.codesec.scan.analyzer.preproc.BlockSet scc -> x
    cn.com.codesec.scan.analyzer.preproc.BasicBlock dfsParent -> y
    int dfsPreNum -> z
    int dfsPostNum -> A
    cn.com.codesec.scan.analyzer.preproc.BasicBlock idom -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock ancestor -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock best -> c
    cn.com.codesec.scan.analyzer.preproc.BasicBlock samedom -> d
    cn.com.codesec.scan.analyzer.preproc.BasicBlock semidom -> e
    java.util.Set deferred -> f
    java.util.Set domChildren -> g
    java.util.Set frontier -> h
    int flags -> B
    int FLAG_IS_DEAD -> C
    int FLAG_IS_DEAD_LEADER -> D
    int FLAG_IS_DEAD_REPORTED -> E
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey UNREACHABLES_KEY -> i
    cn.com.codesec.scan.ir.IRVisitorAdapter nonReturningCallChecker -> F
    boolean $assertionsDisabled -> j
    36:767:void <clinit>() -> <clinit>
    71:82:void <init>(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,java.util.List) -> <init>
    84:88:void <init>() -> <init>
    97:99:cn.com.codesec.scan.analyzer.preproc.BasicBlock createDummyDeadBlock() -> a
    103:103:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph getBasicBlockGraph() -> b
    107:107:cn.com.codesec.scan.ir.nodes.IRBlock getNSTBlock() -> c
    111:111:int getStart() -> d
    115:115:int getEnd() -> e
    119:123:cn.com.codesec.scan.ir.nodes.IRStatement getStartStmt() -> f
    127:130:cn.com.codesec.scan.ir.nodes.IRStatement getEndStmt() -> g
    134:134:int size() -> h
    138:142:cn.com.codesec.scan.ir.nodes.IRStatement getStatement(int) -> a
    147:147:java.util.Iterator iterator() -> iterator
    171:171:java.util.Iterator reverseIterator() -> i
    195:195:int id() -> j
    199:199:int getIndex() -> k
    203:203:int index() -> l
    207:207:java.util.List getPreds() -> m
    211:211:java.util.List getSuccs() -> n
    215:215:int getPredIndexInSucc(int) -> b
    219:219:int getSuccIndexInPred(int) -> c
    223:223:cn.com.codesec.scan.analyzer.preproc.BlockSet getDependencies() -> o
    227:228:void setDependencies(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> a
    231:231:boolean depends(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    235:235:int getDependencyCount() -> p
    239:239:cn.com.codesec.scan.analyzer.preproc.BlockSet getScc() -> q
    243:244:void setScc(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> b
    247:247:int getSccCount() -> r
    251:252:void setIsDeadLeader(boolean) -> a
    255:255:boolean isDeadLeader() -> s
    259:260:void setIsDead(boolean) -> b
    263:263:boolean isDead() -> t
    267:268:void setIsDeadReported(boolean) -> c
    271:271:boolean isDeadReported() -> u
    275:276:void setFlag(int,boolean) -> a
    279:279:boolean getFlag(int) -> e
    283:283:boolean isEndOfScope() -> v
    287:287:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType getEndOfScopeType() -> w
    291:291:cn.com.codesec.scan.ir.nodes.IRBlock getNextScope() -> x
    295:297:void addPred(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> h
    300:302:void addSucc(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> i
    305:314:void disconnectFromLive() -> M
    317:319:void removeSuccLink(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    322:328:void removeLastStatement() -> y
    331:332:void setStart(int) -> f
    335:336:void setEnd(int) -> g
    339:340:void addPhi(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    343:344:void addFieldPhi(cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey) -> a
    347:347:boolean containsPhi(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    351:351:boolean containsFieldPhi(cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey) -> b
    355:355:cn.com.codesec.scan.analyzer.preproc.SSAPhi getPhi(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> c
    359:359:cn.com.codesec.scan.analyzer.preproc.SSAPhi getFieldPhi(cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey) -> c
    363:363:java.util.Set getPhiKeys() -> z
    367:367:java.util.Set getPhiFieldKeys() -> A
    371:371:java.util.Collection getPhiList() -> B
    375:375:java.util.Collection getFieldPhiList() -> C
    379:379:java.util.Map getPhiMap() -> D
    383:383:java.util.Map getPhiFieldMap() -> E
    387:394:cn.com.codesec.scan.analyzer.preproc.BasicBlock splitBlock(int,java.util.List) -> a
    398:399:void setFinalID(int) -> d
    403:404:java.lang.String toString() -> toString
    408:433:void printLinkage() -> F
    436:439:void printAllBlocks(java.util.List) -> a
    442:458:void prDFSTree(java.util.List) -> b
    461:501:java.util.List mkBasicBlocks(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    505:510:void sortPredList(java.util.List) -> d
    514:514:int compareTo(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    518:536:void fixupAfterRestructure(java.util.List,java.util.List) -> a
    539:628:cn.com.codesec.scan.analyzer.preproc.BasicBlock doBlock(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,java.util.List,java.util.Map) -> a
    632:652:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType endOfFlowType(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    657:660:void initSSAData(java.lang.Iterable) -> a
    663:666:void clearSSATempData(java.lang.Iterable) -> b
    669:672:void clearSSAData(java.util.List) -> c
    675:679:void initSSAData() -> G
    682:690:void clearSSATempData() -> H
    693:696:void clearSSAData() -> I
    699:718:int runDFS(cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> a
    722:722:int getDFSNum() -> J
    726:726:int getDFSPostNum() -> K
    730:730:cn.com.codesec.scan.analyzer.preproc.BasicBlock getDFSParent() -> L
    734:734:boolean dominates(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    738:754:cn.com.codesec.scan.ir.nodes.IRBlock findCommonParentBlock(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    44:44:int access$1(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> e
    45:45:int access$2(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> f
    43:43:cn.com.codesec.scan.ir.nodes.IRBlock access$3(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> g
cn.com.codesec.scan.analyzer.preproc.BasicBlock$1 -> cn.com.codesec.xN:
    1:760:void <init>() -> <init>
    763:764:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.preproc.BasicBlock$BooleanResult) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.preproc.BasicBlock$2 -> cn.com.codesec.xO:
    int index -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock this$0 -> b
    1:148:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    152:152:boolean hasNext() -> hasNext
    157:160:cn.com.codesec.scan.ir.nodes.IRStatement next() -> a
    165:165:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.preproc.BasicBlock$3 -> cn.com.codesec.xP:
    int index -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock this$0 -> b
    1:172:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    176:176:boolean hasNext() -> hasNext
    181:184:cn.com.codesec.scan.ir.nodes.IRStatement next() -> a
    189:189:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.preproc.BasicBlock$4 -> cn.com.codesec.xQ:
    java.util.Map val$targets -> a
    1:463:void <init>(java.util.Map) -> <init>
    466:476:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.preproc.BasicBlock$BooleanResult -> cn.com.codesec.xR:
    boolean result -> a
    798:800:void <init>() -> <init>
    803:803:boolean isResult() -> a
    807:808:void setResult(boolean) -> a
    798:798:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock$BooleanResult) -> <init>
cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType -> cn.com.codesec.xS:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType NONE -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType NORMAL -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType GOTO -> c
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType RETURN -> d
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType EXCEPTION -> e
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType NONRETURNING -> f
    cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType[] ENUM$VALUES -> g
    769:791:void <clinit>() -> <clinit>
    769:769:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.preproc.BasicBlockEdge -> cn.com.codesec.xT:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock fromBlock -> b
    int childIndex -> c
    boolean $assertionsDisabled -> a
    7:7:void <clinit>() -> <clinit>
    13:14:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    16:21:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> <init>
    24:24:cn.com.codesec.scan.analyzer.preproc.BasicBlock getFromBlock() -> a
    28:28:cn.com.codesec.scan.analyzer.preproc.BasicBlock getToBlock() -> b
    32:32:int getChildIndex() -> c
    37:37:java.lang.String toString() -> toString
    42:49:boolean equals(java.lang.Object) -> equals
    54:54:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph -> cn.com.codesec.xU:
    cn.com.codesec.scan.ir.nodes.IRFunDecl funDecl -> b
    java.util.List blocks -> c
    int rootID -> d
    int compactionGeneration -> e
    boolean $assertionsDisabled -> a
    20:20:void <clinit>() -> <clinit>
    27:31:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    34:34:cn.com.codesec.scan.ir.nodes.IRFunDecl getFunDecl() -> a
    38:38:int getRootID() -> b
    42:42:cn.com.codesec.scan.analyzer.preproc.BasicBlock getRootBlock() -> c
    46:48:int getMaxIndex() -> d
    52:52:int size() -> e
    56:56:boolean isEmpty() -> f
    60:62:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBlockByIndex(int) -> a
    66:74:void addBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    77:97:void compact() -> g
    100:106:boolean compactedCorrectly() -> l
    110:110:int getCompactionGeneration() -> h
    114:154:void markDependencies() -> i
    185:237:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC findSCC(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC[],cn.com.codesec.scan.analyzer.preproc.BasicBlock[],java.util.ArrayList,int[],cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    242:242:java.util.Iterator iterator() -> iterator
    246:247:void printToFile(java.io.PrintStream) -> a
    250:262:void printToFile(java.lang.String,java.io.PrintStream) -> a
    266:273:void printDotBlocks(java.io.PrintStream) -> b
    276:276:cn.com.codesec.scan.util.graph.Graph getGenericSuccGraph() -> j
    290:290:cn.com.codesec.scan.util.graph.Graph getGenericPredGraph() -> k
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$1 -> cn.com.codesec.xV:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph this$0 -> a
    1:276:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    279:279:java.util.Collection getOutgoingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    284:284:java.util.Collection getIncomingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$2 -> cn.com.codesec.xW:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph this$0 -> a
    1:290:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    293:293:java.util.Collection getOutgoingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    298:298:java.util.Collection getIncomingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$GenericGraphAdapter -> cn.com.codesec.xX:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph bbg -> b
    323:325:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    java.util.Collection getOutgoingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    java.util.Collection getIncomingCollection(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    333:333:java.lang.Iterable getOutgoing(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    338:338:java.lang.Iterable getIncoming(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    343:343:int getNumIncoming(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> e
    348:348:int getNumOutgoing(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> f
    353:353:java.util.Map createMap() -> a
    358:358:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
    1:1:java.lang.Iterable getOutgoing(java.lang.Object) -> a
    1:1:int getNumIncoming(java.lang.Object) -> b
    1:1:int getNumOutgoing(java.lang.Object) -> c
    1:1:java.lang.Iterable getIncoming(java.lang.Object) -> d
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$GenericGraphAdapter$MyMapToInt -> cn.com.codesec.xY:
    int[] array -> a
    365:367:void <init>(int) -> <init>
    371:371:int get(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    376:377:void put(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> a
    1:1:int get(java.lang.Object) -> a
    1:1:void put(java.lang.Object,int) -> a
cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC -> cn.com.codesec.xZ:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock head -> a
    int index -> b
    cn.com.codesec.scan.analyzer.preproc.BlockSet dependencies -> c
    java.util.ArrayList succs -> d
    310:316:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    308:308:java.util.ArrayList access$0(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC) -> a
    307:307:cn.com.codesec.scan.analyzer.preproc.BlockSet access$1(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC) -> b
    305:305:cn.com.codesec.scan.analyzer.preproc.BasicBlock access$2(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC) -> c
    310:310:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC) -> <init>
    306:306:int access$4(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph$SCC) -> d
cn.com.codesec.scan.analyzer.preproc.BlockMap -> cn.com.codesec.ya:
    java.lang.Object NULLVALUE -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph graph -> c
    java.lang.Object[] data -> d
    int size -> e
    int cgen -> f
    boolean $assertionsDisabled -> a
    19:202:void <clinit>() -> <clinit>
    27:32:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    36:39:java.lang.Object get(java.lang.Object) -> get
    43:45:java.lang.Object get(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    50:61:java.lang.Object put(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.lang.Object) -> a
    66:74:void putAll(java.util.Map) -> putAll
    77:88:void putAll(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    92:95:java.lang.Object remove(java.lang.Object) -> remove
    99:108:java.lang.Object remove(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    112:118:boolean removeEntry(java.util.Map$Entry) -> a
    122:128:boolean removeForKey(java.lang.Object) -> a
    133:133:int size() -> size
    138:138:boolean isEmpty() -> isEmpty
    143:146:void clear() -> clear
    150:150:boolean containsKey(java.lang.Object) -> containsKey
    154:155:boolean containsKey(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    160:167:boolean containsValue(java.lang.Object) -> containsValue
    172:173:java.util.Set entrySet() -> entrySet
    178:179:java.util.Set keySet() -> keySet
    184:185:java.util.Collection values() -> values
    189:189:java.lang.Object maskNull(java.lang.Object) -> b
    193:193:java.lang.Object unmaskNull(java.lang.Object) -> c
    197:197:java.lang.String graphMismatchError(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    22:22:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph access$1(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
    23:23:java.lang.Object[] access$2(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> c
    192:192:java.lang.Object access$3(cn.com.codesec.scan.analyzer.preproc.BlockMap,java.lang.Object) -> a
    188:188:java.lang.Object access$4(cn.com.codesec.scan.analyzer.preproc.BlockMap,java.lang.Object) -> b
    111:111:boolean access$5(cn.com.codesec.scan.analyzer.preproc.BlockMap,java.util.Map$Entry) -> a
    24:24:int access$6(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> d
    121:121:boolean access$7(cn.com.codesec.scan.analyzer.preproc.BlockMap,java.lang.Object) -> c
    24:24:void access$8(cn.com.codesec.scan.analyzer.preproc.BlockMap,int) -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$BaseIterator -> cn.com.codesec.yb:
    int prevIndex -> c
    int nextIndex -> d
    cn.com.codesec.scan.analyzer.preproc.BlockMap this$0 -> a
    boolean $assertionsDisabled -> b
    326:326:void <clinit>() -> <clinit>
    331:335:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    339:339:boolean hasNext() -> hasNext
    344:350:void remove() -> remove
    353:357:int getNextIndex() -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet -> cn.com.codesec.yc:
    cn.com.codesec.scan.analyzer.preproc.BlockMap this$0 -> a
    204:204:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    208:208:java.util.Iterator iterator() -> iterator
    237:242:boolean contains(java.lang.Object) -> contains
    247:251:boolean remove(java.lang.Object) -> remove
    256:256:int size() -> size
    261:262:void clear() -> clear
    204:204:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet) -> <init>
    204:204:cn.com.codesec.scan.analyzer.preproc.BlockMap access$1(cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet) -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet$1 -> cn.com.codesec.yd:
    cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet this$1 -> c
    1:208:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    211:214:java.util.Map$Entry next() -> b
    1:1:java.lang.Object next() -> next
    208:208:cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet access$1(cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet$1) -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet$1$1 -> cn.com.codesec.ye:
    cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet$1 this$2 -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock val$bb -> b
    java.lang.Object val$val -> c
    int val$index -> d
    1:214:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap$EntrySet$1,cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.lang.Object,int) -> <init>
    217:217:cn.com.codesec.scan.analyzer.preproc.BasicBlock getKey() -> a
    222:222:java.lang.Object getValue() -> getValue
    227:228:java.lang.Object setValue(java.lang.Object) -> setValue
    1:1:java.lang.Object getKey() -> getKey
cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet -> cn.com.codesec.yf:
    cn.com.codesec.scan.analyzer.preproc.BlockMap this$0 -> a
    265:265:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    269:269:java.util.Iterator iterator() -> iterator
    279:279:boolean contains(java.lang.Object) -> contains
    284:284:boolean remove(java.lang.Object) -> remove
    289:289:int size() -> size
    294:295:void clear() -> clear
    265:265:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet) -> <init>
    265:265:cn.com.codesec.scan.analyzer.preproc.BlockMap access$1(cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet) -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet$1 -> cn.com.codesec.yg:
    cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet this$1 -> c
    1:269:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap$KeySet,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    272:272:cn.com.codesec.scan.analyzer.preproc.BasicBlock next() -> b
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.preproc.BlockMap$Values -> cn.com.codesec.yh:
    cn.com.codesec.scan.analyzer.preproc.BlockMap this$0 -> a
    298:298:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    302:302:java.util.Iterator iterator() -> iterator
    312:312:boolean contains(java.lang.Object) -> contains
    317:317:int size() -> size
    322:323:void clear() -> clear
    298:298:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap$Values) -> <init>
    298:298:cn.com.codesec.scan.analyzer.preproc.BlockMap access$1(cn.com.codesec.scan.analyzer.preproc.BlockMap$Values) -> a
cn.com.codesec.scan.analyzer.preproc.BlockMap$Values$1 -> cn.com.codesec.yi:
    cn.com.codesec.scan.analyzer.preproc.BlockMap$Values this$1 -> c
    1:302:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockMap$Values,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> <init>
    305:305:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.preproc.BlockSet -> cn.com.codesec.yj:
    int OFFSET_BITS -> b
    int OFFSET_MASK -> c
    int BITS_PER_LONG -> d
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph graph -> e
    int cgen -> f
    long[] bits -> g
    int count -> h
    boolean $assertionsDisabled -> a
    15:19:void <clinit>() -> <clinit>
    26:27:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    29:34:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    37:39:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> <init>
    42:44:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,long[]) -> <init>
    48:62:boolean add(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    67:71:boolean addAll(java.util.Collection) -> addAll
    76:84:boolean contains(java.lang.Object) -> contains
    89:93:boolean containsAll(java.util.Collection) -> containsAll
    97:109:boolean containsAll(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> a
    114:119:boolean remove(java.lang.Object) -> remove
    123:131:boolean removeByID(int) -> a
    135:149:boolean merge(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> b
    154:161:int size() -> size
    165:169:int bitcount(long) -> a
    174:179:void clear() -> clear
    183:183:boolean equals(java.lang.Object) -> equals
    187:194:boolean equals(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> c
    199:209:int hashCode() -> hashCode
    213:222:void dump(java.io.PrintStream) -> a
    226:227:java.util.Iterator iterator() -> iterator
    1:1:boolean add(java.lang.Object) -> add
    22:22:long[] access$1(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> d
    122:122:boolean access$2(cn.com.codesec.scan.analyzer.preproc.BlockSet,int) -> a
    20:20:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph access$3(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> e
cn.com.codesec.scan.analyzer.preproc.BlockSet$BlockSetIterator -> cn.com.codesec.yk:
    int prevIndex -> a
    int nextIndex -> b
    cn.com.codesec.scan.analyzer.preproc.BlockSet this$0 -> c
    boolean $assertionsDisabled -> d
    230:230:void <clinit>() -> <clinit>
    235:239:void <init>(cn.com.codesec.scan.analyzer.preproc.BlockSet) -> <init>
    243:243:boolean hasNext() -> hasNext
    248:252:void remove() -> remove
    256:261:cn.com.codesec.scan.analyzer.preproc.BasicBlock next() -> a
    265:284:void computeNextIndex() -> b
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.analyzer.preproc.ConstantPropagation -> cn.com.codesec.yl:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey CANONICAL_NODE -> b
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey CANONICAL_DECL -> a
    149:151:void <clinit>() -> <clinit>
    29:29:void <init>() -> <init>
    35:71:cn.com.codesec.scan.ir.nodes.IRNode getCanonicalNodeForTemporary(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    76:145:cn.com.codesec.scan.ir.nodes.IRVarDecl getCanonicalTemporaryName(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
cn.com.codesec.scan.analyzer.preproc.ConstantPropagation$1 -> cn.com.codesec.ym:
    java.util.Map val$nexts -> a
    java.util.Set val$unables -> b
    1:89:void <init>(java.util.Map,java.util.Set) -> <init>
    92:96:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    101:121:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.preproc.DeadCodeCVR -> cn.com.codesec.yn:
    11:12:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    17:17:boolean isGetClassMethod(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    22:22:boolean isGetType() -> d
cn.com.codesec.scan.analyzer.preproc.DeadCodeDetector -> cn.com.codesec.yo:
    java.util.Map RUNNING_MAP -> b
    boolean IGNORE_TRIVIAL_PREDICATES -> c
    boolean DEBUG -> d
    boolean SKIP_DEAD_CODE_ELIM -> e
    boolean runDeadCode -> f
    boolean $assertionsDisabled -> a
    30:216:void <clinit>() -> <clinit>
    30:30:void <init>() -> <init>
    39:40:void enable() -> a
    43:44:boolean isRunning(cn.com.codesec.scan.metadata.FunMeta) -> a
    48:67:void run(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    70:73:void printDotFile(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String,int) -> a
    76:83:void printDotSsiFile(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.util.NstSpliceSsi,int) -> a
    86:114:void runInternel(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> b
    117:123:boolean checkClosure(java.util.List) -> a
    127:134:void findReachables(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.HashSet) -> a
    137:141:boolean runPass(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.List,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
    145:200:boolean checkCondition(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver) -> a
    204:204:boolean isTrivialPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.preproc.EdgeSet -> cn.com.codesec.yp:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph cfg -> b
    java.util.BitSet edge0 -> c
    java.util.BitSet edge1 -> d
    boolean $assertionsDisabled -> a
    16:16:void <clinit>() -> <clinit>
    23:24:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    26:30:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,java.util.BitSet,java.util.BitSet) -> <init>
    34:34:cn.com.codesec.scan.analyzer.preproc.EdgeSet withEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    39:53:cn.com.codesec.scan.analyzer.preproc.EdgeSet withEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> a
    57:57:boolean containsEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    61:64:boolean containsEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> b
    69:94:cn.com.codesec.scan.analyzer.preproc.EdgeSet union(cn.com.codesec.scan.analyzer.preproc.EdgeSet) -> a
    99:107:cn.com.codesec.util.fset.FList getConnectedChildren(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    112:118:cn.com.codesec.util.fset.FList getConnectedPreds(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    122:126:boolean isOneEdgeBranch(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    130:130:int size() -> a
    134:134:boolean isEmpty() -> b
    138:141:int getChildNumber(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    145:148:java.lang.String dump(java.lang.String) -> a
    152:165:java.lang.String dumpEdges(java.lang.String) -> b
    170:170:java.lang.String toString() -> toString
    174:189:cn.com.codesec.util.fset.FSet getInvolvedBlocks() -> c
    193:193:boolean equals(cn.com.codesec.scan.analyzer.preproc.EdgeSet) -> b
    198:198:boolean equals(java.lang.Object) -> equals
    203:203:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.preproc.IgnoreAcrossMethodValueCVR -> cn.com.codesec.yq:
    21:22:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.constants.ConstantValueResolver$ConstantValueBuilder) -> <init>
    34:34:java.util.Set resolveReturnValue(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> a
    41:41:java.util.Set resolveParamValue(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.constants.ConstantPropagator) -> a
    47:51:java.util.Set resolve(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.StorageMeta) -> a
cn.com.codesec.scan.analyzer.preproc.Preprocessor -> cn.com.codesec.yr:
    26:26:void <init>() -> <init>
    29:40:void setHadAddressTaken(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    43:70:void setReachingTypes(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    75:90:void printSsiToFile(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.io.PrintStream) -> a
    93:101:void printSsiToFile(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.util.NstSpliceSsi,java.lang.String) -> a
cn.com.codesec.scan.analyzer.preproc.SCCByTarjan -> cn.com.codesec.ys:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph basicBlockGraph -> a
    java.util.Deque stack -> b
    java.util.Map dfn -> c
    java.util.Map low -> d
    int time -> e
    23:30:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    35:43:java.util.Map tarjan() -> a
    48:95:void tarjan(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Map) -> a
cn.com.codesec.scan.analyzer.preproc.SSABlockRenderer -> cn.com.codesec.yt:
    11:11:void <init>() -> <init>
    15:28:java.lang.String renderBeforeCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    33:33:java.lang.String renderVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    38:38:java.lang.String renderFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    42:45:java.lang.String getSuffix(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    49:59:java.lang.String renderPhi(cn.com.codesec.scan.analyzer.preproc.SSAPhi) -> a
cn.com.codesec.scan.analyzer.preproc.SSADeclHolder -> cn.com.codesec.yu:
cn.com.codesec.scan.analyzer.preproc.SSAGen -> cn.com.codesec.yv:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey SSA_VAR_KEY -> a
    java.lang.ThreadLocal currentBlockCount -> c
    boolean $assertionsDisabled -> b
    45:435:void <clinit>() -> <clinit>
    45:45:void <init>() -> <init>
    52:74:void runSSA(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,boolean) -> a
    77:128:void genDomTree(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    131:134:void link(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    141:141:cn.com.codesec.scan.analyzer.preproc.BasicBlock awls(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    145:153:cn.com.codesec.scan.analyzer.preproc.BasicBlock awlsR(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    157:179:cn.com.codesec.scan.analyzer.preproc.BasicBlock awlsI(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    183:217:void genDomFronts(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> b
    220:270:void insertPhi(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> c
    273:277:java.util.List getAssignments(cn.com.codesec.scan.analyzer.preproc.SSAGen$AssignmentFinder,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    281:321:void renumberVariables(cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> a
    324:340:boolean isInArrayAccess(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    344:391:void insertPhiForFields(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> d
    394:429:void renumberVariablesForFields(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    323:323:boolean access$0(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.preproc.SSAGen$1 -> cn.com.codesec.yw:
    1:84:void <init>() -> <init>
    87:87:int compare(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.preproc.SSAGen$AssignmentFinder -> cn.com.codesec.yx:
    java.util.List assigned -> a
    int inFunCall -> b
    557:560:void <init>() -> <init>
    563:564:void reset() -> a
    567:567:java.util.List getAssigned() -> b
    572:576:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    581:584:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    589:589:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    594:609:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    614:614:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    557:557:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAGen$AssignmentFinder) -> <init>
cn.com.codesec.scan.analyzer.preproc.SSAGen$FieldRenamer -> cn.com.codesec.yy:
    boolean assign -> a
    boolean DEEP_FIELD_SSA -> b
    623:625:void <init>() -> <init>
    629:630:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    635:636:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    641:648:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    653:678:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    683:703:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    708:708:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    623:623:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAGen$FieldRenamer) -> <init>
cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey -> cn.com.codesec.yz:
    cn.com.codesec.scan.metadata.FieldMeta meta -> b
    cn.com.codesec.scan.analyzer.preproc.SSAVar var -> c
    boolean $assertionsDisabled -> a
    712:712:void <clinit>() -> <clinit>
    717:721:void <init>(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    725:732:boolean equals(java.lang.Object) -> equals
    737:739:int hashCode() -> hashCode
    743:743:cn.com.codesec.scan.metadata.FieldMeta getMeta() -> a
    747:748:void setMeta(cn.com.codesec.scan.metadata.FieldMeta) -> a
    751:751:cn.com.codesec.scan.analyzer.preproc.SSAVar getVar() -> b
    755:756:void setVar(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
cn.com.codesec.scan.analyzer.preproc.SSAGen$VarRenamer -> cn.com.codesec.yA:
    boolean aggressive -> a
    441:443:void <init>(boolean) -> <init>
    447:448:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    453:454:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    459:477:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    482:482:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    487:487:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    492:500:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    505:514:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    519:525:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    529:548:java.lang.Object visitLhs(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.preproc.SSAPhi -> cn.com.codesec.yB:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> b
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> c
    cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey declssa -> d
    java.util.Map vars -> e
    cn.com.codesec.scan.analyzer.preproc.SSAVar def -> f
    boolean $assertionsDisabled -> a
    15:15:void <clinit>() -> <clinit>
    23:28:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.ir.nodes.IRVarDecl,int) -> <init>
    30:35:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,int) -> <init>
    38:38:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBasicBlock() -> a
    42:42:cn.com.codesec.scan.ir.nodes.IRVarDecl getDecl() -> b
    46:46:cn.com.codesec.scan.metadata.FieldMeta getFieldMeta() -> c
    50:50:cn.com.codesec.scan.analyzer.preproc.SSAVar getFieldInstance() -> d
    54:54:cn.com.codesec.scan.analyzer.preproc.SSADeclHolder getDeclObject() -> e
    58:58:java.util.Collection getVars() -> f
    62:68:void setArg(int) -> a
    71:74:boolean isArgFromPred(cn.com.codesec.scan.analyzer.preproc.SSAVar,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    78:78:java.util.BitSet getPredsForArg(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    82:83:void setDef(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> b
    86:86:cn.com.codesec.scan.analyzer.preproc.SSAVar getDef() -> g
    91:102:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.preproc.SSAUse -> cn.com.codesec.yC:
    11:11:void <init>() -> <init>
cn.com.codesec.scan.analyzer.preproc.SSAUse$FieldAccess -> cn.com.codesec.yD:
    cn.com.codesec.scan.ir.nodes.IRFieldAccess access -> a
    62:67:void <init>(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> <init>
    70:70:cn.com.codesec.scan.ir.nodes.IRFieldAccess getAccess() -> a
    75:75:cn.com.codesec.scan.ir.nodes.IRLocation getLocation() -> b
cn.com.codesec.scan.analyzer.preproc.SSAUse$LocationUse -> cn.com.codesec.yE:
    31:32:void <init>() -> <init>
    cn.com.codesec.scan.ir.nodes.IRLocation getLocation() -> b
    31:31:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAUse$LocationUse) -> <init>
cn.com.codesec.scan.analyzer.preproc.SSAUse$Phi -> cn.com.codesec.yF:
    cn.com.codesec.scan.analyzer.preproc.SSAPhi phi -> a
    17:22:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAPhi) -> <init>
    25:25:cn.com.codesec.scan.analyzer.preproc.SSAPhi getPhi() -> a
cn.com.codesec.scan.analyzer.preproc.SSAUse$VarAccess -> cn.com.codesec.yG:
    cn.com.codesec.scan.ir.nodes.IRVarAccess access -> a
    41:46:void <init>(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> <init>
    49:49:cn.com.codesec.scan.ir.nodes.IRVarAccess getAccess() -> a
    54:54:cn.com.codesec.scan.ir.nodes.IRLocation getLocation() -> b
cn.com.codesec.scan.analyzer.preproc.SSAUtil -> cn.com.codesec.yH:
    java.util.Set WARNED_FOR_VAR -> b
    boolean $assertionsDisabled -> a
    26:266:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    31:73:cn.com.codesec.scan.ir.nodes.IRExpression getDefinition(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    77:83:java.util.List getReachingDefinitions(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> b
    88:132:void getReachingDefinitions(cn.com.codesec.scan.analyzer.preproc.SSAVar,java.util.List,java.util.HashSet) -> a
    135:156:java.util.List getReachingUses(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> c
    160:191:java.util.List getRealReachingUses(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> d
    195:218:cn.com.codesec.scan.analyzer.preproc.SSAVar checkSimpleAssign(cn.com.codesec.scan.analyzer.preproc.SSAUse) -> a
    222:228:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVarForArgDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    233:242:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVar(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    246:252:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVar(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    256:261:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVar(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
cn.com.codesec.scan.analyzer.preproc.SSAUtil$NoReachingSetException -> cn.com.codesec.yI:
    268:268:void <init>() -> <init>
    268:268:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAUtil$NoReachingSetException) -> <init>
cn.com.codesec.scan.analyzer.preproc.SSAVar -> cn.com.codesec.yJ:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey SSA_VAR_INFO -> a
    java.lang.ThreadLocal varInfo -> c
    java.lang.ThreadLocal phiVarInfo -> d
    java.lang.ThreadLocal defSites -> e
    cn.com.codesec.scan.ir.nodes.IRVarAccess definition -> f
    cn.com.codesec.scan.ir.nodes.IRVarDecl declaration -> g
    cn.com.codesec.scan.analyzer.preproc.SSAPhi phi -> h
    cn.com.codesec.scan.metadata.FieldMeta fieldMeta -> i
    cn.com.codesec.scan.analyzer.preproc.SSAVar fieldInstance -> j
    cn.com.codesec.scan.ir.nodes.IRFieldAccess fieldAccess -> k
    int index -> l
    java.util.List uses -> m
    boolean $assertionsDisabled -> b
    26:351:void <clinit>() -> <clinit>
    41:47:void <init>(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.ir.nodes.IRVarDecl,int) -> <init>
    49:55:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.ir.nodes.IRVarDecl,int) -> <init>
    57:66:void <init>(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,int) -> <init>
    68:76:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,int) -> <init>
    80:80:cn.com.codesec.scan.ir.nodes.IRVarAccess getDefinition() -> a
    84:84:cn.com.codesec.scan.ir.nodes.IRVarDecl getDeclaration() -> b
    88:88:cn.com.codesec.scan.analyzer.preproc.SSAPhi getPhi() -> c
    92:92:cn.com.codesec.scan.metadata.FieldMeta getFieldMeta() -> d
    96:96:cn.com.codesec.scan.analyzer.preproc.SSAVar getFieldInstance() -> e
    100:100:cn.com.codesec.scan.ir.nodes.IRFieldAccess getFieldAccess() -> f
    104:104:int getIndex() -> g
    108:117:cn.com.codesec.scan.analyzer.preproc.BasicBlock getDefBasicBlock() -> h
    121:122:void addUse(cn.com.codesec.scan.analyzer.preproc.SSAUse) -> a
    125:125:java.util.List getUseList() -> i
    130:140:java.lang.String getUniqueName() -> j
    144:155:cn.com.codesec.scan.metadata.Type getType() -> k
    159:166:java.lang.String getSimpleName() -> l
    170:177:cn.com.codesec.scan.meta.Symbol getSymbol() -> m
    182:182:java.lang.String toString() -> toString
    187:191:int compareTo(java.lang.Object) -> compareTo
    195:195:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    199:205:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    209:215:void clearChildren(cn.com.codesec.scan.analyzer.preproc.SSAVar,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    218:224:cn.com.codesec.scan.analyzer.preproc.SSAVar$VarInfo getVarInfo(java.lang.Object) -> a
    228:233:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    237:237:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    241:245:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    249:255:cn.com.codesec.scan.analyzer.preproc.SSAVar getVar(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    259:274:cn.com.codesec.scan.analyzer.preproc.SSAVar getVar(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    278:283:cn.com.codesec.scan.analyzer.preproc.SSAVar getVar(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    287:292:java.util.List getUsesForDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    296:304:cn.com.codesec.scan.analyzer.preproc.SSAVar$VarInfo getVarInfo(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    308:317:cn.com.codesec.scan.analyzer.preproc.SSAVar$VarInfo getVarInfo(cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey) -> a
    321:329:void clearBlockVars(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    332:338:void startSSAGen() -> n
    341:344:void endSSAGen() -> o
    41:41:void <init>(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.ir.nodes.IRVarDecl,int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    49:49:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.ir.nodes.IRVarDecl,int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    68:68:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    57:57:void <init>(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey,int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    31:31:java.lang.ThreadLocal access$4() -> p
    120:120:void access$5(cn.com.codesec.scan.analyzer.preproc.SSAVar,cn.com.codesec.scan.analyzer.preproc.SSAUse) -> a
cn.com.codesec.scan.analyzer.preproc.SSAVar$VarInfo -> cn.com.codesec.yK:
    cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey key -> b
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> c
    java.util.Stack vars -> d
    java.util.List uses -> e
    int last -> f
    boolean $assertionsDisabled -> a
    353:353:void <clinit>() -> <clinit>
    361:369:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    371:376:void <init>(cn.com.codesec.scan.analyzer.preproc.SSAGen$PhiKey) -> <init>
    379:383:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    388:397:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    401:405:cn.com.codesec.scan.analyzer.preproc.SSAVar newVar(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    409:415:void setupDeclStack(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    418:437:cn.com.codesec.scan.analyzer.preproc.SSAVar getVar(cn.com.codesec.scan.analyzer.preproc.SSAUse,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    441:442:void popVar(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    445:445:java.util.List getUses() -> a
cn.com.codesec.scan.analyzer.semantic.DeadCodeReporter -> cn.com.codesec.yL:
    38:38:void <init>() -> <init>
    45:58:void run(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.java.rules.VulnerabilityRule) -> a
    61:68:void report(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> a
    71:98:void tryReport(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.HashSet,boolean) -> a
    101:123:boolean isCatch(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Set) -> a
    127:138:cn.com.codesec.scan.ir.nodes.IRStatement getFirstValidStmt(cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> a
    142:196:boolean isNormal(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    200:224:boolean isLocalDestructor(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    228:253:boolean isFirstInSourceLine(cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    257:262:boolean isLastInFunction(cn.com.codesec.scan.ir.nodes.IRStatement) -> c
    266:274:boolean inGnuStmt(cn.com.codesec.scan.ir.nodes.IRStatement) -> d
cn.com.codesec.scan.analyzer.semantic.FormatStringAnalyzer -> cn.com.codesec.yM:
    12:12:void <init>() -> <init>
    15:28:boolean analyzeFun(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.SemanticRule) -> a
cn.com.codesec.scan.analyzer.semantic.MemsetAnalyzer -> cn.com.codesec.yN:
    boolean $assertionsDisabled -> a
    24:24:void <clinit>() -> <clinit>
    24:24:void <init>() -> <init>
    27:126:boolean analyzeFun(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.SemanticRule) -> a
cn.com.codesec.scan.analyzer.semantic.ProcessControlAnalyzer -> cn.com.codesec.yO:
    15:15:void <init>() -> <init>
    18:40:boolean analyzeFun(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.SemanticRule) -> a
cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer -> cn.com.codesec.yP:
    java.lang.String ISSUE_COUNTER -> e
    java.util.List vulns -> f
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey CALLS_GENERATE_RULES_FIRED -> g
    51:52:void <clinit>() -> <clinit>
    54:59:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    64:64:java.lang.String getName() -> a
    70:70:java.lang.String getDirective() -> c
    82:82:java.lang.String getPoolSize() -> b
    87:88:void expireProgramModelData() -> d
    92:93:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    97:100:cn.com.codesec.scan.ir.nodes.IRLocation getArgument(cn.com.codesec.scan.ir.nodes.IRFunCall,int) -> a
    105:106:void analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    109:119:cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability createIssue(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.VulnerabilityRule,float) -> a
    123:124:void addIssue(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.VulnerabilityRule) -> a
    127:128:void addIssue(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.VulnerabilityRule,float) -> b
    131:134:void addIssue(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    138:159:void complete() -> i
    162:166:int compare(cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability,cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability) -> a
    51:51:cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey access$0() -> f
    44:44:cn.com.codesec.scan.backend.BackEnd access$1(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer) -> a
cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer$KeyNoContext -> cn.com.codesec.yQ:
    cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability vuln -> a
    313:315:void <init>(cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability) -> <init>
    319:319:int hashCode() -> hashCode
    324:331:boolean equals(java.lang.Object) -> equals
    313:313:void <init>(cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability,cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer$KeyNoContext) -> <init>
cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer$SemanticVisitor -> cn.com.codesec.yR:
    cn.com.codesec.java.rules.RuleSet rules -> b
    cn.com.codesec.scan.metadata.FunMeta context -> c
    cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer this$0 -> a
    174:178:void <init>(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    182:190:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    196:200:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Void) -> a
    205:226:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    230:280:void process(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    174:174:void <init>(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer$SemanticVisitor) -> <init>
cn.com.codesec.scan.analyzer.semantic.UncheckedReturnAnalyzer -> cn.com.codesec.yS:
    10:10:void <init>() -> <init>
    13:23:boolean analyzeFun(cn.com.codesec.scan.analyzer.semantic.SemanticAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.SemanticRule) -> a
cn.com.codesec.scan.analyzer.stateful.ANSICodes -> cn.com.codesec.yT:
    cn.com.codesec.scan.analyzer.stateful.ANSICodes RS -> a
    cn.com.codesec.scan.analyzer.stateful.ANSICodes GS -> b
    cn.com.codesec.scan.analyzer.stateful.ANSICodes YS -> c
    cn.com.codesec.scan.analyzer.stateful.ANSICodes BS -> d
    cn.com.codesec.scan.analyzer.stateful.ANSICodes MS -> e
    cn.com.codesec.scan.analyzer.stateful.ANSICodes CS -> f
    cn.com.codesec.scan.analyzer.stateful.ANSICodes E -> g
    java.lang.String code -> h
    cn.com.codesec.scan.analyzer.stateful.ANSICodes[] ENUM$VALUES -> i
    7:15:void <clinit>() -> <clinit>
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String getCode() -> a
    29:29:java.lang.String toString() -> toString
    1:1:cn.com.codesec.scan.analyzer.stateful.ANSICodes[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ANSICodes valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser -> cn.com.codesec.yU:
    cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor vis -> b
    long maxThrows -> c
    long maxBlockVisits -> d
    java.lang.String name -> e
    java.util.TreeSet workList -> f
    java.util.Map outgoingStates -> g
    java.util.Set completeBlocks -> h
    java.util.HashMap blockVisitCounts -> i
    int functionBlockVisitCount -> j
    java.util.TreeMap functionBlocks -> k
    boolean $assertionsDisabled -> a
    21:21:void <clinit>() -> <clinit>
    35:36:void <init>(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor,java.lang.String) -> <init>
    38:49:void <init>(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor,java.lang.String,long,long) -> <init>
    52:58:void clearState() -> a
    61:88:cn.com.codesec.scan.analyzer.preproc.BasicBlock popBlock() -> b
    92:118:void pushBlock(int,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    121:121:boolean moreBlocks() -> c
    125:125:boolean isComplete(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    129:139:void markComplete(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    142:143:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State getOutgoingState(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    147:153:java.util.Collection mergeOutgoingState(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap) -> a
    158:213:void visitFunctionBody(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State) -> a
    216:273:boolean visitBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State) -> a
cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser$WorkListItem -> cn.com.codesec.yV:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> b
    int order -> c
    int depCount -> d
    java.util.Comparator COMPARATOR -> a
    316:322:void <clinit>() -> <clinit>
    283:287:void <init>(int,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    291:291:boolean equals(java.lang.Object) -> equals
    296:296:int hashCode() -> hashCode
    300:300:int getDepCount() -> a
    304:305:void setDepCount(int) -> a
    308:308:int getOrder() -> b
    312:312:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBlock() -> c
    279:279:int access$0(cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser$WorkListItem) -> a
cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser$WorkListItem$1 -> cn.com.codesec.yW:
    1:316:void <init>() -> <init>
    319:319:int compare(cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser$WorkListItem,cn.com.codesec.scan.analyzer.stateful.BasicBlockTraverser$WorkListItem) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor -> cn.com.codesec.yX:
    13:13:void <init>() -> <init>
    void setIncoming(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State) -> a
    cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap getOutgoing() -> b
    void beginBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    void endBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$SingleStateMap -> cn.com.codesec.yY:
    cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State singleState -> a
    java.lang.String name -> b
    28:31:void <init>(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,java.lang.String) -> <init>
    35:35:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State getStateFor(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    40:56:java.util.Collection merge(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State -> cn.com.codesec.yZ:
    boolean mergeState(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State copyState() -> a
cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap -> cn.com.codesec.za:
    cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State getStateFor(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    java.util.Collection merge(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
cn.com.codesec.scan.analyzer.stateful.BindingMap -> cn.com.codesec.zb:
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread analyzer -> b
    cn.com.codesec.util.fset.FMap bindings -> c
    cn.com.codesec.util.fset.FSet returned -> d
    cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory hist -> e
    cn.com.codesec.scan.analyzer.stateful.MachineState state -> f
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment path -> g
    boolean suppress -> h
    boolean $assertionsDisabled -> a
    57:57:void <clinit>() -> <clinit>
    68:69:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    71:79:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    81:89:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.FSet,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment,boolean) -> <init>
    93:99:cn.com.codesec.util.fset.FSet getBoundVarDecls() -> a
    103:103:cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread getAnalyzer() -> b
    107:108:cn.com.codesec.scan.analyzer.stateful.MachineState getState() -> c
    112:112:boolean fromStartState() -> d
    116:116:cn.com.codesec.scan.analyzer.stateful.Machine getMachine() -> e
    120:120:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory getHistory() -> f
    124:141:boolean isUseless() -> g
    145:149:boolean isEmpty(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    153:161:boolean isEmpty() -> h
    165:165:boolean hasBindingFor(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> b
    170:173:cn.com.codesec.scan.analyzer.stateful.BindingMap suppress() -> i
    177:177:boolean isSuppressed() -> j
    182:189:cn.com.codesec.scan.analyzer.stateful.BindingMap registerEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> a
    193:229:cn.com.codesec.util.fset.FList process(cn.com.codesec.scan.analyzer.stateful.MachineInput) -> a
    234:241:cn.com.codesec.scan.analyzer.stateful.BindingMap merge(cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    246:246:cn.com.codesec.scan.analyzer.stateful.BindingMap traverse(cn.com.codesec.scan.analyzer.stateful.Transition,cn.com.codesec.util.fset.FList,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineInput,java.lang.String) -> a
    251:251:cn.com.codesec.scan.analyzer.stateful.BindingMap moveToState(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineInput,java.lang.String) -> a
    256:278:cn.com.codesec.scan.analyzer.stateful.BindingMap moveToState(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.util.fset.FList,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineInput,java.lang.String,cn.com.codesec.scan.analyzer.stateful.Transition) -> a
    283:289:cn.com.codesec.scan.analyzer.stateful.BindingMap withStateChange(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,java.lang.String,cn.com.codesec.scan.analyzer.stateful.Transition) -> a
    294:299:cn.com.codesec.scan.analyzer.stateful.BindingMap withAddedBinding(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> f
    304:308:cn.com.codesec.scan.analyzer.stateful.BindingMap withAddedNode(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> g
    313:313:cn.com.codesec.scan.analyzer.stateful.BindingMap withRemovedBinding(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.IRWrapper) -> a
    318:337:cn.com.codesec.scan.analyzer.stateful.BindingMap withRemovedBinding(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.IRWrapper,cn.com.codesec.parse.ir.SourceLocation) -> a
    342:347:cn.com.codesec.scan.analyzer.stateful.BindingMap withReturnNode(cn.com.codesec.scan.ir.nodes.IRReturnStmt,boolean) -> a
    352:356:cn.com.codesec.scan.meta.Symbol findSymbol(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    361:361:cn.com.codesec.scan.analyzer.stateful.BindingMap with(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    366:379:cn.com.codesec.util.fset.FList withReturned(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    384:424:cn.com.codesec.util.fset.FList withAlias(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    429:437:cn.com.codesec.scan.analyzer.stateful.BindingMap less(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.parse.ir.SourceLocation) -> a
    442:445:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment nextPath() -> m
    450:450:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment getPath() -> k
    454:466:cn.com.codesec.scan.ir.nodes.IRVarAccess getBaseVariable(cn.com.codesec.scan.ir.nodes.IRNode) -> c
    471:477:cn.com.codesec.scan.analyzer.stateful.BindingMap lessRelatedNodes(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.parse.ir.SourceLocation) -> b
    482:486:cn.com.codesec.scan.analyzer.stateful.BindingMap lessRelatedNode(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.IRWrapper,cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.parse.ir.SourceLocation) -> a
    491:492:cn.com.codesec.util.fset.FList lessAll(cn.com.codesec.scan.analyzer.stateful.MachineInput$EndScope) -> a
    497:501:cn.com.codesec.scan.analyzer.stateful.BindingMap lessAll(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.parse.ir.SourceLocation) -> a
    505:505:java.lang.String getString(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> c
    509:539:java.lang.String getString(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> b
    544:558:cn.com.codesec.scan.meta.Symbol getSymbol(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> c
    562:563:java.lang.String getStringOrNull(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> d
    567:568:boolean contains(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> e
    573:580:boolean equals(java.lang.Object) -> equals
    585:588:int hashCode() -> hashCode
    593:620:java.lang.String toString() -> toString
    624:624:boolean isInitialState() -> l
    628:684:void unifyOverlappingMaps(java.util.List) -> a
    688:700:cn.com.codesec.scan.analyzer.stateful.BindingMap updateFunctionSummary(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    705:720:cn.com.codesec.scan.analyzer.stateful.BindingMap updateFunctionSummaryHelper(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    724:731:java.util.List getVariablesForNode(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    735:744:boolean haveVariableForNode(cn.com.codesec.scan.ir.nodes.IRNode) -> d
    748:754:int elementCount() -> n
    758:764:java.util.Map$Entry arb() -> o
cn.com.codesec.scan.analyzer.stateful.BindingMap$VarDeclCollector -> cn.com.codesec.zc:
    cn.com.codesec.util.fset.FSet results -> a
    771:773:void <init>() -> <init>
    777:778:cn.com.codesec.util.fset.FSet visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    783:784:cn.com.codesec.util.fset.FSet visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    789:792:cn.com.codesec.util.fset.FSet visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Void) -> a
    797:797:cn.com.codesec.util.fset.FSet visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    771:771:void <init>(cn.com.codesec.scan.analyzer.stateful.BindingMap$VarDeclCollector) -> <init>
cn.com.codesec.scan.analyzer.stateful.BranchMachineInput -> cn.com.codesec.zd:
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch side -> a
    16:18:void <init>(cn.com.codesec.scan.ir.nodes.IRConditional,boolean) -> <init>
    21:21:cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch getSide() -> a
    25:25:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> b
    30:30:java.lang.String toString() -> toString
    35:36:boolean equals(java.lang.Object) -> equals
    41:44:int hashCode() -> hashCode
    50:53:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch -> cn.com.codesec.ze:
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch THEN -> a
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch ELSE -> b
    boolean booleanValue -> c
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch[] ENUM$VALUES -> d
    56:59:void <clinit>() -> <clinit>
    63:65:void <init>(java.lang.String,int,boolean) -> <init>
    68:68:boolean getBooleanValue() -> a
    73:73:java.lang.String toString() -> toString
    1:1:cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch valueOf(java.lang.String) -> valueOf
    61:61:boolean access$2(cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch) -> a
cn.com.codesec.scan.analyzer.stateful.ControlflowDebug -> cn.com.codesec.zf:
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_BM_INPUT_ALWAYS -> a
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_BB_ENTRY -> b
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_BM_INPUT -> c
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_STATE_CHANGE -> d
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug DUMP_MACHINES_AFTER_ANALYSIS -> e
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_DESCENT -> f
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PROFILE_RULES -> g
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PROFILE_FUNCTIONS -> h
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug PRINT_SS_INPUT -> i
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug SHOW_UPDATED_MACHINES -> j
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug SHOW_RAW_SUMMARY_TRANSITIONS -> k
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug SHOW_QUEUE_REASONS -> l
    char c -> m
    boolean PRETTY_PRINT -> n
    boolean PRINT_STDERR -> o
    java.lang.String DEBUG_FLAGS -> p
    java.io.PrintStream out -> q
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug[] ENUM$VALUES -> r
    19:94:void <clinit>() -> <clinit>
    38:40:void <init>(java.lang.String,int,char) -> <init>
    43:43:boolean enabled() -> a
    47:47:cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ThreadLogger mkThreadLogger() -> b
    51:63:void logImmediately(java.lang.String) -> a
    66:67:void render(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ThreadLogger) -> b
    1:1:cn.com.codesec.scan.analyzer.stateful.ControlflowDebug[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ControlflowDebug valueOf(java.lang.String) -> valueOf
    65:65:void access$2(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ThreadLogger) -> a
    33:33:boolean access$3() -> c
    34:34:boolean access$4() -> d
    36:36:java.io.PrintStream access$5() -> e
cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$FileLogger -> cn.com.codesec.zg:
    java.util.List text -> a
    116:118:void <init>() -> <init>
    122:123:void log(java.lang.String) -> a
    127:131:void log(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ANSICodes) -> a
    135:142:void renderVisit() -> a
    145:146:void println(java.lang.String) -> b
    116:116:void <init>(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$FileLogger) -> <init>
    116:116:void <init>(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$FileLogger,cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$FileLogger) -> <init>
cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ScanLogLogger -> cn.com.codesec.zh:
    149:149:void <init>() -> <init>
    153:154:void println(java.lang.String) -> b
    149:149:void <init>(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ScanLogLogger) -> <init>
cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ThreadLogger -> cn.com.codesec.zi:
    96:96:void <init>() -> <init>
    99:99:void log(java.lang.String) -> a
    102:102:void log(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ANSICodes) -> a
    105:106:void render() -> b
    109:109:void renderVisit() -> a
cn.com.codesec.scan.analyzer.stateful.IRAnnotator -> cn.com.codesec.zj:
    9:9:void <init>() -> <init>
cn.com.codesec.scan.analyzer.stateful.IRComparer -> cn.com.codesec.zk:
    cn.com.codesec.scan.analyzer.stateful.IRComparer$NSTComparerVisitor VISITOR -> b
    boolean $assertionsDisabled -> a
    56:86:void <clinit>() -> <clinit>
    56:56:void <init>() -> <init>
    61:63:boolean compare(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    67:67:boolean isParentChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> b
    71:81:boolean isChildOf(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> c
cn.com.codesec.scan.analyzer.stateful.IRComparer$NSTComparerVisitor -> cn.com.codesec.zl:
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> b
    88:88:void <clinit>() -> <clinit>
    88:88:void <init>() -> <init>
    92:113:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRAllocation,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    118:126:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    131:139:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    144:155:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    160:160:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    165:169:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    174:184:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    189:189:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    194:194:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    199:199:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRConditional,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    204:204:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    209:213:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    218:222:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRDereference,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    227:227:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    232:232:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    237:237:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    242:274:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    279:279:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    284:290:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    295:298:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    303:303:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    308:314:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    319:319:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRGoto,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    324:324:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    329:329:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    334:337:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    342:370:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    376:376:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    381:384:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    389:389:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    394:401:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    406:406:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    411:411:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    416:416:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    421:421:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    426:430:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    435:439:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    444:464:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    469:469:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRType,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    474:481:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    486:490:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    495:501:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    506:512:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    517:517:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    88:88:void <init>(cn.com.codesec.scan.analyzer.stateful.IRComparer$NSTComparerVisitor) -> <init>
    88:88:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> a
cn.com.codesec.scan.analyzer.stateful.IRHasher -> cn.com.codesec.zm:
    cn.com.codesec.scan.analyzer.stateful.IRHasher$NSTHashVisitor VISITOR -> a
    64:65:void <clinit>() -> <clinit>
    53:53:void <init>() -> <init>
    58:60:int hashNode(cn.com.codesec.scan.ir.nodes.IRNode) -> a
cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder -> cn.com.codesec.zn:
    int value -> a
    358:360:void <init>() -> <init>
    363:363:int getValue() -> a
    367:368:void setValue(int) -> a
    358:358:void <init>(cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> <init>
cn.com.codesec.scan.analyzer.stateful.IRHasher$NSTHashVisitor -> cn.com.codesec.zo:
    int SHIFT -> a
    67:67:void <init>() -> <init>
    72:73:void addValue(int,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    77:78:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    83:83:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    88:91:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    96:99:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    104:104:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    109:110:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    115:119:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    124:124:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    129:129:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    134:134:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    139:139:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    144:145:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    150:152:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    157:157:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    162:163:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    168:168:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    173:182:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    187:187:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    192:192:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    197:197:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    202:202:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    207:208:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    213:214:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    219:221:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    226:226:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    231:233:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    238:245:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    250:250:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    255:257:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    262:262:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    267:268:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    273:273:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    278:278:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    283:284:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    289:289:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    294:294:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    299:301:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    306:313:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    318:319:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    324:326:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    331:331:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    336:337:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    342:343:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    348:350:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.scan.analyzer.stateful.IRHasher$HashHolder) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    67:67:void <init>(cn.com.codesec.scan.analyzer.stateful.IRHasher$NSTHashVisitor) -> <init>
cn.com.codesec.scan.analyzer.stateful.IRNodeSet -> cn.com.codesec.zp:
    cn.com.codesec.scan.analyzer.stateful.IRNodeSet EMPTY -> a
    cn.com.codesec.util.fset.FSet set -> b
    120:121:void <clinit>() -> <clinit>
    25:25:cn.com.codesec.scan.analyzer.stateful.IRNodeSet emptySet() -> a
    28:30:void <init>() -> <init>
    32:34:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    38:38:java.util.Iterator iterator() -> iterator
    42:42:boolean isEmpty() -> b
    46:46:boolean contains(cn.com.codesec.scan.analyzer.stateful.IRWrapper) -> a
    51:55:cn.com.codesec.scan.analyzer.stateful.IRNodeSet with(cn.com.codesec.scan.analyzer.stateful.IRWrapper) -> b
    60:64:cn.com.codesec.scan.analyzer.stateful.IRNodeSet less(cn.com.codesec.scan.analyzer.stateful.IRWrapper) -> c
    69:76:cn.com.codesec.scan.analyzer.stateful.IRNodeSet intersection(cn.com.codesec.scan.analyzer.stateful.IRNodeSet) -> a
    81:88:cn.com.codesec.scan.analyzer.stateful.IRNodeSet union(cn.com.codesec.scan.analyzer.stateful.IRNodeSet) -> b
    93:101:cn.com.codesec.scan.analyzer.stateful.IRWrapper adjustNode(cn.com.codesec.scan.analyzer.stateful.IRWrapper) -> d
    106:106:int hashCode() -> hashCode
    111:111:boolean equals(java.lang.Object) -> equals
    116:116:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.IRWrapper -> cn.com.codesec.zq:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey CACHEKEY -> a
    cn.com.codesec.scan.ir.nodes.IRNode n -> b
    int hashCode -> c
    65:66:void <clinit>() -> <clinit>
    20:25:cn.com.codesec.scan.analyzer.stateful.IRWrapper get(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    28:31:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    34:34:cn.com.codesec.scan.ir.nodes.IRNode getNST() -> a
    39:39:java.lang.String toString() -> toString
    44:44:int hashCode() -> hashCode
    49:61:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.stateful.MachInputKind -> cn.com.codesec.zr:
    cn.com.codesec.scan.analyzer.stateful.MachInputKind BRANCH_THEN -> a
    cn.com.codesec.scan.analyzer.stateful.MachInputKind BRANCH_ELSE -> b
    cn.com.codesec.scan.analyzer.stateful.MachInputKind CLOBBER -> c
    cn.com.codesec.scan.analyzer.stateful.MachInputKind END_FUNCTION -> d
    cn.com.codesec.scan.analyzer.stateful.MachInputKind END_SCOPE -> e
    cn.com.codesec.scan.analyzer.stateful.MachInputKind ESCAPE -> f
    cn.com.codesec.scan.analyzer.stateful.MachInputKind META -> g
    cn.com.codesec.scan.analyzer.stateful.MachInputKind NORMAL -> h
    java.lang.String txt -> i
    cn.com.codesec.scan.analyzer.stateful.MachInputKind[] ENUM$VALUES -> j
    7:16:void <clinit>() -> <clinit>
    20:22:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.MachInputKind[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.MachInputKind valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.Machine -> cn.com.codesec.zs:
    java.util.HashSet dRuleIds -> b
    java.util.HashSet eRuleIds -> c
    cn.com.codesec.java.rules.StatefulRule rule -> d
    java.util.List limits -> e
    cn.com.codesec.scan.analyzer.stateful.MachineState startState -> f
    java.util.Map allStates -> g
    cn.com.codesec.scan.util.collections.IndexMap stateIndexes -> h
    java.util.Map variables -> i
    java.util.List paramTransitions -> j
    boolean hasVars -> k
    boolean $assertionsDisabled -> a
    34:296:void <clinit>() -> <clinit>
    48:48:boolean isEnabled(java.lang.String) -> a
    52:52:boolean isDisabled(java.lang.String) -> b
    56:63:cn.com.codesec.util.fset.FList filter(java.util.List) -> a
    66:72:void <init>(cn.com.codesec.java.rules.StatefulRule) -> <init>
    76:76:boolean equals(java.lang.Object) -> equals
    81:81:int hashCode() -> hashCode
    85:85:cn.com.codesec.scan.analyzer.stateful.MachineState getState(java.lang.String) -> c
    89:89:cn.com.codesec.scan.analyzer.stateful.MachineState getState(int) -> a
    94:98:cn.com.codesec.scan.analyzer.stateful.MachineState getPrimaryState() -> a
    103:103:cn.com.codesec.java.rules.StatefulRule getRule() -> b
    107:111:void addLimit(cn.com.codesec.java.rules.Identifier) -> a
    114:118:void addLimits(cn.com.codesec.java.rules.Identifier[]) -> a
    121:121:boolean containsState(java.lang.String) -> d
    125:125:java.lang.String id() -> c
    129:130:void setHasVars() -> d
    133:133:boolean hasVars() -> e
    137:145:void setRuleVariables(java.util.Collection) -> a
    149:156:cn.com.codesec.scan.analyzer.stateful.RuleVarMeta getVariableMeta(java.lang.String) -> e
    160:160:java.util.Collection getVariables() -> f
    165:170:java.lang.String toString() -> toString
    174:184:void writeDescription(java.lang.Appendable,java.util.Map) -> a
    187:193:void addState(java.lang.String,long,java.lang.String) -> a
    196:211:void addTransition(java.lang.String,java.lang.String,cn.com.codesec.util.fset.FList,cn.com.codesec.java.rules.SKYRule) -> a
    214:218:java.util.List checkConfig() -> g
    222:230:boolean runOnFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    234:234:cn.com.codesec.scan.analyzer.stateful.BindingMap getInitialState(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    238:258:java.util.List getArgumentStates(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread) -> a
    262:262:java.util.HashSet getdRuleIds() -> h
    266:267:void setdRuleIds(java.util.HashSet) -> a
    270:270:java.util.HashSet geteRuleIds() -> i
    274:275:void seteRuleIds(java.util.HashSet) -> b
cn.com.codesec.scan.analyzer.stateful.MachineInput -> cn.com.codesec.zt:
    29:29:void <init>() -> <init>
    32:32:cn.com.codesec.scan.analyzer.stateful.MachineInput endScope(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    36:36:cn.com.codesec.scan.analyzer.stateful.MachineInput clobber(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    40:40:cn.com.codesec.scan.analyzer.stateful.MachineInput endFunction(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    44:44:cn.com.codesec.scan.analyzer.stateful.MachineInput endFunction(cn.com.codesec.scan.ir.nodes.IRCallStmt) -> a
    cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> d
    cn.com.codesec.scan.ir.nodes.IRNode nst() -> e
    java.lang.String toString() -> toString
    cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    62:62:boolean isMeta() -> f
    66:66:boolean isFunctionEnd() -> g
    70:70:cn.com.codesec.scan.metadata.FunMeta getFunMeta() -> h
    74:74:cn.com.codesec.scan.metadata.Type getExceptionType() -> i
    78:78:java.lang.String logstr() -> j
cn.com.codesec.scan.analyzer.stateful.MachineInput$Clobber -> cn.com.codesec.zu:
    281:282:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> <init>
    286:286:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType getEndOfScopeType() -> a
    291:291:java.lang.String toString() -> toString
    296:296:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
cn.com.codesec.scan.analyzer.stateful.MachineInput$EndFunction -> cn.com.codesec.zv:
    cn.com.codesec.scan.ir.nodes.IRStatement lastStatement -> a
    boolean nonreturning -> b
    306:307:void <init>(cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> <init>
    310:311:void <init>(cn.com.codesec.scan.ir.nodes.IRCallStmt) -> <init>
    313:316:void <init>(cn.com.codesec.scan.ir.nodes.IRStatement,boolean) -> <init>
    319:319:boolean fromNonreturningCall() -> a
    324:324:boolean isFunctionEnd() -> g
    329:329:cn.com.codesec.scan.ir.nodes.IRNode nst() -> e
    334:334:int hashCode() -> hashCode
    339:339:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> d
    344:346:boolean equals(java.lang.Object) -> equals
    351:351:java.lang.String toString() -> toString
    356:356:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
cn.com.codesec.scan.analyzer.stateful.MachineInput$EndScope -> cn.com.codesec.zw:
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock basicBlock -> c
    cn.com.codesec.parse.ir.SourceLocation sourceInfo -> d
    java.util.List throwStatements -> e
    cn.com.codesec.scan.metadata.Type exceptionType -> f
    boolean $assertionsDisabled -> a
    130:130:void <clinit>() -> <clinit>
    139:140:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    142:195:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    199:204:boolean equals(java.lang.Object) -> equals
    209:209:int hashCode() -> hashCode
    213:224:cn.com.codesec.parse.ir.SourceLocation getBlockEnd(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    228:228:cn.com.codesec.scan.ir.nodes.IRVarDecl getDecl() -> b
    232:232:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBasicBlock() -> k
    236:236:cn.com.codesec.scan.analyzer.preproc.BasicBlock$EndScopeType getEndOfScopeType() -> a
    240:240:boolean isFromException() -> l
    244:244:java.util.List getThrowStatements() -> m
    249:249:cn.com.codesec.scan.metadata.Type getExceptionType() -> i
    254:254:cn.com.codesec.scan.metadata.FunMeta getFunMeta() -> h
    259:259:cn.com.codesec.scan.ir.nodes.IRNode nst() -> e
    264:264:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> d
    269:269:java.lang.String toString() -> toString
    274:274:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
    142:142:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.MachineInput$EndScope) -> <init>
cn.com.codesec.scan.analyzer.stateful.MachineInput$Escape -> cn.com.codesec.zx:
    cn.com.codesec.scan.ir.nodes.IRAssignmentStmt assign -> a
    364:366:void <init>(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> <init>
    370:370:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> d
    375:375:cn.com.codesec.scan.ir.nodes.IRAssignmentStmt nst() -> a
    380:380:java.lang.String logstr() -> j
    385:385:java.lang.String toString() -> toString
    390:390:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
    395:395:int hashCode() -> hashCode
    399:400:boolean equals(java.lang.Object) -> equals
    1:1:cn.com.codesec.scan.ir.nodes.IRNode nst() -> e
cn.com.codesec.scan.analyzer.stateful.MachineInput$Meta -> cn.com.codesec.zy:
    122:122:void <init>() -> <init>
    126:126:boolean isMeta() -> f
cn.com.codesec.scan.analyzer.stateful.MachineInput$Normal -> cn.com.codesec.zz:
    cn.com.codesec.scan.ir.nodes.IRNode nst -> a
    85:87:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    91:91:cn.com.codesec.scan.ir.nodes.IRNode nst() -> e
    96:96:int hashCode() -> hashCode
    101:101:boolean equals(java.lang.Object) -> equals
    107:107:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> d
    112:112:java.lang.String toString() -> toString
    117:117:cn.com.codesec.scan.analyzer.stateful.MachInputKind getKind() -> c
cn.com.codesec.scan.analyzer.stateful.MachineState -> cn.com.codesec.zA:
    cn.com.codesec.scan.analyzer.stateful.Machine machine -> e
    boolean isStart -> f
    boolean isError -> g
    java.lang.String name -> h
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap formatStringMap -> i
    boolean doNotPropagate -> j
    cn.com.codesec.util.fset.FMap ruleTransitions -> k
    boolean $assertionsDisabled -> a
    23:23:void <clinit>() -> <clinit>
    34:43:void <init>(cn.com.codesec.scan.analyzer.stateful.Machine,java.lang.String,long,java.lang.String) -> <init>
    46:46:cn.com.codesec.scan.analyzer.stateful.Machine getMachine() -> a
    50:53:void addTransition(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.util.fset.FList,cn.com.codesec.java.rules.SKYRule) -> a
    56:56:boolean isStart() -> b
    60:60:boolean isError() -> c
    64:64:boolean isDead() -> d
    68:68:java.lang.String getName() -> e
    72:72:boolean doNotPropagate() -> f
    76:76:boolean isPrimary() -> g
    80:80:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat getFormatString(cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    84:87:void finishInitialization() -> h
    91:99:java.lang.String toString() -> toString
    103:115:java.lang.String transitionString(java.util.Map) -> a
    120:134:cn.com.codesec.util.fset.FList process(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.MachineInput) -> a
    139:139:int hashCode() -> hashCode
    144:144:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.stateful.MachineStateFlags -> cn.com.codesec.zB:
    long FLAG_START_STATE -> b
    long FLAG_ERROR_STATE -> c
    long FLAG_DO_NOT_PROPAGATE -> d
cn.com.codesec.scan.analyzer.stateful.Profiler -> cn.com.codesec.zC:
    boolean enableTimeOut -> a
    boolean enableMeringProfiling -> b
    boolean enableFineGrainedMergingProfiling -> c
    boolean enableMachineProfiling -> d
    java.lang.String ENABLE_RULE_IDS -> e
    java.lang.String DISABLE_RULE_IDS -> f
    boolean DEBUG -> g
    boolean logStateSetMergeState -> h
    boolean isNullPtrAnalysis -> i
    21:37:void <clinit>() -> <clinit>
    7:7:void <init>() -> <init>
    40:40:boolean isEnableTimeOut() -> a
    44:45:void setEnableTimeOut(boolean) -> a
    48:48:boolean isEnableMeringProfiling() -> b
    52:53:void setEnableMeringProfiling(boolean) -> b
    56:56:boolean isEnableFineGrainedMergingProfiling() -> c
    60:61:void setEnableFineGrainedMergingProfiling(boolean) -> c
    64:64:boolean isEnableMachineProfiling() -> d
    68:69:void setEnableMachineProfiling(boolean) -> d
    72:72:java.lang.String getEnableruleids() -> e
    76:76:java.lang.String getDisableruleids() -> f
    80:80:boolean isLogStateSetMergeState() -> g
    84:85:void setLogStateSetMergeState(boolean) -> e
    88:88:boolean isNullPtrAnalysis() -> h
    92:93:void setNullPtrAnalysis(boolean) -> f
    96:96:boolean isDebug() -> i
cn.com.codesec.scan.analyzer.stateful.RuleTransition -> cn.com.codesec.zD:
    cn.com.codesec.util.fset.FList asts -> c
    cn.com.codesec.java.rules.SKYRule rule -> d
    int hashcode -> e
    24:28:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.util.fset.FList,cn.com.codesec.java.rules.SKYRule) -> <init>
    33:39:cn.com.codesec.scan.analyzer.stateful.BindingMap match(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    44:44:cn.com.codesec.java.rules.SKYRule getRule() -> a
    50:59:java.lang.String getAstText() -> b
    64:64:int hashCode() -> hashCode
    69:79:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.stateful.RuleVarMeta -> cn.com.codesec.zE:
    cn.com.codesec.scan.analyzer.stateful.Machine machine -> a
    java.lang.String name -> b
    17:20:void <init>(cn.com.codesec.scan.analyzer.stateful.Machine,java.lang.String) -> <init>
    23:23:cn.com.codesec.scan.analyzer.stateful.Machine getMachine() -> a
    27:27:java.lang.String getName() -> b
    32:32:java.lang.String toString() -> toString
    37:44:boolean equals(java.lang.Object) -> equals
    49:49:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.stateful.SplitStateMap -> cn.com.codesec.zF:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock splitBlock -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock thenBlock -> c
    cn.com.codesec.scan.analyzer.preproc.BasicBlock elseBlock -> d
    cn.com.codesec.scan.analyzer.stateful.StateSet thenState -> e
    cn.com.codesec.scan.analyzer.stateful.StateSet elseState -> f
    boolean $assertionsDisabled -> a
    14:14:void <clinit>() -> <clinit>
    22:33:void <init>(cn.com.codesec.scan.ir.nodes.IRConditional,cn.com.codesec.scan.analyzer.stateful.StateSet) -> <init>
    36:56:void registerEdges() -> a
    60:60:cn.com.codesec.scan.analyzer.stateful.StateSet getStateFor(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    64:64:cn.com.codesec.scan.analyzer.stateful.StateSet getTrueState() -> b
    68:68:cn.com.codesec.scan.analyzer.stateful.StateSet getFalseState() -> c
    73:94:java.util.Collection merge(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State getStateFor(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
cn.com.codesec.scan.analyzer.stateful.StateSet -> cn.com.codesec.zG:
    boolean INTERPROCEDURAL -> a
    int MAX_STATE_ADDITIONS -> b
    double STATE_GROWTH_RATE -> c
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread sa -> d
    java.util.List states -> e
    cn.com.codesec.scan.analyzer.preproc.BasicBlock currentBlock -> f
    191:196:void <clinit>() -> <clinit>
    37:50:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,java.util.List,cn.com.codesec.scan.ir.nodes.IRFunDecl,boolean) -> <init>
    52:55:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,java.util.List) -> <init>
    59:59:java.lang.String toString() -> toString
    63:89:void process(cn.com.codesec.scan.analyzer.stateful.MachineInput) -> a
    92:97:boolean nonEmptyBindings(cn.com.codesec.util.fset.FList) -> a
    101:118:void processTransitionedState(cn.com.codesec.scan.analyzer.stateful.Machine,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.StateSet$UniqueListAppender) -> a
    122:126:cn.com.codesec.util.fset.FSet getBoundVarDecls() -> b
    130:138:void registerEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> a
    141:143:void beginBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    147:153:cn.com.codesec.scan.analyzer.stateful.StateSet copyState() -> c
    158:175:boolean mergeState(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    179:187:void updateFunctionSummary(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt) -> a
    1:1:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State copyState() -> a
    76:76:void lambda$1(cn.com.codesec.scan.analyzer.stateful.Machine,cn.com.codesec.scan.analyzer.stateful.StateSet$UniqueListAppender,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
cn.com.codesec.scan.analyzer.stateful.StateSet$UniqueListAppender -> cn.com.codesec.zH:
    java.util.List list -> a
    java.util.Map map -> b
    203:206:void <init>() -> <init>
    208:215:void <init>(java.util.List) -> <init>
    218:231:boolean add(cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    235:235:java.util.List getList() -> a
    239:239:int size() -> b
cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer -> cn.com.codesec.zI:
    boolean INTERPROCEDURAL -> e
    java.lang.String ISSUE_COUNTER -> f
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode TRACK_MODE -> h
    java.util.Map CACHED_MACHINES -> i
    java.io.PrintWriter funcProf -> j
    java.io.PrintWriter ruleProf -> k
    int currentVisitNumber -> l
    cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel requeuesModel -> m
    cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransitionModel generatedTransitionModel -> n
    cn.com.codesec.scan.analyzer.stateful.metadata.IncomingStateModel incomingStateModel -> o
    java.util.Map issuesByMeta -> p
    java.util.Set visited -> q
    java.util.Set blacklisted -> r
    java.util.concurrent.locks.ReadWriteLock stateReadWriteLock -> s
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$StatefulAnalyzer$TrackMode -> t
    boolean $assertionsDisabled -> g
    42:451:void <clinit>() -> <clinit>
    62:62:java.util.concurrent.locks.ReadWriteLock getStateReadWriteLock() -> j
    67:73:boolean trackPaths(cn.com.codesec.scan.metadata.FunMeta) -> a
    78:91:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    94:94:cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel getRequeuesModel() -> k
    100:100:java.lang.String getName() -> a
    106:106:java.lang.String getDirective() -> c
    116:117:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    121:122:void expireProgramModelData() -> d
    128:128:java.lang.String getPoolSize() -> b
    134:134:cn.com.codesec.scan.util.Parallelizer$WorkQueue getNewQueue() -> f
    139:140:void initialize() -> h
    151:151:java.util.Set analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    173:173:void initProfiling() -> o
    176:183:void writeFunctionProfile(cn.com.codesec.scan.metadata.FunMeta,long) -> a
    186:186:boolean isBlackListed(cn.com.codesec.scan.metadata.FunMeta) -> b
    190:191:void blacklist(cn.com.codesec.scan.metadata.FunMeta) -> c
    194:195:void markVisited(cn.com.codesec.scan.metadata.FunMeta) -> d
    198:198:boolean hasVisited(cn.com.codesec.scan.metadata.FunMeta) -> e
    202:202:cn.com.codesec.util.fset.FSet getMachines(cn.com.codesec.scan.meta.Language) -> a
    206:206:cn.com.codesec.scan.analyzer.stateful.Machine getMachine(cn.com.codesec.scan.meta.Language,java.lang.String) -> a
    210:218:java.util.Map getMachineMap(cn.com.codesec.scan.meta.Language) -> b
    222:233:void writeRuleProfilingData(cn.com.codesec.scan.metadata.FunMeta,java.util.Collection) -> a
    348:348:cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransitionModel getGeneratedTransitionModel() -> l
    352:352:cn.com.codesec.scan.analyzer.stateful.metadata.IncomingStateModel getIncomingStateModel() -> m
    357:358:void addIssueFor(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
    362:363:void clearExistingVulnerabilities(cn.com.codesec.scan.metadata.FunMeta,java.util.Collection) -> b
    370:404:void complete() -> i
    408:415:cn.com.codesec.util.fset.FList dedupe(java.util.Collection) -> a
    420:431:boolean isUniqueVuln(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability,java.util.Map) -> a
    42:42:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$StatefulAnalyzer$TrackMode() -> n
    362:362:cn.com.codesec.util.fset.FList lambda$1(java.util.Collection,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.util.fset.FList) -> a
    362:362:boolean lambda$2(java.util.Collection,cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode -> cn.com.codesec.zJ:
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode ALL -> a
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode NOJSP -> b
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode NONE -> c
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode[] ENUM$VALUES -> d
    453:457:void <clinit>() -> <clinit>
    453:453:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer$TrackMode valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerHelper -> cn.com.codesec.zK:
    java.util.Set langsSeen -> a
    94:95:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    32:46:boolean isFromCppCatch(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
    50:57:java.util.List getMachines(java.util.Collection) -> a
    61:75:void dumpMachines(java.util.Map) -> a
    78:82:java.util.List getRules(cn.com.codesec.scan.meta.Language) -> a
    86:86:java.util.Set getLangsSeen() -> a
    90:91:void setLangsSeen(java.util.Set) -> a
cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerHelper$RuleIDComparator -> cn.com.codesec.zL:
    97:97:void <init>() -> <init>
    101:101:int compare(cn.com.codesec.scan.analyzer.stateful.Machine,cn.com.codesec.scan.analyzer.stateful.Machine) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
    97:97:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerHelper$RuleIDComparator) -> <init>
cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread -> cn.com.codesec.zM:
    boolean DEBUG_FUNCTION -> a
    boolean SKIP_JSP -> b
    long MAX_FUNCTION_TIME -> c
    long MAX_THROWS -> d
    long MAX_BLOCK_VISITS -> e
    java.lang.String FUNCTION_TO_DEBUG -> f
    cn.com.codesec.scan.backend.BackEnd backend -> g
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer cfa -> h
    cn.com.codesec.scan.metadata.FunMeta meta -> i
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> j
    java.util.Set rules -> k
    com.google.common.collect.Multimap profile -> l
    boolean timeExpired -> m
    long startTime -> n
    com.google.common.collect.Multimap summaryEdgeSnapshot -> o
    java.util.Map uniqueIssues -> p
    cn.com.codesec.scan.analyzer.stateful.ControlflowDebug$ThreadLogger debug -> q
    380:396:void <clinit>() -> <clinit>
    61:73:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzer) -> <init>
    77:78:void timeExpired() -> a
    81:84:void checkTimeExpired() -> b
    87:87:boolean isInterprocedural() -> c
    91:91:boolean shouldPrintDebuggingInfo() -> d
    96:96:cn.com.codesec.scan.metadata.FunMeta getFunMeta() -> e
    101:101:cn.com.codesec.scan.ir.nodes.IRFunDecl getFunDecl() -> f
    105:105:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBodyBlock() -> g
    110:110:java.util.Collection getIncomingStates(java.lang.String) -> a
    114:117:void debugLog(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug,java.lang.String,cn.com.codesec.scan.analyzer.stateful.ANSICodes) -> a
    120:121:void debugLog(cn.com.codesec.scan.analyzer.stateful.ControlflowDebug,java.lang.String) -> a
    125:126:java.util.Collection getSummaryEdges(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    144:225:java.util.Set analyze() -> h
    230:237:cn.com.codesec.util.fset.FSet filterByRuleID(cn.com.codesec.util.fset.FSet,java.util.Set) -> a
    241:245:boolean shouldVisitFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    249:270:void visitFunction(cn.com.codesec.util.fset.FSet) -> a
    273:279:void startFunction() -> i
    282:286:void endFunction() -> j
    289:299:void addIssue(cn.com.codesec.java.rules.StatefulRule,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory) -> a
    306:307:void addIssue(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
    310:320:void addSummaryTransition(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    324:335:void update() -> k
    338:339:void updateIncomingState() -> l
    342:357:void updateSummary() -> m
    360:369:void addIncomingState(cn.com.codesec.java.rules.StatefulRule,cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState) -> a
    372:375:cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability mkVulnerability(cn.com.codesec.java.rules.StatefulRule,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory) -> b
    261:261:int lambda$0(cn.com.codesec.scan.analyzer.stateful.Machine,cn.com.codesec.scan.analyzer.stateful.Machine) -> a
cn.com.codesec.scan.analyzer.stateful.StatefulVisitor -> cn.com.codesec.zN:
    cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread statefulAnalyzer -> b
    cn.com.codesec.scan.analyzer.util.LivenessAnalyzer liveness -> c
    cn.com.codesec.scan.analyzer.stateful.StatefulVisitor$ThrowingAssignVisitor throwingAssigns -> d
    cn.com.codesec.scan.analyzer.stateful.StateSet states -> e
    cn.com.codesec.scan.analyzer.preproc.BasicBlock currentBlock -> f
    cn.com.codesec.scan.analyzer.stateful.SplitStateMap splitMap -> g
    boolean $assertionsDisabled -> a
    42:42:void <clinit>() -> <clinit>
    52:57:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    61:64:void beginBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    68:94:void endBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    98:103:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    107:108:boolean isTmpDecl(cn.com.codesec.scan.ir.nodes.IRDeclStatement) -> a
    113:116:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Void) -> a
    121:122:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Void) -> a
    127:131:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Void) -> a
    136:137:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Void) -> a
    142:147:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Void) -> a
    151:155:void visitConditional(cn.com.codesec.scan.ir.nodes.IRConditional) -> a
    159:164:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Void) -> a
    169:170:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Void) -> a
    175:176:void setIncoming(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State) -> a
    180:190:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap getOutgoing() -> b
    194:212:void endScope(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    200:205:int lambda$0(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.scan.analyzer.stateful.StatefulVisitor$ThrowingAssignVisitor -> cn.com.codesec.zO:
    java.util.Set throwingAssigns -> a
    java.util.Map throwSource -> b
    219:222:void <init>() -> <init>
    225:225:boolean isThrowingAssign(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    230:230:cn.com.codesec.scan.ir.nodes.IRAssignmentStmt getThrowingAssign(cn.com.codesec.scan.ir.nodes.IRIfThen) -> a
    235:243:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    250:260:cn.com.codesec.scan.ir.nodes.IRIfThen trailingThrowIf(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    219:219:void <init>(cn.com.codesec.scan.analyzer.stateful.StatefulVisitor$ThrowingAssignVisitor) -> <init>
cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList -> cn.com.codesec.zP:
    cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList EMPTY -> b
    cn.com.codesec.util.fset.FMap edgeMap -> a
    79:80:void <clinit>() -> <clinit>
    23:23:cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList empty() -> a
    26:28:void <init>() -> <init>
    30:32:void <init>(cn.com.codesec.util.fset.FMap) -> <init>
    36:44:cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList with(cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition) -> a
    49:70:cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList withAll(cn.com.codesec.scan.analyzer.stateful.SummaryEdgeList,java.util.Collection) -> a
    75:75:cn.com.codesec.scan.util.collections.FCache getOrEmpty(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
cn.com.codesec.scan.analyzer.stateful.Transition -> cn.com.codesec.zQ:
    cn.com.codesec.scan.analyzer.stateful.MachineState from -> a
    cn.com.codesec.scan.analyzer.stateful.MachineState dest -> b
    22:25:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState) -> <init>
    cn.com.codesec.scan.analyzer.stateful.BindingMap match(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    cn.com.codesec.java.rules.SKYRule getRule() -> a
    34:34:cn.com.codesec.java.rules.StatefulRule getMachineRule() -> c
    39:39:cn.com.codesec.scan.analyzer.stateful.MachineState getFrom() -> d
    44:44:cn.com.codesec.scan.analyzer.stateful.MachineState getDest() -> e
    49:57:java.lang.String toString() -> toString
    java.lang.String getAstText() -> b
    65:72:boolean equals(java.lang.Object) -> equals
    77:77:int hashCode() -> hashCode
    81:81:boolean isInterestingTransition() -> f
cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode -> cn.com.codesec.zR:
    7:7:void <init>() -> <init>
    11:21:boolean equals(java.lang.Object) -> equals
    26:26:int hashCode() -> hashCode
    boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleAnyExpr -> cn.com.codesec.zS:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch MATCH -> a
    java.util.List exceptRuleLiterals -> b
    80:81:void <clinit>() -> <clinit>
    24:26:void <init>() -> <init>
    28:30:void <init>(java.util.List) -> <init>
    33:33:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    39:39:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    44:54:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    58:61:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch bindNSTNodeNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> a
    66:66:java.lang.String toRuleText() -> c
    71:71:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    76:76:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleAnyStmt -> cn.com.codesec.zT:
    18:18:void <init>() -> <init>
    22:22:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    28:61:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    65:98:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch bindNSTNodeNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> a
    103:103:java.lang.String toRuleText() -> c
    108:108:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    113:113:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    118:118:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment -> cn.com.codesec.zU:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode lhs -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode rhs -> b
    20:23:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    27:27:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    31:31:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode getRhs() -> d
    37:37:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    42:56:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    61:62:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    67:67:java.lang.String toRuleText() -> c
    72:81:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment$AssignMatch -> cn.com.codesec.zV:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch lhs -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch rhs -> b
    89:92:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> <init>
    96:105:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction -> cn.com.codesec.zW:
    cn.com.codesec.java.rules.RuleSet ruleSet -> a
    cn.com.codesec.java.rules.ControlflowActionPrototype cap -> b
    java.util.List inParams -> c
    java.util.List outParams -> d
    41:66:void <init>(cn.com.codesec.java.rules.StatefulRule,java.lang.String,java.util.List) -> <init>
    95:151:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    155:166:cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatch checkMatch(cn.com.codesec.java.rules.ControlflowAtFunctionRule,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    226:226:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    232:239:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    244:258:java.lang.String toRuleText() -> c
    263:270:boolean equals(java.lang.Object) -> equals
    275:275:int hashCode() -> hashCode
    280:280:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatch -> cn.com.codesec.zX:
    cn.com.codesec.scan.ir.nodes.IRFunCall call -> a
    java.util.Map matches -> b
    374:377:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall) -> <init>
    380:381:void addParam(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> a
    385:430:void writeMatchString(java.lang.StringBuilder,boolean) -> a
    374:374:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatch) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatchList -> cn.com.codesec.zY:
    java.util.List matches -> a
    437:439:void <init>(java.util.List) -> <init>
    443:444:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$Param -> cn.com.codesec.zZ:
    java.lang.String paramName -> a
    boolean isBind -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding ruleNode -> c
    int propertyIndex -> d
    290:294:void <init>(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,java.lang.String,boolean) -> <init>
    298:298:java.lang.String toString() -> toString
    317:329:boolean match(cn.com.codesec.java.rules.ControlflowAtFunctionRule,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatch) -> a
    333:347:cn.com.codesec.scan.ir.nodes.IRLocation getNodeForParameter(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.Parameter) -> a
    353:360:boolean equals(java.lang.Object) -> equals
    365:365:int hashCode() -> hashCode
    288:288:void access$0(cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$Param,int) -> a
    286:286:boolean access$1(cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$Param) -> a
    316:316:boolean access$2(cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$Param,cn.com.codesec.java.rules.ControlflowAtFunctionRule,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$AtMatch) -> a
    287:287:cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding access$3(cn.com.codesec.scan.analyzer.stateful.ast.RuleAtFunction$Param) -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleAutoGen -> cn.com.codesec.Aa:
    cn.com.codesec.scan.metadata.FunMeta meta -> e
    boolean $assertionsDisabled -> a
    15:15:void <clinit>() -> <clinit>
    20:24:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode[]) -> <init>
    27:27:boolean startsWithEllipsis(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode[]) -> a
    32:41:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    46:46:boolean matchesFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    51:60:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding -> cn.com.codesec.Ab:
    cn.com.codesec.scan.analyzer.stateful.RuleVarMeta var -> b
    boolean forceBind -> c
    boolean forceCheck -> d
    boolean isTopLevel -> e
    boolean reportOnAssignment -> g
    cn.com.codesec.java.rules.RuleSet ruleSet -> h
    boolean $assertionsDisabled -> a
    37:37:void <clinit>() -> <clinit>
    46:54:void <init>(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,boolean,boolean,boolean) -> <init>
    57:57:cn.com.codesec.scan.analyzer.stateful.RuleVarMeta getVarMeta() -> d
    62:62:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    68:68:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    72:73:void reportUseOnSimpleAssignment() -> e
    77:128:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    132:144:boolean isInKnownFunctionCall(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    148:148:boolean isUnbound(cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    153:154:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    159:159:java.lang.String toRuleText() -> c
    164:185:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleCall -> cn.com.codesec.Ac:
    java.lang.String name -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode[] args -> b
    boolean qualified -> e
    cn.com.codesec.java.rules.CallIdentifier identifier -> g
    boolean matchAnyFunction -> h
    java.lang.String INDIRECT_CALL -> c
    boolean $assertionsDisabled -> d
    25:32:void <clinit>() -> <clinit>
    35:35:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall genericCall(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode[],boolean) -> a
    38:44:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode[],boolean,cn.com.codesec.java.rules.CallIdentifier) -> <init>
    48:48:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    54:58:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    63:139:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    143:161:boolean matchesFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    166:187:java.lang.String toRuleText() -> c
    192:199:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    204:204:int hashCode() -> hashCode
    209:221:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch -> cn.com.codesec.Ad:
    java.lang.String callString -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType qualType -> c
    java.util.Map args -> d
    int maxArg -> e
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$ast$RuleCall$CallMatch$QualifyType -> f
    224:224:void <clinit>() -> <clinit>
    231:258:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,boolean) -> <init>
    261:263:void addArg(int,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> a
    267:315:void writeMatchString(java.lang.StringBuilder,boolean) -> a
    224:224:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$ast$RuleCall$CallMatch$QualifyType() -> a
    231:231:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,boolean,cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch) -> <init>
    260:260:void access$2(cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch,int,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType -> cn.com.codesec.Ae:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType CALL -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType ASSIGN -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType NONE -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType IGNORE -> d
    cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType[] ENUM$VALUES -> e
    317:322:void <clinit>() -> <clinit>
    317:317:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleCall$CallMatch$QualifyType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.ast.RuleCast -> cn.com.codesec.Af:
    java.util.regex.Pattern typeNamePattern -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode cast -> b
    29:32:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    36:45:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    50:51:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    56:80:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    84:95:java.lang.String getTypeName(cn.com.codesec.scan.metadata.Type) -> a
    99:102:java.lang.String getTypeMetaName(cn.com.codesec.scan.metadata.TypeMeta) -> a
    108:108:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    113:113:java.lang.String toRuleText() -> c
    118:118:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleCast$CastMatch -> cn.com.codesec.Ag:
    java.lang.String typeName -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch castMatch -> b
    126:129:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> <init>
    133:137:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleComparison -> cn.com.codesec.Ah:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding binding -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode other -> b
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> c
    22:25:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    29:29:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    35:35:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    40:84:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    90:90:java.lang.String toRuleText() -> c
    95:102:boolean equals(java.lang.Object) -> equals
    107:107:int hashCode() -> hashCode
    112:121:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    17:17:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> d
cn.com.codesec.scan.analyzer.stateful.ast.RuleComparison$CompareMatch -> cn.com.codesec.Ai:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch bindMatch -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch otherMatch -> b
    129:132:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> <init>
    136:141:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleDeclaration -> cn.com.codesec.Aj:
    int SIMPLE -> a
    int BUFFER -> b
    int COMPLEX -> c
    int ANY -> d
    boolean HUMAN_READABLE_OUTPUT -> g
    cn.com.codesec.scan.analyzer.stateful.RuleVarMeta var -> h
    int type -> i
    boolean $assertionsDisabled -> e
    19:25:void <clinit>() -> <clinit>
    29:33:void <init>(int,cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding) -> <init>
    36:36:boolean isBuffer() -> d
    41:41:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    45:45:cn.com.codesec.scan.analyzer.stateful.RuleVarMeta getRuleVarMeta() -> e
    51:51:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    56:88:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    100:100:java.lang.String toRuleText() -> c
    104:104:java.lang.String genString(java.lang.String) -> a
    109:116:boolean equals(java.lang.Object) -> equals
    121:121:int hashCode() -> hashCode
    126:135:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    103:103:java.lang.String access$1(cn.com.codesec.scan.analyzer.stateful.ast.RuleDeclaration,java.lang.String) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleDeclaration$1 -> cn.com.codesec.Ak:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDeclaration this$0 -> a
    1:88:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleDeclaration,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    91:94:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator -> cn.com.codesec.Al:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode subnode -> a
    25:27:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    31:31:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    37:37:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    42:58:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    62:90:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch isImplicitDeref(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> b
    95:95:java.lang.String toRuleText() -> c
    100:100:boolean equals(java.lang.Object) -> equals
    105:105:int hashCode() -> hashCode
    110:115:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefMatch -> cn.com.codesec.Am:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType type -> b
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$ast$RuleDerefOperator$DerefType -> c
    130:132:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType) -> <init>
    136:149:void writeMatchString(java.lang.StringBuilder,boolean) -> a
    125:125:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$ast$RuleDerefOperator$DerefType() -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType -> cn.com.codesec.An:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType FIELD -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType ARRAY -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType ARRAY_LEN -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType[] ENUM$VALUES -> d
    118:122:void <clinit>() -> <clinit>
    118:118:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleDerefOperator$DerefType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.ast.RuleEnumField -> cn.com.codesec.Ao:
    java.lang.String typeName -> a
    java.lang.String fieldName -> b
    14:17:void <init>(java.lang.String,java.lang.String) -> <init>
    21:31:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    36:36:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    41:41:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    46:46:java.lang.String toRuleText() -> c
    51:57:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleEnumField$FieldMatch -> cn.com.codesec.Ap:
    java.lang.String typeName -> a
    java.lang.String fieldName -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch castMatch -> c
    66:69:void <init>(java.lang.String,java.lang.String) -> <init>
    73:78:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleEscape -> cn.com.codesec.Aq:
    boolean FUNCTION_RETURN_IS_ESCAPE -> a
    cn.com.codesec.scan.analyzer.stateful.RuleVarMeta rvm -> b
    193:194:void <clinit>() -> <clinit>
    41:43:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding) -> <init>
    47:47:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    53:61:cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    67:67:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    72:81:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    85:89:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchThrow(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    93:99:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchAssign(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,boolean) -> a
    103:116:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchSetterCall(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    120:162:boolean isEscapePoint(cn.com.codesec.scan.ir.nodes.IRExpression,boolean,java.util.Set) -> a
    168:168:java.lang.String toRuleText() -> c
    173:173:boolean equals(java.lang.Object) -> equals
    178:178:int hashCode() -> hashCode
    183:188:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleFunctionEnd -> cn.com.codesec.Ar:
    java.lang.String MATCH_TEXT -> a
    boolean reportNonReturningFunctions -> b
    19:21:void <init>(boolean) -> <init>
    25:25:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    31:31:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    36:43:java.lang.String matchMeta(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> b
    48:48:java.lang.String toRuleText() -> c
    53:53:boolean equals(java.lang.Object) -> equals
    58:58:int hashCode() -> hashCode
    63:71:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock -> cn.com.codesec.As:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding var -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode constNode -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType compType -> d
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch branch -> e
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> f
    25:25:void <clinit>() -> <clinit>
    32:37:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType,boolean) -> <init>
    41:41:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    47:54:cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    60:60:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    65:65:java.lang.String toRuleText() -> c
    69:147:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$BranchMatch whichBranch(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    152:160:java.lang.Boolean getBooleanValue(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    164:165:boolean checkOperator(cn.com.codesec.parse.ir.IROperators,boolean) -> a
    169:171:boolean switchSides(cn.com.codesec.parse.ir.IROperators,boolean) -> b
    176:183:boolean equals(java.lang.Object) -> equals
    188:188:int hashCode() -> hashCode
    193:202:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    29:29:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType access$1(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock) -> a
    30:30:cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch access$2(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock) -> b
    25:25:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> d
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$BranchMatch -> cn.com.codesec.At:
    cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch selectedBranch -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch varMatch -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch constMatch -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock this$0 -> d
    boolean $assertionsDisabled -> e
    261:261:void <clinit>() -> <clinit>
    267:273:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    276:276:java.lang.String getMatchString() -> a
    267:267:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.BranchMachineInput$Branch,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$BranchMatch) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType -> cn.com.codesec.Au:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType EQUAL -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType NOT_EQUAL -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType LESS_THAN -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType GREATER_THAN -> d
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType LESS_THAN_EQUAL -> e
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType GREATER_THAN_EQUAL -> f
    cn.com.codesec.parse.ir.IROperators equivOperator -> g
    cn.com.codesec.parse.ir.IROperators inverseOperator -> h
    java.lang.String operatorText -> i
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType[] ENUM$VALUES -> j
    205:237:void <clinit>() -> <clinit>
    248:252:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    255:255:boolean isCommutative() -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType valueOf(java.lang.String) -> valueOf
    248:248:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType) -> <init>
    246:246:java.lang.String access$3(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType) -> a
    244:244:cn.com.codesec.parse.ir.IROperators access$4(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType) -> b
    245:245:cn.com.codesec.parse.ir.IROperators access$5(cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType) -> c
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$1 -> cn.com.codesec.Av:
    1:207:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    210:210:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$2 -> cn.com.codesec.Aw:
    1:213:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    216:216:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$3 -> cn.com.codesec.Ax:
    1:219:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    222:222:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$4 -> cn.com.codesec.Ay:
    1:225:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    228:228:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$5 -> cn.com.codesec.Az:
    1:231:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    234:234:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType$6 -> cn.com.codesec.AA:
    1:237:void <init>(java.lang.String,int,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.parse.ir.IROperators,java.lang.String) -> <init>
    240:240:cn.com.codesec.scan.analyzer.stateful.ast.RuleIfBlock$CompType getCommutedOperator() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral -> cn.com.codesec.AB:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralInternal internal -> a
    32:34:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralInternal) -> <init>
    37:38:void <init>(java.lang.String) -> <init>
    41:42:void <init>(java.lang.Boolean) -> <init>
    45:46:void <init>(java.lang.Character) -> <init>
    49:50:void <init>(java.lang.Long) -> <init>
    53:54:void <init>(java.lang.Double) -> <init>
    57:58:void <init>() -> <init>
    62:62:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    68:68:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    72:72:java.lang.Boolean getBooleanLiteralValue() -> d
    77:85:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    89:97:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch bindNSTNodeNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch,cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder) -> a
    102:102:java.lang.String toRuleText() -> c
    107:107:boolean equals(java.lang.Object) -> equals
    112:112:int hashCode() -> hashCode
    117:122:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralBoolean -> cn.com.codesec.AC:
    boolean val -> a
    176:178:void <init>(boolean) -> <init>
    182:182:java.lang.Boolean getBooleanValue() -> a
    187:194:boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    199:199:java.lang.String getString() -> b
    204:204:boolean equals(java.lang.Object) -> equals
    209:209:int hashCode() -> hashCode
    176:176:void <init>(boolean,cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralBoolean) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralChar -> cn.com.codesec.AD:
    216:217:void <init>(char) -> <init>
    221:221:java.lang.String getString() -> b
    226:226:boolean equals(java.lang.Object) -> equals
    231:231:int hashCode() -> hashCode
    215:215:void <init>(char,cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralChar) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralDouble -> cn.com.codesec.AE:
    double val -> a
    275:277:void <init>(double) -> <init>
    281:285:boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    290:290:java.lang.String getString() -> b
    295:295:boolean equals(java.lang.Object) -> equals
    300:300:int hashCode() -> hashCode
    275:275:void <init>(double,cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralDouble) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralInternal -> cn.com.codesec.AF:
    125:125:void <init>() -> <init>
    128:128:java.lang.Boolean getBooleanValue() -> a
    boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    java.lang.String getString() -> b
    125:125:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralInternal) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralLong -> cn.com.codesec.AG:
    long val -> a
    239:241:void <init>(long) -> <init>
    245:252:boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    257:257:java.lang.String getString() -> b
    262:262:boolean equals(java.lang.Object) -> equals
    267:267:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralNull -> cn.com.codesec.AH:
    304:304:void <init>() -> <init>
    308:315:boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    320:320:java.lang.String getString() -> b
    325:325:boolean equals(java.lang.Object) -> equals
    330:330:int hashCode() -> hashCode
    304:304:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralNull) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralString -> cn.com.codesec.AI:
    java.lang.String val -> b
    boolean $assertionsDisabled -> a
    136:136:void <clinit>() -> <clinit>
    140:145:void <init>(java.lang.String) -> <init>
    149:153:boolean match(cn.com.codesec.scan.analyzer.constants.ConstantValue,boolean) -> a
    158:158:java.lang.String getString() -> b
    163:163:boolean equals(java.lang.Object) -> equals
    168:168:int hashCode() -> hashCode
    140:140:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleLiteral$RuleLiteralString) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleMetaNode -> cn.com.codesec.AJ:
    12:12:void <init>() -> <init>
    16:16:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    22:28:cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    java.lang.String matchMeta(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleNode -> cn.com.codesec.AK:
    16:16:void <init>() -> <init>
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    21:22:cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.Transition) -> a
    cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    cn.com.codesec.util.fset.FSet getRuleVars() -> b
    java.lang.String toRuleText() -> c
    35:35:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType -> cn.com.codesec.AL:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType UNKNOWN -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType ACCESS -> b
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType ASSIGNMENT -> c
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType COMPARISON -> d
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType DECLARATION -> e
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType DEREFERENCE -> f
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType FUNCTION_CALL -> g
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType REFERENCE -> h
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType RETURN -> i
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType END_SCOPE -> j
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType END_FUNCTION -> k
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType CAST -> l
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType FIELD -> m
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType OPERATOR -> n
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType[] ENUM$VALUES -> o
    7:22:void <clinit>() -> <clinit>
    7:7:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode -> cn.com.codesec.AM:
    boolean printDescent -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$RuleDescender descender -> b
    boolean leadingEllipsis -> c
    boolean $assertionsDisabled -> f
    43:87:void <clinit>() -> <clinit>
    49:51:void <init>() -> <init>
    54:55:void setLeadingEllipsis(boolean) -> a
    58:58:boolean getLeadingEllipsis() -> f
    64:75:cn.com.codesec.scan.analyzer.stateful.BindingMap matchRule(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    82:83:void pr(java.lang.String,cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread) -> a
    45:45:boolean access$0() -> g
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$ConstantTextMatch -> cn.com.codesec.AN:
    java.lang.String text -> a
    113:115:void <init>(java.lang.String) -> <init>
    119:120:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$DoneException -> cn.com.codesec.AO:
    cn.com.codesec.scan.analyzer.stateful.BindingMap result -> a
    346:348:void <init>(cn.com.codesec.scan.analyzer.stateful.BindingMap) -> <init>
    351:351:cn.com.codesec.scan.analyzer.stateful.BindingMap getResult() -> a
    356:356:java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    346:346:void <init>(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$DoneException) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch -> cn.com.codesec.AP:
    89:89:void <init>() -> <init>
    void writeMatchString(java.lang.StringBuilder,boolean) -> a
    94:96:java.lang.String getString() -> b
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$ParenPrefixMatch -> cn.com.codesec.AQ:
    java.lang.String prefix -> b
    128:130:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,java.lang.String) -> <init>
    134:137:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$RuleDescender -> cn.com.codesec.AR:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode rule -> b
    boolean $assertionsDisabled -> a
    179:179:void <clinit>() -> <clinit>
    183:185:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    188:193:void doVisit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    196:208:void printDescent(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread) -> a
    212:213:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    218:219:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    224:225:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    230:243:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    248:249:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    254:255:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    260:261:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDereference,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    266:267:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    272:273:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    278:279:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    284:285:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    290:291:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAllocation,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    296:296:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    301:303:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    308:310:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    314:339:void updateCallTargetIncomingState(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    183:183:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$RuleDescender) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$SingleNSTNodeMatch -> cn.com.codesec.AS:
    cn.com.codesec.scan.ir.util.memory.IRRef ref -> a
    144:146:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    150:176:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$WrappedMatch -> cn.com.codesec.AT:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch wrapped -> a
    104:106:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleOperator -> cn.com.codesec.AU:
    cn.com.codesec.parse.ir.IROperators irOperators -> a
    22:24:void <init>(cn.com.codesec.parse.ir.IROperators) -> <init>
    28:35:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    40:40:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    45:45:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    50:50:java.lang.String toRuleText() -> c
    55:55:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleOperator$OperatorMatch -> cn.com.codesec.AV:
    cn.com.codesec.scan.ir.nodes.IRBinaryOpExp opExp -> a
    60:62:void <init>(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp) -> <init>
    65:67:void writeMatchString(java.lang.StringBuilder,boolean) -> a
cn.com.codesec.scan.analyzer.stateful.ast.RuleParam -> cn.com.codesec.AW:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding binding -> b
    cn.com.codesec.scan.analyzer.stateful.MachineState toState -> c
    cn.com.codesec.scan.analyzer.stateful.MachineState fromState -> d
    int index -> e
    boolean $assertionsDisabled -> a
    19:19:void <clinit>() -> <clinit>
    26:30:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding,int) -> <init>
    33:35:void setTransition(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    39:39:java.lang.String matchMeta(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> b
    45:45:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    50:50:java.lang.String toRuleText() -> c
    54:67:cn.com.codesec.util.fset.FList createBindingMaps(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread) -> a
    71:76:cn.com.codesec.scan.analyzer.stateful.BindingMap createBindingMap(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    81:86:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleRefOperator -> cn.com.codesec.AX:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode subnode -> a
    24:26:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    30:30:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    36:36:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    41:55:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    60:60:java.lang.String toRuleText() -> c
    64:68:boolean contains(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    73:73:boolean equals(java.lang.Object) -> equals
    78:78:int hashCode() -> hashCode
    83:88:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleReturn -> cn.com.codesec.AY:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch MATCH_WITHOUT_EXPR -> a
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode expr -> b
    87:88:void <clinit>() -> <clinit>
    22:24:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> <init>
    28:28:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    32:32:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode getExpr() -> d
    38:38:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    43:54:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    59:63:java.lang.String toRuleText() -> c
    68:68:boolean equals(java.lang.Object) -> equals
    73:73:int hashCode() -> hashCode
    78:83:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleReturn$ReturnMatch -> cn.com.codesec.AZ:
    93:94:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch) -> <init>
    98:100:void writeMatchString(java.lang.StringBuilder,boolean) -> a
    92:92:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch,cn.com.codesec.scan.analyzer.stateful.ast.RuleReturn$ReturnMatch) -> <init>
cn.com.codesec.scan.analyzer.stateful.ast.RuleScopeEnd -> cn.com.codesec.Ba:
    cn.com.codesec.scan.analyzer.stateful.RuleVarMeta var -> b
    boolean reportNonReturningFunctions -> c
    boolean $assertionsDisabled -> a
    33:33:void <clinit>() -> <clinit>
    38:41:void <init>(cn.com.codesec.scan.analyzer.stateful.ast.RuleBinding,boolean) -> <init>
    45:45:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    51:51:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    56:124:java.lang.String matchMeta(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> b
    128:148:boolean exceptionFromFactory(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    152:176:boolean exceptionFromConstructor(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    182:182:java.lang.String toRuleText() -> c
    187:187:boolean equals(java.lang.Object) -> equals
    192:192:int hashCode() -> hashCode
    197:209:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RuleTrailingEllipsis -> cn.com.codesec.Bb:
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch MATCH -> a
    54:55:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    21:21:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    27:27:cn.com.codesec.util.fset.FSet getRuleVars() -> b
    32:35:cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode$NodeMatch matchNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch) -> a
    40:40:java.lang.String toRuleText() -> c
    45:45:boolean ruleCompare(cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    50:50:int compareTo(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.ast.RunningMatch -> cn.com.codesec.Bc:
    cn.com.codesec.scan.analyzer.stateful.BindingMap bindingMap -> a
    cn.com.codesec.util.fset.FList toAdd -> b
    cn.com.codesec.scan.analyzer.stateful.Transition edge -> c
    cn.com.codesec.scan.analyzer.stateful.MachineInput input -> d
    29:34:void <init>(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.Transition,cn.com.codesec.scan.analyzer.stateful.MachineInput) -> <init>
    37:37:cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread getAnalyzer() -> a
    41:41:boolean fromStartState() -> b
    45:46:void suppress() -> c
    49:49:cn.com.codesec.scan.analyzer.stateful.BindingMap getBindingMap() -> d
    53:53:cn.com.codesec.scan.analyzer.stateful.MachineInput getInput() -> e
    57:65:boolean isEmpty(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    69:70:void add(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    73:78:boolean remove(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.parse.ir.SourceLocation) -> a
    82:91:boolean contains(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> b
    95:103:boolean hasBindingFor(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> b
    108:108:cn.com.codesec.scan.analyzer.stateful.BindingMap executeTraversal(cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineInput,java.lang.String) -> a
    113:113:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition -> cn.com.codesec.Bd:
    java.util.concurrent.locks.Lock SUBTRACE_GLOBAL_LOCK -> c
    cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode label -> d
    int hashcode -> e
    cn.com.codesec.scan.analyzer.stateful.report.StorableHistory subtrace -> f
    124:125:void <clinit>() -> <clinit>
    30:34:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory) -> <init>
    39:39:cn.com.codesec.scan.analyzer.stateful.BindingMap match(cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> a
    45:45:cn.com.codesec.java.rules.SKYRule getRule() -> a
    50:57:void pickSubtrace(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> a
    61:68:void setSubtrace(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> b
    75:81:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory getSubtrace() -> g
    87:87:java.lang.String getAstText() -> b
    92:102:boolean equals(java.lang.Object) -> equals
    107:107:int hashCode() -> hashCode
    112:120:int compareTo(cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition) -> a
    129:129:java.lang.String getCreateRuleID() -> h
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransitionModel -> cn.com.codesec.Be:
    17:18:void <init>(cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel) -> <init>
    24:25:void mergeoldAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition,cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition) -> a
    31:32:void mergenewAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition,cn.com.codesec.scan.analyzer.stateful.metadata.GeneratedTransition) -> b
    36:36:java.util.Set getRelationFunMetas(cn.com.codesec.scan.metadata.FunMeta) -> a
    42:48:com.google.common.collect.Multimap getGeneratedTransitions(cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    54:72:void update(cn.com.codesec.scan.metadata.FunMeta,java.util.Set,java.util.Set) -> a
    1:1:void mergeoldAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> a
    1:1:void mergenewAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> b
cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState -> cn.com.codesec.Bf:
    cn.com.codesec.scan.metadata.FunMeta funMeta -> b
    cn.com.codesec.scan.analyzer.stateful.MachineState state -> c
    java.util.Map arguments -> d
    boolean $assertionsDisabled -> a
    18:18:void <clinit>() -> <clinit>
    24:29:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.stateful.BindingMap) -> <init>
    32:42:void addArgumentBinding(int,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    45:45:cn.com.codesec.scan.metadata.FunMeta getFunMeta() -> a
    49:49:cn.com.codesec.scan.analyzer.stateful.MachineState getState() -> b
    53:55:void setState(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    58:71:cn.com.codesec.scan.analyzer.stateful.BindingMap createBindingMap(cn.com.codesec.scan.analyzer.stateful.StatefulAnalyzerThread) -> a
    76:76:java.lang.String toString() -> toString
    81:88:boolean equals(java.lang.Object) -> equals
    93:96:int hashCode() -> hashCode
    100:100:boolean hasBindings() -> c
    105:105:java.lang.String getCreateRuleID() -> h
cn.com.codesec.scan.analyzer.stateful.metadata.IncomingStateModel -> cn.com.codesec.Bg:
    16:17:void <init>(cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel) -> <init>
    22:22:void mergeoldAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState,cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState) -> a
    27:27:void mergenewAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState,cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState) -> b
    31:31:java.util.Set getRelationFunMetas(cn.com.codesec.scan.metadata.FunMeta) -> a
    37:46:com.google.common.collect.Multimap getIncomingStates(cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    52:70:void update(cn.com.codesec.scan.metadata.FunMeta,java.util.Set,java.util.Set) -> a
    1:1:void mergeoldAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> a
    1:1:void mergenewAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> b
cn.com.codesec.scan.analyzer.stateful.metadata.QueueReasonsAttr -> cn.com.codesec.Bh:
    java.util.Set reasons -> a
    17:19:void <init>(java.util.HashSet) -> <init>
    22:23:void <init>() -> <init>
    27:27:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.metadata.QueueReasonsAttr$Merger -> cn.com.codesec.Bi:
    30:30:void <init>() -> <init>
    34:37:cn.com.codesec.scan.analyzer.stateful.metadata.QueueReasonsAttr merge(cn.com.codesec.scan.analyzer.stateful.metadata.QueueReasonsAttr,cn.com.codesec.scan.analyzer.stateful.metadata.QueueReasonsAttr) -> a
    1:1:java.io.Serializable merge(java.io.Serializable,java.io.Serializable) -> a
cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel -> cn.com.codesec.Bj:
    java.util.Map queueReasons -> a
    java.util.Map metaRequeues -> b
    21:25:void <init>() -> <init>
    32:40:void addToQueue(java.lang.String,cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    43:44:void addRequeueReason(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    47:48:void addRequeueReason(java.util.Set,java.lang.String) -> a
    51:52:java.util.Set takeReasons(cn.com.codesec.scan.metadata.FunMeta) -> a
    56:64:void addRequeue(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    67:75:void addRequeue(cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    78:84:java.util.Set takeRequeues(cn.com.codesec.scan.metadata.FunMeta) -> b
    33:38:java.util.Set lambda$0(java.lang.String,cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    47:47:void lambda$1(java.lang.String,cn.com.codesec.scan.metadata.FunMeta) -> a
    57:62:java.util.Set lambda$2(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    68:73:java.util.Set lambda$3(java.util.Set,cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
cn.com.codesec.scan.analyzer.stateful.metadata.RuleFactory -> cn.com.codesec.Bk:
    cn.com.codesec.scan.analyzer.stateful.BindingMap bm -> a
    cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory hist -> b
    30:33:void <init>(cn.com.codesec.scan.analyzer.stateful.BindingMap) -> <init>
    36:37:void createArgRule(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    40:41:void createReturnRule(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
    44:66:void createRule(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.metadata.FunMeta,boolean) -> a
    69:70:cn.com.codesec.scan.analyzer.stateful.ast.RuleAssignment createReturnTransition(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.ast.RuleNormalNode) -> a
    74:104:cn.com.codesec.scan.analyzer.stateful.ast.RuleAutoGen createRuleCall(cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.metadata.FunMeta,int) -> a
    108:109:void createTransition(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.ast.GeneratableRuleNode) -> a
    112:126:int getArgumentIndex(cn.com.codesec.scan.ir.nodes.IRNode) -> a
cn.com.codesec.scan.analyzer.stateful.metadata.StateProfile -> cn.com.codesec.Bl:
    cn.com.codesec.scan.metadata.FunMeta ownerMeta -> b
    java.util.concurrent.ConcurrentMap stateSignatures -> c
    boolean $assertionsDisabled -> a
    12:12:void <clinit>() -> <clinit>
    16:19:void <init>(cn.com.codesec.scan.metadata.FunMeta) -> <init>
    22:22:java.util.LinkedHashSet getIncomingState(cn.com.codesec.java.rules.StatefulRule) -> a
    26:26:java.util.concurrent.ConcurrentMap getStateSignatures() -> a
    30:46:boolean addIncomingState(cn.com.codesec.java.rules.StatefulRule,cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState) -> a
    63:63:java.lang.String toString() -> toString
    33:44:java.util.LinkedHashSet lambda$0(cn.com.codesec.scan.analyzer.stateful.metadata.IncomingState,org.apache.commons.lang3.mutable.MutableBoolean,java.lang.String,java.util.LinkedHashSet) -> a
cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary -> cn.com.codesec.Bm:
    java.lang.String getCreateRuleID() -> h
cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummaryModel -> cn.com.codesec.Bn:
    cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel requeuesModel -> a
    java.util.Map historyData -> b
    java.util.Map newData -> c
    34:39:void <init>(cn.com.codesec.scan.analyzer.stateful.metadata.RequeuesModel) -> <init>
    44:61:void add(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> a
    void mergeoldAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> a
    void mergenewAndNew(cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary,cn.com.codesec.scan.analyzer.stateful.metadata.StatefulSummary) -> b
    86:198:void update(cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> b
    void update(cn.com.codesec.scan.metadata.FunMeta,java.util.Set,java.util.Set) -> a
    206:226:java.util.Set getSnapshot(cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> c
    java.util.Set getRelationFunMetas(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer -> cn.com.codesec.Bo:
    long DEFAULT_MAX_TIME -> e
    java.util.Map RULE_IDS_C -> f
    java.util.Map RULE_IDS_J -> g
    java.util.Map RULE_IDS_D -> h
    boolean interprocedural -> i
    boolean reportInfeasible -> j
    long maxFunctionTime -> k
    java.util.concurrent.ConcurrentMap issueDeduper -> l
    java.util.Set blacklist -> m
    179:194:void <clinit>() -> <clinit>
    41:49:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    54:54:java.lang.String getName() -> a
    60:60:java.lang.String getDirective() -> c
    72:72:java.lang.String getPoolSize() -> b
    77:78:void expireProgramModelData() -> d
    84:85:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    89:89:boolean isInterprocedural() -> f
    94:94:long getMaxFunctionTime() -> j
    101:104:void run() -> e
    108:116:void analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    120:130:void addIssue(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue) -> a
    155:162:java.util.Map getRules(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    167:167:boolean checkBlacklist(cn.com.codesec.scan.metadata.FunMeta) -> b
    172:176:void blacklist(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist) -> a
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist -> cn.com.codesec.Bp:
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist TIME -> a
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist MEMORY -> b
    java.lang.String counter -> c
    int messageCode -> d
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist[] ENUM$VALUES -> e
    196:199:void <clinit>() -> <clinit>
    204:207:void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$Blacklist valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType -> cn.com.codesec.Bq:
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType STORE_DEREF -> a
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType CHECK_DEREF -> b
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType DEREF_CHECK -> c
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType[] ENUM$VALUES -> d
    210:214:void <clinit>() -> <clinit>
    210:210:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue -> cn.com.codesec.Br:
    cn.com.codesec.java.rules.VulnerabilityRule rule -> b
    cn.com.codesec.parse.ir.SourceLocation primary -> c
    cn.com.codesec.scan.meta.Symbol primarySymbol -> d
    cn.com.codesec.scan.metadata.FunMeta contextFunction -> e
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue$Evidence evidence1 -> g
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue$Evidence evidence2 -> h
    boolean feasible -> i
    cn.com.codesec.util.fset.FList secondaryLocations -> j
    java.lang.String iidInputText -> k
    java.lang.String pathType -> l
    boolean $assertionsDisabled -> a
    44:44:void <clinit>() -> <clinit>
    60:60:java.lang.String getPathType() -> m_
    64:121:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue create(cn.com.codesec.java.rules.VulnerabilityRule,java.util.List,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment) -> a
    124:137:void <init>(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment,boolean,org.apache.commons.lang3.tuple.Pair,org.apache.commons.lang3.tuple.Pair) -> <init>
    141:247:java.lang.String buildPathType(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    251:253:void generateInstanceID() -> b
    256:264:cn.com.codesec.scan.meta.Symbol getSymbol(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    268:279:java.lang.String createIIDText(org.apache.commons.lang3.tuple.Pair,org.apache.commons.lang3.tuple.Pair) -> a
    283:288:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue$Evidence convert(org.apache.commons.lang3.tuple.Pair) -> a
    293:293:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    299:299:java.lang.String getAnalyzerName() -> h
    305:305:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    310:310:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    315:315:cn.com.codesec.scan.meta.Symbol getPrimaryVariable() -> c_
    320:320:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    325:325:float getSeverity() -> m
    335:335:float getConfidence() -> d
    339:339:boolean isFeasible() -> e
    344:361:boolean equals(java.lang.Object) -> equals
    366:369:int hashCode() -> hashCode
    374:395:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    430:435:void collectSourceLocations(java.util.Collection) -> a
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue$Evidence -> cn.com.codesec.Bs:
    java.lang.String label -> a
    cn.com.codesec.parse.ir.SourceLocation primarySI -> b
    cn.com.codesec.parse.ir.SourceLocation secondarySI -> c
    459:463:void <init>(java.lang.String,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    466:470:void collectSourceLocations(java.util.Collection) -> a
    474:495:boolean equals(java.lang.Object) -> equals
    500:503:int hashCode() -> hashCode
    508:523:int compareTo(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue$Evidence) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor -> cn.com.codesec.Bt:
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer analyzer -> b
    java.util.Map rules -> c
    cn.com.codesec.scan.metadata.FunMeta funMeta -> d
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap localState -> e
    cn.com.codesec.scan.analyzer.stateful.nullptr.SplitStateMap splitMap -> f
    boolean timeExpired -> g
    cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource keyFactory -> h
    java.util.Map surrogates -> i
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> j
    43:43:void <clinit>() -> <clinit>
    54:60:void <init>(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer,java.util.Map,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    63:63:cn.com.codesec.java.rules.VulnerabilityRule getRule(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType) -> a
    68:69:void timeExpired() -> a
    73:77:void beginBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    81:90:void endBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    94:96:void setIncoming(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State) -> a
    100:100:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap getOutgoing() -> b
    104:105:void addIssue(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrIssue) -> a
    109:131:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    135:136:void startVisit() -> d
    139:140:void endVisit() -> e
    143:143:void updateFunctionSummary() -> f
    146:150:void addSurrogate(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRLocation,boolean,boolean) -> a
    153:159:cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor$Surrogate getSurrogate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    163:187:void visitConditional(cn.com.codesec.scan.ir.nodes.IRConditional) -> a
    190:249:cn.com.codesec.scan.ir.nodes.IRExpression checkForNullCompare(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.util.Bean,cn.com.codesec.scan.util.Bean) -> a
    254:255:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Void) -> a
    260:261:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Void) -> a
    266:280:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Void) -> a
    285:290:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    295:319:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    324:337:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Void) -> a
    342:346:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Void) -> a
    351:354:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Void) -> a
    359:362:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Void) -> a
    367:370:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Void) -> a
    375:375:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Void) -> a
    379:384:boolean isNullLiteral(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    388:395:java.lang.Boolean getBooleanValue(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    43:43:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> c
cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor$Surrogate -> cn.com.codesec.Bu:
    cn.com.codesec.scan.ir.nodes.IRExpression expr -> a
    boolean nullWhenTrue -> b
    boolean fromInstanceOf -> c
    404:408:void <init>(cn.com.codesec.scan.ir.nodes.IRExpression,boolean,boolean) -> <init>
cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness -> cn.com.codesec.Bv:
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor visitor -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock phiBlock -> c
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment path -> d
    java.util.List locations -> e
    boolean nonNull -> f
    boolean isNull -> g
    boolean deref -> h
    boolean $assertionsDisabled -> a
    26:26:void <clinit>() -> <clinit>
    36:44:void <init>(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor,cn.com.codesec.scan.analyzer.preproc.BasicBlock,boolean) -> <init>
    48:53:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness copy() -> a
    58:59:void registerEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    62:68:void registerDeref(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    71:75:void registerNull(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    78:95:void registerCompare(cn.com.codesec.scan.ir.nodes.IRExpression,boolean,boolean) -> a
    98:116:boolean merge(cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness) -> a
    120:141:void checkConsistency(cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation) -> a
    145:152:boolean equals(java.lang.Object) -> equals
    157:158:int hashCode() -> hashCode
    163:180:java.lang.String toString() -> toString
    184:184:boolean isPhiFrom(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    188:212:boolean isFromOffsetOf() -> b
cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation -> cn.com.codesec.Bw:
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation ASSIGN -> a
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation COMPARE -> b
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation DEREF -> c
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType ruleType -> d
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation[] ENUM$VALUES -> e
    215:219:void <clinit>() -> <clinit>
    223:225:void <init>(java.lang.String,int,cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrAnalyzer$RuleType) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Operation valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason -> cn.com.codesec.Bx:
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason ASSIGN -> a
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason DEREFERENCE -> b
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason COMPARE -> c
    java.lang.String string -> d
    cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason[] ENUM$VALUES -> e
    228:232:void <clinit>() -> <clinit>
    236:238:void <init>(java.lang.String,int,java.lang.String) -> <init>
    241:241:java.lang.String getString() -> a
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness$Reason valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap -> cn.com.codesec.By:
    boolean EAT_DISK -> b
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor visitor -> c
    cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource keyFactory -> d
    cn.com.codesec.scan.analyzer.preproc.BasicBlock currentBlock -> e
    cn.com.codesec.scan.analyzer.stateful.nullptr.VNMapping nullnesses -> f
    java.util.Set mergedPhis -> g
    boolean $assertionsDisabled -> a
    18:20:void <clinit>() -> <clinit>
    27:32:void <init>(cn.com.codesec.scan.analyzer.stateful.nullptr.NullPtrVisitor,cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource) -> <init>
    36:45:boolean mergeState(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    49:102:boolean mergeForPhi(cn.com.codesec.scan.analyzer.preproc.SSAPhi,cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap) -> a
    107:110:cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap copyState() -> b
    114:116:void beginBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    119:123:void registerDeref(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    126:130:void registerNullAssign(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    133:137:void registerNullCompare(cn.com.codesec.scan.ir.nodes.IRExpression,boolean,boolean) -> a
    140:140:java.lang.Integer getValueNumber(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    144:144:java.lang.Integer getValueNumber(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    148:157:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness getNullness(cn.com.codesec.scan.ir.nodes.IRExpression) -> e
    162:162:java.lang.String toString() -> toString
    166:171:void registerSingleEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    174:174:boolean isTrackedObject(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    1:1:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State copyState() -> a
cn.com.codesec.scan.analyzer.stateful.nullptr.SplitStateMap -> cn.com.codesec.Bz:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock trueBlock -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock falseBlock -> c
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap trueState -> d
    cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap falseState -> e
    boolean $assertionsDisabled -> a
    17:17:void <clinit>() -> <clinit>
    24:29:void <init>(cn.com.codesec.scan.ir.nodes.IRConditional,cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap) -> <init>
    33:37:cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$State getStateFor(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    42:61:java.util.Collection merge(cn.com.codesec.scan.analyzer.stateful.BasicBlockVisitor$StateMap,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    65:65:cn.com.codesec.scan.analyzer.stateful.nullptr.NullnessMap getStateForBranch(boolean) -> a
    69:77:void registerOutgoingEdges(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
cn.com.codesec.scan.analyzer.stateful.nullptr.VNMapping -> cn.com.codesec.BA:
    java.util.ArrayList values -> a
    16:18:void <init>() -> <init>
    21:21:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness get(int) -> a
    25:31:cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness set(int,cn.com.codesec.scan.analyzer.stateful.nullptr.Nullness) -> a
    36:36:java.util.Iterator iterator() -> iterator
    40:45:cn.com.codesec.scan.analyzer.stateful.nullptr.VNMapping copy() -> a
    49:65:boolean merge(cn.com.codesec.scan.analyzer.stateful.nullptr.VNMapping,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    70:78:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource -> cn.com.codesec.BB:
    java.util.Map values -> b
    int maxValueNumber -> c
    boolean $assertionsDisabled -> a
    30:30:void <clinit>() -> <clinit>
    35:38:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    41:41:int getMaxValueNumber() -> a
    45:49:java.lang.Integer getValueNumber(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    53:53:java.lang.Integer getValueNumber(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> a
    57:58:java.lang.Integer getValueNumber(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    63:73:java.lang.String toString() -> toString
    77:107:int computeValueNumbers(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    111:117:boolean isNumberable(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> c
    110:110:boolean access$0(cn.com.codesec.scan.analyzer.preproc.SSAVar) -> b
cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$IntWrapper -> cn.com.codesec.BC:
    int value -> a
    174:174:void <init>() -> <init>
    179:179:int getValue() -> a
    183:185:int incrValue() -> b
    174:174:void <init>(cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$IntWrapper) -> <init>
cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$NumberingVisitor -> cn.com.codesec.BD:
    java.util.Map values -> a
    124:126:void <init>(java.util.Map) -> <init>
    130:130:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$IntWrapper) -> a
    135:139:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$IntWrapper) -> a
    144:162:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.analyzer.stateful.nullptr.ValueNumberSource$IntWrapper) -> a
    166:170:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVarForExpr(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.stateful.report.AssignmentHistoryNode -> cn.com.codesec.BE:
    18:19:void <init>(cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.report.HistoryType) -> <init>
    22:23:void <init>(cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.report.HistoryType) -> <init>
    27:27:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory -> cn.com.codesec.BF:
    cn.com.codesec.scan.analyzer.stateful.MachineState state -> c
    cn.com.codesec.parse.ir.SourceLocation where -> d
    cn.com.codesec.parse.ir.SourceLocation secondarySI -> e
    cn.com.codesec.scan.metadata.FunMeta enclosingFunction -> f
    java.lang.String ruleID -> g
    cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory prev -> h
    cn.com.codesec.scan.analyzer.stateful.Transition transition -> i
    cn.com.codesec.scan.ir.util.memory.IRRef nstRef -> j
    cn.com.codesec.scan.metadata.FunMeta callMeta -> k
    java.lang.String text -> l
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType type -> m
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType chType -> a
    cn.com.codesec.scan.meta.Symbol symbol -> n
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment pathSegment -> o
    boolean $assertionsDisabled -> b
    33:33:void <clinit>() -> <clinit>
    43:43:cn.com.codesec.scan.analyzer.stateful.Transition getTransition() -> b
    48:48:cn.com.codesec.scan.ir.util.memory.IRRef getNstRef() -> c
    58:73:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    78:78:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory withNext(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.SKYRule,java.lang.String,cn.com.codesec.scan.analyzer.stateful.Transition) -> a
    83:86:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory withAddedNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    91:94:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory withRemovedNode(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.parse.ir.SourceLocation) -> a
    99:109:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory withReturnNode(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.analyzer.stateful.BindingMap,boolean) -> a
    112:128:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.report.HistoryType) -> <init>
    130:150:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.stateful.MachineInput,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.ast.RuleNode,cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.SKYRule,java.lang.String,cn.com.codesec.scan.analyzer.stateful.Transition) -> <init>
    153:159:cn.com.codesec.scan.metadata.FunMeta extractMeta(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    163:181:java.lang.String makeTransitionText(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta,cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String,cn.com.codesec.scan.metadata.Type) -> a
    185:185:cn.com.codesec.scan.metadata.FunMeta getEnclosingFunction() -> d
    189:189:boolean equals(cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory,cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory) -> a
    193:193:cn.com.codesec.scan.analyzer.stateful.MachineState getStartState() -> e
    197:197:cn.com.codesec.scan.analyzer.stateful.MachineState getState() -> f
    201:201:cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory prev() -> g
    205:205:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> a
    210:210:java.lang.String toString() -> toString
    215:215:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment getPathSegment() -> h
    219:219:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node makeStorableNode() -> i
    223:223:boolean isInterestingHistory() -> j
    227:230:boolean isTempVar(cn.com.codesec.scan.ir.nodes.IRNode) -> b
cn.com.codesec.scan.analyzer.stateful.report.HistoryType -> cn.com.codesec.BG:
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType STATECHANGE -> a
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType ADD -> b
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType REMOVE -> c
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType RETURN -> d
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType RETURN_SILENT -> e
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType START -> f
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType THROW -> g
    java.lang.String typeName -> h
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType[] ENUM$VALUES -> i
    3:17:void <clinit>() -> <clinit>
    22:22:java.lang.String getTypeName() -> a
    25:28:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.scan.analyzer.stateful.report.HistoryType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.report.HistoryType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation -> cn.com.codesec.BH:
    cn.com.codesec.parse.ir.SourceLocation si -> a
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type type -> b
    java.lang.String string -> d
    boolean $assertionsDisabled -> c
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$SecondaryLocation$Type -> e
    15:15:void <clinit>() -> <clinit>
    22:23:void <init>(cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type) -> <init>
    26:27:void <init>(cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    29:34:void <init>(cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type,java.lang.String) -> <init>
    38:38:java.lang.String toString() -> toString
    42:42:java.lang.String getShortMessage() -> a
    46:46:java.lang.String getMessage() -> b
    50:51:void collectSourceLocations(java.util.Collection) -> a
    54:59:double getCost() -> c
    15:15:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$SecondaryLocation$Type() -> d
cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type -> cn.com.codesec.BI:
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type BRANCH_TRUE -> a
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type BRANCH_FALSE -> b
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type GOTO -> c
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type EXCEPTION -> d
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type SWITCH_DEFAULT -> e
    java.lang.String shortMsgCode -> f
    java.lang.String longMsgCode -> g
    cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type[] ENUM$VALUES -> h
    63:69:void <clinit>() -> <clinit>
    75:76:void <init>(java.lang.String,int,java.lang.String) -> <init>
    78:81:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    84:84:boolean isBranchType() -> a
    1:1:cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type valueOf(java.lang.String) -> valueOf
    71:71:java.lang.String access$2(cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type) -> a
    72:72:java.lang.String access$3(cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type) -> b
cn.com.codesec.scan.analyzer.stateful.report.StorableHistory -> cn.com.codesec.BJ:
    cn.com.codesec.scan.metadata.FunMeta enclosingFunction -> b
    cn.com.codesec.util.fset.FList nodes -> c
    boolean feasiblePath -> d
    int hashCode -> e
    boolean $assertionsDisabled -> a
    31:31:void <clinit>() -> <clinit>
    38:89:void <init>(cn.com.codesec.scan.analyzer.stateful.report.ComputationHistory) -> <init>
    92:109:cn.com.codesec.util.fset.FList removeUninterestingNodes(cn.com.codesec.util.fset.FList) -> a
    113:114:boolean isInterestingNode(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node) -> a
    118:118:cn.com.codesec.scan.metadata.FunMeta getEnclosingFunction() -> a
    122:122:java.util.List getNodeList() -> b
    126:126:boolean hasFeasiblePath() -> c
    130:134:double getCost() -> d
    138:138:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getPreviousNode(int) -> a
    143:178:boolean equals(java.lang.Object) -> equals
    187:187:int hashCode() -> hashCode
    191:194:void collectSourceLocations(java.util.Collection) -> a
    198:198:int compareTo(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> a
    202:276:int compareTo(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> a
    282:295:boolean cycles(java.util.Set) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    137:137:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node access$1(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,int) -> a
    281:281:boolean access$2(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,java.util.Set) -> a
cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node -> cn.com.codesec.BK:
    cn.com.codesec.scan.analyzer.stateful.MachineState state -> b
    cn.com.codesec.parse.ir.SourceLocation sourceInfo -> c
    cn.com.codesec.parse.ir.SourceLocation secondarySourceInfo -> d
    cn.com.codesec.scan.ir.util.memory.IRRef nstRef -> e
    cn.com.codesec.scan.metadata.FunMeta callFunMeta -> f
    java.lang.String text -> g
    cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType nodeType -> h
    cn.com.codesec.scan.analyzer.stateful.report.HistoryType chType -> i
    cn.com.codesec.scan.meta.Symbol variable -> j
    cn.com.codesec.scan.analyzer.stateful.Transition transition -> k
    cn.com.codesec.scan.analyzer.stateful.report.StorableHistory parent -> l
    int parentIndex -> m
    cn.com.codesec.util.fset.FList secondaryLocations -> n
    java.lang.String ruleID -> o
    boolean $assertionsDisabled -> a
    298:298:void <clinit>() -> <clinit>
    311:311:cn.com.codesec.scan.analyzer.stateful.Transition getTransition() -> a
    319:332:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,java.lang.String,cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType,cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.Transition,java.lang.String,cn.com.codesec.scan.meta.Symbol) -> <init>
    336:341:java.lang.String getPathType() -> b
    346:348:void setParentData(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,int) -> a
    351:351:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> c
    355:355:cn.com.codesec.parse.ir.SourceLocation getSecondarySourceInfo() -> d
    359:359:cn.com.codesec.scan.ir.nodes.IRNode getNSTNode() -> e
    363:363:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> f
    367:367:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getPrevious() -> s
    371:371:java.lang.String getPreviousStateName() -> g
    376:376:cn.com.codesec.scan.analyzer.stateful.MachineState getState() -> h
    380:381:void setSecondaryLocations(cn.com.codesec.util.fset.FList) -> a
    385:385:cn.com.codesec.util.fset.FList getSecondaryLocations() -> i
    390:390:java.lang.String getTransitionString() -> j
    395:395:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory getSubtrace() -> k
    399:399:cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType getType() -> l
    404:404:java.lang.String getRuleID() -> m
    409:409:cn.com.codesec.java.rules.SKYRule getRule() -> n
    413:413:boolean isTransition() -> o
    417:417:boolean isReturn() -> p
    421:422:void prependSecondaryLocations(cn.com.codesec.util.fset.FList) -> b
    425:436:double getCost() -> t
    441:446:int hashCode() -> hashCode
    451:460:boolean equals(java.lang.Object) -> equals
    465:465:java.lang.String toString() -> toString
    469:469:cn.com.codesec.scan.metadata.FunMeta getFunction() -> q
    473:473:cn.com.codesec.scan.meta.Symbol getVariable() -> r
    477:488:void collectSourceLocations(java.util.Collection) -> a
    491:492:boolean cycles(java.util.Set) -> a
    345:345:void access$0(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,int) -> a
    424:424:double access$1(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node) -> a
    490:490:boolean access$2(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node,java.util.Set) -> a
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat -> cn.com.codesec.BL:
    cn.com.codesec.util.fset.FList sections -> a
    java.lang.String IDENTIFIER_PATTERN -> b
    java.util.regex.Pattern PARSE_PATTERN -> c
    126:127:void <clinit>() -> <clinit>
    35:43:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap getMap(java.lang.String,cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    46:48:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.MachineState) -> <init>
    51:54:void finishInitialization(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    57:61:java.lang.String format(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    66:70:java.lang.String toString() -> toString
    74:108:cn.com.codesec.util.fset.FList parse(java.lang.String,cn.com.codesec.scan.analyzer.stateful.MachineState) -> b
    112:113:void warnBadseq(cn.com.codesec.scan.analyzer.stateful.MachineState,int) -> a
    116:123:void warn(cn.com.codesec.scan.analyzer.stateful.MachineState,int,java.lang.Object[]) -> b
    46:46:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat) -> <init>
    115:115:void access$1(cn.com.codesec.scan.analyzer.stateful.MachineState,int,java.lang.Object[]) -> a
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$ConstantSection -> cn.com.codesec.BM:
    java.lang.String str -> a
    134:136:void <init>(java.lang.String) -> <init>
    140:140:void finishInitialization(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    144:144:java.lang.String getText(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    149:149:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FormatSection -> cn.com.codesec.BN:
    java.lang.String getText(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    void finishInitialization(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FunctionSection -> cn.com.codesec.BO:
    162:162:void <init>() -> <init>
    166:180:java.lang.String getText(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    185:185:void finishInitialization(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    189:189:java.lang.String toString() -> toString
    193:193:boolean isCode() -> a
    162:162:void <init>(cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FunctionSection) -> <init>
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FunctionSection$1 -> cn.com.codesec.BP:
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FunctionSection this$1 -> a
    1:167:void <init>(cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$FunctionSection) -> <init>
    170:177:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.StringBuilder) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$PercentSection -> cn.com.codesec.BQ:
    157:158:void <init>() -> <init>
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap -> cn.com.codesec.BR:
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat enter -> d
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat ret -> e
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat thr -> f
    java.util.Map add -> a
    java.util.Map remove -> b
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap EMPTY -> g
    boolean $assertionsDisabled -> c
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$HistoryType -> h
    251:321:void <clinit>() -> <clinit>
    260:274:void <init>(cn.com.codesec.java.rules.StateDescriptions,cn.com.codesec.scan.analyzer.stateful.MachineState) -> <init>
    276:280:void <init>() -> <init>
    284:287:java.util.Iterator iterator() -> iterator
    291:307:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat get(cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    316:316:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap defaultMap(cn.com.codesec.scan.analyzer.stateful.MachineState) -> b
    276:276:void <init>(cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap) -> <init>
    251:251:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$HistoryType() -> a
    311:311:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap access$2(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    260:260:void <init>(cn.com.codesec.java.rules.StateDescriptions,cn.com.codesec.scan.analyzer.stateful.MachineState,cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap) -> <init>
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$TSFMap$DefaultMap -> cn.com.codesec.BS:
    cn.com.codesec.scan.analyzer.stateful.MachineState state -> e
    boolean $assertionsDisabled -> d
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$HistoryType -> f
    323:323:void <clinit>() -> <clinit>
    327:329:void <init>(cn.com.codesec.scan.analyzer.stateful.MachineState) -> <init>
    333:356:cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat get(cn.com.codesec.scan.analyzer.stateful.report.HistoryType,cn.com.codesec.scan.analyzer.stateful.RuleVarMeta) -> a
    323:323:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$stateful$report$HistoryType() -> b
cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat$VarSection -> cn.com.codesec.BT:
    java.lang.String varName -> b
    cn.com.codesec.scan.analyzer.stateful.report.TransitionStringFormat backup -> c
    cn.com.codesec.scan.analyzer.stateful.RuleVarMeta varMeta -> d
    boolean $assertionsDisabled -> a
    198:198:void <clinit>() -> <clinit>
    204:207:void <init>(java.lang.String,java.lang.String,cn.com.codesec.scan.analyzer.stateful.MachineState) -> <init>
    211:216:void finishInitialization(cn.com.codesec.scan.analyzer.stateful.MachineState) -> a
    220:242:java.lang.String getText(cn.com.codesec.scan.analyzer.stateful.BindingMap,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    247:247:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.report.path.PathNode -> cn.com.codesec.BU:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock srcBlock -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock destBlock -> c
    cn.com.codesec.scan.ir.nodes.IRExpression predicate -> d
    boolean isTrueBranch -> e
    boolean $assertionsDisabled -> a
    12:12:void <clinit>() -> <clinit>
    19:35:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    38:38:cn.com.codesec.scan.analyzer.preproc.BasicBlock getSrcBlock() -> a
    42:42:cn.com.codesec.scan.analyzer.preproc.BasicBlock getDestBlock() -> b
    46:46:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> c
    50:50:boolean isTrueBranch() -> d
    55:62:boolean equals(java.lang.Object) -> equals
    67:67:int hashCode() -> hashCode
    72:72:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment -> cn.com.codesec.BV:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock startBlock -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock endBlock -> c
    cn.com.codesec.scan.analyzer.preproc.EdgeSet edges -> d
    cn.com.codesec.util.fset.FList secondaryLocations -> e
    boolean $assertionsDisabled -> a
    43:43:void <clinit>() -> <clinit>
    51:52:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    54:58:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.EdgeSet) -> <init>
    62:62:cn.com.codesec.scan.analyzer.preproc.BasicBlock getStartBlock() -> a
    67:67:cn.com.codesec.scan.analyzer.preproc.BasicBlock getEndBlock() -> b
    72:72:cn.com.codesec.scan.analyzer.preproc.EdgeSet getEdges() -> c
    77:77:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph getGraph() -> d
    82:82:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment withEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,int) -> a
    87:87:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment withEdge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    92:95:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment advance(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.EdgeSet) -> a
    100:110:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment union(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment) -> a
    116:116:java.lang.String toString() -> toString
    121:124:cn.com.codesec.util.fset.FList getSecondaryLocations() -> e
    129:185:cn.com.codesec.util.fset.FList buildSecondaryLocations() -> f
    190:210:cn.com.codesec.scan.analyzer.preproc.BlockSet getOneEdgeBranches(java.util.List) -> a
    214:243:boolean pathsDiverge(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Map) -> a
    247:256:void addConnectedPreds(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.LinkedList,java.util.Map) -> a
    259:259:boolean isBackEdge(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> a
    263:306:java.util.Map getDominators(java.util.Map) -> a
    310:312:void link(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> b
    315:344:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState[] runDFS(java.util.Map) -> b
    349:365:cn.com.codesec.scan.analyzer.stateful.report.SecondaryLocation$Type getGotoType(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    369:373:java.lang.String getExceptionTypeString(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    377:377:boolean isThrowIf(cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    381:381:cn.com.codesec.scan.metadata.Type getCatchTypeForTarget(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    386:399:cn.com.codesec.scan.metadata.Type getCatchTypeForTarget(cn.com.codesec.scan.ir.nodes.IRBlock,java.util.Set) -> a
    403:456:cn.com.codesec.util.fset.FList getSimplestPath() -> g
    409:413:int lambda$0(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> a
cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData -> cn.com.codesec.BW:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> a
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData parent -> b
    int depth -> c
    465:468:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    472:472:java.lang.String toString() -> toString
    463:463:int access$0(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> a
    461:461:cn.com.codesec.scan.analyzer.preproc.BasicBlock access$1(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> b
    465:465:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> <init>
    463:463:void access$3(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData,int) -> a
    462:462:void access$4(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> a
    462:462:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData access$5(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DepthData) -> c
cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState -> cn.com.codesec.BX:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> a
    int dfsPreNum -> b
    int dfsPostNum -> c
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState dfsParent -> d
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState ancestor -> e
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState best -> f
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState semidom -> g
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState idom -> h
    cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState samedom -> i
    java.util.Collection bucket -> j
    java.util.Collection preds -> k
    490:494:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    497:504:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState awls() -> a
    508:508:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBlock() -> b
    512:512:int getDfsPreNum() -> c
    516:517:void setDfsPreNum(int) -> a
    520:520:int getDfsPostNum() -> d
    524:525:void setDfsPostNum(int) -> b
    528:528:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getDfsParent() -> e
    532:533:void setDfsParent(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> a
    536:536:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getAncestor() -> f
    540:541:void setAncestor(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> b
    544:544:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getBest() -> g
    548:549:void setBest(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> c
    552:552:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getSemidom() -> h
    556:557:void setSemidom(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> d
    560:560:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getIdom() -> i
    564:565:void setIdom(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> e
    568:568:cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState getSamedom() -> j
    572:573:void setSamedom(cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> f
    576:576:java.util.Collection getBucket() -> k
    580:581:void setBucket(java.util.Collection) -> a
    584:584:java.util.Collection getPreds() -> l
    588:589:void setPreds(java.util.Collection) -> b
    490:490:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.stateful.report.path.PathSegment$DomState) -> <init>
cn.com.codesec.scan.analyzer.structural.StructuralAnalyzer -> cn.com.codesec.BY:
    java.lang.String ISSUE_COUNTER -> e
    java.util.Map mainRuleMap -> g
    java.util.Map strongIDs -> h
    boolean $assertionsDisabled -> f
    37:527:void <clinit>() -> <clinit>
    40:56:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    61:61:java.lang.String getName() -> a
    67:67:java.lang.String getDirective() -> c
    73:73:java.lang.String getPoolSize() -> b
    78:79:void expireProgramModelData() -> d
    83:84:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    87:87:java.util.Collection getRules(cn.com.codesec.scan.meta.Language) -> a
    101:140:void analyze(cn.com.codesec.scan.metadata.FunMeta) -> a
    143:153:void visitStringMatchRule(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.List) -> a
    156:241:void visit(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.Collection) -> a
    244:300:void addIssue(cn.com.codesec.scan.analyzer.vuln.StructuralVulnerability) -> a
    304:326:void analyze(cn.com.codesec.scan.metadata.TypeMeta) -> a
    329:437:void visitType(cn.com.codesec.scan.metadata.TypeMeta,java.util.Collection) -> a
    439:443:java.util.List getFunMetaList(cn.com.codesec.scan.metadata.TypeMeta) -> b
    446:452:java.util.List getFieldMetaList(cn.com.codesec.scan.metadata.TypeMeta) -> c
    457:460:java.lang.String getSourceInfoFile(cn.com.codesec.parse.ir.SourceLocation) -> a
    466:523:void complete() -> i
    88:95:java.util.Collection lambda$0(cn.com.codesec.scan.meta.Language) -> b
    245:297:cn.com.codesec.scan.analyzer.vuln.StructuralVulnerability lambda$3(cn.com.codesec.scan.analyzer.vuln.StructuralVulnerability,cn.com.codesec.scan.analyzer.vuln.StructuralVulnerability) -> a
    477:481:void lambda$4(cn.com.codesec.scan.metadata.TypeMeta) -> d
    90:90:boolean lambda$1(cn.com.codesec.java.rules.StructuralRule) -> a
    93:93:boolean lambda$2(cn.com.codesec.java.rules.StructuralRule) -> b
cn.com.codesec.scan.analyzer.taint.AnnotatedTaintNode -> cn.com.codesec.BZ:
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode node -> a
    java.util.List extraInductions -> b
    18:21:void <init>(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,java.util.List) -> <init>
    24:24:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getNode() -> a
    28:28:java.util.List getInductions() -> b
    33:51:boolean equals(java.lang.Object) -> equals
    56:58:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.EntryPointAnalyzer -> cn.com.codesec.Ca:
    java.util.concurrent.ConcurrentMap entries -> e
    124:125:void <clinit>() -> <clinit>
    38:39:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    43:44:cn.com.codesec.util.fset.FList getEntryPoints(cn.com.codesec.scan.metadata.FunMeta) -> b
    50:50:java.lang.String getName() -> a
    56:56:java.lang.String getDirective() -> c
    68:68:java.lang.String getPoolSize() -> b
    73:73:void expireProgramModelData() -> d
    76:77:void expireVisitData() -> f
    81:82:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    86:113:void analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    116:117:void writeState(cn.com.codesec.scan.util.serialization.ProgramModelOutputStream) -> a
    120:121:void readState(cn.com.codesec.scan.util.serialization.ProgramModelInputStream) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer -> cn.com.codesec.Cb:
    cn.com.codesec.java.rules.flags.TaintFlagTransformation FLAG_TX_NUMERIC -> m
    boolean ENABLE_STRUCTURAL_MATCH_CACHE -> n
    boolean DEBUG_CLEANSES -> o
    boolean SIMULATE_CLEANSES -> k
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder builder -> p
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit pathLimit -> q
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver taintr -> r
    cn.com.codesec.scan.analyzer.taint.model.FunctionProfile contextProfile -> s
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver canonicalDisplayLocResolver -> t
    java.util.Map ptrMap -> u
    cn.com.codesec.scan.analyzer.taint.ProfileCache profileCache -> v
    java.util.List globTaint -> w
    boolean timeExpired -> x
    long maxFunctionTime -> y
    long DEFAULT_TIME_LIMIT_MIN -> z
    cn.com.codesec.scan.analyzer.dataflow.DataflowSsi ssi -> A
    java.util.Set requeues -> B
    cn.com.codesec.scan.util.Timer$Handle builderTimer -> C
    cn.com.codesec.scan.util.Timer$Handle visitTimer -> D
    cn.com.codesec.scan.util.Timer$Handle visitTimerGlobals -> E
    cn.com.codesec.scan.util.Timer$Handle visitTimerReturns -> F
    cn.com.codesec.scan.util.Timer$Handle visitTimerReturnsParams -> G
    cn.com.codesec.scan.util.Timer$Handle visitTimerReturnsGlobals -> H
    cn.com.codesec.scan.util.Timer$Handle visitTimerSinks -> I
    cn.com.codesec.scan.util.Timer$Handle visitTimerSinksUses -> J
    cn.com.codesec.scan.util.Timer$Handle visitTimerSinksStructural -> K
    cn.com.codesec.scan.util.Timer$Handle visitTimerProcessSinkTaint -> L
    cn.com.codesec.scan.util.Timer$Handle visitTimerSinkTaint1 -> M
    cn.com.codesec.scan.util.Timer$Handle visitTimerSinkTaint2 -> N
    cn.com.codesec.scan.util.Timer$Handle visitTimerDigestOutbound -> O
    boolean VERBOSE_VISIT_TIMERS -> P
    int TRIGGER_INTERVAL -> Q
    java.util.Set GLOBAL_TAINT_NODES -> R
    boolean DUMP_GLOBAL_TAINT -> S
    java.util.List passthroughsToGlobal -> T
    java.util.List sinkUses -> U
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner varAssignerSInkUse -> V
    java.util.Map callReturnCleanses -> W
    cn.com.codesec.scan.util.collections.GMultiMap callReturnValues -> X
    java.util.HashMap debugTargets -> Y
    int debugTargetIndex -> Z
    cn.com.codesec.scan.model.AccessPath DerefPath -> aa
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op PLUS_COMPARISON_FLAG -> ab
    cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op PLUS_LOOP_BOUND_FLAG -> ac
    cn.com.codesec.scan.analyzer.util.Ssi$DefC varArgDef -> ad
    cn.com.codesec.scan.analyzer.taint.model.PassthroughNode NOP_PASSTHROUGH_NODE -> ae
    cn.com.codesec.scan.analyzer.taint.TaintPropagationAnalyzer taintPropagationAnalyzer -> af
    java.util.Map callSiteAndBoolean -> ag
    boolean $assertionsDisabled -> l
    163:2377:void <clinit>() -> <clinit>
    214:744:void <init>(cn.com.codesec.scan.analyzer.taint.TaintPropagationAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.backend.BackEnd,cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> <init>
    265:281:java.util.Set run(cn.com.codesec.scan.analyzer.taint.TaintPropagationAnalyzer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.backend.BackEnd,cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
    286:287:void timeExpired() -> a
    290:294:void checkTimeExpired() -> p
    298:404:java.util.Set run() -> q
    409:413:void resetProfileAndGlobalTaint() -> r
    416:416:void trigger() -> s
    419:433:void visitReturns() -> t
    436:436:boolean isSubjectToGCR(cn.com.codesec.scan.metadata.TypeMeta) -> a
    441:521:void visitReturnBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.util.collections.GMultiMap) -> a
    525:531:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$ParamTaintResolver getParamTaintResolver(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    535:539:void debugPrintDefChains(java.lang.String,java.util.List) -> a
    542:669:void visitSinks() -> u
    675:697:java.util.Map verifyCallTargetCongruence(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    702:741:boolean verifyCallTargetCongruence(java.util.Map,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    748:805:boolean needVerify(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    810:884:void processSinkTaint(java.util.List,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$SinkUse,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.util.Func3) -> a
    889:922:void processSinkTaint1(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiCallSinkUse,cn.com.codesec.scan.util.Func3,cn.com.codesec.scan.util.Func3,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    929:963:void processSinkTaint3(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiCallSinkUse,cn.com.codesec.scan.util.Func2,cn.com.codesec.scan.util.Func3,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    969:1088:void processSinkTaint2(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair,cn.com.codesec.scan.util.Func3,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    1091:1103:void recordUpdatedProfile() -> v
    1106:1119:void recordGlobalTaint() -> w
    1122:1125:java.util.Set getRevisitableFunctions(cn.com.codesec.scan.metadata.StorageMeta) -> a
    1129:1139:int requeueDueToGlobal(java.util.Set,java.lang.StringBuilder,java.util.Set) -> a
    1144:1148:void checkContextIsRevisitedAfterUpdatingGlobal(cn.com.codesec.scan.metadata.StorageMeta) -> b
    1153:1165:boolean contextIsRevisitable(java.util.Collection,cn.com.codesec.scan.metadata.FunMeta,java.util.Set) -> a
    1169:1170:void populateTaintPath(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    1175:1187:void populateTaintPath(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    1190:1214:void visitGlobalDefs() -> x
    1218:1349:void digestOutboundTaint(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    1352:1370:void digest(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.model.AccessPath) -> a
    1374:1374:java.util.List getUnaliasedLoc(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    1380:1391:java.util.List getUnaliasedLoc(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    1396:1396:java.util.List getAliasLocs(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1400:1400:java.util.List getAliasLocs(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1406:1409:java.util.List getAliasLocs(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1414:1414:boolean isPhpCompact(cn.com.codesec.scan.metadata.FunMeta) -> a
    1418:1418:boolean isJavaScriptInitArguments(cn.com.codesec.scan.metadata.FunMeta) -> b
    1423:1465:void javaScriptInitArguments(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    1469:1507:boolean placePhpCompactUseDefs(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    1511:1512:void cacheProfiles() -> y
    1516:1852:void placeCallUseDefs(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> a
    1855:1863:java.lang.String debugTargetToString(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1869:1869:java.lang.String shortSourceInfo(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    1874:1934:cn.com.codesec.scan.metadata.Type getTypeOf(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> b
    1938:1945:void removeLimitedIndirectTargets(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List) -> a
    1948:1963:boolean checkSimpleConditional(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1967:1971:cn.com.codesec.scan.model.AccessPath$Trie buildTrie(java.util.Map) -> b
    1976:1980:cn.com.codesec.scan.model.AccessPath$Trie buildTrie(java.util.List) -> b
    1988:1989:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef mkPassthroughDef(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,boolean,boolean,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1996:1996:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PartialUpdateDef mkMapDef(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    2000:2013:cn.com.codesec.scan.analyzer.taint.model.Reason chooseReason(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.taint.model.Reason) -> b
    2018:2028:org.apache.commons.lang3.tuple.Triple resolveFromStructuralMatch(org.apache.commons.lang3.tuple.Pair,cn.com.codesec.java.rules.SKYRule) -> a
    2044:2047:cn.com.codesec.scan.analyzer.taint.model.Reason getReason(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.label.PlacedLabel) -> b
    2059:2076:org.apache.commons.lang3.tuple.Pair doPassthrough(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie) -> b
    2081:2090:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode makeTaintPathNode(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.metadata.FunMeta) -> a
    2095:2125:java.util.List removeComparisonTaint(java.util.List,cn.com.codesec.scan.analyzer.util.Ssi$Join,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    2130:2188:java.util.List applyNullTermTransform(java.util.List,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintAssignDef) -> a
    2192:2194:java.util.List extractLocationsFromExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    2198:2205:void extractLocationsFromExpression(cn.com.codesec.scan.ir.nodes.IRExpression,java.util.List) -> a
    2208:2250:boolean needAutoDeref(cn.com.codesec.scan.ir.nodes.IRLocation) -> c
    2254:2269:boolean needAutoDeref(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    2273:2279:cn.com.codesec.scan.model.AccessPath getAutoDerefPath(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    2283:2283:cn.com.codesec.scan.model.AccessPath getAutoDerefPath(cn.com.codesec.scan.metadata.Type) -> a
    2287:2302:cn.com.codesec.scan.model.AccessPath getAutoDerefPath(cn.com.codesec.scan.metadata.Type,boolean) -> a
    2306:2311:cn.com.codesec.scan.analyzer.callgraph.CallTarget makeCallTarget(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> b
    2315:2315:java.util.Set getGlobaltaintnodes() -> i
    209:209:cn.com.codesec.scan.analyzer.taint.model.PassthroughNode access$0() -> j
    170:170:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> a
    163:163:cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory access$2(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> b
    163:163:cn.com.codesec.scan.metadata.FunMeta access$3(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> c
    163:163:cn.com.codesec.scan.analyzer.taint.model.TaintModel access$4(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> d
    163:163:cn.com.codesec.scan.analyzer.taint.model.Debug$Visit access$5(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> e
    1854:1854:java.lang.String access$6(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    1974:1974:cn.com.codesec.scan.model.AccessPath$Trie access$7(java.util.List) -> a
    747:747:boolean access$8(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    206:206:cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op access$9() -> k
    207:207:cn.com.codesec.java.rules.flags.TaintFlagTransformation$Op access$10() -> l
    2128:2128:java.util.List access$11(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,java.util.List,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintAssignDef) -> a
    164:164:cn.com.codesec.java.rules.flags.TaintFlagTransformation access$12() -> m
    163:163:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver access$13(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> f
    166:166:boolean access$14() -> n
    1866:1866:java.lang.String access$15(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    2305:2305:cn.com.codesec.scan.analyzer.callgraph.CallTarget access$16(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    1514:1514:void access$17(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> a
    163:163:cn.com.codesec.scan.ir.nodes.IRFunDecl access$18(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> g
    174:174:cn.com.codesec.scan.analyzer.taint.ProfileCache access$19(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> h
    2043:2043:cn.com.codesec.scan.analyzer.taint.model.Reason access$20(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.label.PlacedLabel) -> a
    1999:1999:cn.com.codesec.scan.analyzer.taint.model.Reason access$21(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    202:202:cn.com.codesec.scan.util.collections.GMultiMap access$22(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> i
    201:201:java.util.Map access$23(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> j
    435:435:boolean access$24(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.metadata.TypeMeta) -> a
    1:1:cn.com.codesec.scan.model.LocationInfo access$25(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    172:172:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver access$26(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> k
    168:168:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder access$27(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> l
    2057:2057:org.apache.commons.lang3.tuple.Pair access$28(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie) -> a
    2079:2079:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode access$29(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.metadata.FunMeta) -> a
    1966:1966:cn.com.codesec.scan.model.AccessPath$Trie access$30(java.util.Map) -> a
    169:169:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit access$31(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> m
    1143:1143:void access$32(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.metadata.StorageMeta) -> a
    205:205:cn.com.codesec.scan.model.AccessPath access$33() -> o
    208:208:cn.com.codesec.scan.analyzer.util.Ssi$DefC access$34(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> n
    171:171:cn.com.codesec.scan.analyzer.taint.model.FunctionProfile access$35(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> o
    2093:2093:java.util.List access$36(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,java.util.List,cn.com.codesec.scan.analyzer.util.Ssi$Join,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    198:198:java.util.List access$37(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> p
    199:199:java.util.List access$38(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> q
    308:308:java.lang.String lambda$0() -> z
    578:579:cn.com.codesec.scan.analyzer.taint.model.Link lambda$2(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair) -> a
    830:834:cn.com.codesec.scan.analyzer.taint.model.Link lambda$3(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$MultiTaintSource,cn.com.codesec.scan.analyzer.taint.model.TaintPath,org.apache.commons.lang3.tuple.Pair) -> a
    840:841:cn.com.codesec.scan.analyzer.taint.model.Link lambda$4(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Node) -> a
    1583:1584:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallSinkUse lambda$5(org.apache.commons.lang3.tuple.Pair,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List,cn.com.codesec.scan.analyzer.util.Location) -> a
    1615:1615:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiCallSinkUse lambda$6(org.apache.commons.lang3.tuple.Pair,cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List,cn.com.codesec.scan.analyzer.util.Location) -> a
    1683:1684:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef lambda$7(org.apache.commons.lang3.tuple.Pair,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.util.collections.GMultiMap,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1689:1690:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef lambda$8(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.util.collections.GMultiMap,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1796:1802:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef lambda$9(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,boolean,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    1822:1823:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef lambda$10(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$1 -> cn.com.codesec.Cc:
    1:2342:void <init>() -> <init>
    2345:2345:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    2350:2350:cn.com.codesec.java.rules.DataflowRule getRule() -> g
    2355:2355:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    2360:2360:float getConfidence() -> d
    2365:2365:int getDepth() -> e
    2370:2370:boolean isAliasing() -> f
    2374:2374:java.lang.Object readResolve() -> readResolve
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$2 -> cn.com.codesec.Cd:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    1:233:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> <init>
    236:238:void setVar(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$SinkUse,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    242:242:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$3 -> cn.com.codesec.Ce:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    1:249:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$4 -> cn.com.codesec.Cf:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    cn.com.codesec.scan.analyzer.taint.model.taintpath.ReturnTPN val$returnNode -> b
    1:456:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.taint.model.taintpath.ReturnTPN) -> <init>
    460:460:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$5 -> cn.com.codesec.Cg:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef val$comparison -> b
    1:2116:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef) -> <init>
    2120:2120:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$6 -> cn.com.codesec.Ch:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    cn.com.codesec.java.rules.flags.TaintFlagTransformation val$flags -> b
    cn.com.codesec.scan.ir.nodes.IRLocation val$txLoc -> c
    1:2181:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    2185:2186:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$AbstractSourceDef -> cn.com.codesec.Ci:
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> d
    cn.com.codesec.parse.ir.SourceLocation where -> e
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> f
    2737:2737:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    2742:2746:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    2749:2758:cn.com.codesec.parse.ir.SourceLocation getWhere(cn.com.codesec.scan.model.Parameter) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$AliasedMultiSourceNode -> cn.com.codesec.Cj:
    cn.com.codesec.scan.analyzer.taint.model.Node node -> a
    cn.com.codesec.scan.model.ParameterLocation paramLoc -> b
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias alias -> c
    2833:2838:void <init>(cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias) -> <init>
    2841:2841:cn.com.codesec.scan.model.ParameterLocation getParameterLocation() -> a
    2845:2845:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias getAlias() -> b
    2849:2849:cn.com.codesec.scan.analyzer.taint.model.Node getNode() -> c
    2854:2858:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$BoundedIncrementDef -> cn.com.codesec.Ck:
    cn.com.codesec.scan.ir.nodes.IRLocation lval -> g
    cn.com.codesec.scan.util.Twin vars -> h
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    3257:3261:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.util.Twin,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3265:3265:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    3270:3273:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    3278:3280:void transform(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> a
    3284:3284:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder -> cn.com.codesec.Cl:
    cn.com.codesec.scan.util.collections.GMultiMap structuralSources -> b
    cn.com.codesec.scan.util.collections.GMultiMap structuralSinks -> c
    cn.com.codesec.scan.util.collections.GMultiMap structuralEntries -> d
    cn.com.codesec.scan.util.collections.GMultiMap structuralDefMap -> j
    java.util.Map untaintMap -> k
    cn.com.codesec.scan.util.collections.GMultiMap assignedGlobals -> l
    java.util.Map paramUsesAtExit -> e
    java.util.Map globalUsesAtExit -> f
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner varAssignerPAramUseAtExit -> m
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner varAssignerGLobalUseAtExit -> n
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> g
    boolean $assertionsDisabled -> h
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> o
    3835:3835:void <clinit>() -> <clinit>
    3848:3876:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> <init>
    3880:3881:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
    3886:3886:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> a
    3892:3892:cn.com.codesec.scan.analyzer.dataflow.DataflowSsi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    3920:4243:void processStructuralRules() -> e
    4247:4262:cn.com.codesec.scan.metadata.FunMeta getMatchedFunMeta(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    4280:4291:void processBlock(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    4294:4313:void doPredicateTainting(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    4316:4325:cn.com.codesec.scan.ir.nodes.IRExpression getTruePredicate(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    4330:4355:void doTransfer(cn.com.codesec.scan.ir.nodes.IROpExp,java.util.List,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    4359:4428:void doIncrementTainting(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    4431:4434:cn.com.codesec.scan.metadata.StorageMeta getGlobalStorage(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    4440:4460:void processExit(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$UseTracker,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:cn.com.codesec.scan.analyzer.alias.AliasAnalyzer getAliasAnalyzer() -> a
    1:1:void processBlock(java.lang.Object,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:void addRead(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse) -> a
    1:1:java.lang.Object mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> b
    1:1:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(java.lang.Object) -> a
    1:1:cn.com.codesec.scan.analyzer.util.Ssi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
    4430:4430:cn.com.codesec.scan.metadata.StorageMeta access$6(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    3842:3842:cn.com.codesec.scan.util.collections.GMultiMap access$7(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder) -> a
    3840:3840:cn.com.codesec.scan.util.collections.GMultiMap access$8(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder) -> b
    3835:3835:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> b
    3841:3841:java.util.Map access$10(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder) -> c
    3835:3835:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer access$11(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder) -> d
    4084:4086:java.lang.String lambda$0(cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralMatchEntryPoint) -> a
    4095:4096:java.lang.String lambda$1(cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralMatchEntryPoint) -> b
    4346:4351:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$ComparisonDef lambda$2(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.util.Twin,java.util.List,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    4419:4424:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$BoundedIncrementDef lambda$3(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.util.Twin,java.util.List,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder$GlobalAssignTracker -> cn.com.codesec.Cm:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker tracker -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder this$1 -> a
    4465:4467:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    4472:4491:void addDef(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    4495:4501:void addDef(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    4504:4514:void defGlobal(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    4519:4520:void addUse(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    4524:4524:void dumpAll() -> a
    1:1:void addUse(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1:1:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    1:1:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> a
    4504:4504:java.lang.String lambda$0(cn.com.codesec.scan.metadata.StorageMeta) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder$GlobalUseAtExit -> cn.com.codesec.Cn:
    cn.com.codesec.scan.metadata.StorageMeta global -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock exitBlock -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder this$1 -> c
    4596:4599:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder$ParameterUseAtExit -> cn.com.codesec.Co:
    cn.com.codesec.scan.ir.nodes.IRVarDecl parameter -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlock exitBlock -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder this$1 -> c
    4586:4589:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder$UseDefFinder -> cn.com.codesec.Cp:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder this$1 -> b
    4528:4530:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Builder,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker) -> <init>
    4534:4536:void doCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    4540:4542:void doAssign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    4547:4547:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef mkAssignDef(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    4552:4554:void doRead(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    4558:4558:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$PathUse mkReadUse(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    4562:4579:void doStructuralUseDefs(cn.com.codesec.scan.ir.nodes.IRLocation) -> c
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef -> cn.com.codesec.Cq:
    cn.com.codesec.scan.ir.nodes.IRFunCall funcall -> e
    cn.com.codesec.scan.model.Parameter funarg -> f
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    3527:3541:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3545:3545:cn.com.codesec.parse.ir.SourceLocation getWhere() -> a
    3550:3560:java.util.List resolveExtra() -> b
    3567:3568:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toCleanseNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    3573:3579:java.lang.StringBuilder addDebugString(java.lang.StringBuilder,cn.com.codesec.scan.model.AccessPath) -> a
    3520:3520:cn.com.codesec.scan.ir.nodes.IRFunCall access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef) -> a
    3521:3521:cn.com.codesec.scan.model.Parameter access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallSinkUse -> cn.com.codesec.Cr:
    cn.com.codesec.scan.model.ParameterLocation paramLoc -> i
    java.util.List conditionAndNodes -> j
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    2590:2596:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List,cn.com.codesec.scan.model.AccessPath) -> <init>
    2600:2600:cn.com.codesec.scan.model.AccessPath getPathFromParamLoc() -> a
    2605:2605:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    2610:2619:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode(cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,org.apache.commons.lang3.tuple.Pair) -> a
    2625:2626:cn.com.codesec.scan.analyzer.taint.model.Link makeLink(cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair) -> a
    2586:2586:java.util.List access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallSinkUse) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver -> cn.com.codesec.Cs:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    6040:6042:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer) -> <init>
    6046:6055:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    6060:6063:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    6068:6068:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    6073:6073:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    6078:6078:boolean useFixedPointResolution() -> l_
    6040:6040:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver$CanonLocationNode -> cn.com.codesec.Ct:
    cn.com.codesec.scan.analyzer.util.Location loc -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver this$1 -> a
    6084:6086:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver,cn.com.codesec.scan.analyzer.util.Location) -> <init>
    6090:6090:int hashCode() -> hashCode
    6095:6095:boolean equals(java.lang.Object) -> equals
    6100:6100:java.lang.String toString() -> toString
    6082:6082:cn.com.codesec.scan.analyzer.util.Location access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver$CanonLocationNode) -> a
    6084:6084:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver,cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CanonicalDisplayLocResolver$CanonLocationNode) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseBuilder -> cn.com.codesec.Cu:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef build(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> build
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef -> cn.com.codesec.Cv:
    cn.com.codesec.scan.analyzer.util.Ssi$Def prevDef -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse baseUse -> e
    java.util.Map cleanses -> b
    cn.com.codesec.scan.util.collections.GMultiMap cleanseRules -> f
    cn.com.codesec.scan.util.collections.GMultiMap cleanseAliases -> g
    boolean finalized -> h
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> c
    boolean $assertionsDisabled -> d
    3311:3311:void <clinit>() -> <clinit>
    3319:3331:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3334:3355:void mergeFrom(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef) -> a
    3358:3360:void setPrevDef(cn.com.codesec.scan.analyzer.util.Ssi$Def) -> a
    3363:3368:boolean isTotalCompleteCleanse() -> c
    3372:3372:java.util.List resolveExtra() -> b
    3377:3387:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    3392:3432:java.util.List resolveDefFlow(java.util.List) -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toCleanseNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    3441:3447:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode wrapAliasNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath) -> a
    3451:3451:boolean isCompleteCleanse(cn.com.codesec.scan.util.Twin) -> a
    3455:3508:void resolveConflicts() -> d
    java.lang.StringBuilder addDebugString(java.lang.StringBuilder,cn.com.codesec.scan.model.AccessPath) -> a
    3513:3513:java.util.List getReasonsFor(cn.com.codesec.scan.model.AccessPath) -> a
    cn.com.codesec.parse.ir.SourceLocation getWhere() -> a
    3439:3439:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath) -> a
    3311:3311:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef$1 -> cn.com.codesec.Cw:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef this$1 -> a
    cn.com.codesec.scan.model.AccessPath val$currPath -> b
    cn.com.codesec.java.rules.flags.TaintFlagSet val$plusFlags -> c
    cn.com.codesec.java.rules.flags.TaintFlagSet val$minusFlags -> d
    1:3409:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseDef,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    3413:3426:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Clobber -> cn.com.codesec.Cx:
    cn.com.codesec.scan.analyzer.util.Ssi$Var prev -> a
    6034:6036:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> <init>
    6034:6034:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$Clobber) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$ComparisonDef -> cn.com.codesec.Cy:
    cn.com.codesec.scan.ir.nodes.IROpExp predicate -> g
    cn.com.codesec.scan.util.Twin vars -> h
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    3221:3225:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.util.Twin,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3229:3229:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    3234:3237:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    3242:3244:void transform(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> a
    3248:3248:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$LocationCleanseDef -> cn.com.codesec.Cz:
    cn.com.codesec.scan.ir.nodes.IRLocation loc -> e
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> f
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    3589:3610:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3614:3614:cn.com.codesec.parse.ir.SourceLocation getWhere() -> a
    3621:3623:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toCleanseNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    3628:3630:java.lang.StringBuilder addDebugString(java.lang.StringBuilder,cn.com.codesec.scan.model.AccessPath) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MapDef -> cn.com.codesec.CA:
    cn.com.codesec.scan.analyzer.constants.ConstantValue key -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    3172:3175:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.constants.ConstantValue,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3180:3180:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode mkChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> c
    3185:3187:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode mkTPN() -> h
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiCallSinkUse -> cn.com.codesec.CB:
    cn.com.codesec.scan.model.AccessPath$Trie nodeTrie -> i
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    2634:2641:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List,cn.com.codesec.scan.model.AccessPath) -> <init>
    2645:2645:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    2649:2659:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode(cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair) -> a
    2664:2666:cn.com.codesec.scan.analyzer.taint.model.Link makeLink(cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair) -> a
    2631:2631:cn.com.codesec.scan.model.AccessPath$Trie access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiCallSinkUse) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiSourceDef -> cn.com.codesec.CC:
    cn.com.codesec.scan.ir.nodes.IRFunCall funcall -> b
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse baseUse -> c
    cn.com.codesec.scan.model.AccessPath$Trie nodeTrie -> d
    cn.com.codesec.parse.ir.SourceLocation where -> e
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    2868:2886:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,java.util.List) -> <init>
    2890:2893:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    2899:2902:java.util.List resolveDefFlow(java.util.List) -> a
    2907:2940:cn.com.codesec.scan.analyzer.taint.model.TaintPath fixupTaintPath(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias) -> a
    2944:2945:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getSubPathNode(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.model.ParameterLocation) -> a
    2949:2958:cn.com.codesec.parse.ir.SourceLocation getWhere(cn.com.codesec.scan.model.Parameter) -> a
    2962:2962:cn.com.codesec.scan.ir.nodes.IRFunCall getCallsite() -> a
    2865:2865:cn.com.codesec.scan.model.AccessPath$Trie access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiSourceDef) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$ParamTaintResolver -> cn.com.codesec.CD:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc loc -> i
    java.util.LinkedList q -> j
    java.util.Set done -> k
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> b
    5976:5981:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowSsi,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> <init>
    5985:6002:java.util.List resolveParam(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> d
    6007:6026:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    5976:5976:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowSsi,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$ParamTaintResolver) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$PhpVarFinder -> cn.com.codesec.CE:
    java.lang.String varname -> a
    cn.com.codesec.scan.ir.nodes.IRFunCall terminator -> b
    boolean halted -> c
    cn.com.codesec.scan.ir.nodes.IRLocation mostRecentVar -> d
    cn.com.codesec.scan.ir.nodes.IRVarDecl mostRecentArg -> e
    cn.com.codesec.scan.ir.nodes.IRVarDecl global -> f
    2387:2394:void <init>(java.lang.String,cn.com.codesec.scan.ir.nodes.IRFunCall) -> <init>
    2397:2397:cn.com.codesec.scan.ir.nodes.IRLocation getVar() -> a
    2401:2408:cn.com.codesec.scan.analyzer.util.Location getArg() -> b
    2412:2412:boolean halted() -> c
    2417:2422:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    2427:2436:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    2441:2451:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    2456:2459:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$SingletonTaintDef -> cn.com.codesec.CF:
    java.util.Map taint -> b
    cn.com.codesec.scan.metadata.SingletonMeta sm -> c
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    2717:2720:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,java.util.Map,cn.com.codesec.scan.metadata.SingletonMeta) -> <init>
    2724:2724:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    2729:2729:java.util.List resolveDefFlow(java.util.List) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$SinkUse -> cn.com.codesec.CG:
    cn.com.codesec.scan.model.AccessPath usePath -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> c
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    2479:2481:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.AccessPath) -> <init>
    2485:2490:java.util.List resolve() -> b
    cn.com.codesec.scan.ir.nodes.IRLocation getNstLoc() -> c
    2496:2496:cn.com.codesec.scan.model.AccessPath getUsePath() -> d
    2500:2500:cn.com.codesec.scan.model.AccessPath getPathFromParamLoc() -> a
    2504:2505:void setVar(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    cn.com.codesec.scan.analyzer.taint.model.Link makeLink(cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.model.AccessPath,org.apache.commons.lang3.tuple.Pair) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralCleanseDefMaker -> cn.com.codesec.CH:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    3793:3795:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3799:3802:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowDef makeDef(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    3800:3801:java.lang.String lambda$0(cn.com.codesec.scan.analyzer.util.DefLocation) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralDefMaker -> cn.com.codesec.CI:
    cn.com.codesec.scan.ir.nodes.IRExpression in -> b
    cn.com.codesec.scan.ir.nodes.IRLocation outLoc -> c
    cn.com.codesec.scan.model.AccessPath inPath -> d
    cn.com.codesec.scan.model.AccessPath outPath -> e
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> f
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> g
    3766:3775:void <init>(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3778:3779:void addUseDef(cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AliasingTracker) -> a
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowDef makeDef(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    3785:3787:cn.com.codesec.scan.ir.nodes.IRLocation getKey() -> a
    3783:3783:cn.com.codesec.scan.ir.nodes.IRLocation access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralDefMaker) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralSourceDef -> cn.com.codesec.CJ:
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> d
    cn.com.codesec.scan.ir.nodes.IRExpression match -> e
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> f
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> g
    2695:2700:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    2704:2704:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    2709:2709:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode toTerminalChainNode() -> n_
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralTransferDefMaker -> cn.com.codesec.CK:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    3824:3826:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3830:3831:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowDef makeDef(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$StructuralWriteDefMaker -> cn.com.codesec.CL:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> a
    3808:3810:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3814:3817:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowDef makeDef(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> a
    3815:3816:java.lang.String lambda$0(cn.com.codesec.scan.analyzer.util.DefLocation) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TPASinkUse -> cn.com.codesec.CM:
    cn.com.codesec.scan.model.Parameter param -> e
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> f
    cn.com.codesec.scan.ir.nodes.IRLocation location -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> h
    2567:2572:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.AccessPath) -> <init>
    2576:2576:cn.com.codesec.scan.ir.nodes.IRLocation getNstLoc() -> c
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TPNGenerator -> cn.com.codesec.CN:
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintAssignDef -> cn.com.codesec.CO:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    3290:3292:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3296:3296:java.util.List resolveBaseUse() -> l
    3302:3307:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintDefChainNode -> cn.com.codesec.CP:
    void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity -> cn.com.codesec.CQ:
    cn.com.codesec.java.rules.flags.TaintFlagTransformation flagOps -> b
    float confidence -> c
    int cost -> d
    java.util.List pathLines -> e
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity$RootID rootID -> f
    6113:6120:void <init>(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> <init>
    6123:6198:void walk(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    6202:6224:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity pick(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity) -> b
    6229:6241:int compare(java.util.List,java.util.List) -> a
    6246:6256:boolean equals(java.lang.Object) -> equals
    6261:6263:int hashCode() -> hashCode
    1:1:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity pick(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity) -> a
    6106:6106:cn.com.codesec.java.rules.flags.TaintFlagTransformation access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> a
    6106:6106:void access$2(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    6107:6107:float access$3(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> b
    6107:6107:void access$4(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity,float) -> a
    6110:6110:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity$RootID access$5(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> c
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity$RootID -> cn.com.codesec.CR:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity me -> a
    6269:6271:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> <init>
    6275:6278:int hashCode() -> hashCode
    6283:6291:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef -> cn.com.codesec.CS:
    cn.com.codesec.scan.model.ParameterLocation in -> e
    cn.com.codesec.scan.model.ParameterLocation out -> f
    cn.com.codesec.scan.ir.nodes.IRFunCall callSite -> g
    cn.com.codesec.scan.analyzer.callgraph.CallTarget callTarget -> h
    cn.com.codesec.scan.analyzer.taint.model.PassthroughNode passthroughNode -> i
    cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse inputUse -> a
    boolean inEqOut -> d
    boolean preserveComposition -> l
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode tpn -> m
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> j
    boolean $assertionsDisabled -> k
    2970:2970:void <clinit>() -> <clinit>
    2985:2998:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowUse,boolean,boolean,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3002:3002:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    3006:3006:cn.com.codesec.parse.ir.SourceLocation getWhereIn() -> m
    3010:3010:cn.com.codesec.parse.ir.SourceLocation getWhereOut() -> n
    3015:3017:cn.com.codesec.parse.ir.SourceLocation getWhereParam(cn.com.codesec.scan.model.Parameter) -> a
    3023:3036:java.util.List resolve(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
    3041:3045:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    3051:3056:void resolveBaseFlow(java.util.List,java.util.List) -> a
    3060:3060:boolean requiresBaseFlowResolution() -> a
    3066:3067:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    3072:3072:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode mkChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> c
    3077:3080:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    3084:3086:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode mkTPN() -> h
    3090:3091:cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> o
    3095:3096:boolean callCastsArrayToObject() -> p
    3101:3137:java.util.List phpCastAlteration(java.util.List) -> b
    3143:3163:void verifyCallTargetCongruence(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> d
    2979:2979:boolean access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef) -> a
    2970:2970:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef$1 -> cn.com.codesec.CT:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef this$1 -> a
    1:3101:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef) -> <init>
    3105:3135:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintReadUse -> cn.com.codesec.CU:
    cn.com.codesec.scan.ir.nodes.IRLocation nstLoc -> e
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    2465:2468:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    2471:2471:cn.com.codesec.scan.ir.nodes.IRLocation getNstLoc() -> a
    1:1:java.util.List resolve() -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver -> cn.com.codesec.CV:
    int maxFilterIn -> b
    int maxFilterOut -> i
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> c
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> j
    4607:4611:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.dataflow.DataflowSsi) -> <init>
    4616:4624:cn.com.codesec.scan.model.AccessPath checkAccessPath(cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    4628:4659:boolean fromGlobalsArg(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> c
    4663:4663:boolean isGlobalsDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    4667:4689:java.util.List resolveExtra(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    4694:4722:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    4727:4759:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    4765:4767:java.util.List wrapOpExp(java.util.List,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    4772:4790:java.util.List wrapOpExpDeref(java.util.List,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.parse.ir.IROperators) -> a
    4794:4814:java.util.List wrapOpExpNode(java.util.List,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.parse.ir.IROperators,cn.com.codesec.scan.ir.nodes.IROpExp) -> b
    4819:4831:boolean isStringType(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    4836:4841:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    4846:4868:java.util.List wrapReturn(java.util.List,cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    4872:4896:java.util.List resolveX(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    4901:4935:java.util.Collection filter(java.util.List) -> a
    4939:4967:java.util.Set fancyFilter(java.util.List) -> b
    4972:5065:java.util.List resolveDefsI(cn.com.codesec.scan.analyzer.util.Ssi$Def,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    5070:5070:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity getIdentity(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    5076:5079:java.util.List resolveDefs(cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    5084:5098:java.util.List addReadLocationToGlobalTaint(cn.com.codesec.scan.analyzer.util.Ssi$UseC,java.util.List) -> a
    5103:5103:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AssignNode mkAssignNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef) -> a
    5109:5109:cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DataflowResolver$AliasNode mkAliasNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias,cn.com.codesec.parse.ir.SourceLocation) -> a
    5114:5130:boolean isMonotonicChange(java.util.Collection,java.util.Collection) -> a
    5135:5136:void debug(java.lang.String) -> a
    1:1:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$Identity getIdentity(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
    4603:4603:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> d
    4604:4604:int access$2(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> a
    4605:4605:int access$3(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> b
    4603:4603:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer access$4(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> c
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$1 -> cn.com.codesec.CW:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    1:4729:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> <init>
    4732:4744:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$2 -> cn.com.codesec.CX:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    1:4785:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> <init>
    4788:4788:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$3 -> cn.com.codesec.CY:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    cn.com.codesec.scan.ir.nodes.IROpExp val$e -> b
    cn.com.codesec.scan.ir.nodes.IRExpression val$operand -> c
    1:4809:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    4812:4812:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$4 -> cn.com.codesec.CZ:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    1:4861:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> <init>
    4864:4864:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode build(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$CallCleanseNode -> cn.com.codesec.Da:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef cleanse -> g
    cn.com.codesec.scan.model.AccessPath path -> h
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> i
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5812:5818:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CallCleanseDef,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    5822:5827:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5831:5831:int hashCode() -> hashCode
    5836:5841:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$FlagTransformNode -> cn.com.codesec.Db:
    cn.com.codesec.java.rules.flags.TaintFlagTransformation tx -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> f
    5763:5766:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> <init>
    5770:5770:java.lang.String toString() -> toString
    5775:5782:boolean equals(java.lang.Object) -> equals
    5787:5787:int hashCode() -> hashCode
    5792:5796:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5799:5801:boolean redundant(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$KillUpdateNode -> cn.com.codesec.Dc:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef undo -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5898:5909:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef) -> <init>
    5913:5913:java.lang.String toString() -> toString
    5918:5925:boolean equals(java.lang.Object) -> equals
    5930:5930:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$LocationCleanseNode -> cn.com.codesec.Dd:
    cn.com.codesec.scan.ir.nodes.IRLocation loc -> h
    cn.com.codesec.scan.model.AccessPath path -> i
    java.util.List reasons -> j
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> k
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    boolean $assertionsDisabled -> g
    5845:5845:void <clinit>() -> <clinit>
    5854:5862:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath,java.util.List,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    5866:5876:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5880:5880:int hashCode() -> hashCode
    5885:5891:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$MultiTaintSource -> cn.com.codesec.De:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiSourceDef def -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> b
    5514:5517:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$MultiSourceDef) -> <init>
    5521:5521:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5525:5526:java.lang.String toString() -> toString
    5531:5538:boolean equals(java.lang.Object) -> equals
    5543:5543:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$PathModifyNode -> cn.com.codesec.Df:
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode tpn -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> b
    5937:5940:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> <init>
    5944:5944:java.lang.String toString() -> toString
    5949:5956:boolean equals(java.lang.Object) -> equals
    5961:5961:int hashCode() -> hashCode
    5966:5967:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$StructuralTaintSource -> cn.com.codesec.Dg:
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> a
    cn.com.codesec.scan.ir.nodes.IRExpression match -> b
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> h
    5553:5558:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    5562:5578:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5582:5582:java.lang.String toString() -> toString
    5587:5594:boolean equals(java.lang.Object) -> equals
    5599:5599:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintAliasNode -> cn.com.codesec.Dh:
    cn.com.codesec.parse.ir.SourceLocation where -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> f
    5275:5278:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer$Alias,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    5282:5306:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5309:5310:int getCost() -> a
    5315:5315:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintAssignNode -> cn.com.codesec.Di:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> f
    5187:5189:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$AssignDef) -> <init>
    5193:5247:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5250:5267:cn.com.codesec.scan.analyzer.util.Location getCanonicalDisplayLocation(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintEntryPoint -> cn.com.codesec.Dj:
    cn.com.codesec.scan.ir.nodes.IRVarDecl inputVar -> a
    cn.com.codesec.scan.analyzer.taint.model.EntryPoint entryPoint -> b
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> h
    5414:5415:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.taint.model.EntryPoint) -> <init>
    5417:5422:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.analyzer.taint.model.EntryPoint,cn.com.codesec.scan.analyzer.taint.model.Reason) -> <init>
    5426:5448:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5452:5452:java.lang.String toString() -> toString
    5457:5464:boolean equals(java.lang.Object) -> equals
    5469:5471:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintFromGlobal -> cn.com.codesec.Dk:
    cn.com.codesec.scan.metadata.StorageMeta global -> b
    cn.com.codesec.scan.ir.nodes.IRLocation readLoc -> g
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5625:5626:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,java.util.Map,cn.com.codesec.scan.metadata.StorageMeta) -> <init>
    5629:5633:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,java.util.Map,cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    5637:5648:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5652:5652:java.lang.String toString() -> toString
    5657:5664:boolean equals(java.lang.Object) -> equals
    5669:5669:int hashCode() -> hashCode
    5673:5673:cn.com.codesec.scan.metadata.StorageMeta getGlobal() -> a
    5677:5677:cn.com.codesec.scan.ir.nodes.IRLocation getReadLoc() -> m
    5681:5682:void setReadLoc(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintInputPoint -> cn.com.codesec.Dl:
    cn.com.codesec.scan.ir.nodes.IRVarDecl inputVar -> b
    cn.com.codesec.scan.model.Parameter p -> g
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef def -> h
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5363:5367:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef) -> <init>
    5371:5374:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5378:5378:java.lang.String toString() -> toString
    5383:5398:boolean equals(java.lang.Object) -> equals
    5403:5403:int hashCode() -> hashCode
    5359:5359:cn.com.codesec.scan.ir.nodes.IRVarDecl access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintInputPoint) -> a
    5360:5360:cn.com.codesec.scan.model.Parameter access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintInputPoint) -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintOpExpNode -> cn.com.codesec.Dm:
    cn.com.codesec.scan.ir.nodes.IROpExp exp -> b
    cn.com.codesec.scan.ir.nodes.IRExpression operand -> f
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5143:5148:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    5152:5160:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5164:5164:int hashCode() -> hashCode
    5169:5176:boolean equals(java.lang.Object) -> equals
    5181:5181:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintPassthroughNode -> cn.com.codesec.Dn:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef def -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5322:5326:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef) -> <init>
    5330:5331:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5335:5336:java.lang.String toString() -> toString
    5341:5341:int hashCode() -> hashCode
    5346:5353:boolean equals(java.lang.Object) -> equals
    5320:5320:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintPassthroughDef access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintPassthroughNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintSource -> cn.com.codesec.Do:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef def -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> b
    5478:5480:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef) -> <init>
    5485:5485:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5489:5490:java.lang.String toString() -> toString
    5495:5502:boolean equals(java.lang.Object) -> equals
    5507:5507:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintTransfer -> cn.com.codesec.Dp:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintTransferDef def -> a
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> b
    5688:5692:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintTransferDef) -> <init>
    5696:5698:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5702:5702:java.lang.String toString() -> toString
    5707:5714:boolean equals(java.lang.Object) -> equals
    5719:5719:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintUpdateNode -> cn.com.codesec.Dq:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef def -> b
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5726:5730:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef) -> <init>
    5734:5734:java.lang.String toString() -> toString
    5739:5740:void populateTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    5744:5751:boolean equals(java.lang.Object) -> equals
    5756:5756:int hashCode() -> hashCode
    5724:5724:cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$TaintUpdateNode) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$VarArgInput -> cn.com.codesec.Dr:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver this$1 -> a
    5603:5603:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver) -> <init>
    5606:5606:java.lang.String toString() -> toString
    5611:5611:int hashCode() -> hashCode
    5616:5616:boolean equals(java.lang.Object) -> equals
    5603:5603:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintResolver$VarArgInput) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintTransferDef -> cn.com.codesec.Ds:
    cn.com.codesec.scan.ir.nodes.IRExpression in -> e
    cn.com.codesec.scan.model.AccessPath inPath -> f
    cn.com.codesec.scan.ir.nodes.IRExpression out -> g
    cn.com.codesec.scan.model.AccessPath outPath -> h
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> i
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode tpn -> j
    cn.com.codesec.scan.metadata.FunMeta matchedFm -> k
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> d
    3646:3659:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    3663:3663:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    3668:3669:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    3675:3675:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    3680:3714:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getTaintPathNode() -> g
    3724:3728:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlags() -> h
    3734:3741:int hashCode() -> hashCode
    3746:3753:boolean equals(java.lang.Object) -> equals
    3717:3717:cn.com.codesec.java.rules.flags.TaintFlagTransformation access$0(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintTransferDef) -> a
    3655:3658:java.lang.String lambda$0(cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintUpdateDef -> cn.com.codesec.Dt:
    cn.com.codesec.scan.ir.nodes.IRExpression input -> e
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> f
    3194:3197:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    3201:3201:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    3207:3207:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    java.lang.String toString() -> toString
    void transform(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TaintIdentity) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef -> cn.com.codesec.Du:
    cn.com.codesec.scan.model.ParameterLocation paramLoc -> i
    java.util.List sourceNodeAndCallTargets -> j
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> g
    2769:2769:java.util.List getSourceNodeAndCallTargets() -> h
    2774:2787:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.List,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    2791:2791:cn.com.codesec.parse.ir.SourceLocation getWhere() -> f
    2796:2796:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode toTerminalChainNode() -> n_
    2800:2800:cn.com.codesec.scan.analyzer.taint.model.Reason getReason(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    2804:2804:cn.com.codesec.scan.model.ParameterLocation getParameterLocation() -> m
    2811:2818:cn.com.codesec.scan.analyzer.taint.model.TaintPath fixupTaintPath(cn.com.codesec.scan.analyzer.taint.model.TaintPath,org.apache.commons.lang3.tuple.Pair) -> a
    2822:2824:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getSubPathNode(org.apache.commons.lang3.tuple.Pair) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRFunCall getCallSite() -> g
    2763:2763:cn.com.codesec.scan.model.ParameterLocation access$1(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TerminalSourceDef) -> a
    2779:2785:java.lang.String lambda$0(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.util.DefLocation,java.util.List) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TightenLimitsException -> cn.com.codesec.Dv:
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit newLimit -> a
    6299:6301:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TooComplexException -> cn.com.codesec.Dw:
    6304:6304:void <init>() -> <init>
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaAliasingTracker -> cn.com.codesec.Dx:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> e
    6348:6350:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaBufferingTracker) -> <init>
    6354:6377:void addAliasedDefs(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$DefBuilder) -> a
    6381:6408:void addAliasedCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$CleanseBuilder) -> a
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaBufferingTracker -> cn.com.codesec.Dy:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> c
    6308:6310:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    6314:6344:void flush() -> b
cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer$TpaSourceDef -> cn.com.codesec.Dz:
    cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer this$0 -> h
    2671:2673:void <init>(cn.com.codesec.scan.analyzer.taint.FunctionAnalyzer,cn.com.codesec.scan.analyzer.util.DefLocation,cn.com.codesec.scan.analyzer.dataflow.DataflowAnalyzer$BaseUse) -> <init>
    2677:2677:cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode toChainNode(cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainNode) -> b
    2682:2682:java.util.List resolveInput(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    cn.com.codesec.scan.analyzer.dataflow.DefinitionResolver$DefChainTerminalNode toTerminalChainNode() -> n_
cn.com.codesec.scan.analyzer.taint.IssueCalculator -> cn.com.codesec.DA:
    boolean IC_DEBUG -> c
    java.lang.String ISSUE_COUNTER -> a
    cn.com.codesec.scan.analyzer.taint.model.TaintModel model -> d
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssueSet issues -> e
    java.util.concurrent.ConcurrentMap flagListCache -> f
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator terminalCalculator -> g
    java.util.concurrent.ConcurrentHashMap taintNodeMap -> h
    long LONG_RUNNING_PROCESS -> i
    java.util.concurrent.atomic.AtomicInteger exceptionCount -> j
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp TERMINAL -> k
    boolean $assertionsDisabled -> b
    73:533:void <clinit>() -> <clinit>
    86:95:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> <init>
    99:147:java.util.List calculateIssues() -> a
    154:155:void unhandledWorkerException(java.lang.Throwable,java.lang.Runnable) -> a
    158:159:void processIssuesMT(java.util.Iterator) -> a
    162:175:void convertOpListToSet(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList,cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    178:186:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp prependFlagOps(cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> a
    190:198:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp prependFlagOps(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> a
    202:206:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp appendFlagOps(cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> b
    210:222:void appendFlagOps(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> b
    225:251:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList getFlagList(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    255:256:void calcFlagList(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> c
    259:269:void convert(cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> a
    272:275:void appendFlagOps(java.util.List,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> b
    277:292:java.util.List convertPath(java.util.LinkedList,java.util.LinkedList,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    296:310:void convertPath(java.util.List,java.util.List) -> a
    313:321:boolean doubleCheckFlags(java.util.List) -> a
    325:351:cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue concatIssues(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue,cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> a
    355:402:void completePartialVulns() -> f
    405:489:boolean completePartialVulnsFrom(org.apache.commons.lang3.tuple.Pair,java.util.HashMap,java.util.HashSet,java.util.HashMap,boolean) -> a
    493:518:boolean isValidChainPair(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue,cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> b
    75:75:boolean access$0() -> b
    83:83:java.util.concurrent.atomic.AtomicInteger access$1() -> c
    77:77:cn.com.codesec.scan.analyzer.taint.model.TaintModel access$2(cn.com.codesec.scan.analyzer.taint.IssueCalculator) -> a
    201:201:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp access$3(cn.com.codesec.scan.analyzer.taint.IssueCalculator,cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> a
    271:271:void access$4(java.util.List,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> a
    82:82:long access$5() -> d
    78:78:cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssueSet access$6(cn.com.codesec.scan.analyzer.taint.IssueCalculator) -> b
    80:80:cn.com.codesec.scan.analyzer.taint.TerminalCalculator access$7(cn.com.codesec.scan.analyzer.taint.IssueCalculator) -> c
    161:161:void access$8(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    276:276:java.util.List access$9(cn.com.codesec.scan.analyzer.taint.IssueCalculator,java.util.LinkedList,java.util.LinkedList,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    177:177:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp access$10(cn.com.codesec.scan.analyzer.taint.IssueCalculator,cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> b
    84:84:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp access$11() -> e
    158:158:cn.com.codesec.scan.analyzer.taint.IssueCalculator$Worker lambda$0(java.util.Iterator) -> b
cn.com.codesec.scan.analyzer.taint.IssueCalculator$1 -> cn.com.codesec.DB:
    1:527:void <init>(cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    530:530:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp copy() -> a
cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp -> cn.com.codesec.DC:
    cn.com.codesec.java.rules.flags.TaintFlag flag -> a
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp next -> b
    1135:1137:void <init>(cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp copy() -> a
    1142:1142:cn.com.codesec.java.rules.flags.TaintFlag getFlag() -> b
    1146:1146:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp getNext() -> c
    1150:1151:void setNext(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp) -> a
cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList -> cn.com.codesec.DD:
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp front -> a
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp back -> b
    1072:1072:void <init>() -> <init>
    1079:1084:java.lang.String toString() -> toString
    1088:1099:boolean debugCheckState() -> a
    1103:1110:int size() -> b
    1114:1114:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp getFront() -> c
    1118:1119:void setFront(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp) -> a
    1122:1122:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp getBack() -> d
    1126:1127:void setBack(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp) -> b
    1072:1072:void <init>(cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList) -> <init>
cn.com.codesec.scan.analyzer.taint.IssueCalculator$MinusFlagOp -> cn.com.codesec.DE:
    1174:1175:void <init>(cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    1179:1179:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp copy() -> a
    1184:1184:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.IssueCalculator$PlusFlagOp -> cn.com.codesec.DF:
    1157:1158:void <init>(cn.com.codesec.java.rules.flags.TaintFlag) -> <init>
    1162:1162:cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOp copy() -> a
    1167:1167:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue -> cn.com.codesec.DG:
    cn.com.codesec.scan.analyzer.taint.vector.TaintVector dataflow -> c
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal source -> a
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal sink -> b
    java.util.List secondaries -> d
    java.lang.String secondaryReportString -> e
    cn.com.codesec.scan.analyzer.taint.TaintPropagationIssue vulnObj -> f
    1197:1208:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> <init>
    1211:1216:boolean addPath(java.util.List,float,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    1220:1220:cn.com.codesec.scan.analyzer.taint.vector.TaintVector getDataflow() -> a
    1224:1224:boolean pathMayBeAdded(int,float) -> a
    1228:1234:void addSecondary(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> a
    1237:1238:void setSecondaryReportString(java.lang.String) -> a
    1242:1244:boolean isPartial() -> b
    1249:1259:java.lang.String toString() -> toString
    1263:1284:cn.com.codesec.scan.analyzer.taint.TaintPropagationIssue getVulnerability() -> c
    1288:1294:cn.com.codesec.scan.analyzer.taint.VectorTraceSource getAsInduction() -> d
    1300:1321:int compareTo(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    1197:1197:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> <init>
    1194:1194:java.lang.String access$2(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> c
    1190:1190:cn.com.codesec.scan.analyzer.taint.vector.TaintVector access$3(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> d
cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssueSet -> cn.com.codesec.DH:
    boolean inIterationPhase -> b
    java.util.concurrent.ConcurrentHashMap data -> c
    java.util.List partialIssues -> d
    boolean $assertionsDisabled -> a
    1325:1325:void <clinit>() -> <clinit>
    1331:1335:void <init>() -> <init>
    1338:1354:cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue getVuln(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    1358:1360:void remove(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> a
    1363:1377:void tidy() -> a
    1381:1382:java.util.Iterator iterator() -> iterator
    1386:1386:java.util.List getPartialVulns() -> b
    1390:1392:void clear() -> c
    1331:1331:void <init>(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssueSet) -> <init>
    1328:1328:java.util.concurrent.ConcurrentHashMap access$1(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssueSet) -> a
cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueResultKey -> cn.com.codesec.DI:
    cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue i -> a
    1399:1401:void <init>(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueIssue) -> <init>
    1405:1415:int compareTo(cn.com.codesec.scan.analyzer.taint.IssueCalculator$UniqueResultKey) -> a
    1420:1427:boolean equals(java.lang.Object) -> equals
    1432:1434:int hashCode() -> hashCode
    1438:1440:boolean terminalEquals(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    1444:1446:int terminalHash(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    1451:1457:int terminalCompare(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.IssueCalculator$Worker -> cn.com.codesec.DJ:
    java.io.PrintStream dbg -> c
    boolean dEBUG -> d
    long expandDataflowCount -> e
    java.util.Iterator inputSync -> f
    cn.com.codesec.java.rules.flags.TaintFlagSet calcCore -> g
    cn.com.codesec.java.rules.flags.TaintFlagSet calcPossible -> h
    cn.com.codesec.scan.analyzer.taint.IssueCalculator this$0 -> a
    boolean $assertionsDisabled -> b
    535:535:void <clinit>() -> <clinit>
    543:550:void <init>(cn.com.codesec.scan.analyzer.taint.IssueCalculator,java.util.Iterator) -> <init>
    600:624:void run() -> run
    628:656:void processIssue(cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue) -> a
    660:924:int expandDataflows(java.util.LinkedList,java.util.LinkedList,java.util.BitSet,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.analyzer.taint.IssueCalculator$FlagOpList,cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.analyzer.taint.model.Node,int,int,int,float,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    927:958:java.util.Iterator getIterator(boolean,cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.analyzer.taint.model.Node,java.util.LinkedList,java.util.LinkedList,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    962:986:boolean isSkip(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    990:1012:boolean isIgnoreGlobalType(cn.com.codesec.scan.analyzer.taint.model.SMTargetedLink) -> a
    1018:1024:cn.com.codesec.scan.analyzer.taint.model.Link getCurrentLink(boolean,java.util.LinkedList,java.util.LinkedList) -> a
    1028:1067:cn.com.codesec.scan.metadata.FunMeta getPreContext(boolean,java.util.LinkedList,java.util.LinkedList,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    543:543:void <init>(cn.com.codesec.scan.analyzer.taint.IssueCalculator,java.util.Iterator,cn.com.codesec.scan.analyzer.taint.IssueCalculator$Worker) -> <init>
cn.com.codesec.scan.analyzer.taint.ProfileCache -> cn.com.codesec.DK:
    java.util.Map cache -> a
    cn.com.codesec.scan.analyzer.taint.model.TaintModel model -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit pathLimit -> c
    28:32:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> <init>
    35:41:cn.com.codesec.scan.analyzer.taint.model.FunctionProfile getProfile(cn.com.codesec.scan.metadata.FunMeta) -> a
    45:46:void cacheProfiles(java.util.Collection) -> a
    49:59:void cacheProfiles(java.util.Set) -> a
cn.com.codesec.scan.analyzer.taint.TaintIssue -> cn.com.codesec.DL:
    cn.com.codesec.scan.analyzer.taint.vector.TaintVector getDataflow() -> a
cn.com.codesec.scan.analyzer.taint.TaintPropagationAnalyzer -> cn.com.codesec.DM:
    boolean QUICK_SCAN_MODE -> e
    cn.com.codesec.scan.analyzer.taint.model.TaintModel model -> f
    java.util.Set blacklist -> g
    java.util.Map visitCount -> h
    boolean expiredVisitData -> i
    271:272:void <clinit>() -> <clinit>
    36:41:void <init>(cn.com.codesec.java.progress.ProgressUtil$Proportion,cn.com.codesec.util.fset.FSet) -> <init>
    46:46:java.lang.String getDirective() -> c
    52:52:java.lang.String getName() -> a
    62:63:void threadExceptionHandler(java.lang.Throwable,cn.com.codesec.scan.metadata.FunMeta) -> a
    68:68:java.lang.String getPoolSize() -> b
    73:76:void expireProgramModelData() -> d
    79:87:void expireVisitData() -> j
    92:92:cn.com.codesec.scan.util.Parallelizer$WorkQueue getNewQueue() -> f
    97:115:boolean shouldVisitFunction(cn.com.codesec.scan.metadata.FunMeta) -> b
    122:158:java.util.Set analyze(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    162:172:void logBlacklist(cn.com.codesec.scan.metadata.FunMeta,java.lang.Throwable) -> a
    188:251:void complete() -> i
    254:255:void addVisit(cn.com.codesec.scan.metadata.FunMeta) -> c
    258:258:int countVisits(cn.com.codesec.scan.metadata.FunMeta) -> a
    262:262:boolean isBlackListed(cn.com.codesec.scan.metadata.FunMeta) -> d
    266:267:void blacklist(cn.com.codesec.scan.metadata.FunMeta) -> e
cn.com.codesec.scan.analyzer.taint.TaintPropagationIssue -> cn.com.codesec.DN:
    cn.com.codesec.java.rules.VulnerabilityRule rule -> a
    cn.com.codesec.scan.analyzer.taint.vector.TaintVector dataflow -> b
    float severity -> c
    cn.com.codesec.scan.model.AccessPath accessPath -> d
    java.util.List extraSourceInductions -> e
    java.util.List extraSinkInductions -> g
    39:46:void <init>(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.taint.vector.TaintVector) -> <init>
    51:51:java.lang.String getAnalyzerName() -> h
    56:56:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    61:61:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    66:66:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    71:71:cn.com.codesec.parse.ir.SourceLocation getFirstTraceNodeLocation() -> b
    76:76:cn.com.codesec.parse.ir.SourceLocation getLastTraceNodeLocation() -> e
    81:85:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    90:107:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    112:112:cn.com.codesec.scan.analyzer.taint.vector.TaintVector getDataflow() -> a
    202:209:void collectSourceLocations(java.util.Collection) -> a
    308:308:cn.com.codesec.scan.model.AccessPath getAccessPath() -> l
    312:313:void setAccessPath(cn.com.codesec.scan.model.AccessPath) -> a
    317:317:float getConfidence() -> d
    321:321:float getConfidenceInternal() -> n
    326:326:boolean hasMinVirtualCallConfidence() -> o
    331:331:float getMinVirtualCallConfidence() -> p
    335:336:void createInstanceId() -> q
    339:387:java.lang.String createInstanceIdString(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.scan.analyzer.taint.vector.TaintVector) -> a
    392:392:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    397:397:float getSeverity() -> m
    430:439:java.util.Collection getExternalEntries() -> r
    443:447:void addSinkInduction(java.lang.String,cn.com.codesec.scan.analyzer.taint.TraceSource) -> a
    450:454:void addSourceInduction(java.lang.String,cn.com.codesec.scan.analyzer.taint.TraceSource) -> b
    457:459:void filterExtraInductions() -> s
    462:471:void filterInductions(java.util.List) -> a
cn.com.codesec.scan.analyzer.taint.TerminalCalculator -> cn.com.codesec.DO:
    boolean swapTerminalSetData -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintModel model -> c
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSetCache terminalSetCache -> d
    cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet EMPTY_TAS -> e
    int TPI_PER_TERM -> f
    java.util.Comparator TPI_CONFIDENCE_COMPARATOR -> g
    java.util.concurrent.ConcurrentMap terminals -> h
    java.util.concurrent.ConcurrentMap terminalsByIndex -> i
    java.util.concurrent.ConcurrentLinkedQueue freeTerminalIDpool -> j
    java.util.concurrent.atomic.AtomicInteger terminalCounter -> k
    boolean $assertionsDisabled -> a
    48:251:void <clinit>() -> <clinit>
    61:68:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> <init>
    71:72:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet getTerminalAttributeSet(cn.com.codesec.scan.analyzer.taint.model.Node,int) -> a
    77:169:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet calcTerminalSet(cn.com.codesec.scan.analyzer.taint.model.Node,int) -> b
    173:197:void mergePathInfo(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo) -> a
    200:208:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo mergeTpis(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo) -> a
    212:230:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal mkTerminal(cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    234:234:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal getTerminalByIndex(int) -> a
    238:239:void cleanup() -> a
    50:50:boolean access$0() -> b
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$1 -> cn.com.codesec.DP:
    1:245:void <init>() -> <init>
    248:248:int compare(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal -> cn.com.codesec.DQ:
    int id -> a
    cn.com.codesec.scan.analyzer.taint.model.TerminalNode node -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode tpn -> c
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation conditional -> d
    260:265:void <init>(int,cn.com.codesec.scan.analyzer.taint.model.TerminalNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation) -> <init>
    269:269:java.lang.String toString() -> toString
    275:284:int compareTo(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    289:289:int hashCode() -> hashCode
    1:1:int compareTo(java.lang.Object) -> compareTo
    260:260:void <init>(int,cn.com.codesec.scan.analyzer.taint.model.TerminalNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> <init>
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo -> cn.com.codesec.DR:
    int shortestDepth -> a
    int shortestLength -> b
    float maxConfidence -> c
    cn.com.codesec.java.rules.flags.TaintFlagSet taintFlagModsPlus -> d
    cn.com.codesec.java.rules.flags.TaintFlagSet taintFlagModsMinus -> e
    cn.com.codesec.java.rules.flags.TaintFlagSet taintFlagAllPathsPlus -> f
    cn.com.codesec.java.rules.flags.TaintFlagSet taintFlagAllPathsMinus -> g
    boolean $assertionsDisabled -> h
    311:311:void <clinit>() -> <clinit>
    321:330:void <init>(int,int,float,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    333:335:boolean mutuallyExclusive(cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    340:340:java.lang.String toString() -> toString
    321:321:void <init>(int,int,float,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.java.rules.flags.TaintFlagSet,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo) -> <init>
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet -> cn.com.codesec.DS:
    java.util.Map pathInfo -> a
    298:300:void <init>() -> <init>
    303:303:java.util.Set getTerminalAttributes() -> a
    307:307:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalPathInfo[] getTerminalPathInfo(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$Terminal) -> a
    298:298:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet) -> <init>
    296:296:java.util.Map access$1(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet) -> a
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSetCache -> cn.com.codesec.DT:
    java.util.concurrent.atomic.AtomicLong serializeIDCounter -> a
    int LOCK_COUNT -> b
    java.util.ArrayList bloomLocks -> c
    java.util.concurrent.ConcurrentMap terminalMap -> d
    460:461:void <clinit>() -> <clinit>
    355:382:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator) -> <init>
    385:396:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet checkCache(cn.com.codesec.scan.analyzer.taint.model.Node,int) -> a
    400:418:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet addToCache(cn.com.codesec.scan.analyzer.taint.model.LinkedNode,int,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet) -> a
    422:431:cn.com.codesec.scan.util.Ref createTerminalSetRef(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet) -> a
    456:457:void cleanup() -> a
    355:355:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSetCache) -> <init>
cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSetCache$TerminalSetRef -> cn.com.codesec.DU:
    java.lang.ref.Reference ref -> a
    java.lang.Long key -> b
    470:475:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet,java.lang.Long) -> <init>
    479:495:cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet get() -> a
    1:1:java.lang.Object get() -> get
    470:470:void <init>(cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSet,java.lang.Long,cn.com.codesec.scan.analyzer.taint.TerminalCalculator$TerminalSetCache$TerminalSetRef) -> <init>
cn.com.codesec.scan.analyzer.taint.TpaQueue -> cn.com.codesec.DV:
    java.util.Map order -> b
    22:28:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    32:38:int compare(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    43:50:java.util.LinkedList topoSort() -> b
    54:63:void topoVisit(cn.com.codesec.scan.metadata.FunMeta,java.util.Set,java.util.LinkedList) -> a
cn.com.codesec.scan.analyzer.taint.TraceSource -> cn.com.codesec.DW:
    boolean validate() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.VectorTraceSource -> cn.com.codesec.DX:
    cn.com.codesec.scan.analyzer.taint.vector.TaintVector vector -> a
    java.util.List sinkInductions -> b
    15:18:void <init>(cn.com.codesec.scan.analyzer.taint.vector.TaintVector) -> <init>
    22:22:boolean validate() -> a
    31:35:void addSinkInduction(java.lang.String,cn.com.codesec.scan.analyzer.taint.VectorTraceSource) -> a
    39:46:boolean equals(java.lang.Object) -> equals
    51:51:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile -> cn.com.codesec.DY:
    cn.com.codesec.scan.metadata.FunMeta fun -> b
    java.util.List sinkRules -> c
    java.util.List sourceRules -> d
    java.util.List passRules -> e
    java.util.List entryRules -> f
    java.util.List cleanseRules -> g
    java.util.List characterizationSources -> h
    java.util.List characterizationSinks -> i
    java.util.List characterizationPassthroughs -> j
    java.util.List characterizationCleanses -> k
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile mapProfile -> l
    java.util.Comparator RULE_SORT -> m
    boolean $assertionsDisabled -> a
    65:479:void <clinit>() -> <clinit>
    81:256:void <init>(cn.com.codesec.scan.metadata.FunMeta) -> <init>
    286:315:java.util.List getSinks(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    320:356:java.util.List getSources(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    361:374:java.util.List getPassthroughs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    379:388:java.util.List getCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    392:392:java.util.List toLocationList(cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.ir.nodes.IRFunCall,boolean) -> a
    396:396:java.util.List toLocationList(cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,boolean) -> a
    400:450:java.util.List toLocationList(cn.com.codesec.scan.util.ArgumentSpecifier,java.util.List,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.meta.Language,boolean) -> a
    455:464:java.util.List getEntryPoints(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    469:469:boolean hasMapRule() -> a
    474:474:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile getMapRuleProfile() -> b
    478:478:int lambda$0(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.SKYRule) -> a
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$CharacterizationPassthroughNodeImpl -> cn.com.codesec.DZ:
    cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule rule -> a
    711:713:void <init>(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule) -> <init>
    717:717:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    722:722:cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule getRule() -> g
    728:729:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    734:734:int getDepth() -> e
    739:739:float getConfidence() -> d
    744:744:boolean isAliasing() -> f
    749:756:boolean equals(java.lang.Object) -> equals
    761:761:int hashCode() -> hashCode
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$CleansePassthroughNode -> cn.com.codesec.Ea:
    cn.com.codesec.java.rules.DataflowCleanseRule rule -> a
    825:827:void <init>(cn.com.codesec.java.rules.DataflowCleanseRule) -> <init>
    831:831:cn.com.codesec.java.rules.DataflowCleanseRule getRule() -> g
    836:836:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    841:841:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    846:846:int getDepth() -> e
    851:851:float getConfidence() -> d
    856:856:boolean isAliasing() -> f
    861:868:boolean equals(java.lang.Object) -> equals
    873:873:int hashCode() -> hashCode
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$EntryPointImpl -> cn.com.codesec.Eb:
    cn.com.codesec.scan.model.ParameterLocation input -> a
    cn.com.codesec.java.rules.DataflowEntryPointRule rule -> b
    513:516:void <init>(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.DataflowEntryPointRule) -> <init>
    520:520:cn.com.codesec.scan.model.ParameterLocation getInput() -> a
    525:525:cn.com.codesec.java.rules.DataflowEntryPointRule getRule() -> b
    530:530:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    535:535:int getDepth() -> d
    540:547:boolean equals(java.lang.Object) -> equals
    552:554:int hashCode() -> hashCode
    559:573:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$InOutHashKey -> cn.com.codesec.Ec:
    cn.com.codesec.scan.util.ArgumentSpecifier in -> a
    cn.com.codesec.scan.util.ArgumentSpecifier out -> b
    int hashcode -> c
    487:491:void <init>(cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.util.ArgumentSpecifier) -> <init>
    495:495:int hashCode() -> hashCode
    500:504:boolean equals(java.lang.Object) -> equals
    487:487:void <init>(cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$InOutHashKey) -> <init>
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$PassthroughNodeImpl -> cn.com.codesec.Ed:
    cn.com.codesec.java.rules.DataflowPassthroughRule rule -> a
    769:771:void <init>(cn.com.codesec.java.rules.DataflowPassthroughRule) -> <init>
    775:775:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    780:780:cn.com.codesec.java.rules.DataflowPassthroughRule getRule() -> g
    785:785:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    790:790:int getDepth() -> e
    795:795:float getConfidence() -> d
    800:800:boolean isAliasing() -> f
    805:812:boolean equals(java.lang.Object) -> equals
    817:817:int hashCode() -> hashCode
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$SinkTerminalImpl -> cn.com.codesec.Ee:
    cn.com.codesec.java.rules.Sink sink -> a
    581:583:void <init>(cn.com.codesec.java.rules.Sink) -> <init>
    587:587:cn.com.codesec.java.rules.SinkSourceRule getRule() -> a
    592:592:cn.com.codesec.java.rules.Sink getSink() -> b
    597:597:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getFlagCheck() -> f
    602:602:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    607:607:int getDepth() -> d
    612:619:boolean equals(java.lang.Object) -> equals
    624:626:int hashCode() -> hashCode
    631:645:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.AutoFunctionProfile$SourceTerminalImpl -> cn.com.codesec.Ef:
    cn.com.codesec.java.rules.SKYRule rule -> a
    653:655:void <init>(cn.com.codesec.java.rules.SKYRule) -> <init>
    659:659:cn.com.codesec.java.rules.SKYRule getRule() -> e
    664:664:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    669:669:int getDepth() -> d
    674:681:boolean equals(java.lang.Object) -> equals
    686:686:int hashCode() -> hashCode
    691:701:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.BuiltinFunctionProfile -> cn.com.codesec.Eg:
    cn.com.codesec.scan.metadata.InternalFunMeta function -> a
    cn.com.codesec.scan.analyzer.taint.model.PassthroughNode ptn -> b
    29:62:void <init>(cn.com.codesec.scan.metadata.InternalFunMeta) -> <init>
    66:66:java.util.List getSinks(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    71:71:java.util.List getSources(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    76:86:java.util.List getPassthroughs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    91:91:java.util.List getEntryPoints(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    96:96:java.util.List getCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
cn.com.codesec.scan.analyzer.taint.model.BuiltinFunctionProfile$1 -> cn.com.codesec.Eh:
    cn.com.codesec.scan.analyzer.taint.model.BuiltinFunctionProfile this$0 -> a
    1:30:void <init>(cn.com.codesec.scan.analyzer.taint.model.BuiltinFunctionProfile) -> <init>
    33:33:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    38:38:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    43:43:cn.com.codesec.java.rules.DataflowRule getRule() -> g
    48:48:int getDepth() -> e
    53:53:float getConfidence() -> d
    58:58:boolean isAliasing() -> f
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute -> cn.com.codesec.Ei:
    cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute PAIR -> a
    cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute ARRAY_INIT -> b
    cn.com.codesec.scan.model.AccessPath outboundAccessPath -> c
    21:24:void <clinit>() -> <clinit>
    16:18:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
cn.com.codesec.scan.analyzer.taint.model.ComplexMethodDeterminationService -> cn.com.codesec.Ej:
    cn.com.codesec.scan.analyzer.taint.model.ComplexMethodDeterminationService complexMethodDeterminationService -> b
    java.util.concurrent.ConcurrentMap virtualsCache -> c
    java.util.concurrent.ConcurrentMap complexCache -> d
    boolean $assertionsDisabled -> a
    22:24:void <clinit>() -> <clinit>
    30:34:void <init>() -> <init>
    37:37:cn.com.codesec.scan.analyzer.taint.model.ComplexMethodDeterminationService getInstance() -> a
    42:44:void clear() -> b
    48:121:boolean isComplexMethod(cn.com.codesec.scan.metadata.FunMeta) -> a
    126:137:java.util.List getExtendOrimplementFuns(org.apache.commons.lang3.tuple.Pair) -> a
    141:154:void listVirtuals(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta,java.util.List) -> a
    158:169:boolean isJDKType(cn.com.codesec.scan.metadata.TypeMeta) -> a
cn.com.codesec.scan.analyzer.taint.model.CompositeFunctionProfile -> cn.com.codesec.Ek:
    cn.com.codesec.scan.analyzer.taint.model.FunctionProfile a -> a
    cn.com.codesec.scan.analyzer.taint.model.FunctionProfile b -> b
    23:26:void <init>(cn.com.codesec.scan.analyzer.taint.model.FunctionProfile,cn.com.codesec.scan.analyzer.taint.model.FunctionProfile) -> <init>
    30:33:java.util.List getSinks(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    38:41:java.util.List getSources(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    46:49:java.util.List getPassthroughs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    54:54:java.lang.String getRenderSummary() -> c
    59:62:java.util.List getSinksForRender() -> d
    67:70:java.util.List getSourcesForRender() -> e
    75:78:java.util.List getPassthroughsForRender() -> f
    83:86:java.util.Collection getRootsForRender() -> g
    91:94:java.util.List getEntryPoints(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    99:102:java.util.List getCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    108:111:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile getMapRuleProfile() -> b
    116:116:boolean isGenerated() -> h
    121:121:boolean hasMapRule() -> a
cn.com.codesec.scan.analyzer.taint.model.ConditionalNotMetException -> cn.com.codesec.El:
    7:7:void <init>() -> <init>
cn.com.codesec.scan.analyzer.taint.model.Debug -> cn.com.codesec.Em:
    boolean SUPPRESS_DEFS -> a
    boolean VERBOSE -> b
    boolean COMPARISON_MODE -> c
    boolean on -> d
    java.lang.String INDENT -> e
    180:185:void <clinit>() -> <clinit>
    36:57:void <init>() -> <init>
    60:60:boolean isOn() -> a
    64:64:boolean isVerbose() -> b
    74:157:void render(java.io.PrintStream,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.FunctionProfile,int,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    160:165:void renderThing(java.io.PrintStream,cn.com.codesec.scan.model.ParameterLocation) -> a
    168:171:void indent(java.io.PrintStream,int) -> a
    174:175:java.lang.String getTimestamp() -> e
    33:33:boolean access$0(cn.com.codesec.scan.analyzer.taint.model.Debug) -> a
    173:173:java.lang.String access$1(cn.com.codesec.scan.analyzer.taint.model.Debug) -> b
    30:30:boolean access$2() -> c
    73:73:void access$3(cn.com.codesec.scan.analyzer.taint.model.Debug,java.io.PrintStream,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.FunctionProfile,int,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    167:167:void access$4(cn.com.codesec.scan.analyzer.taint.model.Debug,java.io.PrintStream,int) -> a
    31:31:boolean access$5() -> d
cn.com.codesec.scan.analyzer.taint.model.Debug$Visit -> cn.com.codesec.En:
    java.util.HashSet taintedGlobals -> b
    cn.com.codesec.util.fset.FList text -> c
    cn.com.codesec.scan.analyzer.taint.model.Debug this$0 -> a
    192:195:void <init>(cn.com.codesec.scan.analyzer.taint.model.Debug) -> <init>
    198:198:boolean isOn() -> a
    202:205:void noteTaintedGlobal(cn.com.codesec.scan.metadata.StorageMeta) -> a
    208:211:void enter(cn.com.codesec.scan.metadata.FunMeta) -> a
    214:217:void def(java.lang.String) -> a
    220:224:void def(java.util.function.Supplier) -> a
    227:230:void info(java.lang.String) -> b
    233:237:void info(java.util.function.Supplier) -> b
    240:243:void taint(java.lang.String) -> c
    246:250:void taint(java.util.function.Supplier) -> c
    253:261:void render(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.FunctionProfile,int,int) -> a
    264:265:void renderVisit(java.io.PrintStream) -> a
    268:287:void renderTaintedGlobals(java.io.PrintStream,int) -> a
    263:263:void access$0(cn.com.codesec.scan.analyzer.taint.model.Debug$Visit,java.io.PrintStream) -> a
    267:267:void access$1(cn.com.codesec.scan.analyzer.taint.model.Debug$Visit,java.io.PrintStream,int) -> a
cn.com.codesec.scan.analyzer.taint.model.DebugUtil -> cn.com.codesec.Eo:
    java.lang.String FIX -> a
    9:9:void <init>() -> <init>
    15:15:java.lang.String getMethodFileName(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    20:60:java.lang.String getMethodFileName(cn.com.codesec.scan.metadata.FunMeta,java.lang.String,int) -> a
cn.com.codesec.scan.analyzer.taint.model.EntryPoint -> cn.com.codesec.Ep:
    cn.com.codesec.scan.model.ParameterLocation getInput() -> a
cn.com.codesec.scan.analyzer.taint.model.FunctionProfile -> cn.com.codesec.Eq:
    18:18:void <init>() -> <init>
    java.util.List getSinks(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    java.util.List getSources(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    java.util.List getPassthroughs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    27:27:java.lang.String getRenderSummary() -> c
    31:31:java.util.List getSinksForRender() -> d
    35:35:java.util.List getSourcesForRender() -> e
    39:39:java.util.List getPassthroughsForRender() -> f
    43:43:java.util.Collection getRootsForRender() -> g
    java.util.List getEntryPoints(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    java.util.List getCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    51:51:boolean hasMapRule() -> a
    55:55:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile getMapRuleProfile() -> b
    59:59:boolean isGenerated() -> h
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile -> cn.com.codesec.Er:
    cn.com.codesec.scan.util.Ref data -> e
    cn.com.codesec.scan.util.Ref issues -> f
    int issueCount -> g
    cn.com.codesec.scan.metadata.FunMeta owner -> h
    int globalMinFieldDepth -> i
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit passthroughLimit -> a
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit sinkLimit -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit sourceLimit -> c
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile mapProfile -> j
    cn.com.codesec.scan.util.Func2 SINK_COMBINER -> k
    cn.com.codesec.scan.util.Func2 SOURCE_COMBINER -> l
    boolean SWAP_ISSUE_DATA -> m
    boolean SWAP_PROFILE_DATA -> n
    boolean limitedMaxPassthroughChainDepth -> o
    boolean limitedMaxChainDepth -> p
    cn.com.codesec.scan.util.Canonicalizer canonicalizedLinks -> q
    cn.com.codesec.scan.util.Canonicalizer canonicalizedTaintPaths -> r
    java.lang.Long serializeID -> s
    java.util.concurrent.atomic.AtomicLong serializeIDCounter -> t
    java.lang.String EXCEEDSLIMIT -> u
    java.lang.String DEPTH -> v
    java.lang.String OFDEPTH -> w
    int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$taint$model$NodeType -> x
    boolean $assertionsDisabled -> d
    52:968:void <clinit>() -> <clinit>
    81:94:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> <init>
    98:101:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile getLimitedProfile(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    104:127:void <init>(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> <init>
    130:145:cn.com.codesec.scan.analyzer.taint.model.Node getTargetNode(cn.com.codesec.scan.analyzer.taint.model.TargetedLink) -> a
    150:166:cn.com.codesec.scan.analyzer.taint.model.Node findNode(java.util.Map,cn.com.codesec.scan.model.ParameterLocation) -> a
    170:197:java.util.List flatten(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation) -> a
    201:219:cn.com.codesec.scan.model.ParameterLocation checkForVararg(cn.com.codesec.scan.model.ParameterLocation) -> a
    224:224:java.lang.String getRenderSummary() -> c
    229:229:java.util.List getSinksForRender() -> d
    234:234:java.util.List getSourcesForRender() -> e
    239:239:java.util.List getPassthroughsForRender() -> f
    244:244:java.util.Collection getRootsForRender() -> g
    249:256:java.util.List getSinks(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    261:268:java.util.List getSources(cn.com.codesec.scan.ir.nodes.IRFunCall) -> b
    273:293:java.util.List getPassthroughs(cn.com.codesec.scan.ir.nodes.IRFunCall) -> c
    297:297:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data getShallow() -> u
    301:310:void setHashKeys() -> i
    313:333:void sort() -> j
    336:338:java.util.LinkedHashSet sort(java.util.Set) -> a
    343:343:java.util.List getEntryPoints(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    348:348:java.util.List getCleanses(cn.com.codesec.scan.ir.nodes.IRFunCall) -> d
    352:387:void add(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    391:401:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit compact(java.util.Map,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,int,cn.com.codesec.scan.util.Func2,boolean,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    405:427:void applyLimit(java.util.Map,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,cn.com.codesec.scan.util.Func2,boolean) -> a
    430:472:void putPassthrough(java.util.Map,cn.com.codesec.scan.util.Twin,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,boolean) -> a
    475:490:cn.com.codesec.scan.analyzer.taint.model.PassthroughNode resolveConflictingPassthroughs(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode) -> a
    494:494:boolean subsumes(cn.com.codesec.scan.util.Twin,cn.com.codesec.scan.util.Twin) -> a
    498:544:void add(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    547:552:boolean hasRecursiveCycle(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode) -> a
    556:570:void firePassthroughLimiter(cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    587:587:void applyPassthroughLimitIteratively(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> b
    590:622:void applyPassthroughLimitOnce(cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    625:639:void addIssue(cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue) -> a
    642:670:void store() -> k
    673:685:void clrear() -> l
    688:688:int getIssueCount() -> m
    692:697:java.util.Set getIssues() -> n
    702:702:boolean isGenerated() -> h
    706:796:boolean shouldRevisitCallers(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile) -> a
    801:801:boolean hasMapRule() -> a
    806:806:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile getMapRuleProfile() -> b
    810:815:boolean hasRecursiveCycle(cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile) -> a
    820:840:void setMapProfile(cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    844:870:boolean equals(java.lang.Object) -> equals
    875:879:int hashCode() -> hashCode
    884:904:java.lang.String toString() -> toString
    908:908:boolean isLimitedSinks() -> o
    912:912:boolean isLimitedSources() -> p
    916:916:boolean isLimitedPassthroughs() -> q
    920:920:boolean isLimitedChainDepths() -> r
    924:924:boolean isLimitedPassthroughChainDepths() -> s
    928:931:cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue canonicalize(cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue) -> b
    935:943:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data mkShallow(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> c
    934:934:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data access$0(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> a
    73:73:java.lang.Long access$1(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile) -> a
    52:52:int[] $SWITCH_TABLE$cn$com$codesec$scan$analyzer$taint$model$NodeType() -> t
    949:952:cn.com.codesec.scan.analyzer.taint.model.SinkNode lambda$0(cn.com.codesec.scan.analyzer.taint.model.SinkNode,cn.com.codesec.scan.analyzer.taint.model.SinkNode) -> a
    955:958:cn.com.codesec.scan.analyzer.taint.model.SourceNode lambda$1(cn.com.codesec.scan.analyzer.taint.model.SourceNode,cn.com.codesec.scan.analyzer.taint.model.SourceNode) -> a
    353:353:java.lang.String lambda$2(cn.com.codesec.scan.analyzer.taint.model.Node) -> a
    533:533:java.lang.String lambda$3(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode,cn.com.codesec.scan.analyzer.taint.model.PassthroughNode) -> b
    539:539:java.lang.String lambda$4(cn.com.codesec.scan.analyzer.taint.model.PassthroughNode) -> b
    829:829:java.lang.String lambda$5(cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile) -> a
    835:835:java.lang.String lambda$6(cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile) -> b
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data -> cn.com.codesec.Es:
    java.util.Map sinks -> a
    java.util.Map sources -> b
    java.util.Map passes -> c
    976:980:void <init>() -> <init>
    972:972:java.util.Map access$0(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> a
    973:973:java.util.Map access$1(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> b
    974:974:java.util.Map access$2(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> c
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$DataRef -> cn.com.codesec.Et:
    java.lang.ref.Reference full -> b
    cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data shallow -> c
    cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile this$0 -> a
    1175:1178:void <init>(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> <init>
    1183:1194:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data get() -> a
    1198:1199:java.lang.Object readResolve() -> readResolve
    1:1:java.lang.Object get() -> get
    1173:1173:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data access$1(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$DataRef) -> a
    1172:1172:java.lang.ref.Reference access$2(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$DataRef) -> b
    1173:1173:void access$3(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$DataRef,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$Data) -> a
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$IssueRef -> cn.com.codesec.Eu:
    java.lang.ref.Reference r -> a
    1207:1209:void <init>(cn.com.codesec.scan.util.collections.TightSet) -> <init>
    1213:1213:cn.com.codesec.scan.util.collections.TightSet get() -> a
    1:1:java.lang.Object get() -> get
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$NodeImpl -> cn.com.codesec.Ev:
    cn.com.codesec.scan.util.collections.TightSet links -> a
    int depth -> c
    cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$NodeImpl$HashKey hashKey -> d
    boolean $assertionsDisabled -> b
    983:983:void <clinit>() -> <clinit>
    989:992:void <init>() -> <init>
    996:996:int getDepth() -> d
    1000:1014:void addLinks(java.lang.Iterable) -> a
    1018:1018:java.util.Iterator iterator() -> iterator
    1022:1023:void setEqualityKeys(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.model.ParameterLocation) -> a
    1027:1028:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    1033:1033:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$NodeImpl$HashKey -> cn.com.codesec.Ew:
    cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile profile -> a
    cn.com.codesec.scan.model.ParameterLocation pl -> b
    cn.com.codesec.scan.analyzer.taint.model.NodeType type -> c
    1042:1046:void <init>(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.NodeType) -> <init>
    1050:1057:boolean equals(java.lang.Object) -> equals
    1062:1065:int hashCode() -> hashCode
    1042:1042:void <init>(cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.NodeType,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$NodeImpl$HashKey) -> <init>
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SinkNodeImpl -> cn.com.codesec.Ex:
    1072:1073:void <init>() -> <init>
    1076:1078:void <init>(java.lang.Iterable) -> <init>
    1082:1082:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SinkNodeShallow -> cn.com.codesec.Ey:
    int depth -> a
    1106:1108:void <init>(cn.com.codesec.scan.analyzer.taint.model.SinkNode) -> <init>
    1112:1112:int getDepth() -> d
    1117:1117:java.util.Iterator iterator() -> iterator
    1122:1122:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    1127:1127:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1132:1132:java.lang.String toString() -> toString
    1106:1106:void <init>(cn.com.codesec.scan.analyzer.taint.model.SinkNode,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SinkNodeShallow) -> <init>
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SourceNodeImpl -> cn.com.codesec.Ez:
    1088:1089:void <init>() -> <init>
    1092:1094:void <init>(java.lang.Iterable) -> <init>
    1098:1098:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SourceNodeShallow -> cn.com.codesec.EA:
    int depth -> a
    1140:1142:void <init>(cn.com.codesec.scan.analyzer.taint.model.SourceNode) -> <init>
    1146:1146:int getDepth() -> d
    1151:1151:java.util.Iterator iterator() -> iterator
    1156:1156:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    1161:1161:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1166:1166:java.lang.String toString() -> toString
    1140:1140:void <init>(cn.com.codesec.scan.analyzer.taint.model.SourceNode,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile$SourceNodeShallow) -> <init>
cn.com.codesec.scan.analyzer.taint.model.GlobalModel -> cn.com.codesec.EB:
    java.util.concurrent.locks.ReadWriteLock readWriteLock -> b
    java.util.Map globalProfiles -> c
    java.util.Map relationStorageMetas -> d
    java.util.Map nonPropGlobals -> e
    boolean $assertionsDisabled -> a
    26:26:void <clinit>() -> <clinit>
    32:32:java.util.Map getGlobalProfiles() -> a
    38:44:void <init>() -> <init>
    48:48:boolean isNonPropagatingGlobal(cn.com.codesec.scan.metadata.StorageMeta) -> b
    75:204:java.util.Set updateGlobalTaint(cn.com.codesec.scan.metadata.FunMeta,java.util.List,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    209:226:void updateOldRelationStorageMetas(java.util.Map) -> a
    230:234:void clear() -> b
    238:239:cn.com.codesec.scan.analyzer.taint.model.GlobalProfile getGlobalProfile(cn.com.codesec.scan.metadata.StorageMeta) -> c
    244:250:cn.com.codesec.scan.analyzer.taint.model.GlobalProfile getOrCreateGlobalProfile(cn.com.codesec.scan.metadata.StorageMeta) -> d
    255:262:boolean clear(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.StorageMeta,java.util.Collection,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    266:278:boolean globalProfileClear(cn.com.codesec.scan.analyzer.taint.model.GlobalProfile,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.StorageMeta,java.util.Collection,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    283:294:java.util.Map getTaintForGlobal(cn.com.codesec.scan.metadata.StorageMeta) -> a
    300:304:cn.com.codesec.scan.analyzer.taint.model.Node getTaintForGlobalTarget(cn.com.codesec.scan.analyzer.taint.model.SMTargetedLink) -> a
    69:69:java.lang.Boolean lambda$0(cn.com.codesec.scan.metadata.StorageMeta) -> e
    115:115:java.lang.String lambda$1(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> a
cn.com.codesec.scan.analyzer.taint.model.GlobalProfile -> cn.com.codesec.EC:
    cn.com.codesec.scan.metadata.StorageMeta global -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit limit -> c
    java.util.Map data -> d
    boolean needCompact -> e
    boolean $assertionsDisabled -> a
    25:25:void <clinit>() -> <clinit>
    30:36:void <init>(cn.com.codesec.scan.metadata.StorageMeta) -> <init>
    40:50:boolean updateLinks(cn.com.codesec.scan.metadata.FunMeta,java.util.Map,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    54:62:boolean clearLinks(cn.com.codesec.scan.metadata.FunMeta,java.util.Collection,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    66:96:boolean clearLinks(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    100:127:boolean updateLinks(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.AccessPath,java.util.List,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    131:132:cn.com.codesec.scan.analyzer.taint.model.Node getNode(cn.com.codesec.scan.model.AccessPath) -> a
    136:149:void compactMaybe(cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    152:152:boolean canCompact(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    156:156:boolean excludeGlobalFromLimit(cn.com.codesec.scan.metadata.StorageMeta) -> a
    160:179:void compact() -> e
    182:185:boolean checkState() -> f
    189:189:java.util.Map getData() -> a
    193:193:boolean isLimited() -> b
    197:197:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit getLimit() -> c
    202:202:boolean isEmpty() -> d
    207:207:java.lang.String toString() -> toString
    75:75:java.lang.String lambda$0(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> a
    112:112:java.lang.String lambda$1(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> b
    146:147:java.lang.String lambda$2(int) -> a
cn.com.codesec.scan.analyzer.taint.model.GlobalProfile$GlobalTaintNode -> cn.com.codesec.ED:
    java.util.Map functionAndlinks -> b
    int depth -> c
    int hashcode -> d
    boolean $assertionsDisabled -> a
    210:210:void <clinit>() -> <clinit>
    213:213:java.util.Map getFunctionAndlinks() -> b
    217:217:int getHashcode() -> e
    224:232:void <init>(cn.com.codesec.scan.metadata.FunMeta,java.util.List) -> <init>
    235:257:void union(cn.com.codesec.scan.analyzer.taint.model.GlobalProfile$GlobalTaintNode) -> a
    261:272:org.apache.commons.lang3.tuple.Pair convertLinksToMap(org.apache.commons.lang3.tuple.Pair,org.apache.commons.lang3.tuple.Pair) -> a
    276:289:int convertLinksToMap(java.util.Map,java.util.List) -> a
    293:308:void convertLinksToMap(java.util.Map,cn.com.codesec.scan.analyzer.taint.model.Link) -> a
    311:314:boolean clearLinks(cn.com.codesec.scan.metadata.FunMeta) -> a
    319:319:boolean isEmpty() -> f
    323:327:boolean updateLinks(cn.com.codesec.scan.metadata.FunMeta,java.util.List) -> a
    332:342:boolean updateDepth() -> g
    347:348:void updateHashcode() -> h
    352:356:java.util.Iterator iterator() -> iterator
    362:362:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    367:367:int getDepth() -> d
    372:372:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    377:384:boolean equals(java.lang.Object) -> equals
    389:389:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.model.LabelReason -> cn.com.codesec.EE:
    boolean DISABLED -> b
    cn.com.codesec.scan.util.Canonicalizer CANON -> c
    cn.com.codesec.java.rules.label.PlacedLabel label -> d
    104:130:void <clinit>() -> <clinit>
    21:24:cn.com.codesec.scan.analyzer.taint.model.Reason mk(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.label.PlacedLabel) -> a
    28:33:void <init>(cn.com.codesec.java.rules.SKYRule,cn.com.codesec.java.rules.label.PlacedLabel) -> <init>
    57:67:boolean equals(java.lang.Object) -> equals
    72:74:int hashCode() -> hashCode
    79:90:int compareTo(cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    95:95:java.lang.String toString() -> toString
    99:99:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.taint.model.Link -> cn.com.codesec.EF:
    boolean INCLUDE_COMPARISON_NODE -> a
    cn.com.codesec.scan.analyzer.taint.model.TaintPath taintPath -> b
    87:88:void <clinit>() -> <clinit>
    20:25:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    int getDepth() -> a
    cn.com.codesec.scan.analyzer.taint.model.Node getTarget(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
    33:33:cn.com.codesec.scan.analyzer.taint.model.TaintPath getTaintPath() -> b
    37:41:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getConditional() -> c
    46:53:boolean equals(java.lang.Object) -> equals
    58:61:int hashCode() -> hashCode
    66:66:java.lang.String toString() -> toString
    71:72:int compareTo(cn.com.codesec.scan.analyzer.taint.model.Link) -> a
    78:81:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getFirstTPN() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.LinkedNode -> cn.com.codesec.EG:
    cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey -> cn.com.codesec.EH:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile -> cn.com.codesec.EI:
    cn.com.codesec.scan.analyzer.taint.model.MapParameter mapArg -> a
    cn.com.codesec.scan.analyzer.taint.model.MapParameter keyArg -> b
    cn.com.codesec.scan.analyzer.taint.model.MapParameter valueArg -> c
    cn.com.codesec.java.rules.MapRule$MapOpSubRule rule -> d
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subpath -> e
    24:32:void <init>(cn.com.codesec.java.rules.MapRule$MapOpSubRule) -> <init>
    34:45:void <init>(cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.java.rules.MapRule$MapOpSubRule,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> <init>
    48:48:boolean isSuperSet(cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile) -> a
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType getOpType() -> a
    56:56:cn.com.codesec.scan.analyzer.taint.model.MapParameter getMapArg() -> b
    61:61:cn.com.codesec.scan.analyzer.taint.model.MapParameter getKeyArg() -> c
    66:66:cn.com.codesec.scan.analyzer.taint.model.MapParameter getValueArg() -> d
    71:71:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> e
    75:75:float getConfidence() -> f
    79:79:int getDepth() -> g
    84:84:cn.com.codesec.java.rules.MapRule$MapOpSubRule getRule() -> h
cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType -> cn.com.codesec.EJ:
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType GET -> a
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType PUT -> b
    cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType[] ENUM$VALUES -> c
    87:90:void <clinit>() -> <clinit>
    87:87:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$Retrieve -> cn.com.codesec.EK:
    boolean $assertionsDisabled -> a
    126:126:void <clinit>() -> <clinit>
    129:131:void <init>(cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.java.rules.MapRule$MapOpSubRule,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> <init>
    134:136:void <init>(cn.com.codesec.java.rules.MapRule$MapOpSubRule) -> <init>
    141:141:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType getOpType() -> a
cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$Store -> cn.com.codesec.EL:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath keysetSubpath -> b
    boolean $assertionsDisabled -> a
    93:93:void <clinit>() -> <clinit>
    98:106:void <init>(cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.scan.analyzer.taint.model.MapParameter,cn.com.codesec.java.rules.MapRule$MapOpSubRule,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> <init>
    109:112:void <init>(cn.com.codesec.java.rules.MapRule$MapOpSubRule) -> <init>
    116:116:cn.com.codesec.scan.analyzer.taint.model.TaintPath getKeysetSubpath() -> i
    122:122:cn.com.codesec.scan.analyzer.taint.model.MapFunctionProfile$MapOpType getOpType() -> a
cn.com.codesec.scan.analyzer.taint.model.MapParameter -> cn.com.codesec.EM:
    cn.com.codesec.scan.model.ParameterLocation pl -> a
    cn.com.codesec.scan.model.AccessPath suffix -> b
    43:46:cn.com.codesec.scan.analyzer.taint.model.MapParameter mk(cn.com.codesec.scan.model.ParameterLocation) -> a
    50:53:cn.com.codesec.scan.analyzer.taint.model.MapParameter mk(cn.com.codesec.scan.analyzer.util.Location) -> a
    57:57:cn.com.codesec.scan.analyzer.taint.model.MapParameter mk(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.model.AccessPath) -> a
    60:63:void <init>(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.AccessPath) -> <init>
    66:66:cn.com.codesec.scan.model.ParameterLocation asParameterLocation() -> a
    70:70:cn.com.codesec.scan.model.ParameterLocation asMapParameterLocation(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    74:74:cn.com.codesec.scan.model.ParameterLocation asKeysetParameterLocation() -> b
    78:78:cn.com.codesec.scan.model.ParameterLocation asPL(cn.com.codesec.scan.model.AccessPath) -> a
    82:82:cn.com.codesec.scan.analyzer.util.Location locAtCallsite(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> a
    86:86:cn.com.codesec.scan.analyzer.util.Location locAtCallsite(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    90:90:cn.com.codesec.scan.analyzer.util.Location keysetLocAtCallsite(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> b
    cn.com.codesec.scan.analyzer.util.Location loc(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.model.AccessPath) -> a
    98:98:cn.com.codesec.scan.ir.nodes.IRLocation nstLocAtCallsite(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    cn.com.codesec.scan.analyzer.taint.model.MapParameter resolveAt(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    cn.com.codesec.scan.analyzer.constants.ConstantValue constValue(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> b
    cn.com.codesec.scan.analyzer.taint.model.MapParameter unwindToWrapper(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> c
    109:109:boolean isGlobal() -> c
    113:113:boolean isPositionalParameter() -> d
    117:117:boolean isReturn() -> e
    122:129:boolean equals(java.lang.Object) -> equals
    134:138:int hashCode() -> hashCode
    143:147:java.lang.String toString() -> toString
    151:151:cn.com.codesec.scan.model.AccessPath mkMapPath(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    155:155:cn.com.codesec.scan.model.AccessPath mkKeysetPath(cn.com.codesec.scan.model.AccessPath) -> b
cn.com.codesec.scan.analyzer.taint.model.MapParameter$GlobalStorageException -> cn.com.codesec.EN:
    cn.com.codesec.scan.metadata.TypeMeta singletonType -> a
    162:164:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    167:167:cn.com.codesec.scan.metadata.TypeMeta getType() -> a
cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamGlob -> cn.com.codesec.EO:
    cn.com.codesec.scan.metadata.StorageMeta sm -> d
    boolean $assertionsDisabled -> c
    293:293:void <clinit>() -> <clinit>
    298:301:void <init>(cn.com.codesec.scan.analyzer.util.Location) -> <init>
    304:307:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.model.AccessPath) -> <init>
    310:313:void <init>(cn.com.codesec.scan.metadata.SingletonMeta,cn.com.codesec.scan.model.AccessPath) -> <init>
    317:317:cn.com.codesec.scan.analyzer.taint.model.MapParameter unwindToWrapper(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> c
    323:333:cn.com.codesec.scan.analyzer.util.Location loc(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.model.AccessPath) -> a
    338:338:cn.com.codesec.scan.analyzer.constants.ConstantValue constValue(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> b
    344:344:cn.com.codesec.scan.analyzer.taint.model.MapParameter resolveAt(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    349:356:boolean equals(java.lang.Object) -> equals
    361:364:int hashCode() -> hashCode
    303:303:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamGlob) -> <init>
    309:309:void <init>(cn.com.codesec.scan.metadata.SingletonMeta,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamGlob) -> <init>
    297:297:void <init>(cn.com.codesec.scan.analyzer.util.Location,cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamGlob) -> <init>
cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamLoc -> cn.com.codesec.EP:
    174:175:void <init>(cn.com.codesec.scan.model.ParameterLocation) -> <init>
    179:190:cn.com.codesec.scan.analyzer.constants.ConstantValue constValue(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> b
    198:208:cn.com.codesec.scan.analyzer.util.Location loc(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer,cn.com.codesec.scan.model.AccessPath) -> a
    215:241:cn.com.codesec.scan.analyzer.taint.model.MapParameter unwindToWrapper(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> c
    248:259:cn.com.codesec.scan.analyzer.taint.model.MapParameter resolveAt(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
    264:275:cn.com.codesec.scan.model.Parameter convertPositionalAtAltcall(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> c
    279:289:cn.com.codesec.scan.model.Parameter convertThisAtAltcall(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> d
    173:173:void <init>(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.MapParameter$MapParamLoc) -> <init>
cn.com.codesec.scan.analyzer.taint.model.MapParameter$ParamResolver -> cn.com.codesec.EQ:
    cn.com.codesec.scan.analyzer.alias.AliasAnalyzer aa -> a
    373:375:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.analyzer.alias.AliasAnalyzer) -> <init>
    379:379:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    384:384:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    389:397:java.util.List resolve(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.taint.model.Node -> cn.com.codesec.ER:
    cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    int getDepth() -> d
cn.com.codesec.scan.analyzer.taint.model.NodeType -> cn.com.codesec.ES:
    cn.com.codesec.scan.analyzer.taint.model.NodeType SINK -> a
    cn.com.codesec.scan.analyzer.taint.model.NodeType SOURCE -> b
    cn.com.codesec.scan.analyzer.taint.model.NodeType ENTRY -> c
    cn.com.codesec.scan.analyzer.taint.model.NodeType[] ENUM$VALUES -> d
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.analyzer.taint.model.NodeType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.taint.model.NodeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.taint.model.PassthroughNode -> cn.com.codesec.ET:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    cn.com.codesec.java.rules.SKYRule getRule() -> b
    cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    float getConfidence() -> d
    int getDepth() -> e
    boolean isAliasing() -> f
cn.com.codesec.scan.analyzer.taint.model.Reason -> cn.com.codesec.EU:
    cn.com.codesec.java.rules.SKYRule rule -> a
    java.util.List PREFERRED_CLASSES -> b
    87:88:void <clinit>() -> <clinit>
    19:24:void <init>(cn.com.codesec.java.rules.SKYRule) -> <init>
    java.lang.String toString() -> toString
    32:32:cn.com.codesec.java.rules.SKYRule getRule() -> a
    36:36:int compareClassTo(cn.com.codesec.scan.analyzer.taint.model.Reason) -> b
    40:48:int compareClasses(java.lang.Class,java.lang.Class) -> a
    53:60:boolean equals(java.lang.Object) -> equals
    65:65:int hashCode() -> hashCode
    69:69:void collectSourceLocations(java.util.Collection) -> a
    73:83:int compareTo(cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.RuleReason -> cn.com.codesec.EV:
    cn.com.codesec.scan.util.Canonicalizer CANON -> b
    36:37:void <clinit>() -> <clinit>
    11:11:cn.com.codesec.scan.analyzer.taint.model.RuleReason mk(cn.com.codesec.java.rules.SKYRule) -> a
    15:16:void <init>(cn.com.codesec.java.rules.SKYRule) -> <init>
    28:28:java.lang.String toString() -> toString
    32:32:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.taint.model.SMTargetedLink -> cn.com.codesec.EW:
    cn.com.codesec.scan.metadata.StorageMeta global -> c
    cn.com.codesec.scan.model.AccessPath path -> d
    int depth -> e
    int hashMemo -> f
    21:26:void <init>(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.TaintPath,int) -> <init>
    29:29:cn.com.codesec.scan.metadata.StorageMeta getGlobal() -> e
    33:33:cn.com.codesec.scan.model.AccessPath getPath() -> f
    38:38:int getDepth() -> a
    44:44:cn.com.codesec.scan.analyzer.taint.model.Node getTarget(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
    49:59:boolean equals(java.lang.Object) -> equals
    64:75:int hashCode() -> hashCode
    80:80:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.model.SinkNode -> cn.com.codesec.EX:
cn.com.codesec.scan.analyzer.taint.model.SinkTerminal -> cn.com.codesec.EY:
    cn.com.codesec.java.rules.Sink getSink() -> b
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getFlagCheck() -> f
cn.com.codesec.scan.analyzer.taint.model.SourceNode -> cn.com.codesec.EZ:
cn.com.codesec.scan.analyzer.taint.model.SourceTerminal -> cn.com.codesec.Fa:
    cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.TaintModel -> cn.com.codesec.Fb:
    boolean DISABLE_GLOBAL_TAINT -> a
    boolean DO_FEASIBILITY_CHECK -> g
    boolean COMPRESS_DATA -> h
    int MIN_INDIRECTION_LEVEL -> i
    boolean IC_DEBUG -> j
    cn.com.codesec.scan.backend.data.ModelKey PROFILE_DATA_FILE_KEY -> b
    cn.com.codesec.scan.backend.data.ModelKey ISSUES_DATA_FILE_KEY -> c
    cn.com.codesec.scan.backend.data.ModelKey STRUCTURAL_MATCH_DATA_FILE_KEY -> k
    cn.com.codesec.scan.analyzer.taint.model.TaintModel localInstance -> l
    cn.com.codesec.scan.backend.BackEnd backEnd -> m
    cn.com.codesec.scan.analyzer.taint.model.Debug debug -> d
    java.util.concurrent.ConcurrentMap autoProfiles -> n
    cn.com.codesec.scan.util.collections.LockingMap genProfiles -> o
    cn.com.codesec.scan.analyzer.taint.model.GlobalModel globalModel -> p
    java.util.concurrent.ConcurrentMap pathLimits -> q
    java.util.Map infeasibilityMemo -> r
    java.util.Set WARNED_INDIRECT_LIMIT -> s
    boolean visitDataCleared -> t
    boolean profileDataCleared -> u
    java.util.concurrent.atomic.AtomicBoolean inIssueCalc -> v
    java.util.Comparator COMPARATOR_FUN_META -> e
    java.lang.String FUNCTIONDATALIMIT -> w
    java.lang.String PATHLIMIT -> x
    boolean $assertionsDisabled -> f
    72:736:void <clinit>() -> <clinit>
    98:113:void <init>() -> <init>
    116:116:cn.com.codesec.scan.analyzer.taint.model.TaintModel getInstance() -> a
    120:128:void clearVisitData() -> b
    132:142:void clearAll() -> c
    173:200:java.util.Map getProfiles(java.util.Collection,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    206:217:cn.com.codesec.scan.analyzer.taint.model.FunctionProfile getProfile(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    223:223:cn.com.codesec.scan.analyzer.taint.model.FunctionProfile getAutoProfile(cn.com.codesec.scan.metadata.FunMeta) -> d
    238:238:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile getGeneratedProfile(cn.com.codesec.scan.metadata.FunMeta) -> a
    243:243:java.util.Map getTaintForGlobal(cn.com.codesec.scan.metadata.StorageMeta) -> a
    254:254:java.util.Set addTaintToGlobal(cn.com.codesec.scan.metadata.FunMeta,java.util.List,cn.com.codesec.scan.analyzer.taint.model.Debug$Visit) -> a
    259:285:boolean updateProfile(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile) -> a
    290:299:cn.com.codesec.scan.analyzer.taint.model.GeneratedFunctionProfile makeProfile(cn.com.codesec.scan.metadata.FunMeta) -> b
    304:304:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit getPathLimit(cn.com.codesec.scan.metadata.FunMeta) -> c
    309:310:void setPathLimit(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> b
    314:318:cn.com.codesec.scan.analyzer.taint.model.Node getTargetNode(cn.com.codesec.scan.analyzer.taint.model.TargetedLink) -> a
    323:323:cn.com.codesec.scan.analyzer.taint.model.SinkNode makeSinkNode(cn.com.codesec.scan.analyzer.taint.model.Link) -> a
    328:328:cn.com.codesec.scan.analyzer.taint.model.SourceNode makeSourceNode(cn.com.codesec.scan.analyzer.taint.model.Link) -> b
    333:334:cn.com.codesec.scan.analyzer.taint.model.PassthroughNode makePassthroughNode(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    339:343:cn.com.codesec.scan.analyzer.taint.model.Link makeGlobalLink(cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    348:352:cn.com.codesec.scan.analyzer.taint.model.Link makeCallLink(cn.com.codesec.scan.analyzer.taint.model.Node,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    357:359:cn.com.codesec.scan.analyzer.taint.model.Link makeStructuralMatchSourceLink(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    364:373:cn.com.codesec.scan.analyzer.taint.model.Link makeStructuralMatchSinkLink(cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.scan.model.AccessPath) -> a
    390:390:cn.com.codesec.scan.analyzer.taint.model.Node getTaintForGlobalTarget(cn.com.codesec.scan.analyzer.taint.model.SMTargetedLink) -> a
    395:395:cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralMatchEntryPoint makeStructuralMatchEntryPoint(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.label.PlacedLabel) -> a
    414:419:cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue makeIssue(cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    424:424:boolean inIssueCalc() -> d
    428:445:org.apache.commons.lang3.tuple.Pair getIssues() -> e
    449:452:void sortProfiles() -> l
    455:458:void setProfileHashKeys() -> m
    465:518:void getProfileLimitSummary2() -> f
    521:586:void getProfileLimitSummary3() -> g
    589:597:void getProfileLimitSummary4() -> h
    600:634:cn.com.codesec.scan.analyzer.taint.model.TaintModel$ProfileLimitSummary getProfileLimitSummary() -> i
    643:699:void checkFeasibility(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> b
    86:86:cn.com.codesec.scan.util.collections.LockingMap access$0(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
    78:78:boolean access$1() -> j
    92:92:java.util.Set access$2() -> k
    715:732:int lambda$0(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
    224:231:cn.com.codesec.scan.analyzer.taint.model.FunctionProfile lambda$2(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> b
cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit -> cn.com.codesec.Fc:
    cn.com.codesec.scan.util.Canonicalizer canonicalizer -> e
    int maxFieldDepth -> a
    int maxIndirectionLevel -> b
    boolean allowArrayIndices -> c
    boolean $assertionsDisabled -> d
    1473:1561:void <clinit>() -> <clinit>
    1481:1481:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit mk(int,int,boolean) -> a
    1484:1494:void <init>(int,int,boolean) -> <init>
    1498:1510:cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit tighten() -> a
    1515:1515:java.lang.Object readResolve() -> readResolve
    1520:1527:boolean equals(java.lang.Object) -> equals
    1532:1535:int hashCode() -> hashCode
    1540:1540:java.lang.String toString() -> toString
    1545:1556:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.TaintModel$FileCleaner -> cn.com.codesec.Fd:
    java.lang.Iterable work -> a
    742:744:void <init>(java.lang.Iterable) -> <init>
    748:751:void run() -> run
cn.com.codesec.scan.analyzer.taint.model.TaintModel$HardRef -> cn.com.codesec.Fe:
    java.lang.Object obj -> a
    1590:1592:void <init>(java.lang.Object) -> <init>
    1597:1597:java.lang.Object get() -> a
cn.com.codesec.scan.analyzer.taint.model.TaintModel$InfeasiblePathException -> cn.com.codesec.Ff:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath path -> a
    1674:1676:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    1679:1679:cn.com.codesec.scan.analyzer.taint.model.TaintPath getPath() -> a
cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue -> cn.com.codesec.Fg:
    cn.com.codesec.scan.analyzer.taint.model.Link startSource -> a
    cn.com.codesec.scan.analyzer.taint.model.Link startSink -> b
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subPath -> c
    853:863:void <init>(cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.model.Link,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    867:874:boolean equals(java.lang.Object) -> equals
    879:882:int hashCode() -> hashCode
    887:896:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue) -> a
    901:901:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.TaintModel$IssueIterator -> cn.com.codesec.Fh:
    java.util.Iterator funs -> b
    java.util.Iterator cur -> c
    cn.com.codesec.scan.analyzer.taint.model.TaintModel this$0 -> a
    911:914:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel,java.util.List) -> <init>
    918:932:boolean hasNext() -> hasNext
    937:937:cn.com.codesec.scan.analyzer.taint.model.TaintModel$Issue next() -> a
    942:942:void remove() -> remove
    1:1:java.lang.Object next() -> next
    911:911:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel,java.util.List,cn.com.codesec.scan.analyzer.taint.model.TaintModel$IssueIterator) -> <init>
cn.com.codesec.scan.analyzer.taint.model.TaintModel$Limiters -> cn.com.codesec.Fi:
    int MAX_CHAIN_DEPTH -> a
    int MAX_PASSTHROUGH_CHAIN_DEPTH -> b
    int MAX_FIELD_DEPTH -> c
    int MAX_REPEAT_FIELD_SELECTOR_DEPTH -> d
    int MAX_PASSTHROUGH -> e
    int MAX_SINK -> f
    int MAX_SOURCE -> g
    int MAX_NODES_FOR_GLOBAL -> h
    int MAX_TAINT_DEF_FOR_VAR -> i
    int MAX_TAINT_DEF_FOR_VAR_ABORT -> j
    int MAX_FUN_PTRS_FOR_CALL -> k
    int MAX_INDIRECT_RESOLUTIONS_FOR_CALL -> l
    int MAX_PATHS -> m
    int MAX_SECONDARIES -> n
    int MAX_FUNCTION_VISITS -> o
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit DEFAULT_PROFILE_ACCESS_PATH_LIMIT -> p
    cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit DEFAULT_ANALYSIS_ACCESS_PATH_LIMIT -> q
    boolean $assertionsDisabled -> r
    1355:1470:void <clinit>() -> <clinit>
    1355:1355:void <init>() -> <init>
    1377:1389:cn.com.codesec.scan.model.ParameterLocation checkLocation(cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,int) -> a
    1394:1394:boolean checkValidProfileLocation(cn.com.codesec.scan.model.ParameterLocation) -> a
    1400:1416:cn.com.codesec.scan.model.AccessPath checkAccessPath(cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.analyzer.taint.model.TaintModel$AccessPathLimit,int) -> a
    1422:1434:boolean checkFollowEdge(cn.com.codesec.scan.analyzer.callgraph.CallTarget) -> a
cn.com.codesec.scan.analyzer.taint.model.TaintModel$MybatisAndIbatisStructuralSinkNode -> cn.com.codesec.Fj:
    cn.com.codesec.scan.model.AccessPath accessPath -> a
    1307:1309:void <init>(cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.scan.model.AccessPath) -> <init>
    1313:1323:boolean equals(java.lang.Object) -> equals
    1328:1328:int hashCode() -> hashCode
    1333:1350:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1:1:cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule getRule() -> a
    1:1:cn.com.codesec.java.rules.Sink getSink() -> b
    1:1:void setRule(cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule) -> a
    1:1:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getFlagCheck() -> f
    1:1:int getDepth() -> d
cn.com.codesec.scan.analyzer.taint.model.TaintModel$ProfileLimitSummary -> cn.com.codesec.Fk:
    int sinks -> a
    int sources -> b
    int passes -> c
    int chainDepths -> d
    int passthruChainDepths -> e
    int paths -> f
    int globals -> g
    1574:1582:void <init>(int,int,int,int,int,int,int) -> <init>
    1574:1574:void <init>(int,int,int,int,int,int,int,cn.com.codesec.scan.analyzer.taint.model.TaintModel$ProfileLimitSummary) -> <init>
cn.com.codesec.scan.analyzer.taint.model.TaintModel$Ref -> cn.com.codesec.Fl:
    java.lang.Object get() -> a
cn.com.codesec.scan.analyzer.taint.model.TaintModel$SimplePassthroughNode -> cn.com.codesec.Fm:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subPath -> a
    boolean isAliasing -> b
    1026:1035:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    1039:1039:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> c
    1044:1044:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    1049:1049:int getDepth() -> e
    1054:1054:cn.com.codesec.java.rules.DataflowPassthroughRule getRule() -> g
    1059:1059:float getConfidence() -> d
    1064:1064:boolean isAliasing() -> f
    1069:1069:java.lang.String toString() -> toString
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> b
cn.com.codesec.scan.analyzer.taint.model.TaintModel$SingleLinkSinkNode -> cn.com.codesec.Fn:
    cn.com.codesec.scan.analyzer.taint.model.Link link -> a
    950:955:void <init>(cn.com.codesec.scan.analyzer.taint.model.Link) -> <init>
    959:959:int getDepth() -> d
    965:965:java.util.Iterator iterator() -> iterator
    970:970:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    975:975:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    980:980:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.model.TaintModel$SingleLinkSourceNode -> cn.com.codesec.Fo:
    cn.com.codesec.scan.analyzer.taint.model.Link link -> a
    988:993:void <init>(cn.com.codesec.scan.analyzer.taint.model.Link) -> <init>
    997:997:int getDepth() -> d
    1002:1002:java.util.Iterator iterator() -> iterator
    1007:1007:cn.com.codesec.scan.analyzer.taint.model.LinkedNode$HashKey getHashKey() -> a
    1012:1012:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1017:1017:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralMatchEntryPoint -> cn.com.codesec.Fp:
    cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule rule -> a
    cn.com.codesec.scan.model.ParameterLocation ploc -> b
    cn.com.codesec.java.rules.label.PlacedLabel label -> c
    760:764:void <init>(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.label.PlacedLabel) -> <init>
    768:768:cn.com.codesec.scan.model.ParameterLocation getInput() -> a
    773:773:cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule getRule() -> b
    777:777:cn.com.codesec.java.rules.label.PlacedLabel getLabel() -> f
    782:782:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    787:787:int getDepth() -> d
    792:799:boolean equals(java.lang.Object) -> equals
    804:806:int hashCode() -> hashCode
    811:828:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> e
    760:760:void <init>(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.label.PlacedLabel,cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralMatchEntryPoint) -> <init>
cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralSinkNode -> cn.com.codesec.Fq:
    cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule rule -> a
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation flagCheck -> b
    1231:1234:void <init>(cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation) -> <init>
    1238:1238:cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule getRule() -> a
    1243:1243:cn.com.codesec.java.rules.Sink getSink() -> b
    1248:1248:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getFlagCheck() -> f
    1253:1253:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1258:1258:int getDepth() -> d
    1263:1270:boolean equals(java.lang.Object) -> equals
    1275:1275:int hashCode() -> hashCode
    1280:1294:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1298:1299:void setRule(cn.com.codesec.java.rules.structural.AbstractSinkStructuralRule) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralSinkTerminalLink -> cn.com.codesec.Fr:
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation condition -> d
    837:839:void <init>(cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralSinkNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation) -> <init>
    843:843:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getConditional() -> c
cn.com.codesec.scan.analyzer.taint.model.TaintModel$StructuralSourceNode -> cn.com.codesec.Fs:
    cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule rule -> a
    1174:1176:void <init>(cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule) -> <init>
    1180:1180:cn.com.codesec.java.rules.structural.AbstractTaintStructuralRule getRule() -> a
    1185:1185:cn.com.codesec.scan.analyzer.taint.model.NodeType getType() -> c
    1190:1190:int getDepth() -> d
    1195:1202:boolean equals(java.lang.Object) -> equals
    1207:1207:int hashCode() -> hashCode
    1212:1222:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TerminalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.TaintModel$WeakRef -> cn.com.codesec.Ft:
    java.lang.ref.WeakReference ref -> a
    1605:1607:void <init>(java.lang.Object) -> <init>
    1612:1612:java.lang.Object get() -> a
cn.com.codesec.scan.analyzer.taint.model.TaintPath -> cn.com.codesec.Fu:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.analyzer.taint.model.TaintPath EMPTY_PATH -> a
    java.lang.Object EMPTY_PATH_SER -> b
    int depth -> c
    cn.com.codesec.java.rules.flags.TaintFlagTransformation flagOps -> d
    float confidence -> e
    int vpl -> f
    int hash -> g
    269:317:void <clinit>() -> <clinit>
    24:30:void <init>() -> <init>
    33:39:void <init>(java.util.Collection) -> <init>
    43:46:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getFirst() -> a
    52:55:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getLast() -> b
    60:66:int getDepth() -> c
    70:76:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> d
    80:83:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    86:89:void getPlusFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    92:95:void getMinusFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> c
    98:104:float getConfidence() -> e
    108:116:int getVisiblePathLength() -> f
    120:125:void dirty() -> k
    128:130:void readObject(java.io.ObjectInputStream) -> readObject
    134:143:boolean add(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    148:153:void add(int,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    157:161:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode set(int,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> b
    166:167:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode remove(int) -> a
    172:176:boolean remove(java.lang.Object) -> remove
    181:185:boolean addAll(int,java.util.Collection) -> addAll
    190:192:void removeRange(int,int) -> removeRange
    196:198:void clear() -> clear
    202:206:boolean addAll(java.util.Collection) -> addAll
    211:215:boolean removeAll(java.util.Collection) -> removeAll
    220:224:boolean retainAll(java.util.Collection) -> retainAll
    229:232:int hashCode() -> hashCode
    236:236:boolean equals(java.lang.Object) -> equals
    240:249:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    254:257:cn.com.codesec.scan.analyzer.taint.model.TaintPath clone() -> g
    261:261:cn.com.codesec.scan.analyzer.taint.model.TaintPath getEMPTYPATH() -> h
    265:266:void setEMPTYPATH(cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> b
    1:1:java.lang.Object set(int,java.lang.Object) -> set
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object remove(int) -> remove
    1:1:java.lang.Object clone() -> clone
    1:1:void add(int,java.lang.Object) -> add
    1:1:boolean add(java.lang.Object) -> add
    17:17:java.lang.Object access$6() -> i
    16:16:cn.com.codesec.scan.analyzer.taint.model.TaintPath access$7() -> j
cn.com.codesec.scan.analyzer.taint.model.TaintPath$1 -> cn.com.codesec.Fv:
    long serialVersionUID -> serialVersionUID
    1:269:void <init>() -> <init>
    274:274:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode set(int,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> b
    279:279:boolean add(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    284:284:void add(int,cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    289:289:boolean addAll(java.util.Collection) -> addAll
    294:294:boolean addAll(int,java.util.Collection) -> addAll
    299:299:void trimToSize() -> trimToSize
    303:303:void ensureCapacity(int) -> ensureCapacity
    306:306:java.lang.Object writeReplace() -> writeReplace
cn.com.codesec.scan.analyzer.taint.model.TaintPath$2 -> cn.com.codesec.Fw:
    long serialVersionUID -> serialVersionUID
    1:309:void <init>() -> <init>
    314:314:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.taint.model.TaintPathNode -> cn.com.codesec.Fx:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.parse.ir.SourceLocation sourceLocation -> a
    cn.com.codesec.scan.metadata.FunMeta context -> b
    25:28:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    31:31:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    35:35:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getConditional() -> b
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    float getConfidence() -> d
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getNodeConfidence() -> e
    cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> f
    47:47:cn.com.codesec.scan.metadata.FunMeta getContext() -> g
    51:51:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
    cn.com.codesec.parse.ir.SourceLocation getSecondaryLocation() -> i
    cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> m
    boolean isVisible() -> n
    int getDepth() -> o
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    67:72:boolean hasRecursiveCycle(cn.com.codesec.scan.metadata.FunMeta) -> a
    76:76:boolean isAliasing() -> q
    81:87:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    92:92:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID -> cn.com.codesec.Fy:
    cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
cn.com.codesec.scan.analyzer.taint.model.TargetedLink -> cn.com.codesec.Fz:
    cn.com.codesec.scan.metadata.FunMeta target -> c
    cn.com.codesec.scan.model.ParameterLocation parameterLocation -> d
    cn.com.codesec.scan.analyzer.taint.model.NodeType type -> e
    int depth -> f
    int hashMemo -> g
    int hashMemoCalc -> h
    20:33:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.taint.model.NodeType,cn.com.codesec.scan.analyzer.taint.model.TaintPath,int) -> <init>
    37:37:int getDepth() -> a
    41:41:cn.com.codesec.scan.analyzer.taint.model.NodeType getTargetType() -> e
    45:45:cn.com.codesec.scan.model.ParameterLocation getTargetParameterLocation() -> f
    49:49:cn.com.codesec.scan.metadata.FunMeta getTargetFunction() -> g
    54:54:cn.com.codesec.scan.analyzer.taint.model.Node getTarget(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
    58:58:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getComparisonNode() -> h
    63:78:boolean equals(java.lang.Object) -> equals
    85:96:int hashCode() -> hashCode
    101:113:int hashCode(boolean) -> a
cn.com.codesec.scan.analyzer.taint.model.TerminalLink -> cn.com.codesec.FA:
    cn.com.codesec.scan.analyzer.taint.model.TerminalNode node -> c
    int hashMemo -> d
    14:17:void <init>(cn.com.codesec.scan.analyzer.taint.model.TerminalNode,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    21:21:int getDepth() -> a
    27:27:cn.com.codesec.scan.analyzer.taint.model.TerminalNode getTarget(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> b
    32:42:boolean equals(java.lang.Object) -> equals
    47:52:int hashCode() -> hashCode
    57:57:java.lang.String toString() -> toString
    1:1:cn.com.codesec.scan.analyzer.taint.model.Node getTarget(cn.com.codesec.scan.analyzer.taint.model.TaintModel) -> a
cn.com.codesec.scan.analyzer.taint.model.TerminalNode -> cn.com.codesec.FB:
    cn.com.codesec.java.rules.SKYRule getRule() -> e
cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN -> cn.com.codesec.FC:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> a
    cn.com.codesec.parse.ir.SourceLocation secondaryLocation -> b
    boolean visible -> c
    cn.com.codesec.java.rules.flags.TaintFlagTransformation nodeFlags -> d
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor nodeConfidence -> e
    27:28:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    31:37:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    41:41:int getDepth() -> o
    46:46:cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> f
    51:51:boolean isVisible() -> n
    56:56:cn.com.codesec.parse.ir.SourceLocation getSecondaryLocation() -> i
    60:60:void checkConditional(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    64:64:float getConfidence() -> d
    69:69:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getNodeConfidence() -> e
    74:79:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    83:87:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> m
    92:92:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    97:97:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    102:102:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    107:134:boolean equals(java.lang.Object) -> equals
    139:145:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN$IDImpl -> cn.com.codesec.FD:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN this$0 -> a
    148:148:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN) -> <init>
    152:152:cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN forTPN() -> b
    157:172:boolean equals(java.lang.Object) -> equals
    177:179:int hashCode() -> hashCode
    184:201:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    148:148:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN,cn.com.codesec.scan.analyzer.taint.model.taintpath.AbstractTPN$IDImpl) -> <init>
cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasByDeductionTPN -> cn.com.codesec.FE:
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subpath -> e
    13:15:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> <init>
    19:19:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasByRuleTPN -> cn.com.codesec.FF:
    16:17:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    21:23:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasTPN -> cn.com.codesec.FG:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> c
    cn.com.codesec.scan.util.Twin locations -> d
    27:30:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.util.Twin) -> <init>
    33:36:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo) -> <init>
    39:42:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo) -> <init>
    46:56:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    61:61:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    66:76:boolean equals(java.lang.Object) -> equals
    81:83:int hashCode() -> hashCode
    88:88:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN -> cn.com.codesec.FH:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> c
    cn.com.codesec.scan.ir.util.memory.IRRef assigned -> d
    cn.com.codesec.scan.model.LocationInfo var -> e
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> f
    29:30:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    33:38:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    41:41:boolean isTaintModifier() -> r
    47:54:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    59:59:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    64:64:boolean isAliasing() -> q
    69:90:boolean equals(java.lang.Object) -> equals
    95:98:int hashCode() -> hashCode
    103:103:java.lang.String toString() -> toString
    107:107:cn.com.codesec.scan.ir.util.memory.IRRef getNst() -> s
    111:112:void setNst(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    115:115:cn.com.codesec.scan.ir.util.memory.IRRef getAssigned() -> t
    119:120:void setAssigned(cn.com.codesec.scan.ir.util.memory.IRRef) -> b
    123:123:cn.com.codesec.scan.model.LocationInfo getVar() -> u
    127:128:void setVar(cn.com.codesec.scan.model.LocationInfo) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN -> cn.com.codesec.FI:
    cn.com.codesec.scan.metadata.CallGraphEdge call -> a
    cn.com.codesec.parse.ir.SourceLocation secondaryLocation -> b
    java.lang.String callName -> c
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> d
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> h
    boolean visible -> i
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor callConfidence -> j
    cn.com.codesec.java.rules.flags.TaintFlagTransformation flags -> k
    java.lang.String inDescirption -> e
    java.lang.String outDescirption -> f
    53:54:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,boolean) -> <init>
    57:82:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean,boolean) -> <init>
    86:115:java.lang.String getParameterDescirption(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.Parameter) -> a
    119:119:cn.com.codesec.java.rules.flags.TaintFlagTransformer getTaintFlagSource() -> r
    124:124:cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> f
    129:129:cn.com.codesec.parse.ir.SourceLocation getSecondaryLocation() -> i
    134:134:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    139:139:int getDepth() -> o
    144:144:boolean isVisible() -> n
    148:148:void checkConditional(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    152:152:float getConfidence() -> d
    157:157:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getNodeConfidence() -> e
    162:168:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    172:172:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> m
    177:183:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    188:194:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    199:199:boolean hasRecursiveCycle(cn.com.codesec.scan.metadata.FunMeta) -> a
    204:235:boolean equals(java.lang.Object) -> equals
    240:251:int hashCode() -> hashCode
    256:281:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    285:285:boolean checkValidProfileLocation(cn.com.codesec.scan.model.ParameterLocation) -> a
    45:45:cn.com.codesec.scan.analyzer.taint.model.Reason access$0(cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN$IDImpl -> cn.com.codesec.FJ:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN this$0 -> a
    288:288:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN) -> <init>
    292:292:cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN forTPN() -> b
    298:319:boolean equals(java.lang.Object) -> equals
    324:327:int hashCode() -> hashCode
    332:354:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.model.taintpath.ComparisonTPN -> cn.com.codesec.FK:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.util.Twin vars -> c
    cn.com.codesec.parse.ir.IROperators operator -> d
    22:25:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.util.Twin) -> <init>
    28:31:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.util.Twin,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    35:37:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    42:52:boolean equals(java.lang.Object) -> equals
    57:60:int hashCode() -> hashCode
    65:65:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
cn.com.codesec.scan.analyzer.taint.model.taintpath.EntryPointTPN -> cn.com.codesec.FL:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> c
    cn.com.codesec.scan.model.ParameterLocation in -> d
    int hc -> e
    boolean isParameterInput -> f
    java.lang.String inDescirption -> h
    30:39:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> <init>
    42:43:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> <init>
    47:47:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    51:51:boolean isTaintModifier() -> r
    56:66:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    72:82:boolean equals(java.lang.Object) -> equals
    87:94:int hashCode() -> hashCode
    99:99:java.lang.String toString() -> toString
    103:105:void readObject(java.io.ObjectInputStream) -> readObject
    108:108:cn.com.codesec.scan.ir.util.memory.IRRef getNst() -> s
    112:113:void setNst(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    116:116:cn.com.codesec.scan.model.ParameterLocation getIn() -> t
    120:121:void setIn(cn.com.codesec.scan.model.ParameterLocation) -> a
    124:124:int getHc() -> u
    128:129:void setHc(int) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.FlagTxTPN -> cn.com.codesec.FM:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.java.rules.flags.TaintFlagTransformation tx -> a
    21:21:cn.com.codesec.java.rules.flags.TaintFlagTransformation getTx() -> r
    25:27:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> <init>
    32:32:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    37:37:float getConfidence() -> d
    42:42:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getNodeConfidence() -> e
    47:47:cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> f
    52:52:cn.com.codesec.parse.ir.SourceLocation getSecondaryLocation() -> i
    57:57:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    62:62:cn.com.codesec.java.rules.flags.TaintFlagTransformation getFlagOps() -> m
    67:67:boolean isVisible() -> n
    72:72:int getDepth() -> o
    77:77:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    82:83:void transformFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    87:87:cn.com.codesec.java.rules.flags.TaintFlagSet getPlusFlags() -> k
    92:92:cn.com.codesec.java.rules.flags.TaintFlagSet getMinusFlags() -> l
    97:110:boolean equals(java.lang.Object) -> equals
    115:118:int hashCode() -> hashCode
    123:123:java.lang.String toString() -> toString
    127:128:void setTx(cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN -> cn.com.codesec.FN:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.model.ParameterLocation in -> h
    cn.com.codesec.parse.ir.SourceLocation reportingLocation -> i
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> j
    int hc -> k
    31:43:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,boolean) -> <init>
    47:49:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    54:64:boolean equals(java.lang.Object) -> equals
    69:75:int hashCode() -> hashCode
    80:84:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    89:89:java.lang.String toString() -> toString
    94:94:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    98:100:void readObject(java.io.ObjectInputStream) -> readObject
    25:25:cn.com.codesec.scan.model.ParameterLocation access$0(cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN$IDImpl -> cn.com.codesec.FO:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN this$0 -> b
    102:102:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN) -> <init>
    106:106:cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN forTPN() -> c
    111:115:boolean equals(java.lang.Object) -> equals
    120:122:int hashCode() -> hashCode
    127:138:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN forTPN() -> b
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN -> cn.com.codesec.FP:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.model.ParameterLocation in -> h
    cn.com.codesec.scan.model.ParameterLocation out -> i
    cn.com.codesec.parse.ir.SourceLocation reportingLocation -> j
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> l
    cn.com.codesec.scan.analyzer.taint.model.TaintPath subPath -> m
    boolean isAliasing -> n
    int hc -> o
    boolean $assertionsDisabled -> k
    23:25:void <clinit>() -> <clinit>
    35:36:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> <init>
    39:57:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> <init>
    61:68:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    73:73:cn.com.codesec.scan.analyzer.taint.model.TaintPath getSubPath() -> a
    78:78:boolean isAliasing() -> q
    83:91:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    96:112:boolean equals(java.lang.Object) -> equals
    117:124:int hashCode() -> hashCode
    129:129:java.lang.String toString() -> toString
    134:134:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    138:140:void readObject(java.io.ObjectInputStream) -> readObject
cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN$IDImpl -> cn.com.codesec.FQ:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN this$0 -> b
    142:142:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN) -> <init>
    146:146:cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN forTPN() -> c
    151:161:boolean equals(java.lang.Object) -> equals
    166:169:int hashCode() -> hashCode
    174:188:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN forTPN() -> b
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.MapCallTPN -> cn.com.codesec.FR:
    cn.com.codesec.scan.analyzer.constants.ConstantValue key -> l
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> m
    25:28:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> <init>
    32:32:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    36:57:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    61:61:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getCallTargetConfidence() -> s
    65:65:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getKeyConfidence(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    70:70:float getConfidence() -> d
    74:83:float getContextLessConfidence() -> t
    88:100:cn.com.codesec.scan.model.ParameterLocation eval(cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    104:109:boolean containsLazyKey(cn.com.codesec.scan.model.ParameterLocation) -> b
cn.com.codesec.scan.analyzer.taint.model.taintpath.OperationTPN -> cn.com.codesec.FS:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> c
    cn.com.codesec.scan.ir.util.memory.IRRef operand -> d
    cn.com.codesec.scan.model.LocationInfo var -> e
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> f
    26:31:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    34:34:boolean isTaintModifier() -> r
    39:41:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    46:46:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    51:67:boolean equals(java.lang.Object) -> equals
    72:75:int hashCode() -> hashCode
    81:81:java.lang.String toString() -> toString
    85:85:cn.com.codesec.scan.ir.util.memory.IRRef getNst() -> s
    89:90:void setNst(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    93:93:cn.com.codesec.scan.model.LocationInfo getVar() -> t
    97:98:void setVar(cn.com.codesec.scan.model.LocationInfo) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN -> cn.com.codesec.FT:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.model.ParameterLocation out -> h
    cn.com.codesec.parse.ir.SourceLocation reportingLocation -> i
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> j
    int hc -> k
    32:44:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> <init>
    48:50:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    55:59:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    64:74:boolean equals(java.lang.Object) -> equals
    79:85:int hashCode() -> hashCode
    90:90:java.lang.String toString() -> toString
    95:95:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    99:101:void readObject(java.io.ObjectInputStream) -> readObject
    26:26:cn.com.codesec.scan.model.ParameterLocation access$0(cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN$IDImpl -> cn.com.codesec.FU:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN this$0 -> b
    103:103:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN) -> <init>
    107:107:cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN forTPN() -> c
    112:116:boolean equals(java.lang.Object) -> equals
    121:123:int hashCode() -> hashCode
    128:139:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN forTPN() -> b
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.ReadTPN -> cn.com.codesec.FV:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.model.LocationInfo varInfo -> c
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> d
    cn.com.codesec.scan.ir.util.memory.IRRef nstRef -> e
    27:38:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> <init>
    44:52:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    56:56:cn.com.codesec.scan.model.LocationInfo getVarInfo() -> r
    61:71:boolean equals(java.lang.Object) -> equals
    76:78:int hashCode() -> hashCode
    83:83:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    88:88:java.lang.String toString() -> toString
    92:93:void setVarInfo(cn.com.codesec.scan.model.LocationInfo) -> a
    96:96:cn.com.codesec.scan.ir.util.memory.IRRef getNstRef() -> s
    100:101:void setNstRef(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.ReturnTPN -> cn.com.codesec.FW:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> d
    cn.com.codesec.scan.model.LocationInfo var -> c
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> e
    int hc -> f
    30:31:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    34:39:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.taint.model.Reason) -> <init>
    43:45:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    50:50:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    54:54:boolean isTaintModifier() -> r
    59:80:boolean equals(java.lang.Object) -> equals
    85:91:int hashCode() -> hashCode
    96:96:java.lang.String toString() -> toString
    100:102:void readObject(java.io.ObjectInputStream) -> readObject
    105:105:cn.com.codesec.scan.ir.util.memory.IRRef getNst() -> s
    109:110:void setNst(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.SinkTPN -> cn.com.codesec.FX:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.java.rules.SKYRule rule -> h
    cn.com.codesec.java.rules.Sink sink -> i
    cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation condition -> j
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor sinkConfidence -> k
    27:32:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.java.rules.Sink,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> <init>
    36:36:float getConfidence() -> d
    41:41:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getNodeConfidence() -> e
    46:46:cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation getConditional() -> b
    51:54:void checkConditional(cn.com.codesec.java.rules.flags.TaintFlagSet) -> b
    58:58:cn.com.codesec.java.rules.flags.TaintFlagTransformer getTaintFlagSource() -> r
    63:84:boolean equals(java.lang.Object) -> equals
    89:93:int hashCode() -> hashCode
    97:97:cn.com.codesec.java.rules.SKYRule getRule() -> s
    101:102:void setRule(cn.com.codesec.java.rules.SKYRule) -> a
    105:105:cn.com.codesec.java.rules.Sink getSink() -> t
    109:110:void setSink(cn.com.codesec.java.rules.Sink) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory -> cn.com.codesec.FY:
    cn.com.codesec.scan.util.Canonicalizer canonical -> a
    cn.com.codesec.scan.util.Canonicalizer sourceLocation -> b
    38:41:void <init>() -> <init>
    44:44:cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasTPN mkAlias(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.util.Twin) -> a
    48:48:cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasTPN mkAlias(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo) -> a
    52:52:cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasTPN mkAliasByRule(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    56:56:cn.com.codesec.scan.analyzer.taint.model.taintpath.AliasTPN mkAliasByDeduction(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.analyzer.taint.model.TaintPath) -> a
    60:60:cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN mkAssignment(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    64:64:cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN mkAssignment(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    68:68:cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN mkAssignment(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    72:72:cn.com.codesec.scan.analyzer.taint.model.taintpath.OperationTPN mkOperation(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    76:76:cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN mkAssignment(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> a
    80:80:cn.com.codesec.scan.analyzer.taint.model.taintpath.AssignmentTPN mkAssignment(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> a
    84:84:cn.com.codesec.scan.analyzer.taint.model.taintpath.ComparisonTPN mkComparison(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.util.Twin) -> a
    88:88:cn.com.codesec.scan.analyzer.taint.model.taintpath.ComparisonTPN mkComparison(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.scan.util.Twin,cn.com.codesec.java.rules.flags.TaintFlagTransformation,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    92:92:cn.com.codesec.scan.analyzer.taint.model.taintpath.EntryPointTPN mkEntryPoint(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    96:96:cn.com.codesec.scan.analyzer.taint.model.taintpath.EntryPointTPN mkInputPoint(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> b
    100:100:cn.com.codesec.scan.analyzer.taint.model.taintpath.ReadTPN mkRead(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    104:104:cn.com.codesec.scan.analyzer.taint.model.taintpath.ReturnTPN mkReturn(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    108:108:cn.com.codesec.scan.analyzer.taint.model.taintpath.ReturnTPN mkReturn(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.taint.model.Reason) -> a
    112:112:cn.com.codesec.scan.analyzer.taint.model.taintpath.InCallTPN mkInCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation) -> a
    116:116:cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN mkOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation) -> b
    120:120:cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN mkOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    124:124:cn.com.codesec.scan.analyzer.taint.model.taintpath.OutCallTPN mkOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> a
    128:128:cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN mkInOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean) -> a
    132:132:cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN mkInOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean,boolean) -> a
    136:136:cn.com.codesec.scan.analyzer.taint.model.taintpath.InOutCallTPN mkInOutCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,boolean,cn.com.codesec.java.rules.flags.TaintFlagTransformation,boolean) -> a
    140:140:cn.com.codesec.scan.analyzer.taint.model.taintpath.MapCallTPN mkMapCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.TaintPath,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    144:144:cn.com.codesec.scan.analyzer.taint.model.taintpath.SinkTPN mkSink(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.TaintConditionEvaluator$PartialEvaluation,cn.com.codesec.java.rules.Sink,cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    148:148:cn.com.codesec.scan.analyzer.taint.model.taintpath.ReadTPN mkRead(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    152:152:cn.com.codesec.scan.analyzer.taint.model.taintpath.ReadTPN mkNonLocationRead(cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    156:156:cn.com.codesec.scan.analyzer.taint.model.taintpath.FlagTxTPN mkFlagTx(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation) -> a
    160:160:cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN mkTxCall(cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,java.util.List) -> a
    164:164:cn.com.codesec.scan.analyzer.taint.model.taintpath.TxLocTPN mkTxLoc(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,java.util.List) -> a
    168:168:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode getCanonical(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    172:172:cn.com.codesec.parse.ir.SourceLocation getCanonicalSourceInfo(cn.com.codesec.parse.ir.SourceLocation) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN -> cn.com.codesec.FZ:
    cn.com.codesec.scan.model.ParameterLocation cleansed -> h
    java.util.List reasons -> i
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> j
    int hc -> k
    30:35:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.analyzer.callgraph.CallTarget,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,java.util.List) -> <init>
    39:39:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
    44:48:boolean equals(java.lang.Object) -> equals
    53:58:int hashCode() -> hashCode
    63:67:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode) -> a
    72:72:java.lang.String toString() -> toString
    77:77:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID getContextInsenstiveId() -> p
    81:83:void readObject(java.io.ObjectInputStream) -> readObject
    24:24:cn.com.codesec.scan.model.ParameterLocation access$0(cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN) -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN$IDImpl -> cn.com.codesec.Ga:
    cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN this$0 -> b
    85:85:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN) -> <init>
    89:89:cn.com.codesec.scan.analyzer.taint.model.taintpath.TxCallTPN forTPN() -> c
    94:98:boolean equals(java.lang.Object) -> equals
    103:105:int hashCode() -> hashCode
    110:121:int compareTo(cn.com.codesec.scan.analyzer.taint.model.TaintPathNode$ID) -> a
    1:1:cn.com.codesec.scan.analyzer.taint.model.taintpath.CallTPN forTPN() -> b
    1:1:cn.com.codesec.scan.analyzer.taint.model.TaintPathNode forTPN() -> a
cn.com.codesec.scan.analyzer.taint.model.taintpath.TxLocTPN -> cn.com.codesec.Gb:
    long serialVersionUID -> serialVersionUID
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> c
    cn.com.codesec.scan.model.LocationInfo loc -> d
    java.util.List reasons -> e
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> f
    27:32:void <init>(cn.com.codesec.scan.analyzer.taint.model.taintpath.TPNFactory,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformation,java.util.List) -> <init>
    36:36:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> j
    41:41:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getTaintNode() -> c
cn.com.codesec.scan.analyzer.taint.vector.AliasNode -> cn.com.codesec.Gc:
    cn.com.codesec.scan.util.Twin locations -> a
    20:25:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.util.Twin) -> <init>
    29:29:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    34:34:java.lang.String renderActionString() -> b
    39:39:java.lang.String getPathString(boolean,boolean) -> a
    45:53:cn.com.codesec.scan.model.LocationInfo[] getLocations() -> c
    58:72:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
cn.com.codesec.scan.analyzer.taint.vector.AssignmentNode -> cn.com.codesec.Gd:
    cn.com.codesec.scan.ir.util.memory.IRRef assigned -> a
    22:24:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason) -> <init>
    27:28:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.java.rules.SKYRule) -> <init>
    32:35:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    42:42:java.lang.String renderActionString() -> b
    48:48:java.lang.String getPathString(boolean,boolean) -> a
    53:54:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj hashKey() -> d
    59:59:java.lang.String renderTypeString() -> e
    63:63:cn.com.codesec.scan.ir.util.memory.IRRef getAssigned() -> f
    67:68:void setAssigned(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
cn.com.codesec.scan.analyzer.taint.vector.CallNode -> cn.com.codesec.Ge:
    cn.com.codesec.scan.metadata.FunMeta function -> a
    cn.com.codesec.scan.metadata.CallGraphEdge callGraphEdge -> b
    java.lang.String callName -> f
    cn.com.codesec.scan.model.ParameterLocation in -> g
    cn.com.codesec.scan.model.ParameterLocation out -> h
    java.lang.String inDescirption -> i
    java.lang.String outDescirption -> j
    26:26:java.lang.String getInDescirption() -> c
    30:30:java.lang.String getOutDescirption() -> f
    38:46:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,java.lang.String) -> <init>
    49:49:cn.com.codesec.scan.metadata.FunMeta getFunction() -> g
    53:53:java.lang.String getCallName() -> h
    57:57:cn.com.codesec.scan.model.ParameterLocation getIn() -> i
    61:61:cn.com.codesec.scan.metadata.CallGraphEdge getCallGraphEdge() -> j
    65:65:cn.com.codesec.scan.model.ParameterLocation getOut() -> k
    94:121:java.lang.String renderActionString() -> b
    160:190:java.lang.String getPathString(boolean,boolean) -> a
    229:233:boolean equalsNoContext(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> b
    238:242:int hashCodeNoContext() -> l
    247:264:java.lang.String toString() -> toString
    269:269:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj hashKey() -> d
    274:302:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
    331:338:java.lang.String renderTypeString() -> e
cn.com.codesec.scan.analyzer.taint.vector.CatchNode -> cn.com.codesec.Gf:
    18:19:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    23:23:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    28:44:java.lang.String renderActionString() -> b
    49:67:java.lang.String getPathString(boolean,boolean) -> a
cn.com.codesec.scan.analyzer.taint.vector.ComparisonNode -> cn.com.codesec.Gg:
    cn.com.codesec.scan.util.Twin locations -> a
    cn.com.codesec.parse.ir.IROperators operator -> f
    22:25:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.util.Twin,cn.com.codesec.parse.ir.IROperators) -> <init>
    29:29:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    34:47:java.lang.String getPathString(boolean,boolean) -> a
    53:63:java.lang.String renderActionString() -> b
    70:86:cn.com.codesec.scan.model.LocationInfo[] getLocations() -> c
    92:121:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
cn.com.codesec.scan.analyzer.taint.vector.EntryPointInNode -> cn.com.codesec.Gh:
    19:20:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> <init>
    24:24:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
cn.com.codesec.scan.analyzer.taint.vector.FormatUtil -> cn.com.codesec.Gi:
    13:13:void <init>() -> <init>
    17:31:java.lang.String format(cn.com.codesec.scan.model.Parameter) -> a
    37:49:java.lang.String numberFormat(int) -> a
cn.com.codesec.scan.analyzer.taint.vector.FormatUtil2 -> cn.com.codesec.Gj:
    6:6:void <init>() -> <init>
    10:24:java.lang.String format(cn.com.codesec.scan.model.Parameter) -> a
cn.com.codesec.scan.analyzer.taint.vector.GlobalAliasNode -> cn.com.codesec.Gk:
    16:17:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.util.Twin) -> <init>
    21:21:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    26:26:java.lang.String renderActionString() -> b
cn.com.codesec.scan.analyzer.taint.vector.InNode -> cn.com.codesec.Gl:
    18:19:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> <init>
    22:23:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.java.rules.SKYRule,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> <init>
    27:27:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
cn.com.codesec.scan.analyzer.taint.vector.OperationNode -> cn.com.codesec.Gm:
    cn.com.codesec.scan.ir.util.memory.IRRef operand -> a
    21:21:cn.com.codesec.scan.ir.util.memory.IRRef getOperand() -> f
    25:27:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason) -> <init>
    31:31:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    38:38:java.lang.String renderActionString() -> b
    44:44:java.lang.String renderTypeString() -> e
    50:50:java.lang.String getPathString(boolean,boolean) -> a
cn.com.codesec.scan.analyzer.taint.vector.OutNode -> cn.com.codesec.Gn:
    17:18:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> <init>
    22:22:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
cn.com.codesec.scan.analyzer.taint.vector.ParameterInNode -> cn.com.codesec.Go:
    19:20:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> <init>
    24:24:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
cn.com.codesec.scan.analyzer.taint.vector.PassthroughNode -> cn.com.codesec.Gp:
    17:18:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.CallGraphEdge,java.lang.String,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,java.lang.String) -> <init>
    22:22:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
cn.com.codesec.scan.analyzer.taint.vector.ReadNode -> cn.com.codesec.Gq:
    21:22:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    25:26:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.java.rules.SKYRule) -> <init>
    30:33:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    40:40:java.lang.String renderActionString() -> b
    46:46:java.lang.String renderTypeString() -> e
    52:52:java.lang.String getPathString(boolean,boolean) -> a
cn.com.codesec.scan.analyzer.taint.vector.ReturnNode -> cn.com.codesec.Gr:
    17:18:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    22:22:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    28:28:java.lang.String renderActionString() -> b
    33:33:java.lang.String renderTypeString() -> e
    39:39:java.lang.String getPathString(boolean,boolean) -> a
cn.com.codesec.scan.analyzer.taint.vector.StatementNode -> cn.com.codesec.Gs:
    cn.com.codesec.scan.model.LocationInfo location -> b
    20:22:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    25:26:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.model.LocationInfo) -> <init>
    29:29:cn.com.codesec.scan.model.LocationInfo[] getLocations() -> c
    34:46:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
    64:68:boolean equalsNoContext(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> b
    73:75:int hashCodeNoContext() -> l
cn.com.codesec.scan.analyzer.taint.vector.TaintNode -> cn.com.codesec.Gt:
    int MAX_EXTERNAL_ENTRIES -> c
    cn.com.codesec.scan.metadata.FunMeta context -> a
    cn.com.codesec.parse.ir.SourceLocation source -> b
    cn.com.codesec.parse.ir.SourceLocation secondaryLocation -> f
    cn.com.codesec.scan.analyzer.taint.model.Reason reason -> g
    cn.com.codesec.scan.ir.util.memory.IRRef nstNode -> d
    java.util.List subNodes -> h
    java.util.Set externalEntries -> i
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor confidence -> j
    cn.com.codesec.scan.metadata.TypeMeta thisTypeMeta -> k
    cn.com.codesec.java.rules.flags.TaintFlagTransformer tx -> e
    333:340:void <clinit>() -> <clinit>
    43:43:cn.com.codesec.scan.analyzer.taint.model.Reason getReason() -> m
    54:54:cn.com.codesec.java.rules.flags.TaintFlagTransformer getTx() -> n
    59:59:java.lang.String getFlagDataDescription(boolean) -> a
    63:77:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    80:80:cn.com.codesec.parse.ir.SourceLocation getSource() -> o
    84:84:cn.com.codesec.scan.metadata.TypeMeta getThisTypeMeta() -> p
    88:88:float getConfidence() -> q
    92:92:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor getConfidenceFactor() -> r
    96:97:void setConfidence(cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    100:107:float getMinVirtualCallConfidence() -> s
    111:111:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> t
    115:115:cn.com.codesec.parse.ir.SourceLocation getSecondaryLocation() -> u
    119:119:cn.com.codesec.java.rules.SKYRule getRule() -> v
    123:123:cn.com.codesec.scan.metadata.FunMeta getContext() -> w
    127:127:cn.com.codesec.scan.ir.util.memory.IRRef getNstNode() -> x
    131:132:void addSubNode(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> c
    135:135:int getSubNodeCount() -> y
    139:139:java.util.ListIterator getSubNodeIterator() -> z
    143:143:java.util.ListIterator getSubNodeIterator(int) -> a
    147:147:java.util.List getSubNodeList() -> A
    151:151:boolean hasSubNodes() -> B
    155:173:void collectSourceLocations(java.util.Collection) -> a
    176:186:void addExternalEntry(cn.com.codesec.scan.analyzer.vuln.ExternalEntry) -> a
    189:189:java.util.Collection getExternalEntries() -> C
    215:228:boolean equals(java.lang.Object) -> equals
    233:235:int hashCode() -> hashCode
    239:251:boolean equalsNoContext(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> b
    255:259:int hashCodeNoContext() -> l
    263:263:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj hashKey() -> d
    267:271:int totalNodeCount() -> c
    277:311:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
    315:323:cn.com.codesec.scan.metadata.TypeMeta getThisTypeMeta(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    327:328:cn.com.codesec.scan.metadata.TypeMeta getThisTypeMeta(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    java.lang.String renderActionString() -> b
    351:351:java.lang.String renderTypeString() -> e
    java.lang.String getPathString(boolean,boolean) -> a
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    360:368:java.lang.String getPathType(boolean,boolean) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.vector.TaintNode$TooManyExternalEntriesException -> cn.com.codesec.Gu:
    342:342:void <init>() -> <init>
cn.com.codesec.scan.analyzer.taint.vector.TaintVector -> cn.com.codesec.Gv:
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode source -> a
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode sink -> b
    boolean WANT_SHORTEST_PATH -> c
    java.util.ArrayList paths -> d
    int hashcode -> e
    float FP_FUDGE -> f
    25:25:java.util.List getPaths() -> a
    31:42:void <init>(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> <init>
    45:49:float getConfidence() -> b
    53:59:float getMinVirtualCallConfidence() -> c
    66:66:java.util.Iterator iterator() -> iterator
    70:72:void removePath(cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path) -> a
    75:75:cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path getBestPath() -> d
    79:79:cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path getWorstPath() -> e
    83:83:int getPathCount() -> f
    87:87:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getSource() -> g
    91:91:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getSink() -> h
    95:109:boolean pathMayBeAdded(int,float) -> a
    113:124:boolean addPath(java.util.List,float,cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    128:131:void addPath(cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path) -> b
    135:148:boolean equals(java.lang.Object) -> equals
    153:157:int hashCode() -> hashCode
    162:175:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintVector) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path -> cn.com.codesec.Gw:
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode[] nodes -> a
    float confidence -> b
    cn.com.codesec.java.rules.flags.TaintFlagSet flags -> c
    184:188:void <init>(java.util.List,float,cn.com.codesec.java.rules.flags.TaintFlagSet) -> <init>
    191:191:float getConfidence() -> a
    195:207:float getCallConfidence() -> b
    211:212:void setNodes(cn.com.codesec.scan.analyzer.taint.vector.TaintNode[]) -> a
    215:219:float getMinVirtualCallConfidence() -> c
    223:223:int getSize() -> d
    227:227:java.util.List list() -> e
    232:232:java.util.Iterator iterator() -> iterator
    237:237:java.lang.String toString() -> toString
    242:249:boolean equals(java.lang.Object) -> equals
    254:254:int hashCode() -> hashCode
    259:285:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path) -> a
    289:290:void setConfidence(float) -> a
    293:293:cn.com.codesec.java.rules.flags.TaintFlagSet getFlags() -> f
    297:298:void setFlags(cn.com.codesec.java.rules.flags.TaintFlagSet) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.taint.vector.ThrowNode -> cn.com.codesec.Gx:
    17:18:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,cn.com.codesec.scan.analyzer.taint.model.Reason) -> <init>
    22:22:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    27:43:java.lang.String renderActionString() -> b
    49:66:java.lang.String getPathString(boolean,boolean) -> a
cn.com.codesec.scan.analyzer.taint.vector.TxCallNode -> cn.com.codesec.Gy:
    java.lang.String callname -> a
    cn.com.codesec.scan.model.ParameterLocation param -> b
    25:28:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,java.lang.String,cn.com.codesec.scan.model.ParameterLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,java.util.List,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    32:35:java.lang.String renderActionString() -> b
    50:53:int hashCode() -> hashCode
    58:68:boolean equals(java.lang.Object) -> equals
    73:87:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
cn.com.codesec.scan.analyzer.taint.vector.TxDebugNode -> cn.com.codesec.Gz:
    12:13:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer) -> <init>
    22:22:int hashCode() -> hashCode
    27:33:boolean equals(java.lang.Object) -> equals
    38:38:java.lang.String renderActionString() -> b
cn.com.codesec.scan.analyzer.taint.vector.TxLocNode -> cn.com.codesec.GA:
    cn.com.codesec.scan.model.LocationInfo location -> a
    24:26:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.model.LocationInfo,cn.com.codesec.java.rules.flags.TaintFlagTransformer,java.util.List,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    30:38:java.lang.String renderActionString() -> b
    43:47:int hashCode() -> hashCode
    52:61:boolean equals(java.lang.Object) -> equals
    66:77:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
cn.com.codesec.scan.analyzer.taint.vector.TxNode -> cn.com.codesec.GB:
    java.util.List reasons -> a
    25:27:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.java.rules.flags.TaintFlagTransformer,java.util.List,cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    31:31:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType getActionType() -> a
    36:36:java.lang.String getPathString(boolean,boolean) -> a
    125:131:int hashCode() -> hashCode
    136:146:boolean equals(java.lang.Object) -> equals
    151:168:int compareTo(cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
cn.com.codesec.scan.analyzer.typeinference.DuckType -> cn.com.codesec.GC:
    cn.com.codesec.util.fset.FHashSet attributes -> a
    18:20:void <init>() -> <init>
    cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> a
    25:25:cn.com.codesec.util.fset.FSet getAttributes() -> b
    29:30:void addAttribute(java.lang.String) -> a
    33:34:void addSupertypeAttributes(cn.com.codesec.scan.analyzer.typeinference.DuckType) -> a
cn.com.codesec.scan.analyzer.typeinference.DuckType$ConcreteDuckType -> cn.com.codesec.GD:
    cn.com.codesec.scan.metadata.TypeMeta type -> a
    75:77:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    81:81:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> a
cn.com.codesec.scan.analyzer.typeinference.DuckType$QuasiDuckType -> cn.com.codesec.GE:
    cn.com.codesec.scan.metadata.Quasi$TypeMeta quasiType -> a
    java.lang.String name -> b
    java.lang.String namespace -> c
    42:51:void <init>(java.lang.String,java.lang.String) -> <init>
    54:54:java.lang.String getNamespace() -> c
    58:58:java.lang.String getName() -> d
    62:63:void setTypeMeta(cn.com.codesec.scan.metadata.Quasi$TypeMeta) -> a
    67:67:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> a
cn.com.codesec.scan.analyzer.typeinference.QuasiTypeTable -> cn.com.codesec.GF:
    java.util.HashMap tableMap -> a
    java.util.HashMap inheritanceMap -> b
    java.util.HashMap attributeIndexMap -> c
    java.util.Map typeMap -> d
    cn.com.codesec.scan.meta.Language language -> e
    java.util.HashSet typesLoadedLanguages -> f
    cn.com.codesec.util.fset.FSet javascriptKillList -> g
    cn.com.codesec.util.fset.FSet rubyKillList -> h
    int[] $SWITCH_TABLE$cn$com$codesec$scan$meta$Language -> i
    271:277:void <clinit>() -> <clinit>
    41:44:void <init>(cn.com.codesec.scan.meta.Language) -> <init>
    86:96:void addAttributeMapping(cn.com.codesec.scan.meta.Language,java.lang.String,cn.com.codesec.scan.analyzer.typeinference.DuckType) -> a
    99:163:void resolveInheritance() -> a
    166:180:void loadTypesForLanguage(cn.com.codesec.scan.meta.Language) -> d
    183:201:void addTypeMetaAttributesToDuckType(cn.com.codesec.scan.analyzer.typeinference.DuckType,cn.com.codesec.scan.metadata.TypeMeta) -> a
    204:207:void loadActualTypes(cn.com.codesec.scan.meta.Language) -> a
    210:210:cn.com.codesec.scan.analyzer.typeinference.QuasiTypeTable getTable(cn.com.codesec.scan.meta.Language) -> b
    214:215:void addType(java.lang.String,cn.com.codesec.scan.analyzer.typeinference.DuckType) -> a
    218:218:cn.com.codesec.scan.analyzer.typeinference.DuckType getType(java.lang.String) -> a
    222:256:cn.com.codesec.util.fset.FSet findMatches(cn.com.codesec.scan.meta.Language,java.util.Set) -> a
    260:266:cn.com.codesec.util.fset.FSet getKillListForLanguage(cn.com.codesec.scan.meta.Language) -> c
    30:30:int[] $SWITCH_TABLE$cn$com$codesec$scan$meta$Language() -> b
cn.com.codesec.scan.analyzer.typeinference.QuasiTypeTable$1 -> cn.com.codesec.GG:
    1:233:void <init>() -> <init>
    236:240:int compare(org.apache.commons.lang3.tuple.Pair,org.apache.commons.lang3.tuple.Pair) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.typeinference.TypeInference -> cn.com.codesec.GH:
    java.util.Set typeInferenceLanguages -> b
    boolean initialized -> c
    boolean debug -> d
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$scan$meta$Language -> e
    29:277:void <clinit>() -> <clinit>
    29:29:void <init>() -> <init>
    36:66:void initialize(java.util.Collection) -> a
    165:207:boolean walkUses(cn.com.codesec.scan.analyzer.util.NstSpliceSsi,cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.model.AccessPath,java.util.Set,int) -> a
    211:227:void checkForAttribute(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath,java.util.Set) -> a
    230:233:cn.com.codesec.scan.ir.nodes.IRLocation getOutermostNSTLocation(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    237:251:boolean isGenericType(cn.com.codesec.scan.metadata.Type) -> a
    29:29:int[] $SWITCH_TABLE$cn$com$codesec$scan$meta$Language() -> a
cn.com.codesec.scan.analyzer.util.AliasableLoc -> cn.com.codesec.GI:
    boolean isAlias() -> a
    cn.com.codesec.scan.analyzer.util.Location getLoc() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.ArrayIterator -> cn.com.codesec.GJ:
    java.lang.Object[] data -> a
    int next -> b
    15:18:void <init>(java.lang.Object[]) -> <init>
    22:22:boolean hasNext() -> hasNext
    28:31:java.lang.Object next() -> next
    37:37:void remove() -> remove
cn.com.codesec.scan.analyzer.util.BAMessageManager -> cn.com.codesec.GK:
    int count -> a
    boolean ENABLE_LOG -> b
    boolean ENABLE_GATHER_TRACE_LOG -> c
    int indent -> d
    int threshold -> e
    int STEP -> f
    117:124:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    19:31:java.lang.String prettyInt2String(int) -> a
    35:41:java.lang.String prettySmallInt2String(int) -> b
    45:46:void push() -> a
    49:50:void pop() -> b
    53:57:java.lang.String indent() -> d
    61:63:java.lang.String getTag() -> c
    67:68:void forceLog(java.lang.String) -> a
    71:74:void log(java.lang.String) -> b
    77:80:void gatherTraceLog(int,java.lang.String) -> a
    83:86:void gatherTraceLog(java.lang.Object,java.lang.String) -> a
    89:90:void forceWarnInternal(java.lang.String,java.lang.Throwable) -> a
    93:96:void warnInternal(java.lang.String,java.lang.Throwable) -> b
    99:100:void forceWarnInternal(java.lang.String) -> c
    103:106:void warnInternal(java.lang.String) -> d
    109:114:void newline(int) -> c
cn.com.codesec.scan.analyzer.util.BigArrayInitFinder -> cn.com.codesec.GL:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey KEY -> a
    long MAX_ASSIGNS -> b
    44:47:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    26:33:void run(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    36:36:boolean shouldSkip(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    40:40:boolean canRun(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    23:23:long access$0() -> a
    22:22:cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey access$1() -> b
cn.com.codesec.scan.analyzer.util.BigArrayInitFinder$Finder -> cn.com.codesec.GM:
    java.lang.String currentArray -> b
    long seen -> c
    boolean $assertionsDisabled -> a
    49:49:void <clinit>() -> <clinit>
    54:57:void <init>() -> <init>
    60:65:void reset() -> a
    69:72:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    77:82:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    86:111:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    115:115:boolean isArrayConstructor(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    54:54:void <init>(cn.com.codesec.scan.analyzer.util.BigArrayInitFinder$Finder) -> <init>
cn.com.codesec.scan.analyzer.util.CfgRenderer -> cn.com.codesec.GN:
    41:41:void <init>() -> <init>
    44:44:java.lang.String dotEscape(java.lang.String) -> a
    48:72:void renderDot(java.io.PrintStream,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer) -> a
    75:91:java.util.List collectBlocks(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    95:117:java.lang.String renderBlockContent(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer) -> a
cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer -> cn.com.codesec.GO:
    cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer INSTANCE -> a
    int MAX_LINE_LENGTH -> b
    286:287:void <clinit>() -> <clinit>
    120:120:void <init>() -> <init>
    126:130:java.lang.String renderContent(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    134:134:java.lang.String renderBeforeCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    138:150:java.lang.String renderCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
    154:154:java.lang.String renderAfterCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    159:207:java.util.Iterator renderStatement(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    211:213:java.lang.String renderVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    217:255:java.lang.String renderExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    259:259:java.lang.String renderVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    263:266:java.lang.String renderFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    270:272:java.lang.String renderIndexedAccess(cn.com.codesec.scan.ir.nodes.IRIndexedAccess) -> a
    276:278:java.lang.String renderAssociativeAccess(cn.com.codesec.scan.ir.nodes.IRMapAccess) -> a
    282:282:java.lang.String renderDereference(cn.com.codesec.scan.ir.nodes.IRDereference) -> a
cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer$1 -> cn.com.codesec.GP:
    cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer this$1 -> a
    1:220:void <init>(cn.com.codesec.scan.analyzer.util.CfgRenderer$BlockRenderer,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    223:224:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    229:230:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    235:236:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    241:242:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    247:248:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.ControlFlowGraphUtils -> cn.com.codesec.GQ:
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph cfg -> b
    boolean $assertionsDisabled -> a
    15:15:void <clinit>() -> <clinit>
    19:21:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    24:52:cn.com.codesec.util.fset.FHashMap topologicalSort() -> a
    56:70:void dfWalk(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.HashSet,java.util.HashSet,java.util.HashSet) -> a
cn.com.codesec.scan.analyzer.util.DefLocation -> cn.com.codesec.GR:
    boolean isAlias() -> c
    cn.com.codesec.scan.analyzer.util.Location getLoc() -> d
    cn.com.codesec.scan.model.AccessPath getPath() -> e
    cn.com.codesec.scan.analyzer.util.Location getSpellingLoc() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.InvertedTopologicalQueue -> cn.com.codesec.GS:
    14:15:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
cn.com.codesec.scan.analyzer.util.LivenessAnalyzer -> cn.com.codesec.GT:
    cn.com.codesec.util.fset.FSet EMPTY_LOC_SET -> b
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> c
    java.util.Map exitSets -> d
    java.util.Map entrySets -> e
    java.util.Map killSets -> f
    boolean $assertionsDisabled -> a
    28:152:void <clinit>() -> <clinit>
    36:42:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    45:46:cn.com.codesec.util.fset.FSet getBasesLiveAtExit(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    50:60:void run() -> a
    63:82:void iterate() -> b
    85:98:boolean processBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    102:106:cn.com.codesec.util.fset.FSet joinEntrySets(java.lang.Iterable) -> a
    110:125:void initialVisits() -> c
    128:136:cn.com.codesec.util.fset.FSet getGlobals(java.util.Collection) -> a
    140:147:void visit(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> c
cn.com.codesec.scan.analyzer.util.LivenessAnalyzer$UseKillFinder -> cn.com.codesec.GU:
    cn.com.codesec.util.fset.FSet used -> b
    cn.com.codesec.util.fset.FSet killed -> c
    cn.com.codesec.scan.analyzer.util.LivenessAnalyzer this$0 -> a
    159:162:void <init>(cn.com.codesec.scan.analyzer.util.LivenessAnalyzer) -> <init>
    165:165:cn.com.codesec.util.fset.FSet getUsed() -> a
    169:169:cn.com.codesec.util.fset.FSet getKilled() -> b
    174:188:void assign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    192:201:void read(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    205:205:void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    208:218:void doNestedExprs(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
cn.com.codesec.scan.analyzer.util.Location -> cn.com.codesec.GV:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc base -> a
    cn.com.codesec.scan.model.AccessPath accessPath -> b
    18:21:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.model.AccessPath) -> <init>
    25:25:boolean isAlias() -> c
    30:30:cn.com.codesec.scan.analyzer.util.Location getLoc() -> d
    35:35:cn.com.codesec.scan.model.AccessPath getPath() -> e
    40:40:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc() -> a
    44:48:cn.com.codesec.scan.model.LocationInfo getLocationInfo() -> b
    53:60:boolean equals(java.lang.Object) -> equals
    65:67:int hashCode() -> hashCode
    72:72:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.NSTModifierUtil -> cn.com.codesec.GW:
    14:14:void <init>() -> <init>
    17:93:java.util.List getStrings(cn.com.codesec.parse.ir.Modifiable,cn.com.codesec.scan.meta.Language) -> a
cn.com.codesec.scan.analyzer.util.NSTVarDeclMap -> cn.com.codesec.GX:
    19:20:void <init>() -> <init>
    23:29:void dump() -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi -> cn.com.codesec.GY:
    java.util.Map assigns -> a
    java.util.Map reads -> b
    java.util.Map defaults -> c
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VAR_ASSIGNER_ASSIGN -> f
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VAR_ASSIGNER_ASSIGN_READ -> g
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner VAR_ASSIGNER_READ -> h
    129:162:void <clinit>() -> <clinit>
    76:84:void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> <init>
    87:90:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Read getRead(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    94:117:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc getReadSsiLoc(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    121:122:void writeState(java.io.ObjectOutputStream) -> a
    125:126:void readState(java.io.ObjectInputStream) -> a
    72:72:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner access$0() -> a
    71:71:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner access$1() -> b
    73:73:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner access$2() -> c
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$1 -> cn.com.codesec.GZ:
    1:129:void <init>() -> <init>
    132:133:void setVar(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    137:137:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$2 -> cn.com.codesec.Ha:
    1:140:void <init>() -> <init>
    143:144:void setVar(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Read,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    148:148:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$3 -> cn.com.codesec.Hb:
    1:151:void <init>() -> <init>
    154:155:void setVar(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Read,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    159:159:java.lang.String getName() -> a
    1:1:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractFieldLoc -> cn.com.codesec.Hc:
    cn.com.codesec.scan.metadata.FieldMeta field -> a
    boolean $assertionsDisabled -> b
    449:449:void <clinit>() -> <clinit>
    453:456:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    460:460:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
    465:465:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    470:474:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    479:479:cn.com.codesec.scan.metadata.Type getType() -> d
    484:484:int hashCode() -> hashCode
    489:489:boolean equals(java.lang.Object) -> equals
    493:493:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractFieldLoc) -> a
    498:498:java.lang.String getFriendlyName() -> e
    503:503:java.lang.String getUniqueName() -> f
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractNstSsiBuilder -> cn.com.codesec.Hd:
    java.util.Map defaults -> i
    java.util.List funcParams -> a
    java.lang.String name -> b
    1388:1393:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> <init>
    1397:1401:void processBlock(java.lang.Object,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(java.lang.Object) -> a
    1407:1415:void processEntry(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$DefTracker) -> a
    1419:1419:void processExit(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$UseTracker,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1423:1423:cn.com.codesec.scan.analyzer.util.SsiGen$Environment createEnvironment() -> c
    1435:1435:java.lang.String getName() -> d
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractNstSsiBuilder$1 -> cn.com.codesec.He:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractNstSsiBuilder this$1 -> a
    1:1423:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractNstSsiBuilder) -> <init>
    1426:1428:cn.com.codesec.scan.analyzer.util.Ssi$DefC apply(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    1:1:java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign -> cn.com.codesec.Hf:
    cn.com.codesec.scan.analyzer.util.Ssi$Var target -> d
    cn.com.codesec.scan.ir.nodes.IRLocation lhs -> a
    java.lang.Object value -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var previous -> e
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc baseLoc -> c
    203:207:void <init>(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> <init>
    211:211:java.lang.String toString() -> toString
    215:215:cn.com.codesec.scan.analyzer.util.Ssi$Var getTarget() -> a
    219:220:void setTarget(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    223:223:cn.com.codesec.scan.analyzer.util.Ssi$Var getPrevious() -> b
    227:228:void setPrevious(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] getPath() -> c
    197:197:void access$0(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    200:200:void access$1(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> b
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Complete -> cn.com.codesec.Hg:
    235:236:void <init>(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> <init>
    240:240:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] getPath() -> c
    245:245:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Partial -> cn.com.codesec.Hh:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] path -> d
    254:256:void <init>(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> <init>
    260:260:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] getPath() -> c
    265:265:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign$Read -> cn.com.codesec.Hi:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign def -> a
    273:275:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Assign) -> <init>
    279:279:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc -> cn.com.codesec.Hj:
    378:378:void <init>() -> <init>
    cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
    cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BlockRenderer -> cn.com.codesec.Hk:
    java.util.Map baseReads -> c
    java.util.Map baseAssigns -> d
    1875:1878:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi) -> <init>
    1881:1894:void mapToBase(java.util.Map,java.util.Map) -> a
    1898:1899:java.lang.String renderDereference(cn.com.codesec.scan.ir.nodes.IRDereference) -> a
    1904:1904:java.lang.String renderVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    1909:1913:java.lang.String renderFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    1917:1948:java.lang.String renderSsiLocation(java.lang.String,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BufferBlockRenderer -> cn.com.codesec.Hl:
    1955:1956:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi) -> <init>
    1960:1960:java.lang.String renderVarAccess(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    1965:1969:java.lang.String renderFieldAccess(cn.com.codesec.scan.ir.nodes.IRFieldAccess) -> a
    1974:2002:java.lang.String renderSsiLocation(java.lang.String,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder -> cn.com.codesec.Hm:
    java.util.Map reads -> a
    java.util.Map assigns -> b
    1445:1448:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> <init>
    1452:1452:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> a
    1457:1457:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> c
    1462:1462:cn.com.codesec.scan.analyzer.util.NstSpliceSsi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    1:1:java.lang.Object mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> b
    1:1:cn.com.codesec.scan.analyzer.util.NstUseDefFinder getUseDefFinder(java.lang.Object) -> a
    1:1:cn.com.codesec.scan.analyzer.util.Ssi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FieldLoc -> cn.com.codesec.Hn:
    526:527:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    1:1:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    1:1:int hashCode() -> hashCode
    1:1:cn.com.codesec.scan.metadata.Type getType() -> d
    1:1:java.lang.String getUniqueName() -> f
    1:1:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    1:1:java.lang.String getFriendlyName() -> e
    1:1:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractFieldLoc) -> a
    1:1:boolean equals(java.lang.Object) -> equals
    1:1:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ForcedGlobalFieldLoc -> cn.com.codesec.Ho:
    boolean $assertionsDisabled -> c
    507:507:void <clinit>() -> <clinit>
    510:512:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    1:1:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    1:1:int hashCode() -> hashCode
    1:1:cn.com.codesec.scan.metadata.Type getType() -> d
    1:1:java.lang.String getUniqueName() -> f
    1:1:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    1:1:java.lang.String getFriendlyName() -> e
    1:1:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractFieldLoc) -> a
    1:1:boolean equals(java.lang.Object) -> equals
    1:1:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc -> cn.com.codesec.Hp:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc base -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] path -> b
    java.util.Set UnresolvedWarnList -> d
    boolean $assertionsDisabled -> c
    1540:1724:void <clinit>() -> <clinit>
    1546:1549:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> <init>
    1553:1553:int hashCode() -> hashCode
    1558:1558:boolean equals(java.lang.Object) -> equals
    1562:1562:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc) -> a
    1566:1566:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1570:1570:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider) -> a
    1574:1574:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.ir.nodes.IRLocation,java.util.Collection) -> a
    1578:1578:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> a
    1582:1582:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    1586:1589:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    1594:1603:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc,java.util.ArrayList) -> a
    1607:1639:cn.com.codesec.scan.ir.nodes.IRLocation getBase(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    1643:1719:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc mk(cn.com.codesec.scan.ir.nodes.IRLocation,java.util.Collection,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider) -> a
    1544:1544:java.util.Set access$0() -> a
    1544:1544:void access$1(java.util.Set) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider -> cn.com.codesec.Hq:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider NONE -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$GlobalFieldDecider ANY -> b
    1534:1535:void <clinit>() -> <clinit>
    boolean shouldForceGlobal(cn.com.codesec.scan.metadata.FieldMeta) -> shouldForceGlobal
    1534:1534:boolean lambda$1(cn.com.codesec.scan.metadata.FieldMeta) -> a
    1535:1535:boolean lambda$0(cn.com.codesec.scan.metadata.FieldMeta) -> b
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Incoming -> cn.com.codesec.Hr:
    164:164:void <init>() -> <init>
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef -> cn.com.codesec.Hs:
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Var var -> b
    182:184:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    187:187:cn.com.codesec.scan.analyzer.util.Ssi$Var getVar() -> a
    191:192:void setVar(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    180:180:void access$0(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$ParamDef,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Read -> cn.com.codesec.Ht:
    java.util.List paths -> b
    java.util.List bases -> c
    cn.com.codesec.scan.ir.nodes.IRLocation access -> a
    290:295:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    298:303:boolean containsSelectors(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    307:308:boolean containsShadowField(cn.com.codesec.scan.analyzer.constraints.ShadowField) -> a
    312:317:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] getNonFakedPath() -> a
    322:337:java.lang.String toString() -> toString
    341:342:void append(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> b
    345:355:void renderAll(java.util.List) -> a
    358:358:cn.com.codesec.scan.analyzer.util.Ssi$Var getBase() -> b
    362:363:void setBase(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    366:366:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] getPath() -> c
    370:370:java.util.List getPaths() -> d
    374:374:int numberOfBases() -> e
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector -> cn.com.codesec.Hu:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField OFFSET -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField SIZE -> b
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField ISNULL -> c
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField STRLEN -> d
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField VALUE -> e
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Dereference DEREFERENCE -> f
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Reference REFERENCE -> g
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] IDENTITY -> h
    boolean $assertionsDisabled -> i
    588:930:void <clinit>() -> <clinit>
    588:588:void <init>() -> <init>
    java.lang.String getUniqueName() -> a
    java.lang.String getFriendlyName() -> b
    cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    606:606:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    610:615:java.lang.String getUniqueName(java.lang.String,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    619:624:java.lang.String getFriendlyName(java.lang.String,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> b
    628:647:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] mkSelector(cn.com.codesec.scan.analyzer.constraints.ShadowField) -> a
    651:664:cn.com.codesec.scan.analyzer.constraints.ShadowField mkShadowField(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField) -> a
    668:676:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] concat(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    680:682:boolean lastFieldIsFaked(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    686:688:boolean endWith(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    692:699:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] removeLastN(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],int) -> a
    703:712:boolean eq(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> b
    716:716:boolean isIdentitySelector(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> b
    720:731:boolean endWith(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[],cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> c
    735:743:cn.com.codesec.scan.metadata.Type getNonShadowFieldType(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    748:755:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> b
    764:785:cn.com.codesec.scan.metadata.FieldMeta getFieldMeta(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> c
    789:802:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] derefMultiIndices(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> c
    806:812:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] cut(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> d
    816:873:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] cut0(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> e
    878:878:java.lang.String toString() -> toString
    882:918:boolean isTypeEquivalent(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> b
    881:881:boolean access$0(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> a
    818:818:int lambda$0(java.lang.Integer,java.lang.Integer) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$ArrayIndex -> cn.com.codesec.Hv:
    cn.com.codesec.scan.ir.nodes.IRExpression index -> j
    1255:1257:void <init>(cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    1261:1261:int hashCode() -> hashCode
    1266:1266:boolean equals(java.lang.Object) -> equals
    1270:1270:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$ArrayIndex) -> a
    1275:1278:java.lang.String getUniqueName() -> a
    1283:1283:java.lang.String getFriendlyName() -> b
    1288:1288:java.lang.String toString() -> toString
    1293:1302:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1307:1310:int compareTo(java.lang.Object) -> compareTo
    1315:1315:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1319:1319:boolean isToolGenerated() -> c
    1:1:int reachableCompareTo(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$AssociativeIndex -> cn.com.codesec.Hw:
    cn.com.codesec.scan.analyzer.constants.ConstantValue index -> j
    1327:1329:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> <init>
    1333:1333:int hashCode() -> hashCode
    1338:1338:boolean equals(java.lang.Object) -> equals
    1342:1342:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$AssociativeIndex) -> a
    1347:1347:java.lang.String getUniqueName() -> a
    1352:1352:java.lang.String getFriendlyName() -> b
    1357:1357:java.lang.String toString() -> toString
    1362:1367:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1372:1372:int compareTo(java.lang.Object) -> compareTo
    1377:1377:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1:1:int reachableCompareTo(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Dereference -> cn.com.codesec.Hx:
    1201:1202:void <init>() -> <init>
    1206:1209:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1214:1217:int compareTo(java.lang.Object) -> compareTo
    1222:1222:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1:1:int reachableCompareTo(java.lang.Object) -> a
    1200:1200:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Dereference) -> <init>
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField -> cn.com.codesec.Hy:
    java.lang.String name -> j
    1100:1102:void <init>(java.lang.String) -> <init>
    1106:1106:int hashCode() -> hashCode
    1111:1111:boolean equals(java.lang.Object) -> equals
    1115:1115:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField) -> b
    1120:1120:java.lang.String getUniqueName() -> a
    1125:1125:java.lang.String getFriendlyName() -> b
    1130:1130:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1135:1135:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    1139:1139:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$FakeField) -> c
    1144:1148:int compareTo(java.lang.Object) -> compareTo
    1153:1153:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1157:1170:cn.com.codesec.scan.analyzer.constraints.ShadowField toShadowField(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> c
    1:1:int reachableCompareTo(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Field -> cn.com.codesec.Hz:
    cn.com.codesec.scan.metadata.FieldMeta field -> j
    boolean $assertionsDisabled -> k
    988:988:void <clinit>() -> <clinit>
    992:995:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    999:999:int hashCode() -> hashCode
    1004:1005:boolean equals(java.lang.Object) -> equals
    1009:1009:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Field) -> a
    1014:1014:java.lang.String getUniqueName() -> a
    1019:1019:java.lang.String getFriendlyName() -> b
    1024:1066:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1071:1071:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    1075:1075:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Field) -> b
    1080:1083:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1088:1092:int compareTo(java.lang.Object) -> compareTo
    1:1:int reachableCompareTo(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Reference -> cn.com.codesec.HA:
    1229:1230:void <init>() -> <init>
    1234:1234:cn.com.codesec.scan.metadata.Type getType(cn.com.codesec.scan.metadata.Type) -> a
    1239:1242:int compareTo(java.lang.Object) -> compareTo
    1247:1247:int reachableCompareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> b
    1:1:int reachableCompareTo(java.lang.Object) -> a
    1228:1228:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$Reference) -> <init>
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$TypedSelector -> cn.com.codesec.HB:
    cn.com.codesec.scan.metadata.Type type -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector field -> b
    937:940:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> <init>
    944:976:int compareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$TypedSelector) -> a
    980:984:boolean isPointerHolder(cn.com.codesec.scan.metadata.Type) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$_Singleton -> cn.com.codesec.HC:
    java.lang.String name -> j
    1178:1180:void <init>(java.lang.String) -> <init>
    1184:1184:java.lang.String getUniqueName() -> a
    1189:1189:java.lang.String getFriendlyName() -> b
    1194:1194:cn.com.codesec.util.TriState roughEquals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector) -> a
    1178:1178:void <init>(java.lang.String,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector$_Singleton) -> <init>
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SingletonLoc -> cn.com.codesec.HD:
    cn.com.codesec.scan.metadata.TypeMeta typeMeta -> a
    boolean $assertionsDisabled -> b
    530:530:void <clinit>() -> <clinit>
    534:537:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    541:541:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
    546:546:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    551:555:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    560:560:cn.com.codesec.scan.metadata.Type getType() -> d
    565:565:int hashCode() -> hashCode
    570:570:boolean equals(java.lang.Object) -> equals
    574:574:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SingletonLoc) -> a
    579:579:java.lang.String getFriendlyName() -> e
    584:584:java.lang.String getUniqueName() -> f
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc -> cn.com.codesec.HE:
    cn.com.codesec.scan.analyzer.util.Ssi$Var base -> a
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[] path -> b
    1732:1744:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> <init>
    1747:1748:cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc append(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    1752:1752:java.lang.String getUniqueName() -> a
    1756:1756:java.lang.String getFriendlyName() -> b
    1761:1761:java.lang.String toString() -> toString
    1766:1766:int hashCode() -> hashCode
    1771:1771:boolean equals(java.lang.Object) -> equals
    1775:1775:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> a
    1779:1779:boolean sameLoc(cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Selector[]) -> a
    1784:1784:int compareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> b
    1788:1818:cn.com.codesec.scan.metadata.Type getType() -> c
    1822:1835:org.apache.commons.lang3.tuple.Triple getTypeMatrix() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLocShadow -> cn.com.codesec.HF:
    cn.com.codesec.scan.analyzer.constraints.ShadowField field -> c
    1844:1846:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Var,cn.com.codesec.scan.analyzer.constraints.ShadowField) -> <init>
    1850:1850:java.lang.String toString() -> toString
    1855:1855:int hashCode() -> hashCode
    1860:1860:boolean equals(java.lang.Object) -> equals
    1865:1865:int compareTo(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$SsiLoc) -> b
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$StaticFieldLoc -> cn.com.codesec.HG:
    boolean $assertionsDisabled -> c
    515:515:void <clinit>() -> <clinit>
    518:520:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    1:1:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    1:1:int hashCode() -> hashCode
    1:1:cn.com.codesec.scan.metadata.Type getType() -> d
    1:1:java.lang.String getUniqueName() -> f
    1:1:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    1:1:java.lang.String getFriendlyName() -> e
    1:1:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$AbstractFieldLoc) -> a
    1:1:boolean equals(java.lang.Object) -> equals
    1:1:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Undefined -> cn.com.codesec.HH:
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc loc -> a
    172:174:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$BaseLoc) -> <init>
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$UseDefFinder -> cn.com.codesec.HI:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker tracker -> b
    java.util.ArrayList nestedExpressions -> c
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder builder -> d
    1472:1476:void <init>(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$Builder,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> <init>
    1480:1485:void assign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    1488:1500:void assignL(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    1504:1509:void read(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1512:1516:void readL(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$FullLoc,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    1520:1525:void handleNestedExpressions() -> a
    1529:1529:void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1523:1523:void lambda$0(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
cn.com.codesec.scan.analyzer.util.NstSpliceSsi$VarLoc -> cn.com.codesec.HJ:
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> a
    cn.com.codesec.scan.ir.nodes.IRExpression expr -> b
    boolean $assertionsDisabled -> c
    387:387:void <clinit>() -> <clinit>
    392:396:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    400:400:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> a
    405:405:cn.com.codesec.scan.meta.Symbol getSymbol() -> b
    410:413:cn.com.codesec.scan.model.ParameterLocation toParameterLocation() -> c
    418:421:cn.com.codesec.scan.metadata.Type getType() -> d
    426:426:int hashCode() -> hashCode
    431:431:boolean equals(java.lang.Object) -> equals
    435:435:boolean equals(cn.com.codesec.scan.analyzer.util.NstSpliceSsi$VarLoc) -> a
    440:440:java.lang.String getFriendlyName() -> e
    445:445:java.lang.String getUniqueName() -> f
cn.com.codesec.scan.analyzer.util.NstUseDefFinder -> cn.com.codesec.HK:
    cn.com.codesec.scan.analyzer.util.NstUseDefFinder$UseFinder useFinder -> e
    boolean $assertionsDisabled -> f
    23:23:void <clinit>() -> <clinit>
    void assign(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    void read(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    void call(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    34:35:void modify(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    37:39:void <init>() -> <init>
    42:54:void run(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    57:58:void runRead(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    61:61:boolean skipAssignment(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
cn.com.codesec.scan.analyzer.util.NstUseDefFinder$UseFinder -> cn.com.codesec.HL:
    cn.com.codesec.scan.analyzer.util.NstUseDefFinder callback -> a
    68:70:void <init>(cn.com.codesec.scan.analyzer.util.NstUseDefFinder) -> <init>
    74:75:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Void) -> a
    80:81:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Void) -> a
    86:87:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    92:94:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    99:100:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Void) -> a
    105:106:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Void) -> a
    111:112:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Void) -> a
    117:118:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Void) -> a
    123:124:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Void) -> a
    129:130:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SizeUnit -> cn.com.codesec.HM:
    cn.com.codesec.scan.analyzer.util.SizeUnit UNKNOWN -> a
    cn.com.codesec.scan.analyzer.util.SizeUnit DEFAULT -> b
    cn.com.codesec.scan.analyzer.util.SizeUnit CHAR -> c
    cn.com.codesec.scan.analyzer.util.SizeUnit WCHAR -> d
    cn.com.codesec.scan.analyzer.util.SizeUnit TCHAR -> e
    cn.com.codesec.scan.analyzer.util.SizeUnit MBCHAR -> f
    cn.com.codesec.scan.analyzer.util.SizeUnit SHORT -> g
    cn.com.codesec.scan.analyzer.util.SizeUnit INT -> h
    cn.com.codesec.scan.analyzer.util.SizeUnit LONG_LONG -> i
    cn.com.codesec.scan.analyzer.util.SizeUnit FLOAT -> j
    cn.com.codesec.scan.analyzer.util.SizeUnit DOUBLE -> k
    cn.com.codesec.scan.analyzer.util.SizeUnit LONG_DOUBLE -> l
    cn.com.codesec.scan.analyzer.util.SizeUnit PTR_T -> m
    boolean unknown -> n
    int symbolicType -> o
    int bytes -> p
    cn.com.codesec.scan.analyzer.preproc.SSAVar unitVar -> q
    190:203:void <clinit>() -> <clinit>
    91:104:void <init>(cn.com.codesec.scan.metadata.Type$Primitive) -> <init>
    107:108:void <init>(int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    110:131:void <init>(boolean,int,int,cn.com.codesec.scan.analyzer.preproc.SSAVar) -> <init>
    135:138:java.lang.String toString() -> toString
    142:148:cn.com.codesec.scan.analyzer.util.SizeUnit multiply(int) -> a
    153:177:boolean equals(java.lang.Object) -> equals
    182:186:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.util.SizeUtil -> cn.com.codesec.HN:
    cn.com.codesec.scan.metadata.Type[] INTEGER_TYPES -> b
    cn.com.codesec.scan.metadata.Type[] FLOAT_TYPES -> c
    boolean $assertionsDisabled -> a
    11:80:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    17:32:int getElementSize(cn.com.codesec.scan.metadata.Type) -> a
    36:45:cn.com.codesec.parse.ir.PrimitiveType getIntegerType(cn.com.codesec.scan.metadata.Type) -> b
    49:58:cn.com.codesec.parse.ir.PrimitiveType getFloatType(cn.com.codesec.scan.metadata.Type) -> c
    62:62:boolean isIntegerType(cn.com.codesec.scan.metadata.Type) -> d
    66:66:boolean isFloatType(cn.com.codesec.scan.metadata.Type) -> e
    70:70:cn.com.codesec.scan.metadata.Type[] getIntegerTypes() -> a
    74:74:cn.com.codesec.scan.metadata.Type[] getFloatTypes() -> b
cn.com.codesec.scan.analyzer.util.Ssi -> cn.com.codesec.HO:
    java.util.Map joinMap -> d
    java.util.Map forkMap -> e
    23:26:void <init>(java.util.Map,java.util.Map) -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$Def -> cn.com.codesec.HP:
    113:113:void <init>() -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$DefC -> cn.com.codesec.HQ:
    117:117:void <init>() -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$Fork -> cn.com.codesec.HR:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Var input -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var trueOutput -> c
    cn.com.codesec.scan.analyzer.util.Ssi$Var falseOutput -> d
    204:206:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    209:209:cn.com.codesec.scan.analyzer.util.Ssi$Var getInput() -> a
    213:213:cn.com.codesec.scan.analyzer.util.Ssi$Var getTrueOutput() -> b
    217:217:cn.com.codesec.scan.analyzer.util.Ssi$Var getFalseOutput() -> c
    221:221:cn.com.codesec.scan.analyzer.util.Ssi$Var getOutput(boolean) -> a
cn.com.codesec.scan.analyzer.util.Ssi$ForkDef -> cn.com.codesec.HS:
    cn.com.codesec.scan.analyzer.util.Ssi$Fork fork -> a
    boolean branchResult -> b
    140:143:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Fork,boolean) -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$ForkUse -> cn.com.codesec.HT:
    cn.com.codesec.scan.analyzer.util.Ssi$Fork fork -> a
    97:99:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Fork) -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$Join -> cn.com.codesec.HU:
    cn.com.codesec.scan.analyzer.preproc.BasicBlock block -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Var output -> b
    java.util.Map inputs -> d
    boolean $assertionsDisabled -> c
    146:146:void <clinit>() -> <clinit>
    152:155:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> <init>
    158:168:boolean addInput(cn.com.codesec.scan.analyzer.util.Ssi$Var,int) -> a
    172:177:java.util.List getIncomingBlocks(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    181:181:java.util.Collection getInputs() -> a
    185:185:int getNumInputs() -> b
    189:189:java.util.Collection getInputVars() -> c
    193:193:cn.com.codesec.scan.analyzer.util.Ssi$Var getOutput() -> d
cn.com.codesec.scan.analyzer.util.Ssi$JoinDef -> cn.com.codesec.HV:
    cn.com.codesec.scan.analyzer.util.Ssi$Join join -> a
    125:127:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Join) -> <init>
    131:131:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.Ssi$JoinUse -> cn.com.codesec.HW:
    cn.com.codesec.scan.analyzer.util.Ssi$Join join -> a
    int paramIndex -> b
    107:110:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$Join,int) -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$LocB -> cn.com.codesec.HX:
    28:28:void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getFriendlyName() -> e
    java.lang.String getUniqueName() -> f
    42:42:java.lang.String toString() -> toString
    cn.com.codesec.scan.metadata.Type getType() -> d
cn.com.codesec.scan.analyzer.util.Ssi$Use -> cn.com.codesec.HY:
    85:85:void <init>() -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$UseC -> cn.com.codesec.HZ:
    89:89:void <init>() -> <init>
cn.com.codesec.scan.analyzer.util.Ssi$Var -> cn.com.codesec.Ia:
    cn.com.codesec.scan.analyzer.util.Ssi$LocB loc -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Def def -> b
    int index -> c
    java.util.List uses -> e
    java.lang.String INDEX_SEP -> d
    56:61:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$Def,int) -> <init>
    64:65:void addUse(cn.com.codesec.scan.analyzer.util.Ssi$Use) -> a
    68:68:java.util.List getUses() -> a
    72:72:java.lang.String getFriendlyName() -> b
    76:76:java.lang.String getUniqueName() -> c
    81:81:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.util.SsiBlockRenderer -> cn.com.codesec.Ib:
    java.util.Map joinMap -> c
    java.util.Map forkMap -> d
    16:19:void <init>(cn.com.codesec.scan.analyzer.util.Ssi) -> <init>
    23:29:java.lang.String renderBeforeCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    33:44:java.lang.String renderJoin(cn.com.codesec.scan.analyzer.util.Ssi$Join) -> a
    49:58:java.lang.String renderAfterCode(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> d
    62:80:java.lang.String renderFork(cn.com.codesec.scan.analyzer.util.Ssi$Fork) -> a
cn.com.codesec.scan.analyzer.util.SsiGen -> cn.com.codesec.Ic:
    boolean $assertionsDisabled -> a
    35:35:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    38:90:cn.com.codesec.scan.analyzer.util.Ssi run(cn.com.codesec.scan.analyzer.util.SsiGen$Builder,boolean,cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    94:100:void dumpBlockMap(cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    103:103:java.util.Iterator getEntryBlocks(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> b
    107:107:java.util.List getEntryBlocks0(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    111:117:java.util.Iterator getExitBlocks(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> c
    121:135:void findSites(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,cn.com.codesec.scan.analyzer.util.SsiGen$Builder,cn.com.codesec.scan.analyzer.preproc.BlockMap,java.util.Map,java.util.Map,java.util.Set) -> a
    138:143:boolean multiMapPut(java.util.Map,java.lang.Object,java.lang.Object) -> b
    147:188:boolean placeFunctions(cn.com.codesec.scan.util.graph.Graph,java.util.Map,java.util.Map,java.util.Map,cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.util.Func) -> a
    192:203:void renameVariables(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,cn.com.codesec.scan.analyzer.util.SsiGen$Builder,cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    206:295:void renameVariables(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockSet,cn.com.codesec.scan.analyzer.util.SsiGen$Environment,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    298:301:void addToStack(cn.com.codesec.scan.analyzer.preproc.BlockSet,java.util.Stack,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    304:314:void propagateAlongEdge(java.util.Map,cn.com.codesec.scan.analyzer.util.SsiGen$Environment,int) -> a
    317:317:cn.com.codesec.scan.ir.nodes.IRConditional getConditional(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    321:322:void prune(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    325:355:void removeUnused(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
    358:363:boolean hasDirectRealUse(cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    367:379:void findReachable(java.util.Set,java.util.Set,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    382:385:void findReachable(java.util.Set,java.util.Set,java.lang.Iterable) -> a
    388:408:void deleteUnreachableForks(java.util.Set,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> a
    411:435:void deleteUnreachableJoins(java.util.Set,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
    137:137:boolean access$0(java.util.Map,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$1 -> cn.com.codesec.Id:
    1:62:void <init>() -> <init>
    65:65:cn.com.codesec.scan.analyzer.util.Ssi$Join apply(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$2 -> cn.com.codesec.Ie:
    1:70:void <init>() -> <init>
    73:73:cn.com.codesec.scan.analyzer.util.Ssi$Fork apply(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    1:1:java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$3 -> cn.com.codesec.If:
    cn.com.codesec.scan.analyzer.util.SsiGen$Environment val$environment -> a
    1:193:void <init>(cn.com.codesec.scan.analyzer.util.SsiGen$Environment) -> <init>
    196:196:cn.com.codesec.scan.analyzer.util.Ssi$Var addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder -> cn.com.codesec.Ig:
    void processBlock(java.lang.Object,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    java.lang.Object mkTracker(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker) -> b
    void processEntry(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$DefTracker) -> a
    void processExit(cn.com.codesec.scan.analyzer.util.SsiGen$Builder$UseTracker,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    cn.com.codesec.scan.analyzer.util.SsiGen$Environment createEnvironment() -> c
    cn.com.codesec.scan.analyzer.util.Ssi finish(cn.com.codesec.scan.analyzer.preproc.BlockMap,cn.com.codesec.scan.analyzer.preproc.BlockMap) -> b
    java.lang.String getName() -> d
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$DefTracker -> cn.com.codesec.Ih:
    cn.com.codesec.scan.analyzer.util.Ssi$Var addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$Tracker -> cn.com.codesec.Ii:
    void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$UseTracker -> cn.com.codesec.Ij:
    void addUse(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    void dumpAll() -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner -> cn.com.codesec.Ik:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner$DiscardingVarAssigner VAR_ASSIGNER_DISCARDING -> b
    643:643:void <clinit>() -> <clinit>
    void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    java.lang.String getName() -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner$DiscardingVarAssigner -> cn.com.codesec.Il:
    668:668:void <init>() -> <init>
    672:672:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    676:676:java.lang.String getName() -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner$MappingVarAssigner -> cn.com.codesec.Im:
    java.util.Map map -> a
    653:655:void <init>(java.util.Map) -> <init>
    659:660:void setVar(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Var) -> a
    664:664:java.lang.String getName() -> a
cn.com.codesec.scan.analyzer.util.SsiGen$DefaultEnvironment -> cn.com.codesec.In:
    java.util.Map vars -> b
    cn.com.codesec.util.Func incomingDef -> c
    java.util.Deque undoCountStack -> d
    java.util.ArrayList undoActionList -> e
    boolean $assertionsDisabled -> a
    530:530:void <clinit>() -> <clinit>
    537:542:void <init>(cn.com.codesec.util.Func) -> <init>
    546:547:void pushState() -> a
    553:559:void popState() -> b
    563:572:cn.com.codesec.scan.analyzer.util.Ssi$Var def(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$Def) -> a
    577:586:cn.com.codesec.scan.analyzer.util.Ssi$Var use(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> a
    1:1:cn.com.codesec.scan.analyzer.util.Ssi$Var def(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Def) -> a
    1:1:cn.com.codesec.scan.analyzer.util.Ssi$Var use(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$DefaultEnvironment$Entry -> cn.com.codesec.Io:
    int nextIndex -> a
    java.util.Stack varStack -> b
    cn.com.codesec.scan.analyzer.util.Ssi$LocB loc -> c
    596:600:void <init>(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> <init>
    603:603:cn.com.codesec.scan.analyzer.util.Ssi$LocB getLoc() -> a
    607:607:java.util.Stack getVarStack() -> b
    591:591:int access$0(cn.com.codesec.scan.analyzer.util.SsiGen$DefaultEnvironment$Entry) -> a
    591:591:void access$1(cn.com.codesec.scan.analyzer.util.SsiGen$DefaultEnvironment$Entry,int) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$Environment -> cn.com.codesec.Ip:
    void pushState() -> a
    void popState() -> b
    cn.com.codesec.scan.analyzer.util.Ssi$Var def(java.lang.Object,cn.com.codesec.scan.analyzer.util.Ssi$Def) -> a
    cn.com.codesec.scan.analyzer.util.Ssi$Var use(java.lang.Object) -> a
cn.com.codesec.scan.analyzer.util.SsiGen$UseDefList -> cn.com.codesec.Iq:
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner[] EMPTY_VAR_ASSIGNER_ARRAY -> b
    cn.com.codesec.scan.analyzer.preproc.BasicBlock bb -> c
    java.util.Map varUseSites -> d
    java.util.Map varDefSites -> e
    java.util.Set liveIncoming -> f
    java.util.Set definedLocs -> g
    int size -> h
    java.lang.Object[] locs -> i
    java.lang.Object[] entries -> j
    cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner[] assigners -> k
    boolean $assertionsDisabled -> a
    437:527:void <clinit>() -> <clinit>
    462:462:void dumpAll() -> a
    464:474:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Map,java.util.Map,java.util.Set) -> <init>
    478:485:void addUse(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$UseC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    489:491:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB,cn.com.codesec.scan.analyzer.util.Ssi$DefC,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    495:497:void addDef(cn.com.codesec.scan.analyzer.util.Ssi$LocB) -> a
    500:523:void addEntry(cn.com.codesec.scan.analyzer.util.Ssi$LocB,java.lang.Object,cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner) -> a
    445:445:int access$0(cn.com.codesec.scan.analyzer.util.SsiGen$UseDefList) -> a
    447:447:java.lang.Object[] access$1(cn.com.codesec.scan.analyzer.util.SsiGen$UseDefList) -> b
    446:446:java.lang.Object[] access$2(cn.com.codesec.scan.analyzer.util.SsiGen$UseDefList) -> c
    448:448:cn.com.codesec.scan.analyzer.util.SsiGen$Builder$VarAssigner[] access$3(cn.com.codesec.scan.analyzer.util.SsiGen$UseDefList) -> d
cn.com.codesec.scan.analyzer.util.TopologicalQueue -> cn.com.codesec.Ir:
    java.util.Map topologicalOrder -> a
    java.util.Queue worklist -> b
    java.util.Set enqueued -> c
    28:29:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> <init>
    31:35:void <init>(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,boolean) -> <init>
    39:50:int compare(cn.com.codesec.scan.analyzer.preproc.BasicBlock,cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    54:54:boolean isEmpty() -> a
    58:61:void add(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    64:66:cn.com.codesec.scan.analyzer.preproc.BasicBlock remove() -> b
    70:81:java.util.Map topoSort(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph,boolean) -> a
    85:92:void topoSortVisit(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Set,java.util.List) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.vuln.ArrayBoundsIssue -> cn.com.codesec.Is:
    cn.com.codesec.scan.meta.Symbol getBuffer() -> a
    cn.com.codesec.scan.meta.Symbol getComparisonVariable() -> b
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor -> cn.com.codesec.It:
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor UNITY -> a
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor DATAFLOW_TAINT_COMPARISON -> b
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor DATAFLOW_TAINTED_LOOP_INC -> c
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor DATAFLOW_FORCED_GLOBAL_FIELD -> d
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor BEAN_CALL_CONFIDENCE -> e
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor FUNPTR_CALL_RESOLVED -> f
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor FUNPTR_CALL_INFERRED -> g
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor FUNPTR_CALL_UNRESOLVED -> h
    cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor DATAFLOW_MAP_KEY_UNRESOLVED -> i
    61:196:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    float getValue() -> a
    java.lang.String getDescription() -> b
    29:29:java.lang.String toString() -> toString
    34:41:boolean equals(java.lang.Object) -> equals
    46:46:int hashCode() -> hashCode
    51:57:int compareTo(cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$1 -> cn.com.codesec.Iu:
    1:61:void <init>() -> <init>
    64:64:float getValue() -> a
    69:69:java.lang.String getDescription() -> b
    73:73:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$2 -> cn.com.codesec.Iv:
    1:76:void <init>() -> <init>
    79:79:float getValue() -> a
    84:84:java.lang.String getDescription() -> b
    88:88:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$3 -> cn.com.codesec.Iw:
    1:91:void <init>() -> <init>
    94:94:float getValue() -> a
    99:99:java.lang.String getDescription() -> b
    103:103:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$4 -> cn.com.codesec.Ix:
    1:106:void <init>() -> <init>
    109:109:float getValue() -> a
    114:114:java.lang.String getDescription() -> b
    118:118:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$5 -> cn.com.codesec.Iy:
    1:121:void <init>() -> <init>
    124:124:float getValue() -> a
    129:129:java.lang.String getDescription() -> b
    133:133:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$6 -> cn.com.codesec.Iz:
    1:136:void <init>() -> <init>
    139:139:float getValue() -> a
    144:144:java.lang.String getDescription() -> b
    148:148:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$7 -> cn.com.codesec.IA:
    1:151:void <init>() -> <init>
    154:154:float getValue() -> a
    159:159:java.lang.String getDescription() -> b
    163:163:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$8 -> cn.com.codesec.IB:
    1:166:void <init>() -> <init>
    169:169:float getValue() -> a
    174:174:java.lang.String getDescription() -> b
    178:178:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor$9 -> cn.com.codesec.IC:
    1:181:void <init>() -> <init>
    184:184:float getValue() -> a
    189:189:java.lang.String getDescription() -> b
    193:193:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.analyzer.vuln.DuplicateInstanceException -> cn.com.codesec.ID:
    java.lang.String instanceID -> a
    11:13:void <init>(java.lang.String) -> <init>
cn.com.codesec.scan.analyzer.vuln.ExternalEntry -> cn.com.codesec.IE:
    cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> a
cn.com.codesec.scan.analyzer.vuln.GenericVulnerability -> cn.com.codesec.IF:
    cn.com.codesec.java.rules.VulnerabilityRule rule -> b
    cn.com.codesec.parse.ir.SourceLocation sourceInfo -> c
    cn.com.codesec.scan.metadata.FunMeta contextFunc -> d
    cn.com.codesec.scan.ir.util.memory.IRRef nstRef -> a
    java.lang.String label -> e
    float severity -> g
    28:29:void <init>(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    31:45:void <init>(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.parse.ir.SourceLocation,cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String) -> <init>
    50:50:java.lang.String getAnalyzerName() -> h
    55:55:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    60:60:float getSeverity() -> m
    64:64:cn.com.codesec.parse.ir.SourceLocation getSourceInfo() -> a
    69:69:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    74:74:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    116:117:void collectSourceLocations(java.util.Collection) -> a
    121:140:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    145:145:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    149:157:void createInstanceID(cn.com.codesec.scan.ir.nodes.IRNode) -> b
cn.com.codesec.scan.analyzer.vuln.HumanReadableWriter -> cn.com.codesec.IG:
    java.lang.String TEMP_VAR_REPLACEMENT -> b
    boolean $assertionsDisabled -> c
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> a
    32:275:void <clinit>() -> <clinit>
    37:39:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    42:49:java.lang.String getString() -> a
    54:75:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    80:118:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    123:149:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    153:168:cn.com.codesec.scan.ir.nodes.IRLocation getInnerArrayAccess(cn.com.codesec.scan.ir.nodes.IROpExp) -> a
    173:188:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    193:194:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    199:202:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    207:209:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    214:220:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    225:258:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    263:270:void write(java.lang.String) -> a
    32:32:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> b
cn.com.codesec.scan.analyzer.vuln.LateBoundCallConfidence -> cn.com.codesec.IH:
    float MIN_CONFIDENCE -> j
    float MAX_CONFIDENCE -> k
    float value -> l
    13:15:void <init>(int) -> <init>
    19:19:float getValue() -> a
    24:24:java.lang.String getDescription() -> b
cn.com.codesec.scan.analyzer.vuln.PathNodeType -> cn.com.codesec.II:
    cn.com.codesec.scan.analyzer.vuln.PathNodeType SINK_TYPE -> a
    cn.com.codesec.scan.analyzer.vuln.PathNodeType SOURCE_TYPE -> b
    cn.com.codesec.scan.analyzer.vuln.PathNodeType NONE_TYPE -> c
    java.lang.String name -> d
    cn.com.codesec.scan.analyzer.vuln.PathNodeType[] ENUM$VALUES -> e
    10:13:void <clinit>() -> <clinit>
    21:21:java.lang.String getName() -> a
    24:27:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.scan.analyzer.vuln.PathNodeType[] values() -> values
    1:1:cn.com.codesec.scan.analyzer.vuln.PathNodeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.analyzer.vuln.PathReadableWriter -> cn.com.codesec.IJ:
    13:14:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    18:25:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    30:48:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability -> cn.com.codesec.IK:
    cn.com.codesec.java.rules.VulnerabilityRule rule -> a
    cn.com.codesec.scan.analyzer.taint.vector.TaintNode site -> b
    float severity -> c
    float confidenceFactor -> d
    java.lang.String ASSIGNMENT_TEXT -> g
    boolean $assertionsDisabled -> e
    15:212:void <clinit>() -> <clinit>
    26:44:cn.com.codesec.scan.analyzer.vuln.SemanticVulnerability makeSemanticVulnerability(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.taint.vector.TaintNode) -> a
    47:53:void <init>(cn.com.codesec.java.rules.VulnerabilityRule,cn.com.codesec.scan.analyzer.taint.vector.TaintNode,boolean) -> <init>
    58:58:java.lang.String getAnalyzerName() -> h
    63:63:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    68:71:java.lang.String getDetailString() -> o_
    76:76:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    80:80:cn.com.codesec.scan.analyzer.taint.vector.TaintNode getSite() -> b
    85:85:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    90:90:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    95:98:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    138:139:void collectSourceLocations(java.util.Collection) -> a
    142:144:void setConfidenceFactor(float) -> a
    148:148:float getConfidence() -> d
    153:153:float getSeverity() -> m
    158:171:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    175:192:void createInstanceId(boolean) -> a
    201:201:boolean isIncrementalVulnerability() -> e_
cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability -> cn.com.codesec.IL:
    java.lang.String SUBTRACE_TXT -> b
    cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey key -> c
    java.util.List subvulns -> d
    float maxSeverity -> e
    float maxConfidence -> g
    cn.com.codesec.scan.metadata.FunMeta enclosingFunMeta -> h
    boolean hasFeasiblePath -> i
    java.util.List infeasiblePaths -> j
    boolean $assertionsDisabled -> a
    25:262:void <clinit>() -> <clinit>
    31:31:java.util.List getSubvulns() -> l
    41:52:cn.com.codesec.util.fset.FList create(cn.com.codesec.util.fset.FList) -> a
    55:62:void <init>(cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey) -> <init>
    65:83:void addSubvuln(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
    86:91:void complete() -> t
    94:101:void computeIID() -> u
    105:105:cn.com.codesec.parse.ir.SourceLocation getFirstTraceNodeLocation() -> b
    110:110:cn.com.codesec.parse.ir.SourceLocation getLastTraceNodeLocation() -> e
    114:114:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getPrimaryNode() -> n
    119:126:boolean equals(java.lang.Object) -> equals
    131:131:int hashCode() -> hashCode
    136:136:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    141:141:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    146:146:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    151:151:float getSeverity() -> m
    156:156:float getConfidence() -> d
    173:173:java.lang.String getAnalyzerName() -> h
    178:181:java.lang.String getDetailString() -> o_
    203:206:void collectSourceLocations(java.util.Collection) -> a
    210:210:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    215:238:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    242:242:cn.com.codesec.scan.metadata.FunMeta getPrimaryTransitionFunction() -> q
    246:246:cn.com.codesec.scan.metadata.FunMeta getFirstTransitionFunction() -> s
    251:251:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    256:256:cn.com.codesec.scan.meta.Symbol getPrimaryVariable() -> c_
cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey -> cn.com.codesec.IM:
    cn.com.codesec.java.rules.StatefulRule rule -> a
    cn.com.codesec.scan.metadata.FunMeta enclosingFunMeta -> b
    cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node primaryNode -> c
    270:274:void <init>(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> <init>
    278:285:boolean equals(java.lang.Object) -> equals
    290:293:int hashCode() -> hashCode
    268:268:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node access$0(cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey) -> a
    267:267:cn.com.codesec.scan.metadata.FunMeta access$1(cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey) -> b
    266:266:cn.com.codesec.java.rules.StatefulRule access$2(cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$HashKey) -> c
cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$SubcategoryChanger -> cn.com.codesec.IN:
    cn.com.codesec.java.rules.StatefulRule wrapped -> a
    java.lang.String toAppend -> b
    303:306:void <init>(cn.com.codesec.java.rules.StatefulRule,java.lang.String) -> <init>
    310:310:boolean isDataflowRule() -> j
    350:350:float getSeverity() -> d
    391:391:java.lang.String getRuleID() -> f
    406:406:java.lang.String getLabel() -> g
    416:416:cn.com.codesec.java.rules.Conditional getConditional() -> h
    421:421:java.lang.String getDescription() -> a
    426:426:java.lang.String getRuleSetName() -> f_
    431:431:int dynamicGrade(float) -> a
    436:436:java.util.List getCategoryIds() -> b
    441:442:void setRuleSetName(java.lang.String) -> c
    446:447:void setCategoryIds(java.util.List) -> a
cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$SubvulnSorter -> cn.com.codesec.IO:
    465:465:void <init>() -> <init>
    469:478:int compare(cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability,cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
    465:465:void <init>(cn.com.codesec.scan.analyzer.vuln.StatefulMetaVulnerability$SubvulnSorter) -> <init>
cn.com.codesec.scan.analyzer.vuln.StatefulVulnerability -> cn.com.codesec.IP:
    java.lang.String TEMP_NAME -> a
    cn.com.codesec.java.rules.StatefulRule rule -> c
    cn.com.codesec.scan.analyzer.stateful.report.StorableHistory history -> d
    float severity -> e
    int primaryIndex -> g
    boolean $assertionsDisabled -> b
    26:503:void <clinit>() -> <clinit>
    36:36:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory getHistory() -> l
    40:72:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory pick(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> a
    75:80:void <init>(cn.com.codesec.java.rules.StatefulRule,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> <init>
    83:86:void setHistory(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> a
    90:98:int findPrimaryIndex(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory) -> b
    104:104:java.lang.String getAnalyzerName() -> h
    118:118:double getCost() -> n
    122:122:java.util.List getChanges() -> q
    127:127:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    131:131:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getPrimaryNode() -> s
    135:135:int getPrimaryIndex() -> t
    140:140:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    144:144:cn.com.codesec.scan.metadata.FunMeta getOutermostFunction() -> u
    149:154:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    158:158:boolean suppress() -> v
    162:168:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getFirstTransition() -> K
    172:179:cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node getLastTransition() -> L
    184:184:cn.com.codesec.parse.ir.SourceLocation getFirstTraceNodeLocation() -> b
    189:189:cn.com.codesec.parse.ir.SourceLocation getLastTraceNodeLocation() -> e
    193:193:cn.com.codesec.scan.metadata.FunMeta getFirstTransitionFunction() -> w
    197:197:cn.com.codesec.scan.metadata.FunMeta getPrimaryTransitionFunction() -> x
    202:202:cn.com.codesec.scan.metadata.FunMeta getPrimaryCall() -> y
    207:207:cn.com.codesec.scan.meta.Symbol getPrimaryVariable() -> c_
    212:212:cn.com.codesec.java.rules.StatefulRule getRule() -> z
    217:217:float getSeverity() -> m
    271:272:void collectSourceLocations(java.util.Collection) -> a
    276:300:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    370:386:int findPrimaryIndex(java.util.List) -> a
    423:423:boolean hasFeasiblePath() -> A
    427:427:boolean isInterestingNode(cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node) -> a
    431:437:void createInstanceID() -> B
    440:457:void addNodeToIID(java.lang.StringBuilder,cn.com.codesec.scan.analyzer.stateful.report.StorableHistory$Node,cn.com.codesec.scan.metadata.FunMeta) -> a
    460:460:boolean skipRuleNodeType(cn.com.codesec.scan.analyzer.stateful.ast.RuleNodeType) -> a
    465:465:boolean includeInfeasiblePaths() -> M
    475:475:java.lang.String toString() -> toString
    1:1:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    1:1:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
cn.com.codesec.scan.analyzer.vuln.StructuralVulnerability -> cn.com.codesec.IQ:
    cn.com.codesec.java.rules.StructuralRule rule -> b
    cn.com.codesec.scan.ir.util.memory.IRRef nstRef -> c
    cn.com.codesec.scan.meta.Symbol symbol -> d
    cn.com.codesec.scan.meta.Symbol context -> e
    float severity -> g
    cn.com.codesec.scan.metadata.FunMeta callTarget -> h
    java.lang.String weakSignature -> i
    java.lang.String strongSignature -> j
    cn.com.codesec.parse.ir.SourceLocation primarySourceLocation -> k
    java.lang.String actionString -> l
    java.lang.String pathType -> m
    java.lang.String pathString -> n
    boolean $assertionsDisabled -> a
    40:40:void <clinit>() -> <clinit>
    54:54:java.lang.String getActionString() -> b
    61:61:java.lang.String getPathType() -> l
    67:67:java.lang.String getPathString() -> n
    70:84:void <init>(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    86:110:void <init>(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.meta.Symbol) -> <init>
    113:140:java.lang.String buildPathType(cn.com.codesec.scan.meta.Symbol) -> a
    145:266:java.lang.String buildPathString(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.meta.Symbol) -> b
    271:393:java.lang.String buildPathType(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.meta.Symbol) -> c
    397:399:void generateInstanceID() -> q
    403:411:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    414:414:cn.com.codesec.scan.ir.util.memory.IRRef getNstRef() -> s
    419:419:java.lang.String getAnalyzerName() -> h
    424:424:float getSeverity() -> m
    429:429:cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    434:434:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    439:439:cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    444:461:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    466:466:cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    471:474:java.lang.String createWeakSignature(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.meta.Symbol) -> a
    479:482:java.lang.String createStrongSignature(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.meta.Symbol) -> b
    487:489:java.lang.String createWeakSignature(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    494:496:java.lang.String createStrongSignature(cn.com.codesec.java.rules.StructuralRule,cn.com.codesec.scan.ir.nodes.IRNode) -> b
    501:601:java.lang.String buildActionString(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.meta.Symbol) -> a
    605:605:java.lang.String getStrongID() -> t
    610:611:void collectSourceLocations(java.util.Collection) -> a
cn.com.codesec.scan.analyzer.vuln.TraceIssue -> cn.com.codesec.IR:
    cn.com.codesec.parse.ir.SourceLocation getFirstTraceNodeLocation() -> b
    cn.com.codesec.parse.ir.SourceLocation getLastTraceNodeLocation() -> e
cn.com.codesec.scan.analyzer.vuln.TruncatedExternalEntry -> cn.com.codesec.IS:
    6:6:void <init>() -> <init>
    10:10:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> a
    22:22:boolean equals(java.lang.Object) -> equals
    27:27:int hashCode() -> hashCode
    32:32:java.lang.String toString() -> toString
cn.com.codesec.scan.analyzer.vuln.URLExternalEntry -> cn.com.codesec.IT:
    java.lang.String name -> a
    java.lang.String url -> b
    cn.com.codesec.parse.ir.SourceLocation sourceLocation -> c
    java.util.List fields -> d
    21:22:void <init>(java.lang.String,java.lang.String) -> <init>
    24:32:void <init>(java.lang.String,java.lang.String,cn.com.codesec.parse.ir.SourceLocation) -> <init>
    36:36:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> a
    61:65:void addField(java.lang.String) -> a
    68:68:java.lang.String getURL() -> b
    73:110:boolean equals(java.lang.Object) -> equals
    115:119:int hashCode() -> hashCode
cn.com.codesec.scan.analyzer.vuln.VirtualCallConfidence -> cn.com.codesec.IU:
    float VIRTUAL_MIN_CONFIDENCE -> j
    float VIRTUAL_MAX_CONFIDENCE -> k
    int possibleResolutions -> l
    14:14:int getPossibleResolutions() -> c
    18:18:cn.com.codesec.scan.analyzer.vuln.ConfidenceFactor mk(int) -> a
    21:23:void <init>(int) -> <init>
    27:27:float getValue() -> a
    32:32:java.lang.String getDescription() -> b
cn.com.codesec.scan.analyzer.vuln.VulnComparator -> cn.com.codesec.IV:
    cn.com.codesec.scan.analyzer.vuln.VulnComparator SINGLETON -> a
    int TYPE_SEMANTIC -> b
    int TYPE_DATAFLOW -> c
    int TYPE_STATEFUL -> d
    int TYPE_CONFIG -> e
    int TYPE_OTHER -> f
    46:47:void <clinit>() -> <clinit>
    7:7:void <init>() -> <init>
    18:26:int compare(cn.com.codesec.scan.analyzer.vuln.Vulnerability,cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    30:42:int getVulnType(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.analyzer.vuln.Vulnerability -> cn.com.codesec.IW:
    java.lang.String iid -> a
    java.util.List topLevelExternalEntries -> b
    java.util.HashMap vulnMetaData -> c
    char[] HEX -> d
    java.security.MessageDigest messageDigest -> e
    java.util.HashMap instanceIDs -> g
    java.lang.String[] EMPTY_TOKENS -> h
    java.util.List additionalNodes -> i
    boolean $assertionsDisabled -> f
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> j
    68:490:void <clinit>() -> <clinit>
    80:85:void <init>() -> <init>
    cn.com.codesec.java.rules.VulnerabilityRule getRule() -> g
    java.lang.String getAnalyzerName() -> h
    93:94:void setInstanceID(java.lang.String) -> c
    98:101:java.lang.String getInstanceID() -> C
    106:109:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj getHashObj() -> i
    115:119:void addVulnMetaInfo(java.lang.String,java.lang.String) -> a
    122:126:void deleteVulnMetaInfo(java.lang.String) -> d
    130:133:java.lang.String getVulnMetaInfo(java.lang.String) -> e
    void collectSourceLocations(java.util.Collection) -> a
    139:148:void getSourceLocations(java.util.Collection) -> b
    151:155:void addExternalEntry(cn.com.codesec.scan.analyzer.vuln.ExternalEntry) -> a
    158:161:java.util.Collection getExternalEntries() -> r
    165:165:java.lang.String getDetailString() -> o_
    cn.com.codesec.parse.ir.SourceLocation getPrimarySourceLocation() -> j
    172:180:java.lang.String getPrimaryFile() -> D
    185:189:java.lang.String getPrimaryLine() -> E
    cn.com.codesec.scan.meta.Symbol getContextSymbol() -> k
    195:195:cn.com.codesec.scan.meta.Symbol getPrimaryVariable() -> c_
    199:199:cn.com.codesec.scan.meta.Symbol getPrimaryCall() -> d_
    float getSeverity() -> m
    205:205:java.lang.String getInstanceDescription() -> F
    209:209:float getConfidence() -> d
    213:213:boolean hasMinVirtualCallConfidence() -> o
    217:217:float getMinVirtualCallConfidence() -> p
    221:222:void issueCreationComplete() -> G
    225:232:void digestNoResolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability,java.lang.String) -> a
    235:238:void digest(cn.com.codesec.scan.analyzer.vuln.Vulnerability,java.lang.String) -> b
    241:244:java.lang.String computeIid(java.lang.String) -> a
    248:253:java.lang.String toHex(byte[]) -> a
    257:262:void doFinalResolution(java.util.Set) -> a
    265:269:void addAdditionalNode(cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode) -> a
    272:272:boolean hasAdditionalNodes() -> H
    276:276:java.util.List getAdditionalNode() -> I
    280:280:cn.com.codesec.scan.analyzer.vuln.Vulnerability getVulnerabilityByInstanceID(java.lang.String) -> f
    284:286:void ignoreForConflictResolution(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    289:295:java.lang.String incrementHex(java.lang.String) -> g
    299:310:void resolveCollisions(cn.com.codesec.scan.analyzer.vuln.Vulnerability,java.lang.String,java.util.Map) -> a
    314:319:java.lang.String generateIIDSafeString(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    324:329:java.lang.String generateIIDSafeString(cn.com.codesec.scan.metadata.FunMeta) -> a
    333:375:java.lang.String[] getModifierTokens(cn.com.codesec.parse.ir.IRModifierSet) -> a
    379:464:java.lang.String getPrimitiveTypeString(cn.com.codesec.parse.ir.PrimitiveType) -> a
    469:469:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj hashKeyWithCategory(cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj,java.lang.String) -> a
    473:473:boolean isIncrementalVulnerability() -> e_
    1:1:int compareTo(java.lang.Object) -> compareTo
    68:68:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> J
cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode -> cn.com.codesec.IX:
    java.lang.String keyName -> a
    java.lang.String type -> b
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> c
    998:1002:void <init>(java.lang.String,java.lang.String,cn.com.codesec.parse.ir.SourceInfo) -> <init>
    1004:1004:java.lang.String getKeyName() -> a
    1007:1007:java.lang.String getType() -> b
    1010:1010:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> c
    1015:1020:int hashCode() -> hashCode
    1025:1047:boolean equals(java.lang.Object) -> equals
    1052:1069:int compareTo(cn.com.codesec.scan.analyzer.vuln.Vulnerability$AdditionalNode) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj -> cn.com.codesec.IY:
    cn.com.codesec.scan.ir.util.memory.IRRef node -> a
    cn.com.codesec.scan.meta.Symbol symbol -> b
    java.lang.String category -> c
    935:936:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.meta.Symbol,cn.com.codesec.java.rules.SKYRule) -> <init>
    938:945:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.meta.Symbol,java.lang.String) -> <init>
    950:966:boolean equals(java.lang.Object) -> equals
    971:974:int hashCode() -> hashCode
    979:987:java.lang.String toString() -> toString
    928:928:cn.com.codesec.scan.ir.util.memory.IRRef access$0(cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj) -> a
    929:929:cn.com.codesec.scan.meta.Symbol access$1(cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj) -> b
cn.com.codesec.scan.analyzer.vuln.Vulnerability$IIDSafeStringVisitor -> cn.com.codesec.IZ:
    boolean compatibilityMode -> a
    java.lang.StringBuffer result -> c
    boolean $assertionsDisabled -> b
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> d
    492:492:void <clinit>() -> <clinit>
    497:500:void <init>(java.lang.StringBuffer) -> <init>
    503:504:void write(java.lang.String) -> a
    507:510:void write(java.lang.String[]) -> a
    514:529:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Void) -> a
    534:538:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    543:549:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Void) -> a
    554:556:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Void) -> a
    561:562:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Void) -> a
    567:568:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Void) -> a
    573:575:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Void) -> a
    580:595:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Void) -> a
    600:604:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Void) -> a
    609:616:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Void) -> a
    621:644:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    648:670:void visitFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    674:675:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    680:681:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Void) -> a
    686:689:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Void) -> a
    694:730:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Void) -> a
    735:741:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Void) -> a
    746:749:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Void) -> a
    754:754:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Void) -> a
    759:770:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Void) -> a
    775:777:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Void) -> a
    782:816:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Void) -> a
    820:874:void writeType(cn.com.codesec.scan.metadata.Type) -> a
    878:897:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Void) -> a
    902:906:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    911:914:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Void) -> a
    918:919:void writeModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    922:923:void writePrimitiveType(cn.com.codesec.parse.ir.PrimitiveType) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    492:492:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> a
cn.com.codesec.scan.backend.ASPXFileFilter -> cn.com.codesec.Ja:
    7:7:void <init>() -> <init>
    10:28:boolean isFiltered(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    33:33:java.lang.String name() -> a
cn.com.codesec.scan.backend.AbstractResultFilter -> cn.com.codesec.Jb:
    14:14:void <init>() -> <init>
    18:23:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    26:26:void init(cn.com.codesec.scan.backend.BackEnd) -> a
    29:29:boolean skip() -> b
    boolean isFiltered(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
cn.com.codesec.scan.backend.AnalysisStatusDispatcher -> cn.com.codesec.Jc:
    java.util.List listeners -> a
    14:16:void <init>() -> <init>
    19:20:void registerListener(cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Listener) -> a
    23:26:void fireEvent(cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event) -> a
cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event -> cn.com.codesec.Jd:
    cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event PHASE_ZERO_COMPLETE -> a
    cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event ANALYSIS_SCANNED -> b
    cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event ANALYSIS_COMPLETE -> c
    cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event[] ENUM$VALUES -> d
    28:32:void <clinit>() -> <clinit>
    28:28:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event[] values() -> values
    1:1:cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Listener -> cn.com.codesec.Je:
    void eventFired(cn.com.codesec.scan.backend.AnalysisStatusDispatcher$Event) -> a
cn.com.codesec.scan.backend.BackEnd -> cn.com.codesec.Jf:
    boolean validateNst -> c
    cn.com.codesec.scan.backend.AnalysisStatusDispatcher dispatcher -> d
    cn.com.codesec.java.rules.label.LabelAccess labels -> e
    cn.com.codesec.scan.backend.data.ProgramModel programModel -> f
    cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder callGraphBuilder -> g
    java.util.List filters -> h
    java.util.List functionBlacklistPatterns -> i
    cn.com.codesec.util.fset.FList universe -> j
    java.util.concurrent.atomic.AtomicBoolean timeExpired -> k
    cn.com.codesec.scan.util.collections.LockingMap nstRefMap -> l
    java.util.Set results -> m
    java.util.Set vulnPaths -> n
    cn.com.codesec.scan.backend.BackEnd INSTANCE -> o
    cn.com.codesec.util.fset.FList nsts -> p
    java.util.concurrent.locks.ReentrantLock nstsLock -> q
    cn.com.codesec.util.fset.FList oldNsts -> r
    java.lang.ThreadLocal useOldNsts -> a
    int NUM_CCONNECTORS -> s
    int cvc4Timeout -> t
    int NUM_ZCONNECTORS -> u
    int zchaffTimeout -> v
    cn.com.codesec.scan.ir.transformer.TransformerProcessor$Listener transformerListener -> w
    java.util.Map changeCategoryIdMap -> x
    boolean threwAborted -> y
    int outOfMemoryCount -> z
    boolean $assertionsDisabled -> b
    72:1649:void <clinit>() -> <clinit>
    106:108:void initialize() -> b
    111:111:cn.com.codesec.scan.backend.BackEnd getInstance() -> c
    114:1572:void <init>() -> <init>
    180:180:cn.com.codesec.java.rules.label.LabelAccess getLabels() -> d
    184:184:java.util.Set getResults() -> e
    188:190:java.util.List getFinalResults() -> f
    194:194:cn.com.codesec.util.fset.FList getUniverse() -> g
    198:199:void setUniverse(cn.com.codesec.util.fset.FList) -> a
    202:223:java.util.List addCompilationUnit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    227:227:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder getCallGraphBuilder() -> h
    231:234:cn.com.codesec.scan.metadata.BackEndNameTable getNameTable() -> i
    238:238:cn.com.codesec.scan.backend.AnalysisStatusDispatcher getDispatcher() -> j
    242:242:cn.com.codesec.scan.backend.data.ProgramModel getProgramModel() -> k
    249:249:java.util.Map getChangeCategoryIdMap() -> l
    256:287:void runResultFilters() -> s
    302:303:void addFilter(cn.com.codesec.scan.backend.Filter) -> a
    306:309:cn.com.codesec.util.fset.FList getNsts() -> m
    313:341:java.lang.String initializeEngine() -> t
    359:411:void doPhaseOne(java.util.Map) -> a
    423:433:void runAnalyzer(cn.com.codesec.scan.analyzer.Analyzer) -> a
    436:454:void doPhaseFour() -> u
    462:565:void analyze(java.util.List) -> a
    568:573:java.util.Map initializeIncrementalUniverseMap() -> v
    581:594:boolean phaseOneAnalyzable(cn.com.codesec.scan.metadata.FunMeta) -> a
    828:835:void initializeFilters() -> w
    942:970:void loadNst(cn.com.codesec.scan.ir.util.memory.IRRef,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,int) -> a
    974:986:void loadNsts(java.util.Collection) -> a
    995:1108:void doPhaseZero(java.util.List,java.lang.String) -> a
    1195:1200:void runReachingTypes() -> x
    1204:1210:void runReachingTypes(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> b
    1213:1223:void exceptionP0(java.lang.Throwable,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    1226:1232:void exceptionP0(java.lang.Throwable,java.lang.Object) -> a
    1235:1250:void buildCallGraph() -> y
    1254:1260:void doCallGraphBuild(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> c
    1301:1310:void runNstTransformers() -> z
    1313:1314:void cacheCallTargets() -> A
    1317:1323:void cacheCallTargets(cn.com.codesec.scan.metadata.FunMeta) -> b
    1326:1327:void resetAllFunctionData() -> B
    1330:1334:void resetAllData(cn.com.codesec.scan.metadata.FunMeta) -> c
    1387:1395:void runGuarded(int,int,java.lang.Runnable) -> a
    1429:1442:void runGuarded(int,int,cn.com.codesec.scan.meta.Symbol,java.lang.Runnable) -> a
    1446:1454:void runGuarded(int,int,java.lang.String,java.lang.Runnable) -> a
    1458:1466:void runGuarded(int,int,java.lang.String[],java.lang.Runnable) -> a
    1575:1578:void isThrewAbortedAndThrow() -> n
    1581:1592:void gotOutOfMemoryError(java.lang.OutOfMemoryError) -> a
    1595:1595:boolean isTimeExpired() -> o
    1599:1604:void checkTimeExpired() -> p
    1608:1609:void timeExpired() -> a
    1612:1612:java.util.Set getVulnPaths() -> q
    1616:1617:void setVulnPaths(java.util.Set) -> a
    1620:1620:java.util.concurrent.atomic.AtomicBoolean getTimeExpired() -> r
    1624:1625:void setTimeExpired(java.util.concurrent.atomic.AtomicBoolean) -> a
    80:80:cn.com.codesec.scan.analyzer.callgraph.CallGraphBuilder access$0(cn.com.codesec.scan.backend.BackEnd) -> a
    981:981:void lambda$2(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,int,cn.com.codesec.scan.ir.util.memory.IRRef) -> a
cn.com.codesec.scan.backend.BackEnd$1 -> cn.com.codesec.Jg:
    cn.com.codesec.scan.backend.BackEnd this$0 -> a
    1:132:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    135:135:java.lang.Boolean initialValue() -> a
    1:1:java.lang.Object initialValue() -> initialValue
cn.com.codesec.scan.backend.BackEnd$2 -> cn.com.codesec.Jh:
    java.util.Set complete -> b
    cn.com.codesec.scan.backend.BackEnd this$0 -> a
    1:146:void <init>(cn.com.codesec.scan.backend.BackEnd) -> <init>
    151:158:void transformed(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName -> cn.com.codesec.Ji:
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName SEMANTIC -> a
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName STRUCTURAL -> b
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName NULLPTR -> c
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName BUFFER -> d
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName STATEFUL -> e
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName ENTRYPOINT -> f
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName TAINTPROPAGATION -> g
    cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName[] ENUM$VALUES -> h
    1651:1659:void <clinit>() -> <clinit>
    1651:1651:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName[] values() -> values
    1:1:cn.com.codesec.scan.backend.BackEnd$PhaseOneAnalyzerName valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.backend.ConfigurableOverlapFilter -> cn.com.codesec.Jj:
    java.lang.String DATAFLOW_ANALYZER_NAME -> a
    java.lang.String SEMANTIC_ANALYZER_NAME -> b
    java.lang.String STRUCTUR_ALANALYZERNAME -> c
    java.util.Map ValidAnalyzers -> d
    java.util.List checks -> e
    java.util.concurrent.ConcurrentMap removed -> f
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver RULESETNAME_RESOLVER -> g
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver RULE_RESOLVER -> h
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver IS_PLAIN_SEMANTIC_RESOLVER -> i
    java.util.Map passthroughAndSourcemap -> j
    236:251:void <clinit>() -> <clinit>
    23:84:void <init>() -> <init>
    39:61:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    65:65:java.lang.String name() -> a
    69:77:void init() -> e
    80:82:void uninit() -> f
    88:122:void loadDefaultChecks() -> g
    141:172:void loadRules() -> h
    175:218:void loadRule(cn.com.codesec.java.rules.ResultFilterRule) -> a
    221:232:void handleField(java.util.List,java.util.List,java.util.List,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver,cn.com.codesec.java.rules.ResultFilterRule$FieldCheck) -> a
    32:32:java.util.concurrent.ConcurrentMap access$0(cn.com.codesec.scan.backend.ConfigurableOverlapFilter) -> a
    33:33:cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver access$1() -> b
    34:34:cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver access$2() -> c
    26:26:java.lang.String access$3() -> d
    42:58:java.lang.Runnable lambda$0(cn.com.codesec.scan.util.SharedIterator) -> a
    58:58:void lambda$1(java.lang.Throwable,java.lang.Runnable) -> a
    43:58:void lambda$2(cn.com.codesec.scan.util.SharedIterator) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$Check -> cn.com.codesec.Jk:
    java.lang.String name -> b
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher winner -> c
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher loser -> d
    java.util.List sameValues -> e
    java.util.concurrent.ConcurrentMap matches -> f
    java.util.concurrent.ConcurrentMap matches2 -> g
    cn.com.codesec.scan.backend.ConfigurableOverlapFilter this$0 -> a
    263:264:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter,cn.com.codesec.scan.backend.ConfigurableOverlapFilter,java.lang.String,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher) -> <init>
    266:274:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter,java.lang.String,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher,java.util.List) -> <init>
    278:278:java.lang.String toString() -> toString
    282:341:void doCheck(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    344:344:boolean useFullDataflow() -> a
    351:352:void remove(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    355:358:void removeAll(java.util.List) -> a
    266:266:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter,java.lang.String,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher,java.util.List,cn.com.codesec.scan.backend.ConfigurableOverlapFilter$Check) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ConfigResolver -> cn.com.codesec.Jl:
    java.lang.String configRuleID -> a
    680:682:void <init>(java.lang.String) -> <init>
    686:690:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    695:695:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IsPlainSemanticResolver -> cn.com.codesec.Jm:
    562:562:void <init>() -> <init>
    566:569:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    574:574:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    562:562:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IsPlainSemanticResolver) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$IssueMatcher -> cn.com.codesec.Jn:
    java.lang.String analyzer -> a
    java.util.List matches -> b
    boolean matchesDataflow -> c
    366:379:void <init>(java.lang.String,cn.com.codesec.java.rules.StringMatcher,cn.com.codesec.java.rules.StringMatcher) -> <init>
    383:388:void <init>(java.lang.String,java.util.List,boolean) -> <init>
    391:392:void <init>(java.lang.String,java.util.List) -> <init>
    395:405:boolean matches(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    409:409:boolean matchesDataflow() -> a
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$LoserMatch -> cn.com.codesec.Jo:
    java.util.List losers -> a
    510:512:void <init>(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> <init>
    515:515:java.util.List getLosers() -> a
    519:520:void setLosers(java.util.List) -> a
    508:508:java.util.List access$0(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$LoserMatch) -> a
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$MatchKey -> cn.com.codesec.Jp:
    cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj key1 -> a
    cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj key2 -> b
    java.util.Map fixedValues -> c
    420:437:cn.com.codesec.scan.backend.ConfigurableOverlapFilter$MatchKey mk(cn.com.codesec.scan.analyzer.vuln.Vulnerability,boolean,java.util.List) -> a
    441:453:java.util.List getLocations(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    456:460:void <init>(cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj,cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj,java.util.Map) -> <init>
    464:486:boolean equals(java.lang.Object) -> equals
    491:494:int hashCode() -> hashCode
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$MatchResult -> cn.com.codesec.Jq:
    498:498:void <init>() -> <init>
    498:498:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$MatchResult) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$PassthroughAndSourceResolver -> cn.com.codesec.Jr:
    java.lang.String sourceRuleID -> a
    java.lang.String passthroughRuleID -> b
    643:647:void <init>(java.lang.String,java.lang.String) -> <init>
    651:669:cn.com.codesec.scan.analyzer.vuln.Vulnerability$HashObj resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    674:674:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$PassthroughResolver -> cn.com.codesec.Js:
    java.lang.String passthroughRuleID -> a
    608:611:void <init>(java.lang.String) -> <init>
    615:628:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    633:633:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$RuleResolver -> cn.com.codesec.Jt:
    549:549:void <init>() -> <init>
    553:553:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    558:558:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    549:549:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$RuleResolver) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$RuleSetNameResolver -> cn.com.codesec.Ju:
    530:530:void <init>() -> <init>
    534:534:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    545:545:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    530:530:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$RuleSetNameResolver) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$SinkAndConfigResolver -> cn.com.codesec.Jv:
    java.lang.String sinkRuleIDs -> a
    java.lang.String configRuleID -> b
    706:709:void <init>(java.lang.String,java.lang.String) -> <init>
    713:713:java.lang.String getValueName() -> a
    718:738:java.util.List resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$SourceResolver -> cn.com.codesec.Jw:
    java.lang.String sourceRuleID -> a
    582:585:void <init>(java.lang.String) -> <init>
    589:595:java.lang.String resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> a
    600:600:java.lang.String getValueName() -> a
    1:1:java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver -> cn.com.codesec.Jx:
    523:523:void <init>() -> <init>
    java.lang.String getValueName() -> a
    java.lang.Object resolve(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
    523:523:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$ValueResolver) -> <init>
cn.com.codesec.scan.backend.ConfigurableOverlapFilter$WinnerMatch -> cn.com.codesec.Jy:
    502:502:void <init>() -> <init>
    502:502:void <init>(cn.com.codesec.scan.backend.ConfigurableOverlapFilter$WinnerMatch) -> <init>
cn.com.codesec.scan.backend.DisableTagResultFilter -> cn.com.codesec.Jz:
    java.util.Map disableTagWithCategoryId -> a
    cn.com.codesec.java.rules.RuleSet ruleSet -> b
    24:27:void <init>() -> <init>
    31:49:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    52:76:void filter(cn.com.codesec.scan.analyzer.vuln.Vulnerability,java.util.Set) -> a
    80:80:java.lang.String name() -> a
    36:46:java.lang.Runnable lambda$0(cn.com.codesec.scan.util.SharedIterator,java.util.Set) -> a
    46:46:void lambda$1(java.lang.Throwable,java.lang.Runnable) -> a
    37:46:void lambda$2(cn.com.codesec.scan.util.SharedIterator,java.util.Set) -> b
cn.com.codesec.scan.backend.Filter -> cn.com.codesec.JA:
cn.com.codesec.scan.backend.InitializationException -> cn.com.codesec.JB:
    10:11:void <init>(java.lang.Throwable) -> <init>
    14:15:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    18:19:void <init>(java.lang.String) -> <init>
cn.com.codesec.scan.backend.InternalCategoryFilter -> cn.com.codesec.JC:
    11:11:void <init>() -> <init>
    15:27:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    31:31:java.lang.String name() -> a
cn.com.codesec.scan.backend.LocaleDependentComparisonFilter -> cn.com.codesec.JD:
    java.lang.String localeSetDefaultRuldId -> a
    java.lang.String localeDependentComparisonRuleSetName -> b
    17:26:void <init>() -> <init>
    30:55:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    59:59:java.lang.String name() -> a
cn.com.codesec.scan.backend.ResultFilter -> cn.com.codesec.JE:
    void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    java.lang.String name() -> a
    21:33:void adjustScaStateCounts(cn.com.codesec.scan.analyzer.vuln.Vulnerability) -> b
cn.com.codesec.scan.backend.RuleFilter -> cn.com.codesec.JF:
    boolean isFiltered(cn.com.codesec.java.rules.SKYRule) -> a
cn.com.codesec.scan.backend.SafeFunctionResultFilter -> cn.com.codesec.JG:
    java.util.Map categoryIdAndSafeFunctionIdentifierListMap -> a
    java.util.Map contextAndRuleSetNameAndBasicBlockIndexAndStatementIndexs -> b
    33:37:void <init>() -> <init>
    41:41:java.lang.String name() -> a
    46:66:void filter(java.util.Set,cn.com.codesec.scan.backend.BackEnd) -> a
    69:97:void filter(cn.com.codesec.scan.analyzer.vuln.Vulnerability,java.util.Set) -> a
    101:108:boolean containsSafeFunction(cn.com.codesec.scan.analyzer.taint.vector.TaintVector$Path,java.lang.String) -> a
    113:133:boolean isSafeNode(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,java.lang.String) -> a
    138:149:java.util.Map getBasicBlockIndexAndStatementIndexs(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,java.lang.String) -> b
    154:176:boolean inSafeBlock(cn.com.codesec.scan.analyzer.taint.vector.TaintNode,java.lang.String,java.util.Map) -> a
    51:62:java.lang.Runnable lambda$0(cn.com.codesec.scan.util.SharedIterator,java.util.Set) -> a
    62:62:void lambda$1(java.lang.Throwable,java.lang.Runnable) -> a
    52:62:void lambda$2(cn.com.codesec.scan.util.SharedIterator,java.util.Set) -> b
cn.com.codesec.scan.backend.data.Lifetime -> cn.com.codesec.JH:
    cn.com.codesec.scan.backend.data.Lifetime NST_TRANSFORM -> a
    cn.com.codesec.scan.backend.data.Lifetime PHASE_ZERO -> b
    cn.com.codesec.scan.backend.data.Lifetime CONFIG_ANALYSIS -> c
    cn.com.codesec.scan.backend.data.Lifetime CONTENT_ANALYSIS -> d
    cn.com.codesec.scan.backend.data.Lifetime SEMANTIC_ANALYSIS -> e
    cn.com.codesec.scan.backend.data.Lifetime STRUCTURAL_ANALYSIS -> f
    cn.com.codesec.scan.backend.data.Lifetime TRACER_ANALYSIS -> g
    cn.com.codesec.scan.backend.data.Lifetime NULL_PTR_ANALYSIS -> h
    cn.com.codesec.scan.backend.data.Lifetime CONTROL_FLOW_ANALYSIS -> i
    cn.com.codesec.scan.backend.data.Lifetime BUFFER_ANALYSIS -> j
    cn.com.codesec.scan.backend.data.Lifetime TAINT_ANALYSIS_VISITS -> k
    cn.com.codesec.scan.backend.data.Lifetime ISSUE_CALCULATION -> l
    cn.com.codesec.scan.backend.data.Lifetime FINDBUGS_ANALYSIS -> m
    cn.com.codesec.scan.backend.data.Lifetime PHASE_ONE -> n
    cn.com.codesec.scan.backend.data.Lifetime PHASE_FOUR -> o
    cn.com.codesec.scan.backend.data.Lifetime FOREVER -> p
    cn.com.codesec.scan.backend.data.Lifetime[] ENUM$VALUES -> q
    7:24:void <clinit>() -> <clinit>
    7:7:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.backend.data.Lifetime[] values() -> values
    1:1:cn.com.codesec.scan.backend.data.Lifetime valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.backend.data.ModelKey -> cn.com.codesec.JI:
    java.lang.String name -> a
    cn.com.codesec.scan.backend.data.Lifetime lifetime -> b
    12:15:void <init>(java.lang.String,cn.com.codesec.scan.backend.data.Lifetime) -> <init>
    18:18:java.lang.String getName() -> a
    22:22:cn.com.codesec.scan.backend.data.Lifetime getLifetime() -> b
cn.com.codesec.scan.backend.data.ProgramModel -> cn.com.codesec.JJ:
    cn.com.codesec.scan.util.collections.LockingMap modelKeys -> a
    cn.com.codesec.scan.util.collections.LockingMap model -> b
    cn.com.codesec.scan.util.collections.LockingSet expired -> c
    115:116:void <clinit>() -> <clinit>
    26:29:void <init>() -> <init>
    33:36:java.lang.Object get(cn.com.codesec.scan.backend.data.ModelKey,java.lang.Object) -> a
    41:41:java.lang.Object getOrCons(cn.com.codesec.scan.backend.data.ModelKey,java.lang.Object,java.util.function.Supplier) -> a
    45:45:boolean hasEntry(cn.com.codesec.scan.backend.data.ModelKey,java.lang.Object) -> b
    50:56:java.lang.Object put(cn.com.codesec.scan.backend.data.ModelKey,java.lang.Object,java.lang.Object) -> a
    60:60:java.lang.Object remove(cn.com.codesec.scan.backend.data.ModelKey,java.lang.Object) -> c
    68:70:void expire(cn.com.codesec.scan.backend.data.Lifetime) -> a
    74:77:java.util.concurrent.ConcurrentMap getMap(cn.com.codesec.scan.backend.data.ModelKey) -> a
    82:82:cn.com.codesec.scan.backend.data.ModelKey mkKey(java.lang.String,cn.com.codesec.scan.backend.data.Lifetime) -> a
    91:91:void dumpModelData() -> a
    98:103:java.lang.StringBuilder prettyPrintModel() -> b
    107:111:java.lang.StringBuilder prettyPrintMap(java.util.concurrent.ConcurrentMap) -> a
    41:41:java.lang.Object lambda$0(java.util.function.Supplier,java.lang.Object) -> a
    69:69:boolean lambda$1(cn.com.codesec.scan.backend.data.Lifetime,cn.com.codesec.scan.backend.data.ModelKey) -> a
    77:77:java.util.concurrent.ConcurrentMap lambda$3(cn.com.codesec.scan.backend.data.ModelKey) -> b
    82:82:cn.com.codesec.scan.backend.data.ModelKey lambda$4(cn.com.codesec.scan.backend.data.Lifetime,java.lang.String) -> a
cn.com.codesec.scan.backend.data.ReadWriteDataSource -> cn.com.codesec.JK:
cn.com.codesec.scan.backend.data.ReadableDataSource -> cn.com.codesec.JL:
    byte[] readRaw() -> p_
    java.io.InputStream openForRead() -> q_
    void closeForRead() -> c
cn.com.codesec.scan.backend.data.WritableDataSource -> cn.com.codesec.JM:
    java.io.OutputStream openForWrite() -> a
    void closeForWrite() -> b
    void delete() -> r_
cn.com.codesec.scan.cmd.CommandLineException -> cn.com.codesec.JN:
    int returnCode -> a
    11:13:void <init>() -> <init>
    16:18:void <init>(java.lang.String) -> <init>
    21:24:void <init>(java.lang.String,int) -> <init>
    27:27:int getReturnCode() -> a
cn.com.codesec.scan.cmd.ExitError -> cn.com.codesec.JO:
    int exitCode -> a
    11:13:void <init>(int) -> <init>
    15:17:void <init>(cn.com.codesec.scan.cmd.SCAExitCode) -> <init>
    20:20:int getCode() -> a
cn.com.codesec.scan.cmd.SCAExitCode -> cn.com.codesec.JP:
    cn.com.codesec.scan.cmd.SCAExitCode OK -> a
    cn.com.codesec.scan.cmd.SCAExitCode GENERIC_FAILURE -> b
    cn.com.codesec.scan.cmd.SCAExitCode NO_INPUT_FILES -> c
    cn.com.codesec.scan.cmd.SCAExitCode TIMEDOUT -> d
    cn.com.codesec.scan.cmd.SCAExitCode SCAN_WARNINGS -> e
    cn.com.codesec.scan.cmd.SCAExitCode SCAN_ERRORS -> f
    cn.com.codesec.scan.cmd.SCAExitCode NO_OUTPUT -> g
    int value -> h
    cn.com.codesec.scan.cmd.SCAExitCode[] ENUM$VALUES -> i
    7:15:void <clinit>() -> <clinit>
    19:21:void <init>(java.lang.String,int,int) -> <init>
    1:1:cn.com.codesec.scan.cmd.SCAExitCode[] values() -> values
    1:1:cn.com.codesec.scan.cmd.SCAExitCode valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.cmd.SCAExitCodeLevel -> cn.com.codesec.JQ:
    cn.com.codesec.scan.cmd.SCAExitCodeLevel NOTHING -> a
    cn.com.codesec.scan.cmd.SCAExitCodeLevel NO_OUTPUT_FILE -> b
    cn.com.codesec.scan.cmd.SCAExitCodeLevel ERRORS -> c
    cn.com.codesec.scan.cmd.SCAExitCodeLevel WARNINGS -> d
    cn.com.codesec.scan.cmd.SCAExitCodeLevel[] ENUM$VALUES -> e
    7:12:void <clinit>() -> <clinit>
    7:7:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.cmd.SCAExitCodeLevel[] values() -> values
    1:1:cn.com.codesec.scan.cmd.SCAExitCodeLevel valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.cmd.ShutdownError -> cn.com.codesec.JR:
    11:13:void <init>() -> <init>
    16:18:void <init>(java.lang.InterruptedException) -> <init>
cn.com.codesec.scan.cmd.TrimmedProperties -> cn.com.codesec.JS:
    15:16:void <init>(java.util.Properties) -> <init>
    21:22:java.lang.String getProperty(java.lang.String) -> getProperty
    26:27:void addPermittedProperties(java.util.Properties) -> a
cn.com.codesec.scan.ir.IRCreationException -> cn.com.codesec.JT:
    cn.com.codesec.scan.ir.nodes.IRNode sourceNode -> a
    14:16:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String) -> <init>
cn.com.codesec.scan.ir.IRVisitor -> cn.com.codesec.JU:
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
cn.com.codesec.scan.ir.IRVisitorAdapter -> cn.com.codesec.JV:
    52:52:void <init>() -> <init>
    55:56:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    59:62:java.lang.Object visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> b
    67:67:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    72:72:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    77:77:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    82:82:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    87:87:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    92:92:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    97:97:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    102:102:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    107:107:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    112:112:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    117:117:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    122:122:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    127:127:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    132:132:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    137:138:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    143:143:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    148:148:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    153:153:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    158:158:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    163:163:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    168:168:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    173:173:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    178:178:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    183:183:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    188:188:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    193:193:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    198:198:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    203:203:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    208:208:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    213:214:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    219:219:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    224:224:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    229:229:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    234:234:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    239:239:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    244:244:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    249:249:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    254:254:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    259:259:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    264:264:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    269:269:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    274:274:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    279:279:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    284:284:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
cn.com.codesec.scan.ir.debug.PrintingVisitor -> cn.com.codesec.JW:
    12:12:void <init>() -> <init>
    15:15:java.io.PrintStream getOutputStream() -> a
    19:24:void printNode(cn.com.codesec.scan.ir.nodes.IRNode,int) -> a
    28:30:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Integer) -> a
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
cn.com.codesec.scan.ir.nodes.IRAllocation -> cn.com.codesec.JX:
    java.util.List EMPTY_INDICES -> b
    cn.com.codesec.scan.ir.nodes.data.IRAllocationData nodeData -> c
    java.util.List indices -> d
    boolean $assertionsDisabled -> a
    13:119:void <clinit>() -> <clinit>
    17:18:void <init>() -> <init>
    23:24:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRAllocationData) -> a
    30:31:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    34:36:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    40:41:void initNodeData() -> b
    45:45:cn.com.codesec.scan.ir.nodes.data.IRAllocationData getNodeData() -> s_
    50:52:cn.com.codesec.scan.ir.nodes.IRAllocation clone() -> h
    58:61:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    65:68:void setNSTType(cn.com.codesec.scan.ir.nodes.IRType) -> c
    71:71:cn.com.codesec.scan.ir.nodes.IRType getNSTType() -> l
    76:82:java.util.List getDimensions() -> m
    87:87:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    92:95:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    100:100:int getChildCount() -> n
    105:108:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    113:115:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall -> cn.com.codesec.JY:
    17:18:void <init>() -> <init>
    21:22:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    25:26:void <init>(cn.com.codesec.scan.ir.nodes.IRFunCall) -> <init>
    29:29:cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget getTarget() -> t_
    33:35:void setTarget(cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget) -> a
    39:39:java.util.List getCachedTargets() -> h
    44:54:void setCachedTargets(java.util.List) -> a
    58:63:cn.com.codesec.scan.ir.nodes.IRFunCall clone() -> l
    68:68:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    73:74:void initNodeData() -> b
    78:78:cn.com.codesec.scan.ir.nodes.data.IRAlternativeFunCallData getNodeData() -> m
    82:83:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRAlternativeFunCallData) -> a
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.data.IRFunCallData getNodeData() -> r
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRArrayAccess -> cn.com.codesec.JZ:
    18:19:void <init>() -> <init>
    22:25:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    cn.com.codesec.scan.ir.nodes.data.IRArrayAccessData getNodeData() -> u_
    cn.com.codesec.scan.ir.nodes.IRArrayAccess clone() -> h
    35:35:cn.com.codesec.scan.ir.nodes.IRLocation getBase() -> l
    40:40:cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    44:44:cn.com.codesec.scan.ir.nodes.IRExpression getIndex() -> v_
    50:68:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    77:77:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    81:85:void setBase(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    88:91:void setIndex(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    95:101:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    106:112:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    118:118:int getChildCount() -> n
    123:133:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    137:146:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    150:150:cn.com.codesec.scan.metadata.Type getStructuralNstType() -> u
    155:155:cn.com.codesec.scan.ir.nodes.IRNode getStructuralBase(boolean) -> b
    161:161:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    165:165:cn.com.codesec.scan.ir.nodes.IRLocation getDereferencedBase() -> v
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRAssignmentStmt -> cn.com.codesec.Ka:
    cn.com.codesec.scan.ir.nodes.data.IRAssignmentData nodeData -> b
    boolean $assertionsDisabled -> a
    9:9:void <clinit>() -> <clinit>
    13:14:void <init>() -> <init>
    19:20:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRAssignmentData) -> a
    23:24:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    27:32:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression,boolean,boolean,boolean) -> <init>
    36:37:void initNodeData() -> b
    41:41:cn.com.codesec.scan.ir.nodes.data.IRAssignmentData getNodeData() -> w_
    46:48:cn.com.codesec.scan.ir.nodes.IRAssignmentStmt clone() -> h
    52:61:void addChildren(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    64:70:void setLhs(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    74:74:cn.com.codesec.scan.ir.nodes.IRLocation getLhs() -> l
    78:84:void setRhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    88:88:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> m
    93:93:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    97:97:boolean isIncrDecr() -> p
    101:101:boolean isPreIncr() -> r
    105:105:boolean isPostIncr() -> s
    109:109:boolean isPreDecr() -> t
    113:113:boolean isPostDecr() -> u
    118:124:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    130:130:int getChildCount() -> n
    135:141:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    146:156:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRBinaryOpExp -> cn.com.codesec.Kb:
    cn.com.codesec.scan.ir.nodes.data.IRBinaryData nodeData -> b
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> c
    11:11:void <clinit>() -> <clinit>
    14:15:void <init>() -> <init>
    20:21:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRBinaryData) -> a
    24:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.ir.IROperators) -> <init>
    30:31:void initNodeData() -> b
    35:35:cn.com.codesec.scan.ir.nodes.data.IRBinaryData getNodeData() -> y_
    40:44:cn.com.codesec.scan.ir.nodes.IRBinaryOpExp clone() -> h
    49:49:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> l
    53:56:void setRhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    60:60:boolean isMacroExpansion() -> i
    65:68:cn.com.codesec.scan.ir.nodes.IRExpression getChild(int) -> b
    73:73:int getChildCount() -> n
    78:81:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    86:93:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    97:106:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    110:110:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    116:178:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    185:195:cn.com.codesec.scan.metadata.Type chooseMorePowerfulType(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> a
    200:200:cn.com.codesec.scan.metadata.Type chooseBiggerType(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> b
    1:1:cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData getNodeData() -> m
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    11:11:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> r
cn.com.codesec.scan.ir.nodes.IRBlock -> cn.com.codesec.Kc:
    cn.com.codesec.scan.ir.nodes.data.IRBlockData nodeData -> b
    boolean $assertionsDisabled -> a
    21:21:void <clinit>() -> <clinit>
    24:25:void <init>() -> <init>
    30:31:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRBlockData) -> a
    35:36:void initNodeData() -> b
    40:40:cn.com.codesec.scan.ir.nodes.data.IRBlockData getNodeData() -> z_
    44:48:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    52:58:cn.com.codesec.scan.ir.nodes.IRBlock clone() -> h
    62:65:void insertChild(cn.com.codesec.scan.ir.nodes.IRStatement,int) -> a
    69:74:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    77:85:void finishChildAddition(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    89:91:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    94:101:void removeChild(cn.com.codesec.scan.ir.nodes.IRNode) -> a_
    104:112:boolean updateLabel(java.lang.String,java.lang.String) -> a
    116:116:cn.com.codesec.scan.ir.nodes.IRStatement getStatement(int) -> b
    120:120:int getNumStatements() -> l
    124:124:java.util.List getStatements() -> m
    129:130:boolean isTryBlock() -> p
    135:136:boolean isCatchBlock() -> r
    140:141:boolean isToolGeneratedCatchBlock() -> s
    146:147:boolean isFinallyBlock() -> t
    151:152:boolean isInlineFinallyBlock() -> u
    157:158:boolean isSynchronizedBlock() -> w
    163:163:cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    168:171:void putStorageDecl(java.lang.String,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    175:179:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    185:188:cn.com.codesec.scan.ir.nodes.IRFunDecl getEnclosingFunDecl() -> y
    193:195:void setParent(cn.com.codesec.scan.ir.nodes.IRNode) -> d
    198:202:cn.com.codesec.scan.metadata.Type getCatchType() -> z
    206:206:cn.com.codesec.scan.ir.nodes.IRStatement getLabeledStatement(java.lang.String) -> b
    210:210:java.util.Iterator getStorageIterator() -> A
    215:215:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    219:223:cn.com.codesec.scan.ir.nodes.IRExpression getSynchronizedObject() -> B
    228:229:boolean isSwitchBlock() -> C
    233:234:boolean isJumpTable() -> D
    238:255:java.util.List getCases() -> E
    259:277:java.util.List makeCases(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    282:282:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    286:293:cn.com.codesec.scan.ir.nodes.IRNode getNextChild(cn.com.codesec.scan.ir.nodes.IRNode) -> e
    298:298:int getChildCount() -> n
    303:303:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    307:308:boolean isFilterBlock() -> A_
    312:313:boolean isAssertBlock() -> B_
    318:319:boolean isToolGeneratedBlock() -> H
    323:324:boolean isCaseBlock() -> I
    328:329:boolean isDefaultBlock() -> J
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRCallStmt -> cn.com.codesec.Kd:
    cn.com.codesec.scan.ir.nodes.data.IRCallStmtData nodeData -> b
    boolean $assertionsDisabled -> a
    7:7:void <clinit>() -> <clinit>
    10:11:void <init>() -> <init>
    16:17:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRCallStmtData) -> a
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRFunCall) -> <init>
    30:31:void initNodeData() -> b
    35:35:cn.com.codesec.scan.ir.nodes.data.IRCallStmtData getNodeData() -> D_
    40:43:cn.com.codesec.scan.ir.nodes.IRCallStmt clone() -> h
    47:47:cn.com.codesec.scan.ir.nodes.IRFunCall getCall() -> l
    51:54:void setCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    58:58:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    63:67:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    73:73:int getChildCount() -> n
    78:81:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    86:93:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRCatchBlock -> cn.com.codesec.Ke:
    cn.com.codesec.scan.ir.nodes.data.IRCatchBlockData nodeData -> a
    9:10:void <init>() -> <init>
    15:16:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRCatchBlockData) -> a
    19:20:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    24:25:void initNodeData() -> b
    29:29:cn.com.codesec.scan.ir.nodes.data.IRCatchBlockData getNodeData() -> E_
    34:43:cn.com.codesec.scan.ir.nodes.IRCatchBlock clone() -> h
    47:47:boolean isEllipsis() -> l
    51:57:cn.com.codesec.scan.ir.nodes.IRVarDecl getExceptionVar() -> m
    61:64:cn.com.codesec.scan.ir.nodes.IRBlock getCodeBlock() -> p
    68:74:void setEllipsis() -> r
    77:84:void setExceptionVar(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    87:93:void setCodeBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    97:97:int getChildCount() -> n
    102:108:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    113:119:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    124:131:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRClassDecl -> cn.com.codesec.Kf:
    cn.com.codesec.scan.meta.Language language -> c
    java.lang.String name -> d
    java.lang.String canonicalName -> e
    java.lang.String altCanonicalName -> g
    cn.com.codesec.scan.metadata.Namespace namespace -> h
    java.lang.String namespaceName -> i
    java.lang.String altNamespaceName -> j
    java.lang.String namespaceLocalName -> k
    java.lang.String altLocalName -> l
    java.util.List typeParameters -> m
    cn.com.codesec.util.fset.FList extendsList -> n
    cn.com.codesec.util.fset.FList implementsList -> o
    cn.com.codesec.util.fset.FList members -> p
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> q
    cn.com.codesec.util.fset.FHashMap storageMap -> a
    int size -> r
    java.lang.String trueSimpleName -> s
    cn.com.codesec.scan.ir.nodes.data.IRNodeData nodeData -> t
    boolean $assertionsDisabled -> b
    24:24:void <clinit>() -> <clinit>
    44:61:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.meta.Language) -> <init>
    65:65:cn.com.codesec.scan.meta.Language getLanguage() -> c
    70:70:cn.com.codesec.scan.ir.nodes.IRClassDecl clone() -> h
    74:74:java.lang.String getName() -> l
    78:90:java.lang.String getCanonicalName() -> m
    94:107:java.lang.String getAltCanonicalName() -> p
    111:115:void setName(java.lang.String) -> b
    118:119:void setCanonicalName(java.lang.String) -> c
    122:125:cn.com.codesec.scan.metadata.Namespace getNamespace() -> r
    129:130:void setNamespace(java.lang.String) -> d
    133:134:void setAltNamespace(java.lang.String) -> e
    137:137:java.lang.String getNamespaceLocalName() -> s
    141:142:void setNamespaceLocalName(java.lang.String) -> f
    147:147:java.lang.String getTrueSimpleName() -> t
    151:152:void setTrueSimpleName(java.lang.String) -> g
    155:156:void setAltLocalName(java.lang.String) -> h
    159:159:java.lang.String getAltLocalName() -> u
    163:167:void setExtendsList(java.util.List) -> a
    170:170:cn.com.codesec.util.fset.FList getExtendsList() -> v
    174:178:void setImplementsList(java.util.List) -> b
    182:182:java.util.List getTypeParameters() -> w
    186:190:void setTypeParameters(java.util.List) -> c
    193:193:cn.com.codesec.util.fset.FList getImplementsList() -> z
    197:197:int getSize() -> A
    201:202:void setSize(int) -> b
    206:206:cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    211:212:void putStorageDecl(java.lang.String,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    216:216:java.lang.String getSymbol() -> B
    220:220:cn.com.codesec.scan.metadata.TypeMeta findTypeMeta() -> C
    225:225:java.lang.String toString() -> toString
    230:230:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    235:236:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    239:240:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    244:245:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    249:249:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    254:254:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    259:259:cn.com.codesec.scan.meta.Symbol getMetaData() -> D
    263:263:cn.com.codesec.util.fset.FList getMembers() -> E
    268:272:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    277:277:int getChildCount() -> n
    282:289:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    294:301:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    305:306:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    310:310:cn.com.codesec.scan.ir.util.memory.IRRef getRef() -> F
    315:315:void dirty() -> G
    321:323:void initNodeData() -> b
    327:327:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRCompilationUnit -> cn.com.codesec.Kg:
    java.util.List SOFTENED_REFS -> c
    cn.com.codesec.scan.meta.Language sourceLanguage -> d
    java.lang.String sourceLanguageVersion -> e
    cn.com.codesec.util.IRFile nstFile -> g
    java.util.List allAnnotations -> h
    cn.com.codesec.util.fset.FHashMap storageMap -> a
    cn.com.codesec.util.fset.FSet typedefs -> i
    java.util.List childrenCandidates -> j
    cn.com.codesec.util.fset.FList children -> k
    cn.com.codesec.util.fset.FList cuChildren -> l
    java.util.Map varChildren -> m
    cn.com.codesec.util.fset.FList funChildren -> n
    java.util.concurrent.locks.ReentrantLock funChildrenLock -> o
    cn.com.codesec.scan.ir.util.memory.FunDeclRef fileScopeInit -> p
    int indexInMasterList -> q
    boolean isFunctionModelCU -> r
    boolean firstPassCompleted -> s
    boolean secondPassCompleted -> t
    boolean complete -> u
    cn.com.codesec.scan.ir.nodes.IRVarDecl dummy -> v
    cn.com.codesec.scan.ir.nodes.data.IRNodeData nodeData -> w
    boolean $assertionsDisabled -> b
    56:744:void <clinit>() -> <clinit>
    81:96:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.meta.Language,cn.com.codesec.util.IRFile) -> <init>
    99:112:void <init>() -> <init>
    115:116:void setIndexInMasterList(int) -> b
    119:119:int getIndexInMasterList() -> h
    123:124:void setFunctionModelCU() -> l
    127:127:boolean isFunctionModelCU() -> m
    131:134:cn.com.codesec.scan.ir.nodes.IRVarDecl getDummy() -> p
    139:139:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    143:144:void addTypeDefs(cn.com.codesec.util.fset.FSet) -> a
    147:147:cn.com.codesec.util.fset.FSet getTypeDefs() -> r
    151:153:void addDecls(java.util.List) -> a
    156:156:java.util.List getChildrenCandidates() -> s
    160:214:void finalizeChildren() -> t
    217:246:void removeDuplicates() -> Q
    250:254:cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    259:260:void putStorageDecl(java.lang.String,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    263:263:cn.com.codesec.util.IRFile getSourceFile() -> u
    268:268:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    272:273:void setSourceFile(cn.com.codesec.util.IRFile) -> a
    278:278:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    283:283:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    287:296:java.lang.Object acceptFunctionDefinitions(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> b
    300:300:cn.com.codesec.scan.meta.Language getSourceLanguage() -> w
    304:305:void setSourceLanguage(cn.com.codesec.scan.meta.Language) -> a
    308:309:void setSourceLanguageVersion(java.lang.String) -> b
    314:314:cn.com.codesec.scan.ir.nodes.IRFunDecl getEnclosingFunDecl() -> y
    318:342:void completeAndSoftenNSTRefs() -> R
    345:348:void clearNSTRefs() -> z
    351:354:cn.com.codesec.scan.ir.nodes.IRFunDecl getFileScopeInit() -> A
    358:413:void complete() -> B
    416:433:void addFunDeclChild(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    436:436:boolean isComplete() -> C
    440:461:void addGeneratedFunDecl(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRGeneratedFunDecl) -> a
    465:465:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    470:470:int getChildCount() -> n
    475:478:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    483:493:void childrenAccept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> c
    496:496:cn.com.codesec.util.fset.FList getCUChildren() -> D
    500:500:cn.com.codesec.util.fset.FList getFunDeclRefs() -> E
    505:505:java.lang.String getIIDString() -> H
    509:532:void printMemoryInfo(java.lang.StringBuilder) -> a
    536:536:cn.com.codesec.scan.ir.nodes.IRCompilationUnit get() -> I
    541:541:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getNode() -> J
    546:546:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getNodeIfAvailable() -> K
    550:550:cn.com.codesec.util.fset.FList getChildren() -> L
    555:557:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    561:562:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    575:614:void fixUpSourceAnnotations(cn.com.codesec.scan.ir.nodes.IRDecl) -> b
    617:617:java.util.Set convertSourceAnnotations(cn.com.codesec.scan.ir.nodes.IRNode) -> b_
    621:651:java.util.Set convertSourceAnnotations(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    655:671:void postFixUpAnnotationsPass1() -> M
    674:696:void postFixUpAnnotationsPass2() -> N
    699:714:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.String) -> a
    719:719:cn.com.codesec.scan.ir.util.memory.IRRef getRef() -> F
    724:724:void dirty() -> G
    728:739:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    817:819:void initNodeData() -> b
    823:823:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    1:1:java.lang.Object clone() -> clone
    1:1:java.lang.Object get() -> get
    1:1:int compareTo(java.lang.Object) -> compareTo
    574:574:void access$5(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
cn.com.codesec.scan.ir.nodes.IRCompilationUnit$GlobalVarChild -> cn.com.codesec.Kh:
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> b
    boolean $assertionsDisabled -> a
    746:746:void <clinit>() -> <clinit>
    750:754:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    758:758:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    763:763:cn.com.codesec.scan.ir.nodes.IRVarDecl get() -> b
    768:768:cn.com.codesec.scan.ir.nodes.IRVarDecl getNode() -> c
    773:773:cn.com.codesec.scan.ir.nodes.IRVarDecl getNodeIfAvailable() -> d
    778:778:java.lang.String getIIDString() -> H
    783:783:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    788:788:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    793:793:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> e
    798:809:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
cn.com.codesec.scan.ir.nodes.IRCompilationUnit$VarDeclFixUpVisitor -> cn.com.codesec.Ki:
    564:564:void <init>() -> <init>
    568:570:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    564:564:void <init>(cn.com.codesec.scan.ir.nodes.IRCompilationUnit$VarDeclFixUpVisitor) -> <init>
cn.com.codesec.scan.ir.nodes.IRConditional -> cn.com.codesec.Kj:
    boolean $assertionsDisabled -> a
    9:9:void <clinit>() -> <clinit>
    12:13:void <init>() -> <init>
    16:17:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> h
    cn.com.codesec.scan.analyzer.preproc.BasicBlock getTrueBlock() -> l
    24:47:cn.com.codesec.scan.analyzer.preproc.BasicBlock getFalseBlock() -> m
    boolean isConditionShortCircuit() -> p
    56:56:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
cn.com.codesec.scan.ir.nodes.IRDecl -> cn.com.codesec.Kk:
    14:15:void <init>() -> <init>
    18:19:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    java.lang.String getSymbol() -> B
    cn.com.codesec.scan.meta.Symbol getMetaData() -> D
    26:26:java.util.List getTypeParameters() -> w
cn.com.codesec.scan.ir.nodes.IRDeclStatement -> cn.com.codesec.Kl:
    cn.com.codesec.scan.ir.nodes.data.IRDeclData nodeData -> a
    13:14:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRDeclData) -> a
    17:18:void <init>() -> <init>
    21:23:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    26:28:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    32:33:void initNodeData() -> b
    37:37:cn.com.codesec.scan.ir.nodes.data.IRDeclData getNodeData() -> h
    42:44:cn.com.codesec.scan.ir.nodes.IRDeclStatement clone() -> l
    48:51:void setDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    54:54:cn.com.codesec.scan.ir.nodes.IRVarDecl getDecl() -> m
    59:59:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    64:68:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    74:74:int getChildCount() -> n
    79:82:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    87:92:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRDereference -> cn.com.codesec.Km:
    cn.com.codesec.scan.ir.nodes.data.IRDereferenceData nodeData -> b
    boolean $assertionsDisabled -> a
    14:14:void <clinit>() -> <clinit>
    17:18:void <init>() -> <init>
    23:24:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRDereferenceData) -> a
    27:28:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    31:33:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    37:38:void initNodeData() -> b
    42:42:cn.com.codesec.scan.ir.nodes.data.IRDereferenceData getNodeData() -> h
    47:50:cn.com.codesec.scan.ir.nodes.IRDereference clone() -> l
    55:55:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    60:60:java.lang.String getDetailString() -> r
    64:64:cn.com.codesec.scan.ir.nodes.IRLocation getBase() -> v
    69:69:cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    75:94:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    100:104:org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    109:109:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    113:119:void setBase(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    123:127:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    133:133:int getChildCount() -> n
    138:141:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    146:151:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    155:157:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    161:161:boolean isStructuralSkipDeref() -> C_
    166:166:cn.com.codesec.scan.ir.nodes.IRNode getStructuralBase(boolean) -> b
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRExpression -> cn.com.codesec.Kn:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_TYPECAST -> a
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_GEN_TYPECAST -> b
    163:165:void <clinit>() -> <clinit>
    22:23:void <init>() -> <init>
    30:31:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    35:35:cn.com.codesec.scan.metadata.Type getTypeAsWritten() -> A
    cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    43:43:boolean hasTypeCast() -> B
    48:48:cn.com.codesec.scan.ir.nodes.IRType getTypeCast() -> C
    52:53:void removeTypeCast() -> D
    56:58:void setTypeCast(cn.com.codesec.scan.ir.nodes.IRType) -> a
    61:61:boolean hasGeneratedTypeCast() -> E
    65:65:cn.com.codesec.scan.ir.nodes.IRType getGeneratedTypeCast() -> H
    69:70:void removeGeneratedTypeCast() -> I
    73:75:void setGeneratedTypeCast(cn.com.codesec.scan.ir.nodes.IRType) -> b
    cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    82:92:void cloneAnnotations(cn.com.codesec.scan.ir.nodes.IRNode) -> c
    95:95:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    99:99:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue(cn.com.codesec.scan.model.AccessPath) -> a
    103:107:java.util.Set getConstantValues(boolean) -> c
    111:115:java.util.Set getConstantValues(cn.com.codesec.scan.model.AccessPath,boolean) -> a
    119:139:java.util.Set getReachingTypes(boolean) -> d
    143:147:java.util.Set getReachingTypeRanges(boolean) -> e
    151:151:java.util.Set getConstantValues() -> K
    155:155:boolean isInstanceofOp() -> L
    159:159:cn.com.codesec.scan.metadata.Type getInstanceofType() -> M
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRFieldAccess -> cn.com.codesec.Ko:
    cn.com.codesec.scan.util.collections.LockingSet ALREADY_WARNED_FIELDS -> a
    237:238:void <clinit>() -> <clinit>
    28:29:void <init>() -> <init>
    34:39:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    42:46:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType,java.lang.String) -> <init>
    49:50:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    cn.com.codesec.scan.ir.nodes.data.IRFieldAccessData getNodeData() -> h
    cn.com.codesec.scan.ir.nodes.IRFieldAccess clone() -> l
    cn.com.codesec.scan.ir.nodes.IRLocation getInstance() -> v
    cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    64:64:cn.com.codesec.scan.ir.nodes.IRType getEnclosingType() -> N
    69:69:java.lang.String getName() -> O
    73:77:java.lang.String getAltName() -> P
    81:82:java.lang.String getAltNameOrSimpleName() -> Q
    87:98:cn.com.codesec.scan.metadata.FieldMeta resolveFieldAccess(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    103:103:cn.com.codesec.scan.metadata.FieldMeta resolveFieldAccess(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> a
    108:118:cn.com.codesec.scan.metadata.FieldMeta getFieldResolution() -> R
    123:123:cn.com.codesec.scan.metadata.FieldMeta getFieldResolutionOrNull() -> S
    129:141:org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    147:150:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    155:172:java.lang.String getDetailString() -> r
    178:178:java.lang.String toString() -> toString
    183:183:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    188:192:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    int getChildCount() -> n
    201:204:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    209:212:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    216:219:cn.com.codesec.scan.ir.nodes.IRFieldAccess create(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRType,java.lang.String) -> a
    224:224:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    228:229:boolean isEnvironmentAccess() -> T
    233:233:cn.com.codesec.scan.ir.nodes.IRLocation getDereferencedInstance() -> U
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRFieldDecl -> cn.com.codesec.Kp:
    java.lang.String name -> a
    java.lang.String altName -> b
    cn.com.codesec.scan.ir.nodes.IRType type -> c
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> d
    cn.com.codesec.scan.ir.nodes.IRLiteralExp constantValue -> e
    cn.com.codesec.scan.metadata.FieldMeta fieldMeta -> g
    cn.com.codesec.scan.ir.nodes.data.IRNodeData nodeData -> h
    22:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    30:30:cn.com.codesec.scan.ir.nodes.IRFieldDecl clone() -> h
    34:34:cn.com.codesec.scan.ir.nodes.IRType getNstType() -> l
    38:38:java.lang.String getName() -> m
    42:44:void setName(java.lang.String) -> b
    47:47:java.lang.String getAltName() -> p
    51:53:void setAltName(java.lang.String) -> c
    57:57:java.lang.String getSymbol() -> B
    61:63:void setNstType(cn.com.codesec.scan.ir.nodes.IRType) -> a
    67:67:java.lang.String toString() -> toString
    72:74:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    77:79:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    83:85:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    89:89:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    94:94:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    99:103:cn.com.codesec.scan.meta.Symbol getMetaData() -> D
    107:109:void setConstantValue(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    112:112:cn.com.codesec.scan.ir.nodes.IRLiteralExp getConstantValue() -> r
    117:121:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    127:127:int getChildCount() -> n
    132:135:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    140:140:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    145:145:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    152:154:void initNodeData() -> b
    158:158:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRFunCall -> cn.com.codesec.Kq:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_LIST_SPREAD -> a
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_MAP_SPREAD -> b
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_ARG_NAME -> c
    java.util.Set alreadyWarnedFor -> g
    cn.com.codesec.scan.ir.nodes.data.IRFunCallData nodeData -> d
    boolean $assertionsDisabled -> e
    34:611:void <clinit>() -> <clinit>
    37:38:void <init>() -> <init>
    51:52:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRFunCallData) -> a
    55:58:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    61:65:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    68:73:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation[]) -> <init>
    77:81:cn.com.codesec.scan.ir.nodes.IRFunCall clone() -> l
    85:101:void cloneOtherStuff(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    106:113:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    117:117:cn.com.codesec.scan.ir.nodes.IRExpression getPointer() -> s
    121:122:void setFunResolutions(java.util.List) -> b
    125:132:void setArgs(java.util.List) -> c
    135:143:void setArgs(cn.com.codesec.scan.ir.nodes.IRLocation[]) -> a
    146:152:void insertArg(int,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    156:160:void setParent(cn.com.codesec.scan.ir.nodes.IRNode) -> d
    163:163:java.util.List getTypeArguments() -> u
    167:174:void setTypeArguments(java.util.List) -> d
    178:182:java.lang.String getName() -> O
    186:190:java.lang.String getAltName() -> v
    194:195:java.lang.String getAltNameOrSimpleName() -> w
    199:199:boolean isNamedCall() -> N
    203:203:java.lang.String getUniqueName() -> P
    207:209:void setUniqueName(java.lang.String) -> b
    212:212:java.util.List getArglist() -> Q
    216:216:int getArgCount() -> R
    220:220:cn.com.codesec.scan.ir.nodes.IRLocation getArg(int) -> b
    224:227:void setArg(int,cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    230:234:boolean isVirtual() -> S
    238:238:boolean isVirtualReally() -> T
    242:244:void setVirtual(boolean) -> b
    247:247:boolean isDirect() -> U
    251:251:java.util.List getCachedTargets() -> h
    255:266:void setCachedTargets(java.util.List) -> a
    269:269:java.util.List getAltCalls() -> V
    273:282:void addAltCall(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall) -> a
    286:298:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    301:304:void replaceArg(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    307:319:void replaceAltCall(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall) -> a
    322:328:void resolve(cn.com.codesec.scan.metadata.FunMeta) -> a
    331:331:boolean isResolved() -> W
    336:350:cn.com.codesec.scan.metadata.FunMeta getPrimaryFunResolution() -> X
    354:389:void adjustForvecDeleteOnLocals() -> m
    393:420:java.util.List getFunResolutions() -> Y
    424:424:java.util.List getFunResolutionsOrEmpty() -> Z
    428:428:java.util.List getCachedFunResolutions() -> aa
    432:452:cn.com.codesec.scan.metadata.FunMeta lookUpFunctionInSuperClass(cn.com.codesec.scan.meta.Language) -> a
    456:474:cn.com.codesec.scan.metadata.FunMeta findMatchingFunction(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,java.lang.String,boolean,cn.com.codesec.scan.meta.Language) -> a
    479:479:java.lang.String toString() -> toString
    484:484:boolean isInstanceofOp() -> L
    489:492:cn.com.codesec.scan.metadata.Type getInstanceofType() -> M
    498:498:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    502:502:void setPointer(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    507:511:int getChildCount() -> n
    516:523:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    528:536:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    540:553:cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall getAltCall(int) -> g
    557:569:int getAltCallIndex(cn.com.codesec.scan.ir.nodes.IRNode) -> e
    573:573:int getArgIndex(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    577:578:void writeState(java.io.ObjectOutputStream) -> a
    581:582:void readState(java.io.ObjectInputStream) -> a
    586:586:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    590:592:void setArgNames(java.util.List) -> e
    595:595:java.util.List getArgNames() -> ab
    599:603:java.lang.String getArgName(int) -> c
    615:616:void initNodeData() -> b
    620:620:cn.com.codesec.scan.ir.nodes.data.IRFunCallData getNodeData() -> r
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRFunDecl -> cn.com.codesec.Kr:
    java.util.concurrent.atomic.AtomicInteger serializeIDCounter -> c
    boolean compress -> d
    cn.com.codesec.scan.ir.nodes.data.decl.IRFunDeclData nodeData -> a
    cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph cfg -> e
    cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver funPtrResolver -> g
    cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver reachingTypeResolver -> h
    cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver stringFragmentResolver -> i
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver cvr -> j
    cn.com.codesec.scan.analyzer.constants.ConstantValueResolver ignoreAcrossMethodValueCVR -> k
    cn.com.codesec.scan.analyzer.util.NstSpliceSsi genericSsi -> l
    boolean inSsiGen -> m
    boolean isPreprocessed -> n
    boolean ssaComplete -> o
    boolean isOldNST -> p
    java.io.File serializeDir -> q
    int wellFormedTestCount -> r
    boolean isAllowDirty -> s
    boolean change -> t
    boolean $assertionsDisabled -> b
    60:938:void <clinit>() -> <clinit>
    63:64:void setNodeData(cn.com.codesec.scan.ir.nodes.data.decl.IRFunDeclData) -> a
    67:68:void <init>() -> <init>
    93:104:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.meta.Language) -> <init>
    108:108:cn.com.codesec.scan.ir.nodes.IRFunDecl clone() -> h
    112:112:cn.com.codesec.scan.ir.nodes.IRType getReturnType() -> l
    116:116:java.lang.String getName() -> m
    120:120:java.lang.String getAltName() -> p
    124:124:java.lang.String getUniqueName() -> r
    128:130:void setUniqueName(java.lang.String) -> b
    133:135:void setNamespace(java.lang.String) -> c
    138:138:java.lang.String getNamespace() -> s
    143:143:cn.com.codesec.scan.meta.Language getLanguage() -> c
    147:148:void setOverrides(java.util.List) -> a
    151:151:java.util.List getOverrides() -> t
    155:160:void setName(java.lang.String) -> d
    163:165:void setAltName(java.lang.String) -> e
    168:180:java.lang.String getQualifiedName() -> u
    184:184:java.util.List getParamList() -> v
    188:190:void setExceptions(java.util.List) -> b
    193:193:java.util.List getExceptions() -> A
    198:198:java.lang.String getSymbol() -> B
    202:202:boolean isVarArg() -> C
    206:208:void setIsVarArg(boolean) -> a
    211:211:cn.com.codesec.scan.ir.nodes.IRBlock getBody() -> E
    215:217:void setBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    220:281:cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph getBasicBlockGraph() -> H
    285:294:void resetBasicBlockGraph() -> I
    298:298:cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    303:306:void putStorageDecl(java.lang.String,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    310:327:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    330:332:void setFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    335:335:cn.com.codesec.scan.metadata.FunMeta findFunMeta() -> J
    339:399:cn.com.codesec.scan.metadata.FunMeta findFunMeta(cn.com.codesec.scan.metadata.NameTable) -> a
    405:405:cn.com.codesec.scan.ir.nodes.IRFunDecl getEnclosingFunDecl() -> y
    410:410:java.lang.String toString() -> toString
    414:414:int getArgNum(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    418:418:cn.com.codesec.scan.ir.nodes.IRStatement getLabeledStatement(java.lang.String) -> f
    422:424:void addLabeledStatements(java.util.Map) -> a
    428:430:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    433:435:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    439:441:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    445:445:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    450:450:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    455:455:java.util.List getTypeParameters() -> w
    459:463:void setTypeParameters(java.util.List) -> c
    467:467:cn.com.codesec.scan.metadata.FunMeta getMetaData() -> K
    472:492:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    497:497:int getChildCount() -> n
    502:536:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    541:542:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    546:546:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    550:550:java.lang.String getClassName() -> L
    554:556:void setClassName(java.lang.String) -> g
    559:562:cn.com.codesec.scan.analyzer.callgraph.FunctionPointerResolver getFunctionPointerResolver(java.util.concurrent.ConcurrentMap) -> a
    566:567:void resetFunctionPointerResolver() -> M
    570:573:cn.com.codesec.scan.analyzer.callgraph.ReachingTypeResolver getReachingTypeResolver() -> N
    577:578:void resetReachingTypeResolver() -> O
    581:586:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver getIgnoreAcrossMethodValueCVR() -> P
    590:591:void resetIgnoreAcrossMethodValueCVR() -> Q
    594:599:cn.com.codesec.scan.analyzer.constants.ConstantValueResolver getConstantValueResolver() -> R
    603:604:void resetConstantValueResolver() -> S
    607:610:cn.com.codesec.scan.analyzer.constants.stringfragment.FragmentResolver getStringFragmentResolver() -> T
    614:615:void resetStringFragmentResolver() -> U
    618:630:cn.com.codesec.scan.analyzer.util.NstSpliceSsi getGenericSsi() -> V
    634:634:boolean isInSsiGen() -> W
    638:638:boolean isSsaComplete() -> X
    642:665:void buildSSA() -> Y
    668:675:void resetSsa(cn.com.codesec.scan.ir.nodes.IRNode) -> k
    678:691:void resetCallTargets() -> Z
    694:696:void noteCallTargetsSet() -> aa
    700:711:void resetSsiAndSsa() -> ab
    714:718:void resetAfterTransforms() -> ac
    721:721:boolean isTransformed() -> ad
    725:727:void setTransformed(boolean) -> b
    730:735:void setupIndices() -> ae
    742:746:void beginAllowDirty() -> af
    750:757:void endAllowDirty() -> ag
    761:769:void dirty() -> G
    773:779:void updateCache() -> aq
    782:782:boolean isOldNST() -> ah
    786:787:void setOldNST() -> ai
    791:795:cn.com.codesec.scan.ir.util.memory.FunDeclRef getRef() -> aj
    799:802:cn.com.codesec.scan.ir.util.memory.IRRef createRef(cn.com.codesec.scan.ir.nodes.IRNode) -> e
    806:806:cn.com.codesec.scan.ir.nodes.IRNode getNodeById(int) -> b
    810:810:java.lang.Integer getSerializeID() -> ak
    814:819:void serialize() -> al
    824:843:cn.com.codesec.scan.ir.nodes.IRFunDecl deserialize(java.lang.Integer,java.lang.String) -> a
    847:849:void writeState(java.io.ObjectOutputStream) -> a
    852:854:void readState(java.io.ObjectInputStream) -> a
    857:857:boolean isLibrary() -> am
    865:920:java.lang.String isWellFormed() -> an
    924:924:boolean isCompress() -> ao
    928:929:void setCompress(boolean) -> c
    975:976:void initNodeData() -> b
    980:980:cn.com.codesec.scan.ir.nodes.data.decl.IRFunDeclData getNodeData() -> ap
    1:1:cn.com.codesec.scan.ir.util.memory.IRRef getRef() -> F
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.meta.Symbol getMetaData() -> D
cn.com.codesec.scan.ir.nodes.IRFunDecl$1 -> cn.com.codesec.Ks:
    cn.com.codesec.scan.ir.nodes.IRFunDecl this$0 -> a
    1:286:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    289:290:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
cn.com.codesec.scan.ir.nodes.IRFunDecl$2 -> cn.com.codesec.Kt:
    cn.com.codesec.scan.ir.nodes.IRFunDecl this$0 -> a
    1:681:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    684:685:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.ir.nodes.IRFunDecl$3 -> cn.com.codesec.Ku:
    cn.com.codesec.scan.ir.nodes.IRFunDecl this$0 -> a
    java.util.List val$defects -> b
    cn.com.codesec.scan.ir.nodes.IRNode val$root -> c
    1:867:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.util.List,cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    871:886:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    891:891:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    896:899:java.lang.Object visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    1:1:java.lang.Object visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> b
cn.com.codesec.scan.ir.nodes.IRFunDecl$IndexSettingVisitor -> cn.com.codesec.Kv:
    boolean dirty -> c
    cn.com.codesec.scan.ir.nodes.IRFunDecl this$0 -> a
    boolean $assertionsDisabled -> b
    940:940:void <clinit>() -> <clinit>
    944:946:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    950:964:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    969:969:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    944:944:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.ir.nodes.IRFunDecl$IndexSettingVisitor) -> <init>
cn.com.codesec.scan.ir.nodes.IRFunIdentifier -> cn.com.codesec.Kw:
    cn.com.codesec.scan.ir.nodes.data.IRFunIdentifierData nodeData -> a
    18:19:void <init>() -> <init>
    24:25:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRFunIdentifierData) -> a
    28:29:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    33:34:void initNodeData() -> b
    38:38:cn.com.codesec.scan.ir.nodes.data.IRFunIdentifierData getNodeData() -> h
    43:48:cn.com.codesec.scan.ir.nodes.IRFunIdentifier clone() -> l
    54:61:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    66:66:java.lang.String getName() -> O
    70:72:void setName(java.lang.String) -> b
    75:81:java.util.List getFunResolutions() -> m
    86:86:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    90:93:cn.com.codesec.scan.metadata.FunMeta getPrimaryFunResolution() -> r
    98:98:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    103:103:int getChildCount() -> n
    108:108:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    113:113:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    118:118:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall -> cn.com.codesec.Kx:
    19:20:void <init>() -> <init>
    23:24:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    28:32:cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall clone() -> m
    38:50:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    55:58:void setPointer(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    63:66:cn.com.codesec.scan.metadata.FunMeta getPrimaryFunResolution() -> X
    71:99:java.lang.String getName() -> O
    104:104:cn.com.codesec.scan.ir.nodes.IRExpression getPointer() -> s
    109:112:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    117:124:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    127:128:boolean hasImplicitThisArg() -> ac
    132:132:boolean hasExplicitThisArg() -> ad
    136:136:boolean hasImplicitGlobalsArg() -> ae
    141:141:int getChildCount() -> n
    146:149:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    154:154:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    159:160:void initNodeData() -> b
    164:164:cn.com.codesec.scan.ir.nodes.data.IRFunctionPointerCallData getNodeData() -> af
    168:169:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRFunctionPointerCallData) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRFunCall clone() -> l
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.data.IRFunCallData getNodeData() -> r
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRGeneratedFunDecl -> cn.com.codesec.Ky:
    11:12:void <init>() -> <init>
    15:16:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.meta.Language) -> <init>
    20:20:cn.com.codesec.scan.ir.nodes.IRGeneratedFunDecl clone() -> aq
    25:25:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    30:31:void initNodeData() -> b
    35:35:cn.com.codesec.scan.ir.nodes.data.decl.IRGeneratedFunDeclData getNodeData() -> ar
    39:40:void setNodeData(cn.com.codesec.scan.ir.nodes.data.decl.IRGeneratedFunDeclData) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRFunDecl clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.data.decl.IRFunDeclData getNodeData() -> ap
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRGoto -> cn.com.codesec.Kz:
    java.lang.String CAUGHT -> a
    cn.com.codesec.scan.ir.nodes.data.IRGotoData nodeData -> g
    boolean $assertionsDisabled -> b
    8:14:void <clinit>() -> <clinit>
    11:12:void <init>() -> <init>
    19:20:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRGotoData) -> a
    23:24:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    28:29:void initNodeData() -> b
    33:33:cn.com.codesec.scan.ir.nodes.data.IRGotoData getNodeData() -> h
    38:41:cn.com.codesec.scan.ir.nodes.IRGoto clone() -> l
    45:63:cn.com.codesec.scan.ir.nodes.IRStatement getTarget() -> m
    67:73:cn.com.codesec.scan.ir.nodes.IRStatement getTarget(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.String) -> a
    77:84:boolean checkPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    88:94:java.lang.Boolean scJumpSide() -> t
    98:104:cn.com.codesec.scan.ir.nodes.IRStatement getSCSuccessTarget(cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    108:122:cn.com.codesec.scan.ir.nodes.IRStatement getSCFailTarget(cn.com.codesec.scan.ir.nodes.IRStatement) -> c
    128:133:cn.com.codesec.scan.ir.nodes.IRStatement nextStatement(cn.com.codesec.scan.ir.nodes.IRStatement) -> d
    137:137:java.lang.String getTargetLabel() -> p
    141:143:void setTargetLabel(java.lang.String) -> b
    146:149:void setTarget(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    153:153:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    157:157:boolean isToolGenerated() -> x_
    161:162:boolean isSwitchDefault() -> s
    167:167:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    172:172:int getChildCount() -> n
    177:177:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    182:183:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    187:187:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRIfThen -> cn.com.codesec.KA:
    cn.com.codesec.scan.ir.nodes.data.IRIfThenData nodeData -> b
    15:16:void <init>() -> <init>
    21:22:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRIfThenData) -> a
    25:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    30:31:void initNodeData() -> b
    35:35:cn.com.codesec.scan.ir.nodes.data.IRIfThenData getNodeData() -> s
    39:39:boolean isNative() -> t
    43:44:void setNative(boolean) -> a
    48:53:cn.com.codesec.scan.ir.nodes.IRIfThen clone() -> u
    57:57:cn.com.codesec.scan.ir.nodes.IRBlock getIfBody() -> w
    61:64:void setIfBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    67:67:cn.com.codesec.scan.ir.nodes.IRBlock getElseBody() -> A
    72:72:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> h
    76:79:void setPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    83:92:cn.com.codesec.scan.analyzer.preproc.BasicBlock getTrueBlock() -> l
    97:98:boolean isConditionShortCircuit() -> p
    103:109:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    115:115:int getChildCount() -> n
    120:126:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    131:141:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    144:157:boolean isThrowIf() -> B
    162:162:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRIfThenElse -> cn.com.codesec.KB:
    11:12:void <init>() -> <init>
    15:16:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void initNodeData() -> b
    24:25:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRIfThenElseData) -> a
    29:29:cn.com.codesec.scan.ir.nodes.data.IRIfThenElseData getNodeData() -> C
    34:40:cn.com.codesec.scan.ir.nodes.IRIfThenElse clone() -> D
    44:47:void setElseBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
    51:51:cn.com.codesec.scan.ir.nodes.IRBlock getElseBody() -> A
    56:56:int getChildCount() -> n
    61:64:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    69:76:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    80:83:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    88:88:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    92:98:boolean isInAutoToStringCallIfElse() -> E
    1:1:cn.com.codesec.scan.ir.nodes.data.IRIfThenData getNodeData() -> s
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRIfThen clone() -> u
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
cn.com.codesec.scan.ir.nodes.IRIndexedAccess -> cn.com.codesec.KC:
    cn.com.codesec.scan.ir.nodes.data.IRIndexedAccessData nodeData -> a
    19:20:void <init>() -> <init>
    25:26:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRIndexedAccessData) -> a
    29:30:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    34:35:void initNodeData() -> b
    39:39:cn.com.codesec.scan.ir.nodes.data.IRArrayAccessData getNodeData() -> u_
    44:47:cn.com.codesec.scan.ir.nodes.IRIndexedAccess clone() -> N
    52:52:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    57:57:java.lang.String getDetailString() -> r
    63:75:org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    79:80:void setToolGenerated() -> P
    83:85:void setToolGenerated(boolean) -> f
    88:88:boolean isToolGenerated() -> Q
    1:1:cn.com.codesec.scan.ir.nodes.IRArrayAccess clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall -> cn.com.codesec.KD:
    21:22:void <init>() -> <init>
    25:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    29:34:java.lang.String computeSimpleName() -> ah
    39:39:java.lang.String getName() -> O
    44:44:cn.com.codesec.scan.metadata.FunMeta getPrimaryFunResolution() -> X
    50:50:java.util.List getFunResolutions() -> Y
    55:59:cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall clone() -> m
    63:63:boolean hasImplicitOuterThisArg() -> ac
    67:73:boolean hasImplicitThisArg() -> ad
    77:77:boolean hasExplicitThisArg() -> ae
    81:81:boolean hasImplicitGlobalsArg() -> af
    86:86:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    91:92:void initNodeData() -> b
    96:96:cn.com.codesec.scan.ir.nodes.data.IRLateBoundFunCallData getNodeData() -> ag
    100:101:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRLateBoundFunCallData) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRFunCall clone() -> l
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.data.IRFunCallData getNodeData() -> r
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRLiteralExp -> cn.com.codesec.KE:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey STRING_LENGTH -> a
    155:156:void <clinit>() -> <clinit>
    30:31:void <init>() -> <init>
    cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    42:43:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    46:46:cn.com.codesec.scan.ir.nodes.IRLiteralExp$String create(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String) -> a
    50:50:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Char create(cn.com.codesec.parse.ir.SourceInfoProducer,char) -> a
    54:54:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Boolean create(cn.com.codesec.parse.ir.SourceInfoProducer,boolean) -> a
    58:58:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Int create(cn.com.codesec.parse.ir.SourceInfoProducer,int) -> a
    62:62:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Long create(cn.com.codesec.parse.ir.SourceInfoProducer,long) -> a
    66:66:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Float create(cn.com.codesec.parse.ir.SourceInfoProducer,float) -> a
    70:70:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Double create(cn.com.codesec.parse.ir.SourceInfoProducer,double) -> a
    74:74:cn.com.codesec.scan.ir.nodes.IRLiteralExp$ClassLiteral create(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType) -> a
    78:78:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Null create(cn.com.codesec.parse.ir.SourceInfoProducer) -> a
    java.lang.String literalString() -> l
    85:85:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    91:91:java.lang.String getStringValue() -> r
    95:95:char getCharValue() -> s
    99:99:int getIntValue() -> t
    103:103:long getLongValue() -> u
    107:107:float getFloatValue() -> v
    111:111:double getDoubleValue() -> w
    115:115:boolean getBooleanValue() -> N
    119:119:cn.com.codesec.scan.ir.nodes.IRType getIRType() -> O
    123:123:cn.com.codesec.scan.metadata.Type getTypeValue() -> P
    127:127:java.lang.Number getNumber() -> Q
    131:131:void negate() -> R
    136:136:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    141:141:int getChildCount() -> n
    146:146:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    151:151:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    41:41:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Boolean -> cn.com.codesec.KF:
    cn.com.codesec.scan.ir.nodes.data.literal.IRBooleanData nodeData -> b
    334:335:void <init>() -> <init>
    340:341:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRBooleanData) -> a
    344:346:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,boolean) -> <init>
    350:351:void initNodeData() -> b
    355:355:cn.com.codesec.scan.ir.nodes.data.literal.IRBooleanData getNodeData() -> S
    360:360:java.lang.String literalString() -> l
    366:369:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    374:374:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    379:379:java.lang.Number getNumber() -> Q
    384:384:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    389:389:boolean getBooleanValue() -> N
    394:394:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Boolean clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    343:343:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,boolean,cn.com.codesec.scan.ir.nodes.IRLiteralExp$Boolean) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Char -> cn.com.codesec.KG:
    cn.com.codesec.scan.ir.nodes.data.literal.IRCharData nodeData -> b
    265:266:void <init>() -> <init>
    271:272:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRCharData) -> a
    275:277:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,char) -> <init>
    281:282:void initNodeData() -> b
    286:286:cn.com.codesec.scan.ir.nodes.data.literal.IRCharData getNodeData() -> S
    291:291:java.lang.String literalString() -> l
    297:300:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    305:305:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    310:310:java.lang.Number getNumber() -> Q
    315:315:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    320:320:char getCharValue() -> s
    325:325:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Char clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    274:274:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,char,cn.com.codesec.scan.ir.nodes.IRLiteralExp$Char) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$ClassLiteral -> cn.com.codesec.KH:
    cn.com.codesec.scan.ir.nodes.data.literal.IRClassLiteralData nodeData -> b
    752:753:void <init>() -> <init>
    758:759:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRClassLiteralData) -> a
    762:764:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    768:769:void initNodeData() -> b
    773:773:cn.com.codesec.scan.ir.nodes.data.literal.IRClassLiteralData getNodeData() -> S
    778:778:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    783:783:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    789:792:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    797:797:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    802:802:java.lang.String literalString() -> l
    807:807:cn.com.codesec.scan.ir.nodes.IRType getIRType() -> O
    812:812:cn.com.codesec.scan.metadata.Type getTypeValue() -> P
    817:821:java.lang.String getStringValue() -> r
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    761:761:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType,cn.com.codesec.scan.ir.nodes.IRLiteralExp$ClassLiteral) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Double -> cn.com.codesec.KI:
    cn.com.codesec.scan.ir.nodes.data.literal.IRDoubleData nodeData -> b
    622:623:void <init>() -> <init>
    628:629:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRDoubleData) -> a
    632:634:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,double) -> <init>
    638:639:void initNodeData() -> b
    643:643:cn.com.codesec.scan.ir.nodes.data.literal.IRDoubleData getNodeData() -> S
    648:648:java.lang.String literalString() -> l
    654:657:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    662:662:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    667:667:java.lang.Number getNumber() -> Q
    672:672:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    677:678:void negate() -> R
    682:682:double getDoubleValue() -> w
    687:687:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Double clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    631:631:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,double,cn.com.codesec.scan.ir.nodes.IRLiteralExp$Double) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Float -> cn.com.codesec.KJ:
    cn.com.codesec.scan.ir.nodes.data.literal.IRFloatData nodeData -> b
    549:550:void <init>() -> <init>
    555:556:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRFloatData) -> a
    559:561:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,float) -> <init>
    565:566:void initNodeData() -> b
    570:570:cn.com.codesec.scan.ir.nodes.data.literal.IRFloatData getNodeData() -> S
    575:575:java.lang.String literalString() -> l
    581:584:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    589:589:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    594:594:java.lang.Number getNumber() -> Q
    599:599:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    604:605:void negate() -> R
    609:609:float getFloatValue() -> v
    614:614:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Float clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    558:558:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,float,cn.com.codesec.scan.ir.nodes.IRLiteralExp$Float) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Int -> cn.com.codesec.KK:
    cn.com.codesec.scan.ir.nodes.data.literal.IRIntData nodeData -> b
    403:404:void <init>() -> <init>
    409:410:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRIntData) -> a
    413:415:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,int) -> <init>
    419:420:void initNodeData() -> b
    424:424:cn.com.codesec.scan.ir.nodes.data.literal.IRIntData getNodeData() -> S
    429:429:java.lang.String literalString() -> l
    435:438:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    443:443:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    448:448:java.lang.Number getNumber() -> Q
    453:453:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    458:459:void negate() -> R
    463:463:int getIntValue() -> t
    468:468:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Int clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Long -> cn.com.codesec.KL:
    cn.com.codesec.scan.ir.nodes.data.literal.IRLongData nodeData -> b
    476:477:void <init>() -> <init>
    482:483:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRLongData) -> a
    486:488:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,long) -> <init>
    492:493:void initNodeData() -> b
    497:497:cn.com.codesec.scan.ir.nodes.data.literal.IRLongData getNodeData() -> S
    502:502:java.lang.String literalString() -> l
    508:511:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    516:516:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    521:521:java.lang.Number getNumber() -> Q
    526:526:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    531:532:void negate() -> R
    536:536:long getLongValue() -> u
    541:541:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Long clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Null -> cn.com.codesec.KM:
    cn.com.codesec.scan.ir.nodes.data.literal.IRNullData nodeData -> b
    695:696:void <init>() -> <init>
    701:702:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRNullData) -> a
    705:706:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    710:711:void initNodeData() -> b
    715:715:cn.com.codesec.scan.ir.nodes.data.literal.IRNullData getNodeData() -> S
    720:720:java.lang.String literalString() -> l
    725:725:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    731:734:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    739:739:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    744:744:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Null clone() -> T
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    704:704:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLiteralExp$Null) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$String -> cn.com.codesec.KN:
    cn.com.codesec.scan.ir.nodes.data.literal.IRStringData nodeData -> b
    174:175:void <init>() -> <init>
    180:181:void setNodeData(cn.com.codesec.scan.ir.nodes.data.literal.IRStringData) -> a
    184:186:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String) -> <init>
    190:191:void initNodeData() -> b
    195:195:cn.com.codesec.scan.ir.nodes.data.literal.IRStringData getNodeData() -> S
    200:200:java.lang.String literalString() -> l
    206:209:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    214:214:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type getType() -> m
    219:219:java.lang.String getStringValue() -> r
    224:224:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    229:231:cn.com.codesec.scan.ir.nodes.IRLiteralExp$String clone() -> T
    235:236:int getStringLength() -> U
    240:253:int getCStrlen() -> V
    257:257:int getStringStorageInBytes() -> W
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    183:183:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String,cn.com.codesec.scan.ir.nodes.IRLiteralExp$String) -> <init>
cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type -> cn.com.codesec.KO:
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type STRING -> a
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type CHAR -> b
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type BOOLEAN -> c
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type INT -> d
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type LONG -> e
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type FLOAT -> f
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type DOUBLE -> g
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type NULL -> h
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type CLASS -> i
    cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type[] ENUM$VALUES -> j
    158:168:void <clinit>() -> <clinit>
    158:158:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type[] values() -> values
    1:1:cn.com.codesec.scan.ir.nodes.IRLiteralExp$Type valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.ir.nodes.IRLocation -> cn.com.codesec.KP:
    33:34:void <init>() -> <init>
    37:38:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    42:43:cn.com.codesec.scan.ir.nodes.IRVarAccess getVarAccess() -> V
    47:47:cn.com.codesec.scan.ir.nodes.IRFieldAccess getFieldAccess() -> W
    51:51:cn.com.codesec.scan.ir.nodes.IRArrayAccess getArrayAccess() -> X
    55:55:cn.com.codesec.scan.ir.nodes.IRMapAccess getAssociativeAccess() -> Y
    59:59:cn.com.codesec.scan.ir.nodes.IRDereference getDereference() -> Z
    64:64:boolean isVarAccess() -> aa
    68:68:boolean isFieldAccess() -> ab
    72:72:boolean isArrayAccess() -> ac
    76:76:boolean isAssociativeAccess() -> ad
    80:80:boolean isDereference() -> ae
    cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    88:98:cn.com.codesec.scan.model.LocationInfo getLocationInfo() -> af
    102:106:cn.com.codesec.scan.ir.nodes.IRLocation getTransitiveBase() -> ag
    cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    java.lang.String getDetailString() -> r
    117:117:cn.com.codesec.scan.analyzer.preproc.SSAVar getSSAVar() -> ah
    122:122:java.lang.String toString() -> toString
    127:130:java.lang.String getName() -> O
    134:135:boolean isDefinedBy(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt) -> a
    139:175:java.util.List getResolvedTypes() -> ai
    179:179:cn.com.codesec.scan.metadata.Type getStructuralNstType() -> u
    183:183:cn.com.codesec.scan.ir.nodes.IRNode getStructuralBase(boolean) -> b
    187:190:cn.com.codesec.scan.ir.nodes.IRLocation dereferenceIfNeeded(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRMapAccess -> cn.com.codesec.KQ:
    cn.com.codesec.scan.ir.nodes.data.IRMapAccessData nodeData -> a
    16:17:void <init>() -> <init>
    22:23:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRMapAccessData) -> a
    26:27:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRExpression) -> <init>
    31:32:void initNodeData() -> b
    36:36:cn.com.codesec.scan.ir.nodes.data.IRMapAccessData getNodeData() -> N
    41:43:cn.com.codesec.scan.ir.nodes.IRMapAccess clone() -> P
    48:48:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    53:53:java.lang.String getDetailString() -> r
    59:71:org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    1:1:cn.com.codesec.scan.ir.nodes.IRArrayAccess clone() -> h
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:cn.com.codesec.scan.ir.nodes.data.IRArrayAccessData getNodeData() -> u_
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRNoOpStmt -> cn.com.codesec.KR:
    cn.com.codesec.scan.ir.nodes.data.IRNoOpData nodeData -> a
    10:11:void <init>() -> <init>
    16:17:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRNoOpData) -> a
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    25:26:void initNodeData() -> b
    30:30:cn.com.codesec.scan.ir.nodes.data.IRNoOpData getNodeData() -> h
    35:37:cn.com.codesec.scan.ir.nodes.IRNoOpStmt clone() -> l
    42:42:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    47:47:int getChildCount() -> n
    52:52:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    57:57:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    62:62:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRNode -> cn.com.codesec.KS:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey FROM_MACRO_KEY -> a
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey AUX_SOURCEINFO_KEY -> b
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey SOURCE_ANNOTATIONS -> c
    java.util.Set NO_SOURCE_ANNOTATIONS -> d
    java.util.Map annotationsTransient -> e
    boolean $assertionsDisabled -> f
    31:661:void <clinit>() -> <clinit>
    39:42:void <init>(cn.com.codesec.util.FilePath,int,int) -> <init>
    44:53:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    57:61:void init() -> h
    64:66:void <init>() -> <init>
    void initNodeData() -> b
    cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    74:74:cn.com.codesec.scan.ir.nodes.IRNode getParent() -> as
    78:79:void setParentOnly(cn.com.codesec.scan.ir.nodes.IRNode) -> f
    82:107:void setParent(cn.com.codesec.scan.ir.nodes.IRNode) -> d
    110:110:int getId() -> at
    115:115:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    119:123:cn.com.codesec.scan.meta.Language getLanguage() -> c
    128:133:cn.com.codesec.scan.ir.nodes.IRStatement getEnclosingStatement() -> au
    137:145:cn.com.codesec.scan.ir.nodes.IRFunCall getEnclosingCall() -> av
    149:154:cn.com.codesec.scan.ir.nodes.IRBlock getEnclosingBlock() -> aw
    159:159:cn.com.codesec.scan.ir.nodes.IRFunDecl getEnclosingFunDecl() -> y
    163:169:boolean isAncestor(cn.com.codesec.scan.ir.nodes.IRNode) -> g
    173:178:boolean isChildOf(cn.com.codesec.scan.ir.nodes.IRNode) -> h
    182:188:cn.com.codesec.scan.ir.nodes.IRDecl getTopmostDecl() -> ax
    192:197:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> ay
    201:201:cn.com.codesec.parse.ir.SourceInfo getAuxiliarySourceInfo() -> az
    205:205:boolean isSourceInfoReal() -> aA
    209:211:void setLineStart(int) -> d
    214:216:void setLineEnd(int) -> e
    219:230:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    233:239:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfoProducer) -> b
    243:244:cn.com.codesec.util.FilePath getAuxFile() -> j
    249:250:int getAuxLine() -> k
    255:255:boolean isMacroExpansion() -> i
    260:260:cn.com.codesec.util.FilePath getFile() -> g
    265:265:int getLineStart() -> a
    270:270:int getLineEnd() -> d
    275:275:int getColumnStart() -> e
    280:280:int getColumnEnd() -> f
    284:284:boolean columnIsExplicit() -> aB
    290:306:java.lang.String getPathToAncestor(cn.com.codesec.scan.ir.nodes.IRNode) -> i
    437:437:java.lang.String treeToString() -> aC
    441:441:java.lang.String treeToStringWithoutCasts() -> aD
    445:450:java.lang.String treeToString(boolean,boolean) -> a
    455:460:java.lang.String toString() -> toString
    464:470:void stAdd(cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    473:473:cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    477:477:void putStorageDecl(java.lang.String,cn.com.codesec.scan.ir.nodes.IRDecl) -> a
    480:485:cn.com.codesec.scan.ir.symbols.SymbolTable getEnclosingTable() -> aE
    489:489:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    493:500:void childrenAccept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> c
    505:513:java.io.Serializable getAnnotation(cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey) -> a
    517:525:java.lang.Object getAnnotation(cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey) -> a
    529:539:void annotate(cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey,java.io.Serializable) -> a
    542:551:void annotate(cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey,java.lang.Object) -> a
    554:560:java.io.Serializable removeAnnotation(cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey) -> b
    564:569:java.lang.Object removeAnnotation(cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey) -> b
    574:574:boolean isFromMacro() -> aF
    578:582:void setColumn(int) -> f
    cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    int getChildCount() -> n
    int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    591:591:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    598:600:void cloneAnnotations(cn.com.codesec.scan.ir.nodes.IRNode) -> c
    void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    605:606:java.util.Set getSourceAnnotations() -> aG
    610:616:void addSourceAnnotation(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    619:619:boolean isStructuralSkipDeref() -> C_
    623:633:cn.com.codesec.scan.ir.util.memory.IRRef getRef() -> F
    637:637:cn.com.codesec.scan.ir.util.memory.IRRef getRef(cn.com.codesec.scan.ir.nodes.IRNode) -> j
    641:642:cn.com.codesec.scan.ir.util.memory.IRRef getRefWithIID(cn.com.codesec.scan.ir.nodes.IRNode,boolean) -> a
    646:650:void dirty() -> G
    653:654:void postDeserialize() -> aH
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRNode$1 -> cn.com.codesec.KT:
    cn.com.codesec.scan.ir.nodes.IRNode this$0 -> a
    cn.com.codesec.scan.ir.nodes.IRFunDecl val$fd -> b
    1:86:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    89:98:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Void) -> a
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess -> cn.com.codesec.KU:
    cn.com.codesec.scan.ir.nodes.data.IRNonstaticFieldAccessData nodeData -> a
    12:13:void <init>() -> <init>
    18:19:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRNonstaticFieldAccessData) -> a
    22:25:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRType,java.lang.String) -> <init>
    28:31:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    35:36:void initNodeData() -> b
    40:40:cn.com.codesec.scan.ir.nodes.data.IRNonstaticFieldAccessData getNodeData() -> aj
    45:54:cn.com.codesec.scan.ir.nodes.IRFieldAccess clone() -> l
    59:59:cn.com.codesec.scan.ir.nodes.IRLocation getInstance() -> v
    64:64:cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    69:72:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    77:77:int getChildCount() -> n
    82:85:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    90:95:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    99:99:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:cn.com.codesec.scan.ir.nodes.data.IRFieldAccessData getNodeData() -> h
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IROpExp -> cn.com.codesec.KV:
    12:13:void <init>() -> <init>
    16:18:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.ir.IROperators) -> <init>
    cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData getNodeData() -> m
    24:24:cn.com.codesec.parse.ir.IROperators getOperator() -> s
    28:28:boolean isUnary() -> t
    32:32:cn.com.codesec.scan.ir.nodes.IRExpression getLhs() -> u
    36:36:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> l
    40:43:void setLhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    47:50:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    55:60:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    64:68:cn.com.codesec.scan.ir.nodes.IRExpression getChild(int) -> b
    74:74:java.lang.String toString() -> toString
    79:79:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
cn.com.codesec.scan.ir.nodes.IRReferenceNode -> cn.com.codesec.KW:
    cn.com.codesec.scan.meta.Symbol getDecl() -> t
    java.lang.String getName() -> O
cn.com.codesec.scan.ir.nodes.IRReturnStmt -> cn.com.codesec.KX:
    cn.com.codesec.scan.ir.nodes.data.IRReturnData nodeData -> a
    boolean $assertionsDisabled -> b
    7:7:void <clinit>() -> <clinit>
    10:11:void <init>() -> <init>
    16:17:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRReturnData) -> a
    20:21:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    25:26:void initNodeData() -> b
    30:30:cn.com.codesec.scan.ir.nodes.data.IRReturnData getNodeData() -> h
    35:37:cn.com.codesec.scan.ir.nodes.IRReturnStmt clone() -> l
    41:41:cn.com.codesec.scan.ir.nodes.IRExpression getExpression() -> m
    45:45:boolean isThrowStatement() -> p
    49:52:boolean isFinalReturn() -> s
    56:56:boolean valueReturn() -> t
    61:61:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    66:66:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    71:71:int getChildCount() -> n
    76:76:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    81:81:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRStatement -> cn.com.codesec.KY:
    java.lang.String TOOL_GENERATED -> c
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey ANN_LABEL -> d
    cn.com.codesec.scan.analyzer.preproc.BasicBlock bb -> a
    boolean $assertionsDisabled -> e
    8:79:void <clinit>() -> <clinit>
    12:13:void <init>() -> <init>
    20:22:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    29:29:java.lang.String getLabel() -> K
    33:35:void setLabel(java.lang.String) -> c
    38:39:void removeLabel() -> L
    43:46:cn.com.codesec.scan.analyzer.preproc.BasicBlock getBasicBlock() -> M
    50:57:int getIndexInBasicBlock() -> N
    61:62:void setBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    65:66:boolean isToolGenerated() -> x_
    70:74:cn.com.codesec.scan.ir.nodes.IRStatement getStatementCausingException() -> O
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess -> cn.com.codesec.KZ:
    cn.com.codesec.scan.ir.nodes.data.IRStaticFieldAccessData nodeData -> a
    15:16:void <init>() -> <init>
    21:22:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRStaticFieldAccessData) -> a
    25:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType,java.lang.String) -> <init>
    29:30:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    34:35:void initNodeData() -> b
    39:39:cn.com.codesec.scan.ir.nodes.data.IRStaticFieldAccessData getNodeData() -> aj
    44:44:int getChildCount() -> n
    49:49:cn.com.codesec.scan.ir.nodes.IRLocation getInstance() -> v
    54:54:cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    59:68:cn.com.codesec.scan.ir.nodes.IRFieldAccess clone() -> l
    73:77:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> J
    82:82:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    87:87:java.lang.String toString() -> toString
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:cn.com.codesec.scan.ir.nodes.data.IRFieldAccessData getNodeData() -> h
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRThrowStmt -> cn.com.codesec.La:
    11:12:void <init>() -> <init>
    15:16:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:23:cn.com.codesec.scan.ir.nodes.IRThrowStmt clone() -> u
    28:28:boolean isThrowStatement() -> p
    32:32:cn.com.codesec.scan.ir.nodes.IRExpression getThrown() -> w
    36:36:cn.com.codesec.scan.metadata.Type getTypeOfThrow() -> A
    41:41:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    46:47:void initNodeData() -> b
    50:51:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRThrowData) -> a
    55:55:cn.com.codesec.scan.ir.nodes.data.IRThrowData getNodeData() -> B
    1:1:cn.com.codesec.scan.ir.nodes.data.IRValueReturnData getNodeData() -> C
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.data.IRReturnData getNodeData() -> h
    1:1:cn.com.codesec.scan.ir.nodes.IRValueReturn clone() -> D
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:cn.com.codesec.scan.ir.nodes.IRReturnStmt clone() -> l
cn.com.codesec.scan.ir.nodes.IRTryCatchFinally -> cn.com.codesec.Lb:
    cn.com.codesec.scan.ir.nodes.data.IRTryData nodeData -> a
    12:13:void <init>() -> <init>
    18:19:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRTryData) -> a
    22:24:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    28:29:void initNodeData() -> b
    33:33:cn.com.codesec.scan.ir.nodes.data.IRTryData getNodeData() -> h
    38:47:cn.com.codesec.scan.ir.nodes.IRTryCatchFinally clone() -> l
    51:55:cn.com.codesec.scan.ir.nodes.IRBlock getTryBlock() -> m
    59:59:java.util.List getCatchBlocks() -> p
    63:63:cn.com.codesec.scan.ir.nodes.IRBlock getFinallyBlock() -> s
    67:67:boolean hasFinallyBlock() -> t
    71:77:void setTryBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    80:85:void addCatchBlock(cn.com.codesec.scan.ir.nodes.IRCatchBlock) -> a
    88:94:void setFinallyBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
    99:103:int getChildCount() -> n
    108:120:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    125:132:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    137:153:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    156:161:void removeCatchBlocks() -> u
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.IRType -> cn.com.codesec.Lc:
    cn.com.codesec.scan.ir.nodes.IRType UNKNOWN_TYPE -> a
    cn.com.codesec.scan.ir.nodes.data.IRTypeData nodeData -> b
    boolean $assertionsDisabled -> c
    21:422:void <clinit>() -> <clinit>
    24:25:void <init>() -> <init>
    32:36:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.ir.PrimitiveType) -> <init>
    39:43:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    46:54:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.metadata.Type) -> <init>
    57:60:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    64:65:void initNodeData() -> b
    69:69:cn.com.codesec.scan.ir.nodes.data.IRTypeData getNodeData() -> h
    75:101:cn.com.codesec.scan.ir.nodes.IRType clone() -> l
    105:105:cn.com.codesec.parse.ir.PrimitiveType getPrimitiveType() -> m
    109:111:void setPrimitiveType(cn.com.codesec.parse.ir.PrimitiveType) -> a
    114:114:boolean isFunPtr() -> p
    118:118:cn.com.codesec.scan.ir.nodes.IRType getReturnType() -> r
    122:128:void setNamedType(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    131:131:int getPointerDepth() -> s
    136:136:int getArrayDimensions() -> t
    140:140:java.lang.String getNamedType() -> u
    144:144:java.util.List getArrayDimSizes() -> v
    148:162:void setArrayDimSize(int,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    165:165:boolean isPrimitiveType() -> w
    171:171:boolean isNamedType() -> A
    176:176:java.lang.String toString() -> toString
    180:182:void setAnyType() -> B
    186:188:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    191:193:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    197:199:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    202:204:void resetModifiers() -> C
    208:208:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    213:213:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    217:217:java.util.List getTypeArguments() -> D
    221:222:void setTypeArguments(java.util.List) -> a
    226:239:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    244:253:int getChildCount() -> n
    258:276:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    281:293:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    297:297:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    301:301:cn.com.codesec.scan.metadata.Type getType() -> E
    305:311:cn.com.codesec.scan.metadata.Type getType(boolean) -> a
    315:357:cn.com.codesec.scan.metadata.Type resolveType(cn.com.codesec.scan.metadata.Type,boolean) -> a
    362:373:cn.com.codesec.scan.ir.nodes.IRTypeParameter findTypeParameter(java.lang.String) -> b
    377:379:void setCppReference() -> H
    382:384:void setPointer() -> I
    387:389:void setArray(int) -> b
    392:394:void setArray() -> J
    397:412:void setArray(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    415:417:void setTypeDef(java.lang.String) -> c
    497:498:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRTypeData) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRType$NSTFunPtrType -> cn.com.codesec.Ld:
    428:429:void <init>() -> <init>
    432:437:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    441:442:void initNodeData() -> b
    445:446:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRFunPtrTypeData) -> a
    450:450:cn.com.codesec.scan.ir.nodes.data.IRFunPtrTypeData getNodeData() -> K
    455:455:boolean isFunPtr() -> p
    460:460:boolean isNamedType() -> A
    464:469:void setFunArgs(java.util.List) -> b
    473:473:cn.com.codesec.scan.ir.nodes.IRType getReturnType() -> r
    477:477:java.util.List getFunArgs() -> L
    481:492:cn.com.codesec.scan.metadata.Type getFunPtrType(boolean) -> b
    1:1:cn.com.codesec.scan.ir.nodes.data.IRTypeData getNodeData() -> h
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
cn.com.codesec.scan.ir.nodes.IRTypeParameter -> cn.com.codesec.Le:
    cn.com.codesec.scan.ir.nodes.data.IRTypeParameterData nodeData -> a
    16:17:void <init>() -> <init>
    22:23:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRTypeParameterData) -> a
    26:32:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    36:37:void initNodeData() -> b
    41:41:cn.com.codesec.scan.ir.nodes.data.IRTypeParameterData getNodeData() -> h
    46:46:java.lang.String getName() -> l
    51:51:cn.com.codesec.scan.ir.nodes.IRType getUpperBoundNode() -> m
    55:64:cn.com.codesec.scan.metadata.TypeMeta getUpperBound() -> p
    69:69:cn.com.codesec.scan.ir.nodes.IRTypeParameter clone() -> r
    74:74:java.lang.String toString() -> toString
    79:79:int getChildCount() -> n
    84:87:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    92:95:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    100:105:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    109:109:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.scan.ir.nodes.IRUnaryOpExp -> cn.com.codesec.Lf:
    cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData nodeData -> b
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> c
    11:11:void <clinit>() -> <clinit>
    14:15:void <init>() -> <init>
    20:21:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData) -> a
    24:26:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,cn.com.codesec.parse.ir.IROperators) -> <init>
    30:31:void initNodeData() -> b
    35:35:cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData getNodeData() -> m
    40:43:cn.com.codesec.scan.ir.nodes.IRUnaryOpExp clone() -> h
    48:48:boolean isUnary() -> t
    53:53:int getChildCount() -> n
    58:62:void addChild(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    66:66:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    72:90:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    11:11:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> r
cn.com.codesec.scan.ir.nodes.IRValueReturn -> cn.com.codesec.Lg:
    boolean $assertionsDisabled -> g
    7:7:void <clinit>() -> <clinit>
    11:12:void <init>() -> <init>
    15:16:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    20:21:void initNodeData() -> b
    24:25:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRValueReturnData) -> a
    29:29:cn.com.codesec.scan.ir.nodes.data.IRValueReturnData getNodeData() -> C
    34:37:cn.com.codesec.scan.ir.nodes.IRValueReturn clone() -> D
    42:43:boolean valueReturn() -> t
    47:50:void setExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    54:54:cn.com.codesec.scan.ir.nodes.IRExpression getExpression() -> m
    59:59:int getChildCount() -> n
    64:67:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    72:75:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    80:85:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    89:89:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRReturnData getNodeData() -> h
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRReturnStmt clone() -> l
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
cn.com.codesec.scan.ir.nodes.IRVarAccess -> cn.com.codesec.Lh:
    cn.com.codesec.scan.ir.nodes.data.IRVarAccessData nodeData -> a
    22:23:void <init>() -> <init>
    28:29:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRVarAccessData) -> a
    32:33:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    36:39:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    42:45:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    49:50:void initNodeData() -> b
    54:54:cn.com.codesec.scan.ir.nodes.data.IRVarAccessData getNodeData() -> h
    59:64:cn.com.codesec.scan.ir.nodes.IRVarAccess clone() -> l
    69:69:cn.com.codesec.scan.ir.nodes.IRLocation getBaseLocation() -> m
    75:75:java.lang.String getName() -> O
    79:81:void setName(java.lang.String) -> b
    84:84:boolean isThis() -> v
    88:88:boolean isOuterThis() -> N
    94:97:cn.com.codesec.scan.ir.nodes.IRVarDecl getResolvedDecl() -> P
    101:101:boolean isResolved() -> Q
    105:107:void resolve(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    112:117:org.apache.commons.lang3.tuple.Pair getLocationComponents() -> s
    123:140:cn.com.codesec.scan.metadata.Type getTypeAsWritten(boolean) -> a
    144:158:void getTypeAsWrittenFromAccess() -> R
    163:180:cn.com.codesec.scan.ir.nodes.IRExpression getDef() -> S
    185:185:boolean isTempVar() -> T
    190:190:java.lang.String toString() -> toString
    195:195:java.lang.String getDetailString() -> r
    200:201:cn.com.codesec.scan.meta.Symbol getDecl() -> t
    206:206:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    211:211:int getChildCount() -> n
    216:216:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    221:221:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    226:226:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRLocation clone() -> w
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:cn.com.codesec.scan.ir.nodes.IRExpression clone() -> p
cn.com.codesec.scan.ir.nodes.IRVarDecl -> cn.com.codesec.Li:
    cn.com.codesec.scan.ir.nodes.data.decl.IRVarDeclData nodeData -> b
    boolean $assertionsDisabled -> a
    30:30:void <clinit>() -> <clinit>
    33:34:void <init>() -> <init>
    39:44:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer,java.lang.String,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    48:57:cn.com.codesec.scan.ir.nodes.IRVarDecl clone() -> h
    61:65:cn.com.codesec.scan.metadata.Type getTypeAsWritten() -> l
    69:71:void setType(cn.com.codesec.scan.metadata.Type) -> a
    74:74:cn.com.codesec.scan.ir.nodes.IRType getNSTType() -> m
    78:82:void setNSTType(cn.com.codesec.scan.ir.nodes.IRType) -> a
    85:85:boolean isEnvironment() -> p
    89:89:java.lang.String getSimpleName() -> r
    93:93:java.lang.String getName() -> s
    97:105:java.lang.String getUniqueName() -> t
    109:109:boolean isTempVar() -> u
    113:113:cn.com.codesec.scan.metadata.Namespace getNamespace() -> v
    117:117:java.lang.String getDeclaredNamespace() -> A
    121:122:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> C
    126:128:void setName(java.lang.String) -> b
    132:134:void setNamespaceLocalName(java.lang.String) -> c
    137:137:java.lang.String getNamespaceLocalName() -> E
    141:143:void setNamespace(java.lang.String) -> d
    146:146:java.lang.String getNamespaceName() -> H
    151:151:java.lang.String getSymbol() -> B
    155:155:boolean isStatic() -> I
    159:163:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> J
    167:171:void registerStorage() -> K
    175:175:java.lang.String toString() -> toString
    179:183:boolean isRuntimeConstant() -> L
    187:187:boolean isPossiblyAliased() -> M
    191:195:boolean getHadAddressTaken() -> N
    199:205:void setHadAddressTaken(boolean) -> a
    209:211:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    214:216:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    220:222:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    226:226:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    231:231:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    235:235:boolean isFunArg() -> O
    239:239:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> P
    245:255:cn.com.codesec.scan.meta.Symbol getMetaData() -> D
    259:266:void setAnnotations(java.util.Set) -> a
    269:269:java.util.Set getAnnotations() -> Q
    277:288:java.util.Set getReachingTypes() -> R
    292:303:boolean addReachingTypes(java.util.Set) -> b
    307:312:void setInit(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    315:315:cn.com.codesec.scan.ir.nodes.IRLiteralExp getInit() -> S
    320:326:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    332:332:int getChildCount() -> n
    337:343:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    348:360:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    364:364:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    369:370:int compareTo(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    375:376:void initNodeData() -> b
    380:380:cn.com.codesec.scan.ir.nodes.data.decl.IRVarDeclData getNodeData() -> T
    384:385:void setNodeData(cn.com.codesec.scan.ir.nodes.data.decl.IRVarDeclData) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
    1:1:java.lang.Object clone() -> clone
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.ir.nodes.IRWhileStmt -> cn.com.codesec.Lj:
    cn.com.codesec.scan.ir.nodes.data.IRWhileData nodeData -> b
    13:14:void <init>() -> <init>
    19:20:void setNodeData(cn.com.codesec.scan.ir.nodes.data.IRWhileData) -> a
    23:24:void <init>(cn.com.codesec.parse.ir.SourceInfoProducer) -> <init>
    28:29:void initNodeData() -> b
    33:33:cn.com.codesec.scan.ir.nodes.data.IRWhileData getNodeData() -> s
    38:42:cn.com.codesec.scan.ir.nodes.IRWhileStmt clone() -> t
    46:46:cn.com.codesec.scan.ir.nodes.IRBlock getBody() -> u
    50:53:void setBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    57:57:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> h
    61:64:void setPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    68:77:cn.com.codesec.scan.analyzer.preproc.BasicBlock getTrueBlock() -> l
    82:83:boolean isConditionShortCircuit() -> p
    88:94:cn.com.codesec.scan.ir.nodes.IRNode getChild(int) -> a
    100:100:int getChildCount() -> n
    105:111:int indexOf(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    116:126:void replaceChild(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    130:130:java.lang.Object accept(cn.com.codesec.scan.ir.IRVisitor,java.lang.Object) -> a
    1:1:cn.com.codesec.scan.ir.nodes.data.IRNodeData getNodeData() -> o
    1:1:cn.com.codesec.scan.ir.nodes.IRStatement clone() -> v
    1:1:java.lang.Object clone() -> clone
    1:1:cn.com.codesec.scan.ir.nodes.IRNode clone() -> q
cn.com.codesec.scan.ir.nodes.data.IRAllocationData -> cn.com.codesec.Lk:
    cn.com.codesec.scan.ir.nodes.IRType type -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRType getType() -> a
    14:15:void setType(cn.com.codesec.scan.ir.nodes.IRType) -> a
cn.com.codesec.scan.ir.nodes.data.IRAlternativeFunCallData -> cn.com.codesec.Ll:
    cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget target -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget getTarget() -> a
    14:15:void setTarget(cn.com.codesec.scan.analyzer.callgraph.AlternativeCallTarget) -> a
cn.com.codesec.scan.ir.nodes.data.IRArrayAccessData -> cn.com.codesec.Lm:
    cn.com.codesec.scan.ir.nodes.IRLocation base -> a
    cn.com.codesec.scan.ir.nodes.IRExpression index -> b
    6:6:void <init>() -> <init>
    13:13:cn.com.codesec.scan.ir.nodes.IRLocation getBase() -> a
    17:18:void setBase(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    21:21:cn.com.codesec.scan.ir.nodes.IRExpression getIndex() -> b
    25:26:void setIndex(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.ir.nodes.data.IRAssignmentData -> cn.com.codesec.Ln:
    cn.com.codesec.scan.ir.nodes.IRLocation lhs -> a
    cn.com.codesec.scan.ir.nodes.IRExpression rhs -> b
    boolean isIncrDecr -> c
    boolean isPre -> d
    boolean isIncr -> e
    6:6:void <init>() -> <init>
    19:19:cn.com.codesec.scan.ir.nodes.IRLocation getLhs() -> a
    23:24:void setLhs(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    27:27:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> b
    31:32:void setRhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    35:35:boolean isIncrDecr() -> c
    39:40:void setIncrDecr(boolean) -> a
    43:43:boolean isPre() -> d
    47:48:void setPre(boolean) -> b
    51:51:boolean isIncr() -> e
    55:56:void setIncr(boolean) -> c
cn.com.codesec.scan.ir.nodes.data.IRBinaryData -> cn.com.codesec.Lo:
    cn.com.codesec.scan.ir.nodes.IRExpression rhs -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRExpression getRhs() -> a
    14:15:void setRhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.ir.nodes.data.IRBlockData -> cn.com.codesec.Lp:
    java.util.Map storageMap -> a
    java.util.List statements -> b
    java.util.Map labelMap -> c
    cn.com.codesec.scan.ir.nodes.IRFunDecl enclosingFunDecl -> d
    10:10:void <init>() -> <init>
    21:21:java.util.Map getStorageMap() -> a
    25:26:void setStorageMap(java.util.Map) -> a
    29:29:java.util.List getStatements() -> b
    33:34:void setStatements(java.util.List) -> a
    37:37:java.util.Map getLabelMap() -> c
    41:42:void setLabelMap(java.util.Map) -> b
    45:45:cn.com.codesec.scan.ir.nodes.IRFunDecl getEnclosingFunDecl() -> d
    49:50:void setEnclosingFunDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.scan.ir.nodes.data.IRCallStmtData -> cn.com.codesec.Lq:
    cn.com.codesec.scan.ir.nodes.IRFunCall call -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRFunCall getCall() -> a
    14:15:void setCall(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
cn.com.codesec.scan.ir.nodes.data.IRCatchBlockData -> cn.com.codesec.Lr:
    boolean ellipsis -> a
    cn.com.codesec.scan.ir.nodes.IRVarDecl exceptionVar -> b
    cn.com.codesec.scan.ir.nodes.IRBlock codeBlock -> c
    6:6:void <init>() -> <init>
    11:11:boolean isEllipsis() -> a
    14:15:void setEllipsis(boolean) -> a
    17:17:cn.com.codesec.scan.ir.nodes.IRVarDecl getExceptionVar() -> b
    20:21:void setExceptionVar(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    23:23:cn.com.codesec.scan.ir.nodes.IRBlock getCodeBlock() -> c
    26:27:void setCodeBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
cn.com.codesec.scan.ir.nodes.data.IRDeclData -> cn.com.codesec.Ls:
    cn.com.codesec.scan.ir.nodes.IRVarDecl decl -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRVarDecl getDecl() -> a
    14:15:void setDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.scan.ir.nodes.data.IRDereferenceData -> cn.com.codesec.Lt:
    cn.com.codesec.scan.ir.nodes.IRLocation base -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRLocation getBase() -> a
    14:15:void setBase(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.ir.nodes.data.IRFieldAccessData -> cn.com.codesec.Lu:
    cn.com.codesec.scan.ir.nodes.IRType type -> a
    java.lang.String name -> b
    cn.com.codesec.scan.metadata.FieldMeta fieldResolution -> c
    6:6:void <init>() -> <init>
    15:15:cn.com.codesec.scan.ir.nodes.IRType getType() -> a
    19:20:void setType(cn.com.codesec.scan.ir.nodes.IRType) -> a
    23:23:java.lang.String getName() -> b
    27:28:void setName(java.lang.String) -> a
    31:31:cn.com.codesec.scan.metadata.FieldMeta getFieldResolution() -> c
    35:36:void setFieldResolution(cn.com.codesec.scan.metadata.FieldMeta) -> a
cn.com.codesec.scan.ir.nodes.data.IRFunCallData -> cn.com.codesec.Lv:
    java.lang.String uniqueName -> a
    java.util.List arglist -> b
    java.util.List altCalls -> c
    boolean virtual -> d
    java.util.List typeArguments -> e
    java.util.List argNames -> f
    java.util.List funResolutions -> g
    java.util.List cachedTargets -> h
    11:11:void <init>() -> <init>
    13:13:java.lang.String getUniqueName() -> b
    16:17:void setUniqueName(java.lang.String) -> a
    19:19:java.util.List getArglist() -> c
    22:23:void setArglist(java.util.List) -> a
    25:25:java.util.List getAltCalls() -> d
    28:29:void setAltCalls(java.util.List) -> b
    31:31:boolean isVirtual() -> e
    34:35:void setVirtual(boolean) -> a
    37:37:java.util.List getTypeArguments() -> f
    40:41:void setTypeArguments(java.util.List) -> c
    43:43:java.util.List getArgNames() -> g
    46:47:void setArgNames(java.util.List) -> d
    49:49:java.util.List getFunResolutions() -> h
    52:53:void setFunResolutions(java.util.List) -> e
    55:55:java.util.List getCachedTargets() -> i
    58:59:void setCachedTargets(java.util.List) -> f
cn.com.codesec.scan.ir.nodes.data.IRFunIdentifierData -> cn.com.codesec.Lw:
    java.lang.String name -> a
    java.util.List funResolutions -> b
    7:7:void <init>() -> <init>
    14:14:java.lang.String getName() -> a
    18:19:void setName(java.lang.String) -> a
    22:22:java.util.List getFunResolutions() -> b
    26:27:void setFunResolutions(java.util.List) -> a
cn.com.codesec.scan.ir.nodes.data.IRFunPtrTypeData -> cn.com.codesec.Lx:
    cn.com.codesec.scan.metadata.Type resolved -> a
    cn.com.codesec.scan.ir.nodes.IRType rtype -> b
    java.util.List argNstTypes -> c
    8:8:void <init>() -> <init>
    11:11:cn.com.codesec.scan.metadata.Type getResolved() -> a
    14:15:void setResolved(cn.com.codesec.scan.metadata.Type) -> a
    17:17:cn.com.codesec.scan.ir.nodes.IRType getRtype() -> b
    20:21:void setRtype(cn.com.codesec.scan.ir.nodes.IRType) -> a
    23:23:java.util.List getArgNstTypes() -> c
    26:27:void setArgNstTypes(java.util.List) -> a
cn.com.codesec.scan.ir.nodes.data.IRFunctionPointerCallData -> cn.com.codesec.Ly:
    cn.com.codesec.scan.ir.nodes.IRExpression pointer -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRExpression getPointer() -> a
    14:15:void setPointer(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.ir.nodes.data.IRGotoData -> cn.com.codesec.Lz:
    java.lang.String targetLabel -> a
    3:3:void <init>() -> <init>
    8:8:java.lang.String getTargetLabel() -> a
    12:13:void setTargetLabel(java.lang.String) -> a
cn.com.codesec.scan.ir.nodes.data.IRIfThenData -> cn.com.codesec.LA:
    cn.com.codesec.scan.ir.nodes.IRExpression predicate -> a
    cn.com.codesec.scan.ir.nodes.IRBlock ifBody -> b
    boolean isNative -> c
    6:6:void <init>() -> <init>
    16:16:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> a
    20:21:void setPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    24:24:cn.com.codesec.scan.ir.nodes.IRBlock getIfBody() -> b
    28:29:void setIfBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    32:32:boolean isNative() -> c
    36:37:void setNative(boolean) -> a
cn.com.codesec.scan.ir.nodes.data.IRIfThenElseData -> cn.com.codesec.LB:
    cn.com.codesec.scan.ir.nodes.IRBlock elseBody -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRBlock getElseBody() -> d
    14:15:void setElseBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
cn.com.codesec.scan.ir.nodes.data.IRIndexedAccessData -> cn.com.codesec.LC:
    boolean toolGenerated -> a
    3:3:void <init>() -> <init>
    8:8:boolean isToolGenerated() -> c
    12:13:void setToolGenerated(boolean) -> a
cn.com.codesec.scan.ir.nodes.data.IRLateBoundFunCallData -> cn.com.codesec.LD:
    java.lang.String simpleName -> a
    3:3:void <init>() -> <init>
    8:8:java.lang.String getSimpleName() -> a
    12:13:void setSimpleName(java.lang.String) -> b
cn.com.codesec.scan.ir.nodes.data.IRMapAccessData -> cn.com.codesec.LE:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.IRNoOpData -> cn.com.codesec.LF:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.IRNodeData -> cn.com.codesec.LG:
    cn.com.codesec.scan.ir.nodes.IRNode parent -> a
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> b
    int id -> c
    java.util.Map annotationsPersistent -> d
    cn.com.codesec.scan.ir.util.memory.IRRef ref -> e
    10:10:void <init>() -> <init>
    18:18:cn.com.codesec.scan.ir.util.memory.IRRef getRef() -> j
    22:23:void setRef(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    26:26:cn.com.codesec.scan.ir.nodes.IRNode getParent() -> k
    30:31:void setParent(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    34:34:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> l
    38:39:void setSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    42:42:int getId() -> m
    46:47:void setId(int) -> a
    50:50:java.util.Map getAnnotationsPersistent() -> n
    54:55:void setAnnotationsPersistent(java.util.Map) -> c
cn.com.codesec.scan.ir.nodes.data.IRNonstaticFieldAccessData -> cn.com.codesec.LH:
    cn.com.codesec.scan.ir.nodes.IRLocation instance -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRLocation getInstance() -> d
    14:15:void setInstance(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.ir.nodes.data.IRReturnData -> cn.com.codesec.LI:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.IRStaticFieldAccessData -> cn.com.codesec.LJ:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.IRThrowData -> cn.com.codesec.LK:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.IRTryData -> cn.com.codesec.LL:
    cn.com.codesec.scan.ir.nodes.IRBlock tryBlock -> a
    java.util.List catchBlocks -> b
    cn.com.codesec.scan.ir.nodes.IRBlock finallyBlock -> c
    8:8:void <init>() -> <init>
    17:17:cn.com.codesec.scan.ir.nodes.IRBlock getTryBlock() -> a
    21:22:void setTryBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    25:25:java.util.List getCatchBlocks() -> b
    29:30:void setCatchBlocks(java.util.List) -> a
    33:33:cn.com.codesec.scan.ir.nodes.IRBlock getFinallyBlock() -> c
    37:38:void setFinallyBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
cn.com.codesec.scan.ir.nodes.data.IRTypeData -> cn.com.codesec.LM:
    java.lang.String name -> a
    cn.com.codesec.scan.metadata.Type type -> b
    cn.com.codesec.scan.metadata.Type genericType -> c
    boolean unresolved -> d
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> e
    java.util.List arrayDimSizes -> f
    java.util.List typeArguments -> g
    10:10:void <init>() -> <init>
    22:22:java.lang.String getName() -> d
    26:27:void setName(java.lang.String) -> a
    30:30:cn.com.codesec.scan.metadata.Type getType() -> e
    34:35:void setType(cn.com.codesec.scan.metadata.Type) -> b
    38:38:cn.com.codesec.scan.metadata.Type getGenericType() -> f
    42:43:void setGenericType(cn.com.codesec.scan.metadata.Type) -> c
    46:46:boolean isUnresolved() -> g
    50:51:void setUnresolved(boolean) -> a
    54:54:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> h
    58:59:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    62:62:java.util.List getArrayDimSizes() -> i
    66:67:void setArrayDimSizes(java.util.List) -> b
    70:70:java.util.List getTypeArguments() -> o
    74:75:void setTypeArguments(java.util.List) -> c
cn.com.codesec.scan.ir.nodes.data.IRTypeParameterData -> cn.com.codesec.LN:
    java.lang.String name -> a
    cn.com.codesec.scan.ir.nodes.IRType upperBound -> b
    7:7:void <init>() -> <init>
    16:16:java.lang.String getName() -> a
    20:21:void setName(java.lang.String) -> a
    24:24:cn.com.codesec.scan.ir.nodes.IRType getUpperBound() -> b
    28:29:void setUpperBound(cn.com.codesec.scan.ir.nodes.IRType) -> a
cn.com.codesec.scan.ir.nodes.data.IRUnaryOpData -> cn.com.codesec.LO:
    cn.com.codesec.parse.ir.IROperators op -> a
    cn.com.codesec.scan.ir.nodes.IRExpression lhs -> b
    6:6:void <init>() -> <init>
    13:13:cn.com.codesec.parse.ir.IROperators getOp() -> b
    17:18:void setOp(cn.com.codesec.parse.ir.IROperators) -> a
    21:21:cn.com.codesec.scan.ir.nodes.IRExpression getLhs() -> c
    25:26:void setLhs(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
cn.com.codesec.scan.ir.nodes.data.IRValueReturnData -> cn.com.codesec.LP:
    cn.com.codesec.scan.ir.nodes.IRExpression expr -> a
    5:5:void <init>() -> <init>
    10:10:cn.com.codesec.scan.ir.nodes.IRExpression getExpr() -> a
    14:15:void setExpr(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
cn.com.codesec.scan.ir.nodes.data.IRVarAccessData -> cn.com.codesec.LQ:
    java.lang.String name -> a
    cn.com.codesec.scan.ir.nodes.IRVarDecl resolvedDecl -> b
    5:5:void <init>() -> <init>
    12:12:java.lang.String getName() -> a
    16:17:void setName(java.lang.String) -> a
    20:20:cn.com.codesec.scan.ir.nodes.IRVarDecl getResolvedDecl() -> b
    24:25:void setResolvedDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
cn.com.codesec.scan.ir.nodes.data.IRWhileData -> cn.com.codesec.LR:
    cn.com.codesec.scan.ir.nodes.IRExpression predicate -> a
    cn.com.codesec.scan.ir.nodes.IRBlock body -> b
    6:6:void <init>() -> <init>
    12:12:cn.com.codesec.scan.ir.nodes.IRExpression getPredicate() -> a
    16:17:void setPredicate(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    20:20:cn.com.codesec.scan.ir.nodes.IRBlock getBody() -> b
    24:25:void setBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
cn.com.codesec.scan.ir.nodes.data.decl.IRFunDeclData -> cn.com.codesec.LS:
    java.lang.String name -> a
    java.lang.String altName -> b
    java.lang.String uniqueName -> c
    java.lang.String className -> d
    java.lang.String namespace -> e
    cn.com.codesec.scan.meta.Language language -> f
    cn.com.codesec.scan.metadata.FunMeta meta -> g
    boolean isVarArg -> h
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> i
    cn.com.codesec.scan.ir.nodes.IRType returnType -> j
    java.util.List typeParameters -> k
    java.util.List paramList -> l
    java.util.List overrides -> m
    cn.com.codesec.scan.ir.nodes.IRBlock body -> n
    java.util.List exceptions -> o
    java.util.Map storageMap -> p
    java.util.Map labelMap -> q
    java.lang.Integer serializeID -> r
    java.util.List nodesByID -> s
    cn.com.codesec.scan.ir.util.memory.FunDeclRef declRef -> t
    boolean isTransformed -> u
    boolean callTargetsReset -> v
    18:18:void <init>() -> <init>
    20:20:java.lang.String getName() -> a
    23:24:void setName(java.lang.String) -> a
    26:26:java.lang.String getAltName() -> b
    29:30:void setAltName(java.lang.String) -> b
    32:32:java.lang.String getUniqueName() -> c
    35:36:void setUniqueName(java.lang.String) -> c
    38:38:java.lang.String getClassName() -> d
    41:42:void setClassName(java.lang.String) -> d
    44:44:java.lang.String getNamespace() -> e
    47:48:void setNamespace(java.lang.String) -> e
    50:50:cn.com.codesec.scan.meta.Language getLanguage() -> f
    53:54:void setLanguage(cn.com.codesec.scan.meta.Language) -> a
    56:56:cn.com.codesec.scan.metadata.FunMeta getMeta() -> g
    59:60:void setMeta(cn.com.codesec.scan.metadata.FunMeta) -> a
    62:62:boolean isVarArg() -> h
    65:66:void setVarArg(boolean) -> a
    68:68:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> i
    71:72:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    74:74:cn.com.codesec.scan.ir.nodes.IRType getReturnType() -> o
    77:78:void setReturnType(cn.com.codesec.scan.ir.nodes.IRType) -> a
    80:80:java.util.List getTypeParameters() -> p
    83:84:void setTypeParameters(java.util.List) -> a
    86:86:java.util.List getParamList() -> q
    89:90:void setParamList(java.util.List) -> b
    92:92:java.util.List getOverrides() -> r
    95:96:void setOverrides(java.util.List) -> c
    98:98:cn.com.codesec.scan.ir.nodes.IRBlock getBody() -> s
    101:102:void setBody(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    104:104:java.util.List getExceptions() -> t
    107:108:void setExceptions(java.util.List) -> d
    110:110:java.util.Map getStorageMap() -> u
    113:114:void setStorageMap(java.util.Map) -> a
    116:116:java.util.Map getLabelMap() -> v
    119:120:void setLabelMap(java.util.Map) -> b
    122:122:java.lang.Integer getSerializeID() -> w
    125:126:void setSerializeID(java.lang.Integer) -> a
    128:128:java.util.List getNodesByID() -> x
    131:132:void setNodesByID(java.util.List) -> e
    134:134:cn.com.codesec.scan.ir.util.memory.FunDeclRef getDeclRef() -> y
    137:138:void setDeclRef(cn.com.codesec.scan.ir.util.memory.FunDeclRef) -> a
    140:140:boolean isTransformed() -> z
    143:144:void setTransformed(boolean) -> b
    146:146:boolean isCallTargetsReset() -> A
    149:150:void setCallTargetsReset(boolean) -> c
cn.com.codesec.scan.ir.nodes.data.decl.IRGeneratedFunDeclData -> cn.com.codesec.LT:
    3:3:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.decl.IRVarDeclData -> cn.com.codesec.LU:
    java.lang.String name -> a
    java.lang.String namespaceLocalName -> b
    java.lang.String namespace -> c
    cn.com.codesec.scan.ir.nodes.IRType typeNode -> d
    cn.com.codesec.scan.metadata.Type type -> e
    cn.com.codesec.scan.meta.Symbol sym -> f
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> g
    java.util.Set annotations -> h
    boolean hadAddressTaken -> i
    cn.com.codesec.scan.ir.nodes.IRLiteralExp initLiteral -> j
    java.util.Set reachingTypes -> k
    14:14:void <init>() -> <init>
    29:29:java.lang.String getName() -> a
    32:33:void setName(java.lang.String) -> a
    35:35:java.lang.String getNamespaceLocalName() -> b
    38:39:void setNamespaceLocalName(java.lang.String) -> b
    41:41:java.lang.String getNamespace() -> c
    44:45:void setNamespace(java.lang.String) -> c
    47:47:cn.com.codesec.scan.ir.nodes.IRType getTypeNode() -> d
    50:51:void setTypeNode(cn.com.codesec.scan.ir.nodes.IRType) -> a
    53:53:cn.com.codesec.scan.metadata.Type getType() -> e
    56:57:void setType(cn.com.codesec.scan.metadata.Type) -> a
    59:59:cn.com.codesec.scan.meta.Symbol getSym() -> f
    62:63:void setSym(cn.com.codesec.scan.meta.Symbol) -> a
    65:65:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> g
    68:69:void setModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    71:71:java.util.Set getAnnotations() -> h
    74:75:void setAnnotations(java.util.Set) -> a
    77:77:boolean isHadAddressTaken() -> i
    80:81:void setHadAddressTaken(boolean) -> a
    83:83:cn.com.codesec.scan.ir.nodes.IRLiteralExp getInitLiteral() -> o
    86:87:void setInitLiteral(cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> a
    89:89:java.util.Set getReachingTypes() -> p
    92:93:void setReachingTypes(java.util.Set) -> b
cn.com.codesec.scan.ir.nodes.data.literal.IRBooleanData -> cn.com.codesec.LV:
    boolean booleanValue -> a
    5:5:void <init>() -> <init>
    10:10:boolean isBooleanValue() -> a
    14:15:void setBooleanValue(boolean) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRCharData -> cn.com.codesec.LW:
    char charValue -> a
    5:5:void <init>() -> <init>
    10:10:char getCharValue() -> a
    14:15:void setCharValue(char) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRClassLiteralData -> cn.com.codesec.LX:
    cn.com.codesec.scan.ir.nodes.IRType type -> a
    6:6:void <init>() -> <init>
    11:11:cn.com.codesec.scan.ir.nodes.IRType getType() -> a
    15:16:void setType(cn.com.codesec.scan.ir.nodes.IRType) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRDoubleData -> cn.com.codesec.LY:
    double doubleValue -> a
    5:5:void <init>() -> <init>
    10:10:double getDoubleValue() -> a
    14:15:void setDoubleValue(double) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRFloatData -> cn.com.codesec.LZ:
    float floatValue -> a
    5:5:void <init>() -> <init>
    10:10:float getFloatValue() -> a
    14:15:void setFloatValue(float) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRIntData -> cn.com.codesec.Ma:
    int intValue -> a
    5:5:void <init>() -> <init>
    10:10:int getIntValue() -> a
    14:15:void setIntValue(int) -> b
cn.com.codesec.scan.ir.nodes.data.literal.IRLongData -> cn.com.codesec.Mb:
    long longValue -> a
    5:5:void <init>() -> <init>
    10:10:long getLongValue() -> a
    14:15:void setLongValue(long) -> a
cn.com.codesec.scan.ir.nodes.data.literal.IRNullData -> cn.com.codesec.Mc:
    5:5:void <init>() -> <init>
cn.com.codesec.scan.ir.nodes.data.literal.IRStringData -> cn.com.codesec.Md:
    java.lang.String stringValue -> a
    5:5:void <init>() -> <init>
    10:10:java.lang.String getStringValue() -> a
    14:15:void setStringValue(java.lang.String) -> a
cn.com.codesec.scan.ir.reader.IRReader -> cn.com.codesec.Me:
    cn.com.codesec.util.IRFile nstFile -> b
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit result -> c
    cn.com.codesec.scan.meta.Language language -> d
    cn.com.codesec.scan.ir.nodes.IRBlock annFunBlock -> e
    java.util.List annFunDecls -> f
    int tmpCounter -> g
    cn.com.codesec.util.fset.FMap labelsInFunc -> h
    java.util.Map labelsUsed -> i
    cn.com.codesec.scan.ir.nodes.IRBlock curBlock -> j
    cn.com.codesec.util.SourceFile translationSource -> k
    java.util.Map INCLUDE_FILE_MAP -> l
    java.util.Set ALL_FULL_PATHS_SEEN -> m
    java.util.Set PRIMARY_FULL_PATHS_SEEN -> n
    boolean sourceNone -> o
    cn.com.codesec.parse.ir.SourceInfoProducer DUMMY_SOURCE_INFO_PRODUCER -> p
    cn.com.codesec.parse.ir.SourceInfo beforeSourceInfo -> q
    java.util.concurrent.atomic.AtomicLong totalReparseTime -> r
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> s
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> t
    127:1477:void <clinit>() -> <clinit>
    143:1421:void <init>(cn.com.codesec.util.IRFile) -> <init>
    177:208:cn.com.codesec.scan.ir.nodes.IRCompilationUnit parse() -> a
    212:227:cn.com.codesec.scan.ir.nodes.IRCompilationUnit compilationUnit(cn.com.codesec.java.bean.CompilationUnitBean) -> a
    240:240:java.util.List getIncludeFiles(cn.com.codesec.util.FilePath) -> a
    244:253:java.util.Set getSecondaryFilePaths() -> b
    259:276:cn.com.codesec.scan.ir.nodes.IRDecl typeDecl(cn.com.codesec.java.bean.decl.DeclBean,boolean) -> a
    280:342:cn.com.codesec.scan.ir.nodes.IRClassDecl classDecl(cn.com.codesec.java.bean.decl.ClassDeclBean,boolean) -> a
    346:364:cn.com.codesec.scan.ir.nodes.IRFieldDecl fieldDecl(cn.com.codesec.java.bean.decl.FieldDeclBean) -> a
    368:444:cn.com.codesec.scan.ir.nodes.IRFunDecl funDecl(cn.com.codesec.java.bean.decl.FunDeclBean,boolean,boolean) -> a
    448:456:void setLabels(cn.com.codesec.java.bean.statement.StatementBean,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    459:483:cn.com.codesec.scan.ir.nodes.IRBlock block(cn.com.codesec.java.bean.statement.BlockBean,boolean,boolean) -> a
    487:519:cn.com.codesec.scan.ir.nodes.IRStatement statement(cn.com.codesec.java.bean.statement.StatementBean,java.lang.String) -> a
    523:543:cn.com.codesec.scan.ir.nodes.IRReturnStmt returnStmt(cn.com.codesec.java.bean.statement.ReturnStmtBean) -> a
    547:547:cn.com.codesec.scan.ir.nodes.IRNoOpStmt noOpStmt(cn.com.codesec.java.bean.statement.NoOpStmtBean) -> a
    551:560:cn.com.codesec.scan.ir.nodes.IRGoto nstGoto(cn.com.codesec.java.bean.statement.GotoBean) -> a
    564:566:cn.com.codesec.scan.ir.nodes.IRDeclStatement declStatement(cn.com.codesec.java.bean.statement.DeclStatementBean) -> a
    570:580:cn.com.codesec.scan.ir.nodes.IRWhileStmt whileStmt(cn.com.codesec.java.bean.statement.WhileStmtBean) -> a
    584:604:cn.com.codesec.scan.ir.nodes.IRIfThen ifElse(cn.com.codesec.java.bean.statement.IfElseBean) -> a
    608:612:cn.com.codesec.scan.ir.nodes.IRCallStmt callStmt(cn.com.codesec.java.bean.statement.CallStmtBean) -> a
    616:630:cn.com.codesec.scan.ir.nodes.IRAssignmentStmt assignmentStmt(cn.com.codesec.java.bean.statement.AssignmentStmtBean) -> a
    635:658:cn.com.codesec.scan.ir.nodes.IRExpression expression(cn.com.codesec.java.bean.expression.ExpressionBean) -> a
    662:678:cn.com.codesec.scan.ir.nodes.IRLocation location(cn.com.codesec.java.bean.location.LocationBean) -> a
    682:685:cn.com.codesec.scan.ir.nodes.IRVarAccess varAccess(cn.com.codesec.java.bean.location.VarAccessBean) -> a
    689:706:cn.com.codesec.scan.ir.nodes.IRFieldAccess fieldAccess(cn.com.codesec.java.bean.location.FieldAccessBean) -> a
    710:725:cn.com.codesec.scan.ir.nodes.IRExpression dereference(cn.com.codesec.java.bean.location.DereferenceBean) -> a
    729:881:cn.com.codesec.scan.ir.nodes.IRExpression opExp(cn.com.codesec.java.bean.expression.OpExpBean) -> a
    885:897:void adjustColumnNumberForArrayAddr(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    900:907:cn.com.codesec.scan.ir.nodes.IRExpression checkForNestedFunctionCall(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    912:940:cn.com.codesec.scan.ir.nodes.IRLiteralExp literalExp(cn.com.codesec.java.bean.literal.LiteralExpBean) -> a
    944:947:cn.com.codesec.scan.ir.nodes.IRFunIdentifier funId(cn.com.codesec.java.bean.expression.FunIdentifierBean) -> a
    951:992:cn.com.codesec.scan.ir.nodes.IRExpression funCall(cn.com.codesec.java.bean.expression.FunCallBean) -> a
    996:1005:cn.com.codesec.scan.ir.nodes.IRExpression unwrapSpecialFunction(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    1009:1017:cn.com.codesec.scan.ir.nodes.IRAllocation allocation(cn.com.codesec.java.bean.expression.AllocationBean) -> a
    1021:1026:void expressionTypeCast(cn.com.codesec.java.bean.expression.ExpressionBean,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    1030:1088:void arraysAndPointers(cn.com.codesec.java.bean.expression.AllocationBean,cn.com.codesec.java.bean.TypeBean,cn.com.codesec.scan.ir.nodes.IRType) -> a
    1091:1094:cn.com.codesec.scan.ir.nodes.IRLocation convertToLocation(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    1098:1112:cn.com.codesec.scan.ir.nodes.IRVarAccess createTempForExpression(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    1116:1161:cn.com.codesec.scan.ir.nodes.IRExpression arrayAccess(cn.com.codesec.java.bean.location.ArrayAccessBean) -> a
    1165:1182:cn.com.codesec.scan.ir.nodes.IRLocation adjustAddressOfZerothElem(cn.com.codesec.scan.ir.nodes.IRExpression) -> e
    1186:1198:cn.com.codesec.scan.ir.nodes.IRVarDecl varDecl(cn.com.codesec.java.bean.decl.VarDeclBean) -> a
    1202:1223:void annotations(cn.com.codesec.java.bean.decl.DeclBean,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1226:1232:void setAnnotations(java.util.List,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1235:1250:cn.com.codesec.scan.ir.nodes.IRExpression annotationBlock(cn.com.codesec.java.bean.statement.BlockBean,cn.com.codesec.java.bean.expression.ExpressionBean) -> a
    1254:1263:cn.com.codesec.parse.ir.IRModifierSet readModifiers(cn.com.codesec.java.bean.ModifiableBean) -> a
    1267:1288:cn.com.codesec.scan.ir.nodes.IRType type(cn.com.codesec.java.bean.TypeBean) -> a
    1293:1323:cn.com.codesec.scan.ir.nodes.IRType bareType(cn.com.codesec.java.bean.TypeBean) -> b
    1328:1350:void arraysAndPointers(cn.com.codesec.java.bean.TypeBean,cn.com.codesec.scan.ir.nodes.IRType) -> a
    1424:1445:cn.com.codesec.parse.ir.SourceInfoProducer si(cn.com.codesec.java.bean.NodeBean) -> a
    1457:1457:cn.com.codesec.scan.meta.Language sourceType() -> f
    1467:1467:void writeLog(java.lang.String) -> a
    1470:1470:java.util.concurrent.atomic.AtomicLong getTotalReparseTime() -> c
    1474:1475:void setTotalReparseTime(java.util.concurrent.atomic.AtomicLong) -> a
    127:127:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> d
    127:127:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> e
cn.com.codesec.scan.ir.reader.IRReader$1 -> cn.com.codesec.Mf:
    1:1352:void <init>() -> <init>
    1355:1355:int getLineStart() -> a
    1360:1360:int getLineEnd() -> d
    1365:1365:int getColumnStart() -> e
    1370:1370:int getColumnEnd() -> f
    1374:1374:int getFileIndex() -> b
    1379:1379:cn.com.codesec.util.FilePath getFile() -> g
    1384:1384:boolean isMacroExpansion() -> i
    1389:1389:cn.com.codesec.util.FilePath getAuxFile() -> j
    1393:1393:int getAuxFileIndex() -> c
    1398:1398:int getAuxLine() -> k
cn.com.codesec.scan.ir.symbols.SymbolTable -> cn.com.codesec.Mg:
    cn.com.codesec.scan.ir.nodes.IRDecl getStorageDecl(java.lang.String) -> a
    cn.com.codesec.scan.ir.symbols.SymbolTable getEnclosingTable() -> aE
cn.com.codesec.scan.ir.transformer.AltcallTransformer -> cn.com.codesec.Mh:
    cn.com.codesec.scan.ir.util.CallsiteCollector csc -> a
    21:23:void <init>() -> <init>
    27:27:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    32:47:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    53:53:java.lang.String getName() -> a
cn.com.codesec.scan.ir.transformer.CppExceptionTransformer -> cn.com.codesec.Mi:
    12:12:void <init>() -> <init>
    17:17:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    22:22:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    28:28:java.lang.String getName() -> a
cn.com.codesec.scan.ir.transformer.DotnetEnumBoxingTransformer -> cn.com.codesec.Mj:
    java.lang.String BOX_ENUM -> a
    cn.com.codesec.scan.metadata.TypeMeta dotnetEnumType -> b
    int tmpCounter -> c
    89:91:void <clinit>() -> <clinit>
    24:24:void <init>() -> <init>
    33:33:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    39:39:java.lang.String getName() -> a
    44:85:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    27:27:cn.com.codesec.scan.metadata.TypeMeta access$0() -> b
    27:27:void access$1(cn.com.codesec.scan.metadata.TypeMeta) -> a
    28:28:int access$2() -> c
    28:28:void access$3(int) -> a
cn.com.codesec.scan.ir.transformer.DotnetEnumBoxingTransformer$1 -> cn.com.codesec.Mk:
    boolean transformed -> a
    cn.com.codesec.scan.ir.transformer.DotnetEnumBoxingTransformer this$0 -> b
    1:45:void <init>(cn.com.codesec.scan.ir.transformer.DotnetEnumBoxingTransformer) -> <init>
    49:50:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> b
    55:83:java.lang.Boolean visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.scan.ir.transformer.IRTransformer -> cn.com.codesec.Ml:
    boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    java.lang.String getName() -> a
cn.com.codesec.scan.ir.transformer.LambdaCallRewriter -> cn.com.codesec.Mm:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey CALLS_PROP_RULES_FIRED -> b
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey CALLS_GENERATE_RULES_FIRED -> c
    java.util.concurrent.atomic.AtomicInteger tmpCounter -> d
    java.util.regex.Pattern methodSpecPattern -> e
    java.util.regex.Pattern swiftParameter -> f
    java.util.regex.Pattern paramTypePattern -> g
    cn.com.codesec.scan.ir.transformer.LambdaCallRewriter$TransformDefaultVisitor transformDefaultVisitor -> h
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> i
    78:886:void <clinit>() -> <clinit>
    78:104:void <init>() -> <init>
    88:88:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    94:94:java.lang.String getName() -> a
    99:101:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    107:135:void transformChildren(cn.com.codesec.scan.ir.nodes.IRFunDecl,org.apache.commons.lang3.mutable.MutableBoolean) -> a
    199:212:void transformChildren(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.meta.Language,cn.com.codesec.java.rules.AbstractLambdaCallRule,java.util.List,java.lang.String,org.apache.commons.lang3.mutable.MutableBoolean) -> a
    216:343:boolean transformChildren(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.meta.Language,cn.com.codesec.java.rules.AbstractLambdaCallRule,java.lang.String,java.util.List,java.lang.String,org.apache.commons.lang3.mutable.MutableBoolean) -> a
    348:380:java.lang.String getMethodUniqueName(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> a
    384:544:java.lang.String getUniqueName(java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet) -> a
    549:582:java.lang.String getMethodUniqueNameSwift(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> b
    587:588:java.lang.String getClassUniqueName(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> c
    593:603:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> d
    608:626:cn.com.codesec.scan.metadata.Type parseParamType(java.lang.String,cn.com.codesec.scan.meta.Language,java.lang.String) -> e
    631:681:cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall createFunctionPointerCall(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRStatement,java.util.List,cn.com.codesec.scan.meta.Language,cn.com.codesec.java.rules.AbstractLambdaCallRule) -> a
    685:685:boolean nonSequentialControlFlow(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    690:742:void rewriteExpression(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.java.rules.AbstractLambdaCallRule,cn.com.codesec.util.fset.FTreeSet) -> a
    746:787:cn.com.codesec.scan.metadata.TypeMeta getParamTypeForArg(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    792:825:cn.com.codesec.scan.metadata.FunMeta findFunctionalInterfaceMethod(cn.com.codesec.scan.metadata.TypeMeta) -> a
    829:866:org.apache.commons.lang3.tuple.Pair wrapAccessPath(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.model.AccessPath) -> a
    871:874:org.apache.commons.lang3.tuple.Pair wrapAccessPathResult(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    78:78:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> b
cn.com.codesec.scan.ir.transformer.LambdaCallRewriter$MethodSpecError -> cn.com.codesec.Mn:
    888:888:void <init>() -> <init>
    888:888:void <init>(cn.com.codesec.scan.ir.transformer.LambdaCallRewriter$MethodSpecError) -> <init>
cn.com.codesec.scan.ir.transformer.LambdaCallRewriter$TransformDefaultVisitor -> cn.com.codesec.Mo:
    139:139:void <init>() -> <init>
    143:144:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map) -> a
    148:193:void rewriteCall(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Map) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    139:139:void <init>(cn.com.codesec.scan.ir.transformer.LambdaCallRewriter$TransformDefaultVisitor) -> <init>
cn.com.codesec.scan.ir.transformer.PythonThisTransformer -> cn.com.codesec.Mp:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey DONE_ANNOTATION -> a
    java.util.concurrent.atomic.AtomicInteger tmpCounter -> b
    46:48:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    29:29:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    35:35:java.lang.String getName() -> a
    40:42:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    24:24:cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey access$0() -> b
    25:25:java.util.concurrent.atomic.AtomicInteger access$1() -> c
cn.com.codesec.scan.ir.transformer.PythonThisTransformer$Visitor -> cn.com.codesec.Mq:
    boolean changed -> a
    54:56:void <init>() -> <init>
    60:92:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    54:54:void <init>(cn.com.codesec.scan.ir.transformer.PythonThisTransformer$Visitor) -> <init>
    52:52:boolean access$2(cn.com.codesec.scan.ir.transformer.PythonThisTransformer$Visitor) -> a
cn.com.codesec.scan.ir.transformer.StateInjectionTransformer -> cn.com.codesec.Mr:
    cn.com.codesec.scan.metadata.TypeMeta stateType -> d
    cn.com.codesec.scan.metadata.TypeMeta workItemType -> e
    java.lang.String DUMMY_VAR_NAME -> a
    java.lang.String TEMP_VAR_PREFIX -> b
    cn.com.codesec.scan.metadata.TypeMeta stateAttrSymbol -> f
    boolean $assertionsDisabled -> c
    39:293:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    50:50:java.lang.String getName() -> a
    55:70:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    74:85:java.util.Map createIndexerMap(java.util.Collection) -> a
    90:136:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    140:147:boolean addDummyVariable(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.String,java.lang.String) -> a
    151:170:java.util.Collection findDummyDefinitions(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.String) -> a
    174:184:java.util.Map getDummyDefinitionsByType(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.String) -> b
    188:210:java.util.Collection findDummyVariables(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.String) -> c
    214:223:java.util.List resolveIndexers() -> b
    227:245:java.util.Map makeStateMap() -> c
    249:265:void addToMapIfStateDecorated(java.util.Map,cn.com.codesec.scan.metadata.FunMeta) -> a
    268:273:java.util.Map findStateInjectedProperties(java.util.Collection) -> b
    277:280:cn.com.codesec.scan.metadata.TypeMeta getStateAttrSymbol() -> d
    284:285:void log(java.lang.String) -> a
    288:289:void log(java.lang.String,java.lang.Exception) -> a
cn.com.codesec.scan.ir.transformer.StateInjectionTransformer$1 -> cn.com.codesec.Ms:
    java.lang.String val$varPrefix -> a
    java.util.Collection val$definitions -> b
    1:152:void <init>(java.lang.String,java.util.Collection) -> <init>
    155:161:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
cn.com.codesec.scan.ir.transformer.StateInjectionTransformer$2 -> cn.com.codesec.Mt:
    java.lang.String val$varPrefix -> a
    java.util.Collection val$dummyVariables -> b
    1:189:void <init>(java.lang.String,java.util.Collection) -> <init>
    192:195:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    200:201:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
cn.com.codesec.scan.ir.transformer.TransformerProcessor -> cn.com.codesec.Mu:
    cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey IN_PROCESS -> a
    java.util.List TRANSFORMERS -> b
    java.util.List LISTENERS -> c
    java.util.Set NO_NEED_TO_TRANSFORM -> d
    121:134:void <clinit>() -> <clinit>
    26:26:void <init>() -> <init>
    33:34:void registerTransformer(cn.com.codesec.scan.ir.transformer.IRTransformer) -> a
    37:38:void registerListener(cn.com.codesec.scan.ir.transformer.TransformerProcessor$Listener) -> a
    41:41:boolean isInTransformers(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    45:62:void process(cn.com.codesec.scan.metadata.FunMeta) -> a
    65:118:void process(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
cn.com.codesec.scan.ir.transformer.TransformerProcessor$Listener -> cn.com.codesec.Mv:
    void transformed(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
cn.com.codesec.scan.ir.transformer.TransformingVisitorAdapter -> cn.com.codesec.Mw:
    boolean $assertionsDisabled -> a
    11:11:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    15:18:cn.com.codesec.scan.ir.nodes.IRNode visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> c
    23:43:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    1:1:java.lang.Object visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> b
cn.com.codesec.scan.ir.transformer.WicketAllocationTransformer -> cn.com.codesec.Mx:
    cn.com.codesec.scan.metadata.TypeMeta wicketComponentTM -> c
    cn.com.codesec.scan.metadata.TypeMeta wicketFormCompTM -> d
    boolean result -> e
    boolean $assertionsDisabled -> b
    35:38:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    43:43:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    49:49:java.lang.String getName() -> a
    54:60:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    65:66:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    70:119:cn.com.codesec.scan.ir.nodes.IRNode visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> b
    124:139:cn.com.codesec.scan.ir.nodes.IRNode visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> b
    143:178:cn.com.codesec.scan.metadata.TypeMeta createDerivedMeta(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.ir.transformer.WicketCPMLabelingTransformer -> cn.com.codesec.My:
    cn.com.codesec.scan.metadata.TypeMeta wicketComponentTM -> c
    cn.com.codesec.scan.metadata.TypeMeta wicketCompoundPropertyModelTM -> d
    boolean $assertionsDisabled -> b
    27:30:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    34:34:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    40:40:java.lang.String getName() -> a
    45:51:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    56:57:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    61:113:cn.com.codesec.scan.ir.nodes.IRNode visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> b
    117:124:java.util.List customMapFilter(java.util.Set) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer -> cn.com.codesec.Mz:
    cn.com.codesec.scan.metadata.TypeMeta stringTM -> c
    cn.com.codesec.scan.metadata.TypeMeta wicketWebPageTM -> d
    cn.com.codesec.scan.metadata.TypeMeta wicketPropertyModelTM -> e
    cn.com.codesec.scan.metadata.FunMeta wicketPropertyModelCtorFM -> f
    cn.com.codesec.scan.metadata.TypeMeta wicketCompoundPropertyModelTM -> g
    int counter -> h
    boolean changed -> i
    java.lang.String labelPrefix -> j
    java.lang.String pointMatch -> k
    boolean $assertionsDisabled -> b
    42:254:void <clinit>() -> <clinit>
    54:58:void <init>() -> <init>
    62:62:boolean willVisit(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    68:68:java.lang.String getName() -> a
    73:87:boolean transformFunction(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> b
    92:93:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    97:110:cn.com.codesec.scan.ir.nodes.IRNode visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> b
    114:136:cn.com.codesec.scan.ir.nodes.IRNode processPropertyModelCtor(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
    140:148:cn.com.codesec.scan.ir.nodes.IRLocation buildSelectionExpr(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.String) -> a
    153:164:cn.com.codesec.scan.ir.nodes.IRLocation constructSelectionPath(java.lang.String[],int,cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    168:219:cn.com.codesec.scan.ir.nodes.IRNode processCompoundPropertyModelCtor(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.TypeMeta) -> b
    223:230:java.util.List customMapFilter(java.util.Set) -> a
    234:244:java.util.List matchingLabelsToPathsOfFldnames(cn.com.codesec.java.rules.label.LabelSet,java.lang.String) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    152:152:cn.com.codesec.scan.ir.nodes.IRLocation access$1(java.lang.String[],int,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath -> cn.com.codesec.MA:
    java.lang.String[] fldnames -> a
    cn.com.codesec.scan.ir.nodes.IRLocation pojo -> b
    cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath$AccessPath[] accessPaths -> c
    262:274:void <init>(java.lang.String[],cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    277:283:java.util.List getChains() -> a
    287:287:cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath$AccessPath[] getAccessPaths() -> b
    291:292:void setAccessPaths(cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath$AccessPath[]) -> a
    295:295:cn.com.codesec.scan.ir.nodes.IRLocation getPojo() -> c
    299:299:java.lang.String[] getFldnames() -> d
cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath$AccessPath -> cn.com.codesec.MB:
    int head -> a
    cn.com.codesec.scan.ir.nodes.IRLocation selectChain -> b
    cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath this$1 -> c
    307:310:void <init>(cn.com.codesec.scan.ir.transformer.WicketPropertyModelTransformer$MaximalAccessPath,int,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
cn.com.codesec.scan.ir.util.AnnotationKey -> cn.com.codesec.MC:
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier key -> a
    java.lang.Object dflt -> b
    14:17:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier) -> <init>
    19:22:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier,java.lang.Object) -> <init>
    25:25:cn.com.codesec.scan.ir.util.AnnotationKey$Identifier getId() -> a
    29:29:java.lang.Object getDefault() -> b
cn.com.codesec.scan.ir.util.AnnotationKey$Identifier -> cn.com.codesec.MD:
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier EXEMPT_FROM_SSA -> a
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier PREPROC_IN_PROGRESS -> b
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier PREPROC_RERUN_NEEDED -> c
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier SSA_CANONICAL_DECL -> d
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier SSA_CANONICAL_NODE -> e
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier SSA_VAR -> f
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier SSA_VAR_INFO -> g
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier UNREACHABLE_BASIC_BLOCKS -> h
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier SINGLE_USE_TEMP_INITIALIZER -> i
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier CANONICAL_DECL -> j
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier TYPE_INFERENCE_LOCATION_ID -> k
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier TYPE_INFERENCE_COMPLETE -> l
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier EXPRESSION_TARGETS -> m
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier BUFFER_SPLICE_SSI -> n
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier BUFFER_SPLICE_SSI_PROC -> o
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier NST_EXPANDER_CREAED -> p
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier NULL_ASSIGNMENT -> q
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier MATCH_INFO -> r
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier NST_WRAPPER_CACHE -> s
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier BIG_ARRAY_INIT -> t
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier FORMAT_STRING -> u
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier AUX_SOURCE_INFO -> v
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier FORTIFY_SOURCE_ANNOTATIONS -> w
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier FROM_MACRO -> x
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier LABEL -> y
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier STRING_LENGTH -> z
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier TYPE_CAST -> A
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier GENERATED_TYPE_CAST -> B
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier DOTNET20_IF_GENERATED -> C
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier DOTNET20_LOCK_BEGIN -> D
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier LIST_SPREAD_ARGUMENT -> E
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier MAP_SPREAD_ARGUMENT -> F
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier NAMED_ARGUMENT -> G
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier CALLS_PROP_RULES_FIRED -> H
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier CALLS_GENERATE_RULES_FIRED -> I
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier PYTHON_THIS_TRANSFORMED -> J
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier TRANSFORMER_IN_PROCESS -> K
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier FUNCTION_MODEL_TARGETS -> L
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier FUNCTION_MODEL_PARAMETER_TYPE -> M
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier DISPATCHER_RULE_MATCH_TYPE -> N
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier GETTER_SETTER_TYPE -> O
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier GETTER_SETTER_IGNORE -> P
    cn.com.codesec.scan.ir.util.AnnotationKey$Identifier[] ENUM$VALUES -> Q
    54:97:void <clinit>() -> <clinit>
    54:54:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.ir.util.AnnotationKey$Identifier[] values() -> values
    1:1:cn.com.codesec.scan.ir.util.AnnotationKey$Identifier valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey -> cn.com.codesec.ME:
    46:47:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier) -> <init>
    50:51:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier,java.lang.Object) -> <init>
cn.com.codesec.scan.ir.util.AnnotationKey$TransientAnnotationKey -> cn.com.codesec.MF:
    35:36:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier) -> <init>
    39:40:void <init>(cn.com.codesec.scan.ir.util.AnnotationKey$Identifier,java.lang.Object) -> <init>
cn.com.codesec.scan.ir.util.CallsiteCollector -> cn.com.codesec.MG:
    12:12:void <init>() -> <init>
    16:18:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.util.Set) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.CuResolver -> cn.com.codesec.MH:
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit cu -> a
    20:22:void <init>() -> <init>
    26:27:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Void) -> a
    32:42:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.IRUtil -> cn.com.codesec.MI:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators -> b
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> c
    52:52:void <clinit>() -> <clinit>
    52:52:void <init>() -> <init>
    55:64:cn.com.codesec.scan.ir.nodes.IRExpression simplifyExpression(cn.com.codesec.scan.ir.nodes.IRExpression,boolean) -> a
    68:102:cn.com.codesec.scan.ir.nodes.IRExpression simplifyPredicate(cn.com.codesec.scan.ir.nodes.IROpExp,boolean) -> a
    106:106:cn.com.codesec.scan.ir.nodes.IRVarAccess introduceTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.String,int) -> a
    109:109:cn.com.codesec.scan.ir.nodes.IRVarAccess introduceTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.String,int,cn.com.codesec.scan.metadata.Type) -> a
    112:112:cn.com.codesec.scan.ir.nodes.IRVarAccess introduceTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.String,int,boolean) -> a
    115:115:cn.com.codesec.scan.ir.nodes.IRVarAccess introduceTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.String,int,boolean,boolean,boolean) -> a
    118:137:cn.com.codesec.scan.ir.nodes.IRVarAccess introduceTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.String,int,boolean,boolean,boolean,cn.com.codesec.scan.metadata.Type) -> a
    141:150:void insertStatements(java.util.List,cn.com.codesec.scan.ir.nodes.IRBlock,int) -> a
    153:159:void addStatementsBefore(java.util.List,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    162:172:void addStatementsAfter(java.util.List,cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    175:201:java.util.List allocAndConstruct(cn.com.codesec.parse.ir.SourceInfo,java.lang.String,int,cn.com.codesec.scan.metadata.FunMeta) -> a
    205:236:java.util.Collection findIndexers(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.metadata.TypeMeta) -> a
    240:240:cn.com.codesec.scan.ir.nodes.IRType makeNSTType(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.metadata.TypeMeta) -> a
    244:244:cn.com.codesec.scan.ir.nodes.IRType makeNSTType(cn.com.codesec.scan.meta.Language,cn.com.codesec.parse.ir.SourceInfo) -> a
    248:248:cn.com.codesec.scan.ir.nodes.IRType makeNewNSTType(cn.com.codesec.scan.meta.Language,cn.com.codesec.parse.ir.SourceInfo,java.lang.String) -> a
    252:260:java.util.List makeDummyArgument(cn.com.codesec.scan.meta.Language,cn.com.codesec.parse.ir.SourceInfo,java.lang.String,java.lang.String) -> a
    264:264:cn.com.codesec.scan.ir.nodes.IRVarAccess accessDummyArgument(java.util.List,cn.com.codesec.parse.ir.SourceInfo) -> a
    268:270:cn.com.codesec.scan.ir.nodes.IRVarAccess newThisReference(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    274:291:cn.com.codesec.scan.ir.nodes.IRFieldAccess newFieldAccess(cn.com.codesec.parse.ir.SourceInfo,java.lang.String,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    295:295:java.lang.String createUniqueName(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    299:302:cn.com.codesec.scan.ir.nodes.IRCallStmt newCallStmt(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRLocation[]) -> a
    306:307:cn.com.codesec.scan.ir.nodes.IRVarAccess newVarAccess(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    312:322:void performComplexityMetrics(cn.com.codesec.scan.metadata.FunMeta,java.io.PrintWriter) -> a
    325:338:cn.com.codesec.scan.metadata.Type mkTypeForVisibilityFld(java.lang.String) -> b
    341:351:cn.com.codesec.scan.metadata.TypeMeta jspTypeMetaFromPagePath(java.lang.String) -> a
    354:371:java.lang.String handleNestedClasses(java.lang.String) -> c
    375:382:cn.com.codesec.scan.metadata.FunMeta mkFakeFun(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[]) -> a
    387:519:java.lang.String getUniqueName(java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet) -> a
    52:52:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$IROperators() -> a
    52:52:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> b
cn.com.codesec.scan.ir.util.IRUtil$1 -> cn.com.codesec.MJ:
    java.util.List indexers -> a
    cn.com.codesec.scan.metadata.TypeMeta val$desiredEnclosingClass -> b
    1:210:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    215:217:java.util.Collection visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Void) -> a
    222:233:java.util.Collection visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.IRUtil$NodeCounterVisitor -> cn.com.codesec.MK:
    int nodeCount -> a
    int returnCount -> b
    int callsiteCount -> c
    521:521:void <init>() -> <init>
    529:531:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
    535:536:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    541:542:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    521:521:void <init>(cn.com.codesec.scan.ir.util.IRUtil$NodeCounterVisitor) -> <init>
    523:523:int access$1(cn.com.codesec.scan.ir.util.IRUtil$NodeCounterVisitor) -> a
    524:524:int access$2(cn.com.codesec.scan.ir.util.IRUtil$NodeCounterVisitor) -> b
    525:525:int access$3(cn.com.codesec.scan.ir.util.IRUtil$NodeCounterVisitor) -> c
cn.com.codesec.scan.ir.util.IRValidator -> cn.com.codesec.ML:
    34:34:void <init>() -> <init>
    38:39:void fail(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String) -> a
    43:47:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    51:55:java.lang.Void visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    60:64:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    69:72:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRGoto,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    77:116:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    121:145:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    150:158:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    163:168:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    173:177:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRDereference,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    182:187:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    192:200:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visitExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> b
    1:1:void defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.MutableStatement -> cn.com.codesec.MM:
    16:17:void <init>(cn.com.codesec.scan.ir.nodes.IRStatement) -> <init>
    20:20:boolean isReturnStmt() -> a
    24:30:boolean decrement() -> b
cn.com.codesec.scan.ir.util.ObjectAllocation -> cn.com.codesec.MN:
    cn.com.codesec.scan.ir.nodes.IRDeclStatement declStmt -> a
    cn.com.codesec.scan.ir.nodes.IRAssignmentStmt copyStmt -> b
    cn.com.codesec.scan.ir.nodes.IRCallStmt initStmt -> c
    30:37:void <init>(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,java.lang.String,int,cn.com.codesec.scan.meta.Language) -> <init>
    40:40:cn.com.codesec.scan.ir.nodes.IRVarAccess newAccess(cn.com.codesec.parse.ir.SourceInfo) -> a
    44:47:cn.com.codesec.scan.ir.nodes.IRStatement addTo(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    51:53:cn.com.codesec.scan.ir.nodes.IRStatement addAfter(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
cn.com.codesec.scan.ir.util.Resolver -> cn.com.codesec.MO:
    cn.com.codesec.scan.util.collections.LockingSet ALREADY_WARNED_VARS -> b
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit cu -> c
    boolean reresolve -> d
    java.util.Map generated -> e
    boolean $assertionsDisabled -> a
    65:380:void <clinit>() -> <clinit>
    74:74:java.util.Map getGenerated() -> a
    77:81:void <init>(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,boolean) -> <init>
    84:85:void expireData() -> b
    89:93:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRBlock,cn.com.codesec.util.fset.FMap) -> a
    98:103:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,cn.com.codesec.util.fset.FMap) -> a
    108:111:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,cn.com.codesec.util.fset.FMap) -> a
    116:117:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,cn.com.codesec.util.fset.FMap) -> a
    122:132:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.util.fset.FMap) -> a
    137:137:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,cn.com.codesec.util.fset.FMap) -> a
    142:142:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,cn.com.codesec.util.fset.FMap) -> a
    147:150:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRType,cn.com.codesec.util.fset.FMap) -> a
    155:193:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,cn.com.codesec.util.fset.FMap) -> a
    198:200:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,cn.com.codesec.util.fset.FMap) -> a
    204:205:cn.com.codesec.util.fset.FMap defaultVisit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.util.fset.FMap) -> b
    210:210:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRAllocation,cn.com.codesec.util.fset.FMap) -> a
    215:215:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,cn.com.codesec.util.fset.FMap) -> a
    220:220:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,cn.com.codesec.util.fset.FMap) -> a
    225:225:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,cn.com.codesec.util.fset.FMap) -> a
    230:230:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,cn.com.codesec.util.fset.FMap) -> a
    235:235:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,cn.com.codesec.util.fset.FMap) -> a
    240:240:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,cn.com.codesec.util.fset.FMap) -> a
    245:245:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,cn.com.codesec.util.fset.FMap) -> a
    250:250:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRConditional,cn.com.codesec.util.fset.FMap) -> a
    255:255:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRDecl,cn.com.codesec.util.fset.FMap) -> a
    260:260:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRDereference,cn.com.codesec.util.fset.FMap) -> a
    265:265:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRExpression,cn.com.codesec.util.fset.FMap) -> a
    270:270:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,cn.com.codesec.util.fset.FMap) -> a
    275:275:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.util.fset.FMap) -> a
    280:280:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,cn.com.codesec.util.fset.FMap) -> a
    285:285:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,cn.com.codesec.util.fset.FMap) -> a
    290:290:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRGoto,cn.com.codesec.util.fset.FMap) -> a
    295:295:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRIfThen,cn.com.codesec.util.fset.FMap) -> a
    300:300:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,cn.com.codesec.util.fset.FMap) -> a
    305:305:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,cn.com.codesec.util.fset.FMap) -> a
    310:310:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,cn.com.codesec.util.fset.FMap) -> a
    315:315:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,cn.com.codesec.util.fset.FMap) -> a
    320:320:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.util.fset.FMap) -> a
    325:325:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,cn.com.codesec.util.fset.FMap) -> a
    330:330:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.util.fset.FMap) -> a
    335:335:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,cn.com.codesec.util.fset.FMap) -> a
    340:340:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IROpExp,cn.com.codesec.util.fset.FMap) -> a
    345:345:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,cn.com.codesec.util.fset.FMap) -> a
    350:350:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.util.fset.FMap) -> a
    355:355:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,cn.com.codesec.util.fset.FMap) -> a
    360:360:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,cn.com.codesec.util.fset.FMap) -> a
    365:365:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,cn.com.codesec.util.fset.FMap) -> a
    370:370:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,cn.com.codesec.util.fset.FMap) -> a
    375:375:cn.com.codesec.util.fset.FMap visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,cn.com.codesec.util.fset.FMap) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.TemporaryVariableFactory -> cn.com.codesec.MP:
    int nextTempID -> b
    java.lang.String prefix -> a
    cn.com.codesec.scan.ir.nodes.IRVarDecl currVarDecl -> c
    cn.com.codesec.scan.ir.nodes.IRStatement lastStatement -> d
    java.lang.String typeName -> e
    31:31:cn.com.codesec.scan.ir.nodes.IRVarDecl getCurrentVarDecl() -> a
    35:36:void setCurrentVarDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    39:39:cn.com.codesec.scan.ir.nodes.IRStatement getLastStatement() -> b
    43:44:void setLastStatement(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    46:50:void <init>(java.lang.String) -> <init>
    53:55:java.lang.String nextVariableName() -> c
    59:60:void setTypeName(java.lang.String) -> a
    63:63:java.lang.String getTypeName() -> d
    67:68:void resetTypeName() -> e
    71:77:void declareNewTempAfter(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    80:88:void defineNewTempAfter(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    91:91:cn.com.codesec.scan.ir.nodes.IRVarAccess accessCurrentTempAt(cn.com.codesec.parse.ir.SourceInfo) -> a
    95:103:void newTemp(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    106:113:void newThisReference(cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
cn.com.codesec.scan.ir.util.Tools -> cn.com.codesec.MQ:
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey SINGLE_USE_TEMP_INITIALIZER -> b
    java.lang.String[] DOTNET_NUMERIC_TYPES -> c
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> d
    77:1037:void <clinit>() -> <clinit>
    77:77:void <init>() -> <init>
    83:96:java.lang.String getCanonicalTypeName(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> a
    100:100:java.lang.String getCanonicalVariableName(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    104:105:cn.com.codesec.scan.ir.nodes.IRVarDecl getCanonicalVariable(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> b
    109:123:java.lang.String getCanonicalVariableName(cn.com.codesec.scan.ir.nodes.IRVarDecl,boolean) -> a
    129:133:java.lang.String getStringForVar(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> c
    137:138:java.lang.String getSingleUseTempString(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> f
    142:143:cn.com.codesec.scan.ir.nodes.IRExpression getSingleUseTempExpression(cn.com.codesec.scan.ir.nodes.IRVarAccess) -> a
    148:215:cn.com.codesec.scan.ir.nodes.IRExpression getSingleUseTempExpression(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> d
    219:259:boolean isNumericType(cn.com.codesec.scan.metadata.Type) -> a
    263:267:cn.com.codesec.scan.metadata.Type cTypeStringToPrimitiveType(java.lang.String) -> a
    271:271:java.lang.String primitiveTypeToString(cn.com.codesec.parse.ir.PrimitiveType) -> a
    275:339:java.lang.String unescape(java.lang.String) -> b
    343:346:java.lang.String externalizeFunctionName(cn.com.codesec.scan.metadata.FunMeta,boolean) -> a
    350:375:java.lang.String externalizeFunctionName(cn.com.codesec.scan.metadata.FunMeta,boolean,boolean) -> a
    380:401:cn.com.codesec.scan.metadata.Namespace getNamespaceForVar(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> e
    405:406:boolean skipC(java.lang.String,cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRDecl,cn.com.codesec.scan.ir.symbols.SymbolTable) -> a
    410:443:cn.com.codesec.scan.ir.nodes.IRDecl resolveStorage(java.lang.String,cn.com.codesec.scan.ir.nodes.IRNode) -> a
    447:447:cn.com.codesec.scan.ir.nodes.IRLocation getUnderlyingLocation(cn.com.codesec.scan.ir.nodes.IRExpression) -> a
    451:454:boolean compareLocations(cn.com.codesec.scan.ir.nodes.IRLocation,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    460:461:boolean isTempVarName(java.lang.String) -> c
    465:465:boolean isHiddenName(java.lang.String) -> d
    469:482:boolean isWriteAccess(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    486:486:java.lang.String addEscapes(java.lang.String) -> e
    490:544:java.lang.String addEscapes(java.lang.String,boolean) -> a
    549:559:boolean isRuntimeConstant(cn.com.codesec.scan.ir.nodes.IRLocation) -> b
    564:576:java.util.List getAssociatedCatchBlocks(cn.com.codesec.scan.ir.nodes.IRBlock) -> a
    581:596:cn.com.codesec.scan.ir.nodes.IRBlock getAssociatedFinallyBlock(cn.com.codesec.scan.ir.nodes.IRBlock) -> b
    601:650:void appendTypeSymbol(cn.com.codesec.scan.metadata.Type,java.lang.StringBuffer) -> a
    653:680:java.lang.String getJavaSignatureString(cn.com.codesec.scan.metadata.FunMeta) -> a
    685:690:boolean isInFinallyBlock(cn.com.codesec.scan.ir.nodes.IRExpression) -> b
    694:703:boolean isInAutoToStringCallIfElse(cn.com.codesec.scan.ir.nodes.IRExpression) -> c
    708:708:boolean isInstanceOf(cn.com.codesec.scan.metadata.FunMeta) -> b
    713:728:boolean isImplicitObjectToStringCoversion(cn.com.codesec.scan.ir.nodes.IRLocation) -> c
    733:748:cn.com.codesec.scan.ir.nodes.IRVarAccess getBaseVar(cn.com.codesec.scan.ir.nodes.IRExpression) -> d
    752:780:boolean canConvert(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> a
    784:789:boolean isSubClass(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.TypeMeta) -> a
    794:913:boolean adjustJumpsToCatchBlocks(cn.com.codesec.scan.ir.nodes.IRBlock) -> c
    918:922:cn.com.codesec.scan.metadata.TypeMeta getTypeSymbolSafely(java.lang.String) -> f
    928:935:cn.com.codesec.scan.metadata.FunMeta getFunctionSafely(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    940:955:java.util.Collection getTypesByLanguage(cn.com.codesec.scan.meta.Language) -> a
    960:969:void mapAdd(java.util.Map,java.lang.Object,java.lang.Object) -> a
    972:978:cn.com.codesec.scan.metadata.FunMeta resolveTo(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.String) -> a
    982:991:cn.com.codesec.scan.metadata.FunMeta resolveTo(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.String) -> a
    995:1010:java.util.Set findCallsTo(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.String) -> a
    1014:1031:java.lang.String findStringValue(cn.com.codesec.scan.ir.nodes.IRLocation) -> d
    77:77:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> a
cn.com.codesec.scan.ir.util.Tools$1 -> cn.com.codesec.MR:
    java.util.Map val$initializers -> a
    cn.com.codesec.scan.ir.nodes.IRFunDecl val$fd -> b
    1:161:void <init>(java.util.Map,cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    164:168:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Void) -> a
    173:186:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.Tools$2 -> cn.com.codesec.MS:
    java.util.Stack catchTypeStack -> b
    java.util.Stack tryBlockStack -> c
    java.util.Set jumpGeneratedFor -> d
    long count -> a
    java.util.Map val$insertions -> e
    1:799:void <init>(java.util.Map) -> <init>
    803:822:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Void) -> a
    827:854:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    859:873:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Void) -> a
    877:902:void generateJumpToCatch(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.nodes.IRBlock,boolean) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.Tools$3 -> cn.com.codesec.MT:
    java.lang.String val$uniqueName -> a
    java.util.Set val$calls -> b
    1:996:void <init>(java.lang.String,java.util.Set) -> <init>
    1000:1006:java.lang.Void visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Void) -> a
    1:1:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
cn.com.codesec.scan.ir.util.memory.CachedIIDStringRef -> cn.com.codesec.MU:
    cn.com.codesec.scan.ir.util.memory.IRRef ref -> b
    java.lang.String iidString -> c
    boolean $assertionsDisabled -> a
    14:14:void <clinit>() -> <clinit>
    19:23:void <init>(cn.com.codesec.scan.ir.util.memory.IRRef,java.lang.String) -> <init>
    27:27:cn.com.codesec.scan.ir.nodes.IRNode get() -> a
    32:32:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    37:37:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    42:42:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    47:47:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
    52:52:java.lang.String getIIDString() -> H
    57:57:java.lang.String toString() -> toString
    62:62:int hashCode() -> hashCode
    67:67:boolean equals(java.lang.Object) -> equals
    72:83:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
cn.com.codesec.scan.ir.util.memory.ClassDeclRef -> cn.com.codesec.MV:
    java.lang.ref.WeakReference ref -> a
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit cu -> b
    22:25:void <init>(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> <init>
    29:29:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    34:34:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    39:39:cn.com.codesec.scan.ir.nodes.IRClassDecl get() -> a
    44:44:cn.com.codesec.scan.ir.nodes.IRClassDecl getNode() -> b
    49:49:cn.com.codesec.scan.ir.nodes.IRClassDecl getNodeIfAvailable() -> c
    54:54:java.lang.String getIIDString() -> H
    59:59:int hashCode() -> hashCode
    64:64:boolean equals(java.lang.Object) -> equals
    69:83:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
cn.com.codesec.scan.ir.util.memory.CuChild -> cn.com.codesec.MW:
    cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> e
cn.com.codesec.scan.ir.util.memory.FunDeclRef -> cn.com.codesec.MX:
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit cu -> a
    java.lang.ref.Reference javaRef -> b
    cn.com.codesec.scan.ir.nodes.IRFunDecl decl -> c
    java.lang.Integer serID -> d
    java.lang.String uniqueName -> e
    int indexInCU -> f
    cn.com.codesec.scan.metadata.FunMeta meta -> g
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> h
    28:35:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    38:38:int getIndexInCU() -> b
    42:50:void complete(int) -> a
    53:53:boolean isComplete() -> c
    58:58:cn.com.codesec.scan.metadata.FunMeta getSymbol() -> d
    63:63:cn.com.codesec.scan.ir.nodes.IRFunDecl get() -> f
    68:87:cn.com.codesec.scan.ir.nodes.IRFunDecl getNode() -> g
    92:98:cn.com.codesec.scan.ir.nodes.IRFunDecl getNodeIfAvailable() -> h
    102:105:void clear() -> i
    109:109:java.lang.String getIIDString() -> H
    113:113:java.lang.Integer getSerializeID() -> j
    118:118:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    123:123:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    128:128:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> e
    133:133:int hashCode() -> hashCode
    138:144:boolean equals(java.lang.Object) -> equals
    149:160:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
    1:1:cn.com.codesec.scan.meta.Symbol getSymbol() -> a
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
cn.com.codesec.scan.ir.util.memory.IRFileLoader -> cn.com.codesec.MY:
    java.util.concurrent.ConcurrentMap cuTable -> a
    cn.com.codesec.util.IRFile source -> b
    105:106:void <clinit>() -> <clinit>
    24:26:void <init>(cn.com.codesec.util.IRFile) -> <init>
    30:30:cn.com.codesec.scan.ir.nodes.IRCompilationUnit get() -> a
    36:55:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getNode() -> b
    60:60:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    65:65:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    70:70:int hashCode() -> hashCode
    75:75:boolean equals(java.lang.Object) -> equals
    80:91:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    96:96:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getNodeIfAvailable() -> c
    101:101:java.lang.String getIIDString() -> H
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    1:1:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
cn.com.codesec.scan.ir.util.memory.IRHardRef -> cn.com.codesec.MZ:
    cn.com.codesec.scan.ir.nodes.IRNode nst -> a
    19:21:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    25:25:cn.com.codesec.scan.ir.nodes.IRNode get() -> a
    30:30:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    35:35:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    40:40:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    45:45:int hashCode() -> hashCode
    50:50:boolean equals(java.lang.Object) -> equals
    55:66:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    71:71:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
    76:76:java.lang.String getIIDString() -> H
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
cn.com.codesec.scan.ir.util.memory.IRRef -> cn.com.codesec.Na:
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
    java.lang.String getIIDString() -> H
cn.com.codesec.scan.ir.util.memory.IndexedRef -> cn.com.codesec.Nb:
    cn.com.codesec.scan.ir.util.memory.IRRef owner -> a
    int id -> b
    java.lang.String str -> c
    java.lang.ref.Reference javaRef -> d
    25:36:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,cn.com.codesec.scan.ir.util.memory.IRRef) -> <init>
    40:40:cn.com.codesec.scan.ir.nodes.IRNode get() -> a
    45:60:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> P
    65:68:cn.com.codesec.scan.ir.nodes.IRNode getNodeIfAvailable() -> O
    73:73:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCompilationUnit() -> x
    78:78:cn.com.codesec.util.IRFile getCompilationUnitNstFile() -> v
    83:83:java.lang.String getIIDString() -> H
    88:88:java.lang.String toString() -> toString
    93:93:int hashCode() -> hashCode
    98:108:boolean equals(java.lang.Object) -> equals
    113:124:int compareTo(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.lang.Object get() -> get
cn.com.codesec.scan.ir.util.memory.ReferenceFactory -> cn.com.codesec.Nc:
    boolean initialized -> a
    boolean useWeakRef -> b
    30:32:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    15:26:java.lang.ref.Reference createReference(java.lang.Object) -> a
cn.com.codesec.scan.ir.writer.IRWriter -> cn.com.codesec.Nd:
    org.apache.log4j.Logger LOG -> a
    cn.com.codesec.scan.ir.nodes.IRNode nst -> d
    boolean includeSourceInfo -> e
    boolean onlySignatures -> f
    boolean printCasts -> b
    boolean printLabels -> c
    java.io.PrintWriter out -> g
    int indent -> h
    boolean newline -> j
    cn.com.codesec.parse.ir.SourceInfo si -> k
    int curLineNumber -> l
    cn.com.codesec.util.FilePath curFile -> m
    cn.com.codesec.scan.meta.Language language -> n
    java.lang.String[] EMPTY_TOKENS -> o
    java.util.Map declMap -> p
    boolean $assertionsDisabled -> i
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> q
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> r
    78:1165:void <clinit>() -> <clinit>
    98:109:void <init>(cn.com.codesec.scan.ir.nodes.IRNode) -> <init>
    111:124:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,boolean,boolean) -> <init>
    127:128:void write(java.io.StringWriter) -> a
    131:131:void doClosure() -> c
    135:142:void write(java.io.PrintWriter) -> a
    145:163:void write(java.io.File,boolean) -> a
    166:167:void write(java.io.OutputStream) -> a
    171:178:void write(java.io.OutputStream,boolean) -> a
    181:182:void setPrintCasts(boolean) -> a
    185:186:void setPrintLabels(boolean) -> b
    189:199:void write(java.lang.String) -> a
    202:205:void write(java.lang.String[]) -> a
    208:210:void endline() -> d
    213:245:void writeSourceInfo(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    248:267:void writeSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    270:274:void writeSourceInfoAndLabel(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    277:283:void writeLabel(cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    287:294:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    299:299:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRArrayAccess,java.lang.Object) -> a
    304:310:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    315:315:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBinaryOpExp,java.lang.Object) -> a
    320:337:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    342:346:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    351:361:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCatchBlock,java.lang.Object) -> a
    366:391:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    396:408:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    413:413:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRConditional,java.lang.Object) -> a
    418:418:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDecl,java.lang.Object) -> a
    423:427:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    432:432:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> a
    437:455:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    460:471:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    476:479:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    483:486:java.lang.String getNameToWrite(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    491:511:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    516:519:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAlternativeFunCall,java.lang.Object) -> a
    523:533:void printFunCallArguments(java.util.List,java.util.List,java.lang.Object) -> a
    536:539:void printAltCalls(java.lang.Iterable,java.lang.Object) -> a
    543:543:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunctionPointerCall,java.lang.Object) -> a
    548:548:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLateBoundFunCall,java.lang.Object) -> a
    553:600:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    605:610:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    615:630:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    635:635:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThenElse,java.lang.Object) -> a
    640:675:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    680:680:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLocation,java.lang.Object) -> a
    685:696:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIndexedAccess,java.lang.Object) -> a
    701:712:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRMapAccess,java.lang.Object) -> a
    717:728:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDereference,java.lang.Object) -> a
    733:733:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.Object) -> b
    738:738:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNonstaticFieldAccess,java.lang.Object) -> a
    743:746:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    751:765:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    770:780:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    785:785:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStatement,java.lang.Object) -> a
    790:790:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRStaticFieldAccess,java.lang.Object) -> a
    795:805:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRThrowStmt,java.lang.Object) -> a
    810:820:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRTryCatchFinally,java.lang.Object) -> a
    824:843:void printTypeName(cn.com.codesec.scan.metadata.Type) -> a
    847:863:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    867:893:void printType(cn.com.codesec.scan.metadata.Type,java.util.List,int,java.lang.Object) -> a
    896:901:void writeExpressionTypeCast(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> b
    904:910:void castOpen(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> c
    913:916:void castClose(cn.com.codesec.scan.ir.nodes.IRExpression,java.lang.Object) -> d
    920:920:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRUnaryOpExp,java.lang.Object) -> a
    925:925:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRValueReturn,java.lang.Object) -> a
    930:935:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    940:946:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    951:962:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    966:967:void writeModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    970:971:void writePrimitiveType(cn.com.codesec.parse.ir.PrimitiveType) -> a
    974:980:java.lang.String normalize(java.lang.String) -> b
    984:987:void printTokens(java.io.PrintWriter,java.lang.String[]) -> a
    990:991:void writeModifiers(java.io.PrintWriter,cn.com.codesec.parse.ir.IRModifierSet) -> a
    994:1042:java.lang.String[] getModifierTokens(cn.com.codesec.parse.ir.IRModifierSet) -> b
    1046:1047:void writePrimitiveType(java.io.PrintWriter,cn.com.codesec.parse.ir.PrimitiveType) -> a
    1050:1155:java.lang.String getPrimitiveTypeString(cn.com.codesec.parse.ir.PrimitiveType) -> b
    1160:1160:int getColumnNumber(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    78:78:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> e
    78:78:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> f
cn.com.codesec.scan.meta.Language -> cn.com.codesec.Ne:
    cn.com.codesec.scan.meta.Language ACTIONSCRIPT -> a
    cn.com.codesec.scan.meta.Language C -> b
    cn.com.codesec.scan.meta.Language CPP -> c
    cn.com.codesec.scan.meta.Language JAVA -> d
    cn.com.codesec.scan.meta.Language SCALA -> e
    cn.com.codesec.scan.meta.Language APEX -> f
    cn.com.codesec.scan.meta.Language JSP -> g
    cn.com.codesec.scan.meta.Language PLSQL -> h
    cn.com.codesec.scan.meta.Language TSQL -> i
    cn.com.codesec.scan.meta.Language ANY_SQL -> j
    cn.com.codesec.scan.meta.Language CSHARP -> k
    cn.com.codesec.scan.meta.Language ASPX -> l
    cn.com.codesec.scan.meta.Language VB -> m
    cn.com.codesec.scan.meta.Language CFML -> n
    cn.com.codesec.scan.meta.Language HTML -> o
    cn.com.codesec.scan.meta.Language JAVASCRIPT -> p
    cn.com.codesec.scan.meta.Language PHP -> q
    cn.com.codesec.scan.meta.Language ASP -> r
    cn.com.codesec.scan.meta.Language VBSCRIPT -> s
    cn.com.codesec.scan.meta.Language VB6 -> t
    cn.com.codesec.scan.meta.Language COBOL -> u
    cn.com.codesec.scan.meta.Language PYTHON -> v
    cn.com.codesec.scan.meta.Language ABAP -> w
    cn.com.codesec.scan.meta.Language OBJC -> x
    cn.com.codesec.scan.meta.Language OBJCPP -> y
    cn.com.codesec.scan.meta.Language SWIFT -> z
    cn.com.codesec.scan.meta.Language RUBY -> A
    cn.com.codesec.scan.meta.Language TYPESCRIPT -> B
    cn.com.codesec.scan.meta.Language XAMARIN_ANDROID -> C
    cn.com.codesec.scan.meta.Language XAMARIN_IOS -> D
    cn.com.codesec.scan.meta.Language$Impl impl -> E
    cn.com.codesec.scan.meta.Language[] ENUM$VALUES -> F
    16:47:void <clinit>() -> <clinit>
    51:53:void <init>(java.lang.String,int,cn.com.codesec.scan.meta.Language$Impl) -> <init>
    56:56:boolean isC() -> a
    60:60:boolean isCpp() -> b
    64:64:boolean isObjC() -> c
    68:68:boolean isObjCpp() -> d
    72:72:boolean isJava() -> e
    76:76:boolean isApex() -> f
    80:80:boolean isJsp() -> g
    84:84:boolean isScala() -> h
    88:88:boolean isJavaScript() -> i
    92:92:boolean isRuby() -> j
    96:96:boolean isSwift() -> k
    100:100:boolean isPhp() -> l
    104:104:boolean isPython() -> m
    108:108:boolean isDotnet() -> n
    111:111:boolean isAspx() -> o
    114:114:boolean isVB() -> p
    118:118:boolean isVBScript() -> q
    122:122:boolean isSql() -> r
    126:126:boolean isCFML() -> s
    130:130:boolean isCobol() -> t
    134:134:boolean isAbap() -> u
    138:138:boolean isTypeScript() -> v
    142:142:boolean isXamarinAndroid() -> w
    146:146:boolean isXamarinIOS() -> x
    150:150:boolean isXamarin() -> y
    154:154:boolean hasCaseInsensitiveIdentifiers() -> z
    158:158:boolean zeroIsNull() -> A
    162:162:boolean zeroIsFalse() -> B
    166:166:boolean isDynamicallyTyped() -> C
    170:170:boolean isScriptingLanguage() -> D
    174:174:boolean hasNestedClasses() -> E
    178:178:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> a
    182:182:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    186:186:java.lang.String getNamespaceSeparator() -> F
    191:191:cn.com.codesec.scan.metadata.Type canonicalStringType() -> G
    195:195:boolean fieldAccessDoesImplicitDereference() -> H
    199:199:boolean arrayAccessDoesImplicitDereference() -> I
    203:203:boolean isMultipleIndirectionAllowed() -> J
    207:207:boolean capturesByPointer() -> K
    211:211:boolean hoaOnly() -> L
    216:216:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> M
    221:221:java.lang.String closureMethodFieldName() -> N
    226:226:java.lang.String closureEnvironmentFieldName() -> O
    230:230:cn.com.codesec.util.fset.FSet internalFieldNames() -> P
    234:234:boolean isEnvironmentType(cn.com.codesec.scan.metadata.Type) -> a
    238:238:boolean isStaticInitializer(java.lang.String) -> a
    242:242:boolean allCallsPassGlobals() -> Q
    246:246:boolean functionPointerCallPassesGlobals() -> R
    250:250:boolean allCallsPassThis() -> S
    254:254:boolean passClosureAsThis() -> T
    258:258:boolean hasExplicitThisParam() -> U
    263:263:java.lang.String toString() -> toString
    267:267:java.lang.String toPrettyString() -> V
    272:277:cn.com.codesec.scan.meta.Language convertFromNstString(java.lang.String) -> b
    282:282:java.lang.String getUnnamedGlobalName() -> W
    286:286:boolean isReachingType(cn.com.codesec.scan.metadata.Type) -> b
    1:1:cn.com.codesec.scan.meta.Language[] values() -> values
    1:1:cn.com.codesec.scan.meta.Language valueOf(java.lang.String) -> valueOf
    49:49:cn.com.codesec.scan.meta.Language$Impl access$2(cn.com.codesec.scan.meta.Language) -> c
cn.com.codesec.scan.meta.Language$ASP -> cn.com.codesec.Nf:
    1150:1150:void <init>() -> <init>
    1154:1154:java.lang.String toString() -> toString
    1159:1159:java.lang.String toPrettyString() -> a
    1150:1150:void <init>(cn.com.codesec.scan.meta.Language$ASP) -> <init>
cn.com.codesec.scan.meta.Language$Abap -> cn.com.codesec.Ng:
    1267:1267:void <init>() -> <init>
    1271:1271:java.lang.String toString() -> toString
    1276:1276:boolean isAbap() -> b
    1281:1281:java.lang.String toPrettyString() -> a
    1286:1286:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1291:1291:boolean fieldAccessDoesImplicitDereference() -> c
    1296:1296:boolean arrayAccessDoesImplicitDereference() -> d
    1267:1267:void <init>(cn.com.codesec.scan.meta.Language$Abap) -> <init>
cn.com.codesec.scan.meta.Language$Actionscript -> cn.com.codesec.Nh:
    511:511:void <init>() -> <init>
    515:515:boolean hasNestedClasses() -> e
    520:520:java.lang.String toString() -> toString
    525:525:java.lang.String toPrettyString() -> a
    530:530:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    511:511:void <init>(cn.com.codesec.scan.meta.Language$Actionscript) -> <init>
cn.com.codesec.scan.meta.Language$AnySql -> cn.com.codesec.Ni:
    821:821:void <init>() -> <init>
    825:825:boolean isSql() -> f
    830:830:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    835:835:boolean hasNestedClasses() -> e
    840:840:java.lang.String toString() -> toString
    845:845:java.lang.String toPrettyString() -> a
    850:850:boolean isLangForNst(java.lang.String) -> a
    855:855:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    821:821:void <init>(cn.com.codesec.scan.meta.Language$AnySql) -> <init>
    821:821:void <init>(cn.com.codesec.scan.meta.Language$AnySql,cn.com.codesec.scan.meta.Language$AnySql) -> <init>
cn.com.codesec.scan.meta.Language$Apex -> cn.com.codesec.Nj:
    725:725:void <init>() -> <init>
    729:729:boolean isApex() -> g
    734:734:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    739:739:java.lang.String toString() -> toString
    744:744:java.lang.String toPrettyString() -> a
    749:749:boolean fieldAccessDoesImplicitDereference() -> c
    754:754:boolean arrayAccessDoesImplicitDereference() -> d
    759:759:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    764:764:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    725:725:void <init>(cn.com.codesec.scan.meta.Language$Apex) -> <init>
cn.com.codesec.scan.meta.Language$Aspx -> cn.com.codesec.Nk:
    962:962:void <init>() -> <init>
    965:965:boolean isAspx() -> i
    969:969:java.lang.String toString() -> toString
    974:974:java.lang.String toPrettyString() -> a
    979:979:boolean isLangForNst(java.lang.String) -> a
    962:962:void <init>(cn.com.codesec.scan.meta.Language$Aspx) -> <init>
cn.com.codesec.scan.meta.Language$C -> cn.com.codesec.Nl:
    535:535:void <init>() -> <init>
    539:539:boolean isC() -> j
    544:544:boolean zeroIsNull() -> k
    549:549:boolean zeroIsFalse() -> l
    554:554:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    559:559:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    564:564:java.lang.String getNamespaceSeparator() -> m
    569:569:java.lang.String toString() -> toString
    574:574:java.lang.String toPrettyString() -> a
    579:579:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    584:584:boolean fieldAccessDoesImplicitDereference() -> c
    589:589:boolean arrayAccessDoesImplicitDereference() -> d
    594:594:boolean isMultipleIndirectionAllowed() -> n
    599:599:boolean isStaticInitializer(java.lang.String) -> b
    535:535:void <init>(cn.com.codesec.scan.meta.Language$C) -> <init>
    535:535:void <init>(cn.com.codesec.scan.meta.Language$C,cn.com.codesec.scan.meta.Language$C) -> <init>
cn.com.codesec.scan.meta.Language$CFML -> cn.com.codesec.Nm:
    1309:1309:void <init>() -> <init>
    1313:1313:boolean isCFML() -> o
    1318:1318:boolean hasCaseInsensitiveIdentifiers() -> p
    1323:1323:java.lang.String toString() -> toString
    1328:1328:java.lang.String toPrettyString() -> a
    1333:1333:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1309:1309:void <init>(cn.com.codesec.scan.meta.Language$CFML) -> <init>
cn.com.codesec.scan.meta.Language$CSharp -> cn.com.codesec.Nn:
    941:941:void <init>() -> <init>
    944:944:boolean isDotnet() -> q
    948:948:java.lang.String toString() -> toString
    953:953:java.lang.String toPrettyString() -> a
    958:958:boolean isLangForNst(java.lang.String) -> a
    941:941:void <init>(cn.com.codesec.scan.meta.Language$CSharp) -> <init>
cn.com.codesec.scan.meta.Language$Cobol -> cn.com.codesec.No:
    1233:1233:void <init>() -> <init>
    1237:1237:java.lang.String toString() -> toString
    1242:1242:boolean isCobol() -> r
    1247:1247:java.lang.String toPrettyString() -> a
    1252:1252:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1257:1257:boolean fieldAccessDoesImplicitDereference() -> c
    1262:1262:boolean arrayAccessDoesImplicitDereference() -> d
    1233:1233:void <init>(cn.com.codesec.scan.meta.Language$Cobol) -> <init>
cn.com.codesec.scan.meta.Language$Cpp -> cn.com.codesec.Np:
    604:604:void <init>() -> <init>
    608:608:boolean isCpp() -> s
    613:613:java.lang.String toString() -> toString
    618:618:java.lang.String toPrettyString() -> a
    604:604:void <init>(cn.com.codesec.scan.meta.Language$Cpp) -> <init>
cn.com.codesec.scan.meta.Language$Dotnet -> cn.com.codesec.Nq:
    897:897:void <init>() -> <init>
    901:901:boolean isDotnet() -> q
    906:906:boolean zeroIsNull() -> k
    911:911:boolean zeroIsFalse() -> l
    916:916:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    921:921:boolean arrayAccessDoesImplicitDereference() -> d
    926:926:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    931:931:boolean fieldAccessDoesImplicitDereference() -> c
    936:936:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    897:897:void <init>(cn.com.codesec.scan.meta.Language$Dotnet) -> <init>
cn.com.codesec.scan.meta.Language$DynamicallyTypedLanguage -> cn.com.codesec.Nr:
    1301:1301:void <init>() -> <init>
    1305:1305:boolean isDynamicallyTyped() -> t
    1301:1301:void <init>(cn.com.codesec.scan.meta.Language$DynamicallyTypedLanguage) -> <init>
cn.com.codesec.scan.meta.Language$HTML -> cn.com.codesec.Ns:
    1059:1059:void <init>() -> <init>
    1063:1063:java.lang.String toString() -> toString
    1068:1068:java.lang.String toPrettyString() -> a
    1073:1073:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1079:1079:boolean isLangForNst(java.lang.String) -> a
    1059:1059:void <init>(cn.com.codesec.scan.meta.Language$HTML) -> <init>
cn.com.codesec.scan.meta.Language$Impl -> cn.com.codesec.Nt:
    289:289:void <init>() -> <init>
    292:292:boolean isC() -> j
    296:296:boolean isCpp() -> s
    300:300:boolean isObjC() -> u
    304:304:boolean isObjCpp() -> v
    308:308:boolean isJava() -> w
    312:312:boolean isApex() -> g
    316:316:boolean isJsp() -> x
    320:320:boolean isScala() -> y
    324:324:boolean isJavaScript() -> z
    328:328:boolean isRuby() -> A
    332:332:boolean isSwift() -> B
    336:336:boolean isPhp() -> C
    340:340:boolean isPython() -> D
    344:344:boolean isDotnet() -> q
    346:346:boolean isAspx() -> i
    348:348:boolean isVB() -> E
    352:352:boolean isVBScript() -> F
    356:356:boolean isSql() -> f
    360:360:boolean isCFML() -> o
    364:364:boolean isCobol() -> r
    368:368:boolean isAbap() -> b
    372:372:boolean isTypeScript() -> G
    376:376:boolean isXamarinANdroid() -> H
    380:380:boolean isXamarinIOS() -> I
    384:384:boolean hasCaseInsensitiveIdentifiers() -> p
    388:388:boolean zeroIsNull() -> k
    392:392:boolean zeroIsFalse() -> l
    396:396:boolean isDynamicallyTyped() -> t
    400:400:boolean isScriptingLanguage() -> J
    404:404:boolean hasNestedClasses() -> e
    408:408:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    412:412:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    416:416:java.lang.String getNamespaceSeparator() -> m
    cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    422:422:boolean fieldAccessDoesImplicitDereference() -> c
    426:426:boolean arrayAccessDoesImplicitDereference() -> d
    430:430:boolean isMultipleIndirectionAllowed() -> n
    434:434:boolean capturesByPointer() -> K
    438:438:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    443:443:java.lang.String closureMethodFieldName() -> L
    448:448:java.lang.String closureEnvironmentFieldName() -> M
    453:453:cn.com.codesec.util.fset.FSet internalFieldNames() -> N
    457:457:boolean isEnvironmentType(cn.com.codesec.scan.metadata.Type) -> a
    461:461:boolean isStaticInitializer(java.lang.String) -> b
    465:465:boolean isEnvironmentType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    469:469:boolean allCallsPassGlobals() -> O
    473:473:boolean functionPointerCallPassesGlobals() -> P
    477:477:boolean allCallsPassThis() -> Q
    481:481:boolean passClosureAsThis() -> R
    485:485:boolean hasExplicitThisParam() -> S
    489:489:boolean hoaOnly() -> T
    494:494:java.lang.String getUnnamedGlobalName() -> U
    java.lang.String toString() -> toString
    java.lang.String toPrettyString() -> a
    503:503:boolean isLangForNst(java.lang.String) -> a
    507:507:boolean isReachingType(cn.com.codesec.scan.metadata.Type) -> b
    289:289:void <init>(cn.com.codesec.scan.meta.Language$Impl) -> <init>
cn.com.codesec.scan.meta.Language$Java -> cn.com.codesec.Nu:
    676:676:void <init>() -> <init>
    680:680:boolean isJava() -> w
    685:685:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    690:690:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    695:695:java.lang.String toString() -> toString
    700:700:java.lang.String toPrettyString() -> a
    705:705:boolean isStaticInitializer(java.lang.String) -> b
    710:710:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    715:715:boolean arrayAccessDoesImplicitDereference() -> d
    720:720:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    676:676:void <init>(cn.com.codesec.scan.meta.Language$Java) -> <init>
    676:676:void <init>(cn.com.codesec.scan.meta.Language$Java,cn.com.codesec.scan.meta.Language$Java) -> <init>
cn.com.codesec.scan.meta.Language$JavaScript -> cn.com.codesec.Nv:
    cn.com.codesec.util.fset.FSet internalFieldNames -> a
    1430:1431:void <clinit>() -> <clinit>
    1338:1338:void <init>() -> <init>
    1344:1344:boolean isJavaScript() -> z
    1349:1349:boolean hasNestedClasses() -> e
    1354:1354:java.lang.String toString() -> toString
    1359:1359:java.lang.String toPrettyString() -> a
    1364:1364:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1369:1369:boolean arrayAccessDoesImplicitDereference() -> d
    1375:1375:java.lang.String closureMethodFieldName() -> L
    1381:1381:java.lang.String closureEnvironmentFieldName() -> M
    1387:1387:cn.com.codesec.util.fset.FSet internalFieldNames() -> N
    1392:1392:boolean isEnvironmentType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    1397:1397:boolean isStaticInitializer(java.lang.String) -> b
    1402:1402:boolean allCallsPassGlobals() -> O
    1407:1407:boolean allCallsPassThis() -> Q
    1412:1420:boolean isReachingType(cn.com.codesec.scan.metadata.Type) -> b
    1426:1426:java.lang.String getUnnamedGlobalName() -> U
    1338:1338:void <init>(cn.com.codesec.scan.meta.Language$JavaScript) -> <init>
cn.com.codesec.scan.meta.Language$Jsp -> cn.com.codesec.Nw:
    769:769:void <init>() -> <init>
    773:773:boolean isJsp() -> x
    778:778:java.lang.String getNamespaceSeparator() -> m
    783:783:java.lang.String toString() -> toString
    788:788:java.lang.String toPrettyString() -> a
    769:769:void <init>(cn.com.codesec.scan.meta.Language$Jsp) -> <init>
cn.com.codesec.scan.meta.Language$ObjC -> cn.com.codesec.Nx:
    623:623:void <init>() -> <init>
    627:627:boolean isObjC() -> u
    632:632:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    637:637:java.lang.String toString() -> toString
    642:642:java.lang.String toPrettyString() -> a
    648:648:java.lang.String closureMethodFieldName() -> L
    623:623:void <init>(cn.com.codesec.scan.meta.Language$ObjC) -> <init>
    623:623:void <init>(cn.com.codesec.scan.meta.Language$ObjC,cn.com.codesec.scan.meta.Language$ObjC) -> <init>
cn.com.codesec.scan.meta.Language$ObjCpp -> cn.com.codesec.Ny:
    653:653:void <init>() -> <init>
    657:657:boolean isCpp() -> s
    662:662:boolean isObjCpp() -> v
    667:667:java.lang.String toString() -> toString
    672:672:java.lang.String toPrettyString() -> a
    653:653:void <init>(cn.com.codesec.scan.meta.Language$ObjCpp) -> <init>
cn.com.codesec.scan.meta.Language$PLSql -> cn.com.codesec.Nz:
    860:860:void <init>() -> <init>
    864:864:java.lang.String toString() -> toString
    869:869:java.lang.String toPrettyString() -> a
    874:874:boolean isLangForNst(java.lang.String) -> a
    860:860:void <init>(cn.com.codesec.scan.meta.Language$PLSql) -> <init>
cn.com.codesec.scan.meta.Language$Php -> cn.com.codesec.NA:
    1434:1434:void <init>() -> <init>
    1438:1438:boolean isPhp() -> C
    1443:1443:boolean hasNestedClasses() -> e
    1448:1448:java.lang.String toString() -> toString
    1453:1453:java.lang.String toPrettyString() -> a
    1458:1458:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1463:1463:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    1468:1468:boolean isStaticInitializer(java.lang.String) -> b
    1473:1473:boolean fieldAccessDoesImplicitDereference() -> c
    1478:1478:boolean arrayAccessDoesImplicitDereference() -> d
    1483:1483:boolean allCallsPassGlobals() -> O
    1488:1488:boolean passClosureAsThis() -> R
    1494:1494:java.lang.String getUnnamedGlobalName() -> U
    1434:1434:void <init>(cn.com.codesec.scan.meta.Language$Php) -> <init>
cn.com.codesec.scan.meta.Language$Python -> cn.com.codesec.NB:
    1498:1498:void <init>() -> <init>
    1502:1502:boolean isPython() -> D
    1507:1507:java.lang.String toString() -> toString
    1512:1512:java.lang.String toPrettyString() -> a
    1517:1517:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1522:1522:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    1528:1528:java.lang.String closureMethodFieldName() -> L
    1534:1534:java.lang.String closureEnvironmentFieldName() -> M
    1539:1539:boolean isEnvironmentType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    1544:1544:boolean isStaticInitializer(java.lang.String) -> b
    1549:1549:boolean allCallsPassGlobals() -> O
    1554:1554:boolean hasExplicitThisParam() -> S
    1498:1498:void <init>(cn.com.codesec.scan.meta.Language$Python) -> <init>
cn.com.codesec.scan.meta.Language$Ruby -> cn.com.codesec.NC:
    1559:1559:void <init>() -> <init>
    1563:1563:boolean isRuby() -> A
    1568:1568:java.lang.String toString() -> toString
    1573:1573:java.lang.String toPrettyString() -> a
    1578:1578:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1583:1583:boolean arrayAccessDoesImplicitDereference() -> d
    1588:1588:boolean fieldAccessDoesImplicitDereference() -> c
    1593:1593:boolean capturesByPointer() -> K
    1598:1598:cn.com.codesec.scan.metadata.TypeMeta getRootClass() -> h
    1604:1604:java.lang.String closureMethodFieldName() -> L
    1609:1609:boolean hoaOnly() -> T
    1615:1615:java.lang.String closureEnvironmentFieldName() -> M
    1620:1620:boolean isEnvironmentType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    1625:1625:boolean isStaticInitializer(java.lang.String) -> b
    1630:1630:boolean passClosureAsThis() -> R
    1559:1559:void <init>(cn.com.codesec.scan.meta.Language$Ruby) -> <init>
cn.com.codesec.scan.meta.Language$Scala -> cn.com.codesec.ND:
    793:793:void <init>() -> <init>
    797:797:boolean isScala() -> y
    802:802:java.lang.String toString() -> toString
    807:807:java.lang.String toPrettyString() -> a
    812:812:boolean fieldAccessDoesImplicitDereference() -> c
    817:817:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    793:793:void <init>(cn.com.codesec.scan.meta.Language$Scala) -> <init>
cn.com.codesec.scan.meta.Language$ScriptingLanguage -> cn.com.codesec.NE:
    1084:1084:void <init>() -> <init>
    1088:1088:boolean isScriptingLanguage() -> J
    1084:1084:void <init>(cn.com.codesec.scan.meta.Language$ScriptingLanguage) -> <init>
cn.com.codesec.scan.meta.Language$Swift -> cn.com.codesec.NF:
    1164:1164:void <init>() -> <init>
    1168:1168:java.lang.String toString() -> toString
    1173:1173:java.lang.String toPrettyString() -> a
    1178:1178:boolean allCallsPassGlobals() -> O
    1183:1183:boolean functionPointerCallPassesGlobals() -> P
    1188:1188:boolean passClosureAsThis() -> R
    1193:1193:boolean isDynamicallyTyped() -> t
    1198:1198:boolean fieldAccessDoesImplicitDereference() -> c
    1203:1203:boolean arrayAccessDoesImplicitDereference() -> d
    1208:1208:boolean capturesByPointer() -> K
    1213:1213:boolean hoaOnly() -> T
    1218:1218:java.lang.String closureMethodFieldName() -> L
    1223:1223:boolean isSwift() -> B
    1228:1228:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1164:1164:void <init>(cn.com.codesec.scan.meta.Language$Swift) -> <init>
cn.com.codesec.scan.meta.Language$TSql -> cn.com.codesec.NG:
    879:879:void <init>() -> <init>
    883:883:java.lang.String toString() -> toString
    888:888:java.lang.String toPrettyString() -> a
    893:893:boolean isLangForNst(java.lang.String) -> a
    879:879:void <init>(cn.com.codesec.scan.meta.Language$TSql) -> <init>
cn.com.codesec.scan.meta.Language$TypeScript -> cn.com.codesec.NH:
    cn.com.codesec.util.fset.FSet internalFieldNames -> a
    1727:1728:void <clinit>() -> <clinit>
    1635:1635:void <init>() -> <init>
    1641:1641:boolean isTypeScript() -> G
    1646:1646:boolean hasNestedClasses() -> e
    1651:1651:java.lang.String toString() -> toString
    1656:1656:java.lang.String toPrettyString() -> a
    1661:1661:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1666:1666:boolean arrayAccessDoesImplicitDereference() -> d
    1672:1672:java.lang.String closureMethodFieldName() -> L
    1678:1678:java.lang.String closureEnvironmentFieldName() -> M
    1684:1684:cn.com.codesec.util.fset.FSet internalFieldNames() -> N
    1689:1689:boolean isEnvironmentType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    1694:1694:boolean isStaticInitializer(java.lang.String) -> b
    1699:1699:boolean allCallsPassGlobals() -> O
    1704:1704:boolean allCallsPassThis() -> Q
    1709:1717:boolean isReachingType(cn.com.codesec.scan.metadata.Type) -> b
    1723:1723:java.lang.String getUnnamedGlobalName() -> U
    1635:1635:void <init>(cn.com.codesec.scan.meta.Language$TypeScript) -> <init>
cn.com.codesec.scan.meta.Language$VB -> cn.com.codesec.NI:
    1040:1040:void <init>() -> <init>
    1044:1044:java.lang.String toString() -> toString
    1049:1049:java.lang.String toPrettyString() -> a
    1054:1054:boolean isLangForNst(java.lang.String) -> a
    1040:1040:void <init>(cn.com.codesec.scan.meta.Language$VB) -> <init>
cn.com.codesec.scan.meta.Language$VB6 -> cn.com.codesec.NJ:
    1092:1092:void <init>() -> <init>
    1096:1096:boolean isVB() -> E
    1101:1101:boolean hasCaseInsensitiveIdentifiers() -> p
    1106:1106:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    1111:1111:java.lang.String toString() -> toString
    1116:1116:java.lang.String toPrettyString() -> a
    1121:1121:cn.com.codesec.scan.metadata.Type canonicalStringType(cn.com.codesec.scan.meta.Language) -> a
    1092:1092:void <init>(cn.com.codesec.scan.meta.Language$VB6) -> <init>
    1092:1092:void <init>(cn.com.codesec.scan.meta.Language$VB6,cn.com.codesec.scan.meta.Language$VB6) -> <init>
cn.com.codesec.scan.meta.Language$VBScript -> cn.com.codesec.NK:
    1126:1126:void <init>() -> <init>
    1130:1130:boolean isVBScript() -> F
    1135:1135:boolean sharesNamespace(cn.com.codesec.scan.meta.Language) -> c
    1140:1140:java.lang.String toString() -> toString
    1145:1145:java.lang.String toPrettyString() -> a
    1126:1126:void <init>(cn.com.codesec.scan.meta.Language$VBScript) -> <init>
    1126:1126:void <init>(cn.com.codesec.scan.meta.Language$VBScript,cn.com.codesec.scan.meta.Language$VBScript) -> <init>
cn.com.codesec.scan.meta.Language$Xamarin_Android -> cn.com.codesec.NL:
    984:984:void <init>() -> <init>
    988:988:java.lang.String toString() -> toString
    993:993:java.lang.String toPrettyString() -> a
    998:998:boolean isLangForNst(java.lang.String) -> a
    1003:1003:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    1008:1008:boolean isXamarinANdroid() -> H
    984:984:void <init>(cn.com.codesec.scan.meta.Language$Xamarin_Android) -> <init>
cn.com.codesec.scan.meta.Language$Xamarin_iOS -> cn.com.codesec.NM:
    1012:1012:void <init>() -> <init>
    1016:1016:java.lang.String toString() -> toString
    1021:1021:java.lang.String toPrettyString() -> a
    1026:1026:boolean isLangForNst(java.lang.String) -> a
    1031:1031:boolean usesRulesFrom(cn.com.codesec.scan.meta.Language) -> b
    1036:1036:boolean isXamarinIOS() -> I
    1012:1012:void <init>(cn.com.codesec.scan.meta.Language$Xamarin_iOS) -> <init>
cn.com.codesec.scan.meta.Symbol -> cn.com.codesec.NN:
    cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    java.lang.String getSimpleName() -> c
    java.lang.String getTrueSimpleName() -> d
    java.lang.String getAltSimpleName() -> e
    java.lang.String getCanonicalName() -> f
    java.lang.String getAltCanonicalName() -> g
    cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
    cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    cn.com.codesec.scan.metadata.Type getType() -> j
    cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
cn.com.codesec.scan.metadata.AbstractStorageMeta -> cn.com.codesec.NO:
    java.util.Set constantValues -> c
    boolean hadAddressTaken -> d
    java.util.Set possibleFunMetas -> e
    cn.com.codesec.util.fset.FSet accessors -> a
    cn.com.codesec.util.fset.FSet modifiers -> b
    34:39:void <init>() -> <init>
    42:48:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> m
    52:52:java.util.Set getConstantValues() -> n
    65:71:void addConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    75:75:java.lang.String toString() -> toString
    80:84:void addFunPtr(cn.com.codesec.scan.metadata.FunMeta) -> a
    88:88:java.util.Set getPossibleFunPtrs() -> o
    93:93:cn.com.codesec.util.fset.FSet getAccessorFunctions() -> p
    98:98:cn.com.codesec.util.fset.FSet getModifierFunctions() -> q
    103:108:boolean addAccessor(cn.com.codesec.scan.metadata.FunMeta) -> b
    113:117:void addModifier(cn.com.codesec.scan.metadata.FunMeta) -> c
    121:121:java.lang.String getTrueSimpleName() -> d
    126:126:boolean getHadAddressTaken() -> r
    131:132:void setHadAddressTaken(boolean) -> a
    148:151:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    155:158:void readObjectPass2(java.io.ObjectInputStream) -> a
    161:161:cn.com.codesec.scan.util.serialization.Handle getHandle(cn.com.codesec.scan.backend.BackEnd) -> a
    166:176:int compareTo(java.lang.Object) -> compareTo
    1:1:java.util.Collection getModifierFunctions() -> s
    1:1:java.util.Collection getAccessorFunctions() -> t
cn.com.codesec.scan.metadata.Annotatable -> cn.com.codesec.NP:
cn.com.codesec.scan.metadata.BackEndNameTable -> cn.com.codesec.NQ:
    java.util.Set warnedForDupClass -> a
    java.util.HashMap fileStaticFunctionMap -> o
    java.util.Map instantiatedTypes -> p
    java.util.Map instantiatedFunctions -> q
    java.util.Map typedefMap -> r
    cn.com.codesec.scan.metadata.Type$Primitive tCHARType -> s
    boolean $assertionsDisabled -> b
    29:297:void <clinit>() -> <clinit>
    38:43:void <init>() -> <init>
    46:47:void addInstantiatedType(java.lang.String,java.lang.String) -> a
    50:51:cn.com.codesec.scan.metadata.TypeMeta getGenericType(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    55:56:void addInstantiatedFunction(java.lang.String,java.lang.String) -> b
    59:60:cn.com.codesec.util.fset.FList getGenericFunctions(java.lang.String) -> a
    65:73:cn.com.codesec.scan.metadata.FunMeta addFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    78:79:java.util.List getFileStaticFunctionsBySimpleName(java.lang.String) -> b
    83:97:void mapFunctionName(java.lang.String,cn.com.codesec.scan.metadata.FunMeta) -> a
    100:200:java.util.List load(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    221:222:void addTypedef(java.lang.String,cn.com.codesec.scan.metadata.TypeDefMeta) -> a
    225:226:cn.com.codesec.scan.metadata.Type getTypeForTypedef(java.lang.String) -> c
    230:236:void setTCHARType(cn.com.codesec.scan.metadata.Type$Primitive) -> a
    239:239:cn.com.codesec.scan.metadata.Type$Primitive getTCHARType() -> a
    243:243:cn.com.codesec.scan.metadata.TypeDefMeta getTypeDef(java.lang.String) -> d
    247:249:void setupIncremental() -> b
    252:261:void mergeIncrementalBeforeSaving() -> c
cn.com.codesec.scan.metadata.BackEndNameTableFixups -> cn.com.codesec.NR:
    34:34:void <init>() -> <init>
    39:41:void runFixups(cn.com.codesec.scan.metadata.BackEndNameTable,cn.com.codesec.util.fset.FList) -> a
    44:59:void addImpliedMethods(cn.com.codesec.scan.metadata.BackEndNameTable,cn.com.codesec.util.fset.FList) -> b
    62:99:void addImpliedMethods1(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.util.fset.FSet,cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.BackEndNameTable,cn.com.codesec.util.fset.FList) -> a
    102:107:boolean containsAny(java.util.Set,java.util.Set) -> a
    111:141:void constructImpliedMethod(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.BackEndNameTable,cn.com.codesec.util.fset.FList) -> a
    144:182:cn.com.codesec.scan.ir.nodes.IRGeneratedFunDecl constructImpliedMethod(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.metadata.BuiltinFunMeta -> cn.com.codesec.NS:
    14:15:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean) -> <init>
cn.com.codesec.scan.metadata.CallGraphEdge -> cn.com.codesec.NT:
    cn.com.codesec.scan.metadata.FunMeta caller -> a
    cn.com.codesec.scan.metadata.FunMeta callee -> b
    11:13:void <init>() -> <init>
    16:17:void setCaller(cn.com.codesec.scan.metadata.FunMeta) -> b
    20:21:void setCallee(cn.com.codesec.scan.metadata.FunMeta) -> c
    26:32:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    35:35:cn.com.codesec.scan.metadata.FunMeta getCaller() -> c
    39:39:cn.com.codesec.scan.metadata.FunMeta getCallee() -> d
    java.lang.String getCallTypeString() -> a
    cn.com.codesec.scan.metadata.CallGraphEdge getCopyForTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
    48:55:boolean equals(java.lang.Object) -> equals
    60:62:int hashCode() -> hashCode
    67:67:java.lang.String toString() -> toString
cn.com.codesec.scan.metadata.DirectCallGraphEdge -> cn.com.codesec.NU:
    cn.com.codesec.messaging.Message CALL_TYPE -> a
    35:36:void <clinit>() -> <clinit>
    14:16:void <init>() -> <init>
    21:22:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FunMeta) -> <init>
    26:26:java.lang.String getCallTypeString() -> a
    31:31:cn.com.codesec.scan.metadata.CallGraphEdge getCopyForTarget(cn.com.codesec.scan.metadata.FunMeta) -> a
cn.com.codesec.scan.metadata.DynamicFieldMeta -> cn.com.codesec.NV:
    12:13:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet) -> <init>
cn.com.codesec.scan.metadata.DynamicTypeMeta -> cn.com.codesec.NW:
    java.lang.String DynamicTypeName -> d
    java.util.concurrent.ConcurrentMap GLOBAL_DYNAMIC_TYPES -> e
    79:81:void <clinit>() -> <clinit>
    20:27:cn.com.codesec.scan.metadata.DynamicTypeMeta getGlobalDynamicType(cn.com.codesec.scan.meta.Language) -> a
    31:32:void <init>(java.lang.String,cn.com.codesec.scan.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.scan.meta.Language) -> <init>
    35:36:void <init>(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> <init>
    40:44:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String) -> a
    49:53:cn.com.codesec.scan.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> b
    57:67:cn.com.codesec.scan.metadata.FieldMeta createField(java.lang.String) -> f
    71:71:java.lang.String getDynamicTypeName() -> m
    75:76:void setDynamicTypeName(java.lang.String) -> b_
cn.com.codesec.scan.metadata.EnumMeta -> cn.com.codesec.NX:
    java.lang.String name -> a
    cn.com.codesec.scan.metadata.Namespace namespace -> b
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> c
    29:33:void <init>(java.lang.String,cn.com.codesec.scan.metadata.Namespace,cn.com.codesec.parse.ir.SourceInfo) -> <init>
    37:37:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    42:42:java.lang.String getSimpleName() -> c
    47:47:java.lang.String getAltSimpleName() -> e
    52:52:java.lang.String getTrueSimpleName() -> d
    57:57:java.lang.String getName() -> a
    62:62:java.lang.String getCanonicalName() -> f
    67:67:java.lang.String getAltCanonicalName() -> g
    72:72:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> p
    77:77:cn.com.codesec.scan.metadata.Type getType() -> j
    82:82:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    87:87:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    92:92:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> m
    97:97:java.util.Set getConstantValues() -> n
    102:102:void addConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    107:107:void addFunPtr(cn.com.codesec.scan.metadata.FunMeta) -> a
    112:112:java.util.Set getPossibleFunPtrs() -> o
    117:117:java.util.Collection getAccessorFunctions() -> t
    122:122:java.util.Collection getModifierFunctions() -> s
    127:127:boolean addAccessor(cn.com.codesec.scan.metadata.FunMeta) -> b
    132:132:void addModifier(cn.com.codesec.scan.metadata.FunMeta) -> c
    137:137:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    142:142:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    146:146:void readObjectPass2(java.io.ObjectInputStream) -> a
    150:150:boolean getHadAddressTaken() -> r
    155:155:void setHadAddressTaken(boolean) -> a
    169:169:cn.com.codesec.scan.util.serialization.Handle getHandle(cn.com.codesec.scan.backend.BackEnd) -> a
    174:184:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.FieldMeta -> cn.com.codesec.NY:
    java.lang.String name -> b
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> c
    java.lang.String altName -> d
    cn.com.codesec.scan.metadata.Type type -> e
    cn.com.codesec.scan.metadata.TypeMeta enclosingType -> f
    cn.com.codesec.scan.metadata.StorageMeta storage -> g
    cn.com.codesec.util.fset.FSet reachingTypes -> h
    int MAX_REACHINGTYPES -> i
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> j
    java.util.Set annotations -> k
    java.util.Set constantValues -> l
    boolean $assertionsDisabled -> a
    38:356:void <clinit>() -> <clinit>
    55:56:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet) -> <init>
    59:61:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> <init>
    52:87:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.scan.ir.nodes.IRLiteralExp) -> <init>
    90:91:void createStorageMeta(cn.com.codesec.java.rules.GlobalFieldRule) -> a
    94:99:void forceGlobal(cn.com.codesec.java.rules.GlobalFieldRule) -> b
    102:102:boolean isStatic() -> m
    106:110:boolean isRuntimeConstant() -> n
    115:115:boolean isToolGenerated() -> o
    119:119:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> p
    123:124:void setStorageMeta(cn.com.codesec.scan.metadata.StorageMeta) -> a
    127:129:void adjustNSTRef(cn.com.codesec.scan.metadata.FieldMeta) -> a
    137:137:cn.com.codesec.scan.metadata.Type getType() -> j
    142:142:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    147:147:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    151:152:void setType(cn.com.codesec.scan.metadata.Type) -> a
    156:156:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    161:161:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    166:166:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    171:171:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    176:182:java.lang.String getCanonicalName() -> f
    187:195:java.lang.String getAltCanonicalName() -> g
    201:201:java.lang.String getSimpleName() -> c
    206:206:java.lang.String getAltSimpleName() -> e
    212:212:java.lang.String getTrueSimpleName() -> d
    217:220:java.lang.String toString() -> toString
    224:224:boolean isArtificialField() -> q
    229:229:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> r
    233:234:void setEnclosingType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    238:238:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    243:243:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    247:250:void setAnnotations(java.util.Set) -> a
    253:253:java.util.Set getAnnotations() -> s
    258:263:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    267:272:void readObjectPass2(java.io.ObjectInputStream) -> a
    275:275:cn.com.codesec.scan.util.serialization.Handle getHandle(cn.com.codesec.scan.backend.BackEnd) -> a
    280:290:int compareTo(java.lang.Object) -> compareTo
    294:299:cn.com.codesec.util.fset.FSet getReachingTypes() -> t
    303:318:boolean addReachingTypes(java.util.Set) -> b
    322:328:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> u
    332:332:java.util.Set getConstantValues() -> v
    345:351:void addConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.ForcedGlobalFieldMeta -> cn.com.codesec.NZ:
    cn.com.codesec.java.rules.GlobalFieldRule rule -> c
    15:18:void <init>(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.java.rules.GlobalFieldRule) -> <init>
    21:21:cn.com.codesec.java.rules.GlobalFieldRule getRule() -> a
cn.com.codesec.scan.metadata.FunMeta -> cn.com.codesec.Oa:
    java.lang.String uniqueName -> e
    java.lang.String simpleName -> f
    java.lang.String altSimpleName -> g
    java.lang.String className -> h
    boolean modelFunction -> i
    cn.com.codesec.util.fset.FList typeParameters -> j
    cn.com.codesec.util.fset.FMap typeParameterUpperBounds -> k
    java.util.List parameterNames -> l
    cn.com.codesec.scan.metadata.Type returnType -> m
    cn.com.codesec.scan.metadata.Type returnTypeGeneric -> n
    cn.com.codesec.scan.metadata.Type[] parameterTypes -> o
    cn.com.codesec.util.fset.FList parameterTypesGeneric -> p
    cn.com.codesec.scan.metadata.Type[] exceptions -> q
    cn.com.codesec.scan.metadata.TypeMeta enclosingType -> r
    cn.com.codesec.scan.ir.util.memory.IRRef nstref -> s
    cn.com.codesec.scan.ir.util.memory.IRRef oldNstRef -> t
    cn.com.codesec.util.fset.FSet callerEdges -> u
    cn.com.codesec.util.fset.FSet calleeEdges -> v
    cn.com.codesec.util.fset.FSet accessedStorages -> a
    cn.com.codesec.util.fset.FSet modifiedStorages -> b
    cn.com.codesec.scan.metadata.Namespace namespace -> c
    cn.com.codesec.scan.meta.Language language -> w
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> x
    int minArgCount -> y
    int maxArgCount -> z
    boolean isVarArg -> A
    int restMapParameterIndex -> B
    int restParameterIndex -> C
    boolean isReified -> D
    java.util.List overrides -> E
    boolean isFileScopeInit -> F
    cn.com.codesec.util.SKYFile sourceFile -> G
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> H
    cn.com.codesec.parse.ir.SourceInfo bodyLocation -> I
    cn.com.codesec.parse.ir.SourceInfo oldBodyLocation -> J
    boolean isInlined -> K
    int nodeCount -> L
    int returnCount -> M
    java.util.Set superFunctions -> N
    cn.com.codesec.scan.metadata.Type ptrType -> O
    java.util.Map bufferArgs -> P
    java.util.Set annotations -> Q
    java.util.Set[] parameterAnnotations -> R
    cn.com.codesec.util.fset.FSet possibleHeapPaths -> S
    cn.com.codesec.util.fset.FSet possibleInstanceHeapPaths -> T
    boolean $assertionsDisabled -> d
    60:60:void <clinit>() -> <clinit>
    111:111:java.lang.String getClassName() -> m
    115:115:boolean isLibrary() -> n
    119:120:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,java.util.List,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.util.SKYFile) -> <init>
    123:124:void <init>(java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Namespace,cn.com.codesec.scan.metadata.Type,java.util.List,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.util.SKYFile) -> <init>
    126:181:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,java.util.List,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.util.SKYFile) -> <init>
    183:325:void <init>(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> <init>
    328:331:java.lang.String externalizePythonFileFunction(java.lang.String) -> b
    335:336:void setModelFunction() -> o
    339:339:boolean isModelFunction() -> p
    343:344:void setExceptions(cn.com.codesec.scan.metadata.Type[]) -> a
    347:347:cn.com.codesec.scan.metadata.Type[] getExceptions() -> q
    351:351:java.util.List getOverrides() -> r
    355:356:void setOverrides(java.util.List) -> a
    360:360:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    364:364:boolean isPublic() -> s
    368:368:boolean isStatic() -> t
    372:372:boolean isFinal() -> u
    376:376:boolean isAbstract() -> v
    380:380:boolean isSynthetic() -> w
    384:384:boolean isOverridable() -> x
    388:388:boolean isInferred() -> y
    392:400:boolean isConstructor() -> z
    404:404:boolean isDestructor() -> A
    408:411:boolean isInitializer() -> B
    415:415:boolean isInlined() -> C
    419:420:void setInlined(boolean) -> a
    424:424:cn.com.codesec.scan.metadata.Type getType() -> j
    429:429:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    434:434:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    438:438:cn.com.codesec.util.fset.FList getTypeParameters() -> D
    442:442:cn.com.codesec.scan.metadata.TypeMeta getTypeParameterUpperBound(cn.com.codesec.scan.metadata.Type$TypeVar) -> a
    446:454:java.lang.String toString(int) -> a
    458:467:java.lang.String getPublicSimpleName() -> aI
    472:496:java.lang.String getCanonicalName() -> f
    501:533:java.lang.String getAltCanonicalName() -> g
    537:540:java.util.Collection getSuperFunctions() -> E
    544:554:void updateSignature(cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.ir.nodes.IRType,java.util.List,cn.com.codesec.parse.ir.IRModifierSet) -> a
    557:570:cn.com.codesec.util.fset.FSet calculateSuperFunctions() -> aJ
    574:585:boolean signaturesMatch(cn.com.codesec.scan.metadata.FunMeta) -> a
    589:600:cn.com.codesec.scan.metadata.FunMeta findOverrider(cn.com.codesec.util.fset.FList) -> a
    604:620:boolean isSameFamily(cn.com.codesec.scan.metadata.FunMeta) -> b
    625:625:java.lang.String toString() -> toString
    629:629:java.lang.String renderMethodName() -> F
    633:643:int getNumImplicitArgs() -> G
    647:653:boolean hasImplicitThisArg() -> H
    657:657:boolean hasExplicitThisArg() -> I
    661:704:boolean hasImplicitGlobalsArg() -> J
    708:709:boolean hasImplicitOuterThisArg() -> K
    713:724:boolean signatureMatchesNoThis(cn.com.codesec.scan.metadata.FunMeta) -> c
    728:731:boolean compatibleType(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> a
    735:767:boolean overrides(cn.com.codesec.scan.metadata.FunMeta) -> d
    771:772:void setIsFileScopeInit() -> L
    775:775:boolean isFileScopeInit() -> M
    780:781:cn.com.codesec.scan.ir.nodes.IRFunDecl getDecl() -> N
    788:788:cn.com.codesec.scan.ir.nodes.IRFunDecl getDeclIncludingFileScopeInit() -> O
    792:792:cn.com.codesec.scan.ir.util.memory.IRRef getNSTRef() -> P
    796:801:void setNSTRef(cn.com.codesec.scan.ir.util.memory.IRRef,cn.com.codesec.parse.ir.SourceInfo,cn.com.codesec.util.SKYFile) -> a
    804:804:boolean definitionAvailable() -> Q
    809:809:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> R
    813:816:void setSourceLocation(cn.com.codesec.parse.ir.SourceInfo) -> a
    819:819:cn.com.codesec.parse.ir.SourceInfo getBodyLocation() -> S
    823:824:void setBodyLocation(cn.com.codesec.parse.ir.SourceInfo) -> b
    827:846:void copyDefinitionFrom(cn.com.codesec.scan.metadata.FunMeta) -> e
    849:851:void setNonAnalyzable() -> T
    854:857:cn.com.codesec.scan.metadata.Type getPtrType() -> U
    862:862:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    867:867:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    872:872:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    877:877:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    881:881:boolean userDefined() -> V
    886:886:cn.com.codesec.util.fset.FSet getCallerEdges() -> W
    891:891:cn.com.codesec.util.fset.FSet getCalleeEdges() -> X
    895:899:java.util.Set getCallers() -> Y
    903:903:java.util.Set getCallees() -> Z
    907:914:java.util.Set getUserDefinedCallers() -> aa
    918:918:java.util.Set getUserDefinedCallees() -> ab
    922:933:boolean addCaller(cn.com.codesec.scan.metadata.CallGraphEdge) -> a
    937:938:void addAccessedStorage(cn.com.codesec.scan.metadata.StorageMeta) -> a
    941:941:cn.com.codesec.util.fset.FSet getAccessedStorages() -> ac
    945:946:void addModifiedStorage(cn.com.codesec.scan.metadata.StorageMeta) -> b
    949:949:cn.com.codesec.util.fset.FSet getModifiedStorages() -> ad
    955:955:java.lang.String getSimpleName() -> c
    961:961:java.lang.String getAltSimpleName() -> e
    967:967:java.lang.String getTrueSimpleName() -> d
    971:971:java.lang.String getNativeMethodName() -> ae
    975:979:boolean nativeMethodExists() -> af
    983:983:cn.com.codesec.scan.metadata.FunMeta getGenericFunction() -> ag
    987:987:cn.com.codesec.util.SKYFile getSourceFile() -> ah
    991:991:int getMinArgCount() -> ai
    995:995:int getMaxArgCount() -> aj
    999:999:boolean isVarArg() -> ak
    1003:1003:boolean hasMapRestParameter() -> al
    1007:1007:int getRestMapParameterIndex() -> am
    1011:1011:boolean hasRestParameter() -> an
    1015:1015:int getRestParameterIndex() -> ao
    1019:1019:java.util.List getParameterNames() -> ap
    1023:1024:void setParameterNames(java.util.List) -> b
    1027:1027:cn.com.codesec.scan.metadata.Type[] getParameterTypes() -> aq
    1031:1031:cn.com.codesec.util.fset.FList getParameterTypesGeneric() -> ar
    1035:1036:void setParameterTypes(cn.com.codesec.scan.metadata.Type[]) -> b
    1039:1039:cn.com.codesec.scan.metadata.Type getReturnType() -> as
    1043:1043:cn.com.codesec.scan.metadata.Type getReturnTypeGeneric() -> at
    1047:1054:cn.com.codesec.scan.metadata.Type getTypeForParameter(cn.com.codesec.scan.model.Parameter) -> a
    1060:1067:java.lang.String getNameForParameter(cn.com.codesec.scan.model.Parameter) -> b
    1072:1072:java.lang.String getUniqueName() -> au
    1076:1080:void setEnclosingType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    1083:1084:void markWebService() -> av
    1088:1088:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    1092:1092:boolean isUsed() -> aw
    1096:1096:boolean isReified() -> ax
    1100:1101:void setReified() -> ay
    1104:1139:void addBufferArgEntry(int,int,int,int,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.analyzer.constants.IntegerConstant[]) -> a
    1142:1145:cn.com.codesec.scan.metadata.FunMeta$BufferArgEntry getBufferArgEntry(int) -> b
    1149:1149:java.util.Iterator getBufferArgEntries() -> az
    1153:1154:void setNodeCount(int) -> c
    1157:1157:int getNodeCount() -> aA
    1161:1162:void setReturnCount(int) -> d
    1165:1165:int getReturnCount() -> aB
    1169:1169:cn.com.codesec.util.fset.FList getGenericFunctions() -> aC
    1173:1176:void setAnnotations(java.util.Set) -> a
    1179:1179:java.util.Set getAnnotations() -> aD
    1183:1190:void setParameterAnnotations(int,java.util.Set) -> a
    1194:1197:java.util.Set getParameterAnnotations(cn.com.codesec.scan.model.Parameter) -> c
    1202:1209:java.util.Set getParameterAnnotations(int) -> e
    1214:1223:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    1227:1236:void readObjectPass2(java.io.ObjectInputStream) -> a
    1239:1239:cn.com.codesec.scan.util.serialization.Handle getHandle(cn.com.codesec.scan.backend.BackEnd) -> a
    1244:1261:int compareTo(java.lang.Object) -> compareTo
    1273:1273:cn.com.codesec.util.fset.FSet getPossibleHeapPaths() -> aE
    1277:1278:void addPossibleInstanceHeapPath(java.lang.String) -> a
    1281:1282:void addPossibleInstanceHeapPaths(cn.com.codesec.util.fset.FSet) -> a
    1285:1285:cn.com.codesec.util.fset.FSet getPossibleInstanceHeapPaths() -> aF
    1289:1289:cn.com.codesec.parse.ir.SourceInfo getOldBodyLocation() -> aG
    1293:1293:cn.com.codesec.scan.ir.util.memory.IRRef getOldNstRef() -> aH
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.FunMeta$BufferArgEntry -> cn.com.codesec.Ob:
    cn.com.codesec.scan.model.Parameter arg -> a
    int minSize -> b
    int constOffset -> c
    cn.com.codesec.scan.metadata.FunMeta caller -> d
    cn.com.codesec.parse.ir.SourceInfo callSite -> e
    cn.com.codesec.scan.metadata.FunMeta callee -> f
    java.util.Map intArgs -> g
    1346:1348:void <init>() -> <init>
    1352:1352:java.lang.String toString() -> toString
    1357:1361:int getArgIndex() -> a
    1366:1366:cn.com.codesec.scan.model.Parameter getArg() -> b
    1370:1371:void setArg(cn.com.codesec.scan.model.Parameter) -> a
    1374:1374:int getMinSize() -> c
    1378:1379:void setMinSize(int) -> a
    1382:1382:int getConstOffset() -> d
    1386:1387:void setConstOffset(int) -> b
    1390:1390:cn.com.codesec.scan.metadata.FunMeta getCaller() -> e
    1394:1395:void setCaller(cn.com.codesec.scan.metadata.FunMeta) -> a
    1398:1398:cn.com.codesec.parse.ir.SourceInfo getCallSite() -> f
    1402:1403:void setCallSite(cn.com.codesec.parse.ir.SourceInfo) -> a
    1406:1406:cn.com.codesec.scan.metadata.FunMeta getCallee() -> g
    1410:1411:void setCallee(cn.com.codesec.scan.metadata.FunMeta) -> b
    1414:1414:java.util.Map getIntArgs() -> h
    1418:1419:void setIntArgs(java.util.Map) -> a
cn.com.codesec.scan.metadata.GlobalVarMeta -> cn.com.codesec.Oc:
    cn.com.codesec.scan.metadata.VarMeta varMeta -> c
    23:26:void <init>(cn.com.codesec.scan.metadata.VarMeta) -> <init>
    30:30:java.lang.String getCanonicalName() -> f
    35:35:java.lang.String getAltCanonicalName() -> g
    40:40:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> u
    45:45:cn.com.codesec.scan.metadata.Type getType() -> j
    50:50:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    55:55:java.lang.String getSimpleName() -> c
    60:60:java.lang.String getAltSimpleName() -> e
    65:65:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    70:70:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    75:75:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    80:80:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    85:85:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    90:90:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    95:95:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    100:100:java.lang.String toString() -> toString
    105:107:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    111:113:void readObjectPass2(java.io.ObjectInputStream) -> a
    116:116:cn.com.codesec.scan.metadata.VarMeta getVarMeta() -> v
    120:121:void setVarMeta(cn.com.codesec.scan.metadata.VarMeta) -> a
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.InternalFunMeta -> cn.com.codesec.Od:
    cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute ptAttr -> e
    19:20:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean) -> <init>
    23:25:void <init>(cn.com.codesec.scan.meta.Language,java.lang.String,java.lang.String,cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[],cn.com.codesec.parse.ir.IRModifierSet,boolean,cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute) -> <init>
    29:29:cn.com.codesec.scan.analyzer.taint.model.BuiltinPassthroughAttribute getBuiltinPassthroughAttribute() -> aI
cn.com.codesec.scan.metadata.LabelSymbol -> cn.com.codesec.Oe:
    cn.com.codesec.parse.ir.SourceInfo loc -> b
    java.lang.String name -> c
    boolean $assertionsDisabled -> a
    17:17:void <clinit>() -> <clinit>
    22:25:void <init>(cn.com.codesec.parse.ir.SourceInfo,java.lang.String) -> <init>
    29:29:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> a
    34:34:java.lang.String getSimpleName() -> c
    39:39:java.lang.String getAltSimpleName() -> e
    44:44:java.lang.String getTrueSimpleName() -> d
    48:48:java.lang.String getName() -> m
    53:53:java.lang.String getCanonicalName() -> f
    58:58:java.lang.String getAltCanonicalName() -> g
    63:63:cn.com.codesec.scan.metadata.Type getType() -> j
    68:68:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    73:73:java.lang.String toString() -> toString
    78:78:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    83:90:boolean equals(java.lang.Object) -> equals
    95:95:int hashCode() -> hashCode
    100:110:int compareTo(java.lang.Object) -> compareTo
    115:115:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    120:121:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.MacroSymbol -> cn.com.codesec.Of:
    cn.com.codesec.parse.ir.SourceInfo loc -> b
    java.util.concurrent.ConcurrentMap INSTANCES -> c
    boolean $assertionsDisabled -> a
    18:136:void <clinit>() -> <clinit>
    24:26:cn.com.codesec.scan.metadata.MacroSymbol getMacroSymbol(cn.com.codesec.parse.ir.SourceInfo) -> a
    30:31:void reset() -> a
    33:35:void <init>(cn.com.codesec.parse.ir.SourceInfo) -> <init>
    39:39:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> m
    44:44:java.lang.String getSimpleName() -> c
    49:49:java.lang.String getAltSimpleName() -> e
    54:54:java.lang.String getTrueSimpleName() -> d
    58:58:java.lang.String getName() -> n
    63:63:java.lang.String getCanonicalName() -> f
    68:68:java.lang.String getAltCanonicalName() -> g
    73:73:cn.com.codesec.scan.metadata.Type getType() -> j
    78:78:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    83:83:java.lang.String toString() -> toString
    88:88:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    93:100:boolean equals(java.lang.Object) -> equals
    105:105:int hashCode() -> hashCode
    110:110:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    115:116:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    121:131:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.NameTable -> cn.com.codesec.Og:
    cn.com.codesec.scan.metadata.BackEndNameTable BACKEND -> a
    cn.com.codesec.scan.metadata.BackEndNameTable oldNameTable -> b
    java.util.Map types -> c
    java.util.HashMap typesByLocalName -> d
    java.util.Map typesByCanonicalName -> e
    cn.com.codesec.scan.util.collections.GMultiMap functionsByLocalName -> f
    java.util.EnumMap functions -> g
    java.util.EnumMap builtinFunctions -> o
    java.util.concurrent.ConcurrentMap storage -> h
    int typeCount -> i
    int typeByNameCount -> j
    int funCount -> k
    boolean complete -> p
    java.lang.Object TYPE_LOCK -> l
    java.lang.Object FUNCTION_LOCK -> m
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] NST_BUILTIN -> q
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] C_BUILTIN -> r
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] JSP_BUILTIN -> s
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] DOTNET_BUILTIN -> t
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] PLSQL_BUILTIN -> u
    cn.com.codesec.scan.metadata.BuiltinFunMeta[] ASPX_BUILTIN -> v
    cn.com.codesec.scan.metadata.Type jsObjectType -> w
    cn.com.codesec.scan.metadata.Type jsEnvType -> x
    boolean $assertionsDisabled -> n
    27:952:void <clinit>() -> <clinit>
    55:55:boolean isComplete() -> d
    59:60:void setComplete(boolean) -> a
    63:63:java.util.Map getTypes() -> e
    67:68:cn.com.codesec.scan.metadata.TypeMeta getType(java.lang.String,cn.com.codesec.scan.meta.Language) -> b
    73:74:java.util.Map getTypesForLanguage(cn.com.codesec.scan.meta.Language) -> a
    79:80:cn.com.codesec.util.fset.FList getTypesByLocalName(java.lang.String) -> e
    85:94:cn.com.codesec.util.fset.FList getTypesByCanonicalName(java.lang.String,cn.com.codesec.scan.meta.Language) -> c
    98:110:java.util.Collection getFunctionsByLocalName(java.lang.String) -> f
    114:114:boolean typeExists(java.lang.String,cn.com.codesec.scan.meta.Language) -> d
    118:122:java.util.Collection getAllTypes() -> f
    126:153:void addType(cn.com.codesec.scan.metadata.TypeMeta) -> a
    156:156:java.util.Map getFunmapForLanguage(cn.com.codesec.scan.meta.Language) -> b
    160:166:java.util.HashMap getBuiltinFunmapForLanguage(cn.com.codesec.scan.meta.Language) -> c
    171:177:cn.com.codesec.scan.meta.Language getCanonicalLanguage(cn.com.codesec.scan.meta.Language) -> d
    181:190:cn.com.codesec.util.fset.FList getFunctions(cn.com.codesec.scan.meta.Language,java.lang.String) -> a
    195:202:java.util.Collection getAllFunctions() -> g
    207:213:int getFunDeclCount() -> h
    217:229:int getFunDefnCount() -> i
    233:252:cn.com.codesec.scan.metadata.FunMeta getFunction(java.lang.String) -> g
    257:287:cn.com.codesec.scan.metadata.FunMeta addFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    292:296:void appendNameTableCounters(java.lang.StringBuilder,java.text.NumberFormat) -> a
    298:298:java.util.concurrent.ConcurrentMap getStorage() -> j
    302:302:cn.com.codesec.scan.metadata.StorageMeta getStorage(cn.com.codesec.scan.metadata.Namespace,java.lang.String) -> a
    307:307:cn.com.codesec.scan.metadata.StorageMeta getStorage(cn.com.codesec.scan.metadata.TypeMeta,java.lang.String) -> a
    312:312:cn.com.codesec.scan.metadata.StorageMeta getStorageByKey(java.lang.Object,java.lang.String) -> a
    317:317:cn.com.codesec.scan.metadata.StorageMeta addStorage(cn.com.codesec.scan.metadata.StorageMeta) -> a
    321:321:java.lang.String getStorageName(cn.com.codesec.scan.metadata.StorageMeta) -> d
    325:325:java.lang.Object getStorageKey(cn.com.codesec.scan.metadata.StorageMeta) -> e
    329:329:boolean isDefinition(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    332:352:void <init>() -> <init>
    355:356:void addBuiltinFunction(cn.com.codesec.scan.metadata.BuiltinFunMeta) -> a
    359:375:void initSpecialTypes() -> a
    378:381:void initBackend() -> k
    384:394:void dumpTypeInfo() -> l
    397:415:cn.com.codesec.scan.metadata.NameTable$Handle getHandle(cn.com.codesec.scan.metadata.NameTableData) -> a
    419:419:cn.com.codesec.scan.metadata.BackEndNameTable getBACKEND() -> m
    423:424:void setBACKEND(cn.com.codesec.scan.metadata.BackEndNameTable) -> a
    427:427:cn.com.codesec.scan.metadata.BackEndNameTable getOldNameTable() -> n
    431:432:void setOldNameTable(cn.com.codesec.scan.metadata.BackEndNameTable) -> b
    435:435:cn.com.codesec.scan.metadata.Type getJsObjectType() -> o
    439:440:void setJsObjectType(cn.com.codesec.scan.metadata.Type) -> a
    443:443:cn.com.codesec.scan.metadata.Type getJsEnvType() -> p
    447:448:void setJsEnvType(cn.com.codesec.scan.metadata.Type) -> b
    324:324:java.lang.Object access$0(cn.com.codesec.scan.metadata.StorageMeta) -> b
    320:320:java.lang.String access$1(cn.com.codesec.scan.metadata.StorageMeta) -> c
    311:311:cn.com.codesec.scan.metadata.StorageMeta access$2(cn.com.codesec.scan.metadata.NameTable,java.lang.Object,java.lang.String) -> a
cn.com.codesec.scan.metadata.NameTable$BuiltinFunMetaHandle -> cn.com.codesec.Oh:
    cn.com.codesec.scan.meta.Language language -> b
    java.lang.String name -> c
    boolean $assertionsDisabled -> a
    1011:1011:void <clinit>() -> <clinit>
    1013:1015:void <init>() -> <init>
    1018:1018:cn.com.codesec.scan.meta.Language getLanguage() -> a
    1022:1022:java.lang.String getName() -> b
    1026:1027:void setLanguage(cn.com.codesec.scan.meta.Language) -> a
    1030:1031:void setName(java.lang.String) -> a
    1036:1040:void <init>(cn.com.codesec.scan.metadata.BuiltinFunMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1044:1044:cn.com.codesec.scan.metadata.BuiltinFunMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    1036:1036:void <init>(cn.com.codesec.scan.metadata.BuiltinFunMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$BuiltinFunMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTable$FieldMetaHandle -> cn.com.codesec.Oi:
    cn.com.codesec.scan.metadata.NameTable$TypeMetaHandle enclosingTypeHandle -> b
    java.lang.String name -> c
    boolean $assertionsDisabled -> a
    1163:1163:void <clinit>() -> <clinit>
    1165:1167:void <init>() -> <init>
    1170:1170:cn.com.codesec.scan.metadata.NameTable$TypeMetaHandle getEnclosingTypeHandle() -> a
    1174:1174:java.lang.String getName() -> b
    1178:1179:void setEnclosingTypeHandle(cn.com.codesec.scan.metadata.NameTable$TypeMetaHandle) -> a
    1182:1183:void setName(java.lang.String) -> a
    1188:1192:void <init>(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1196:1197:cn.com.codesec.scan.metadata.FieldMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    1188:1188:void <init>(cn.com.codesec.scan.metadata.FieldMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$FieldMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTable$FunMetaHandle -> cn.com.codesec.Oj:
    cn.com.codesec.scan.meta.Language language -> b
    java.lang.String name -> c
    int idx -> d
    boolean $assertionsDisabled -> a
    954:954:void <clinit>() -> <clinit>
    956:958:void <init>() -> <init>
    961:961:cn.com.codesec.scan.meta.Language getLanguage() -> a
    965:965:java.lang.String getName() -> b
    969:969:int getIdx() -> c
    973:974:void setLanguage(cn.com.codesec.scan.meta.Language) -> a
    977:978:void setName(java.lang.String) -> a
    981:982:void setIdx(int) -> a
    988:1002:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1006:1006:cn.com.codesec.scan.metadata.FunMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    988:988:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$FunMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTable$Handle -> cn.com.codesec.Ok:
    cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
cn.com.codesec.scan.metadata.NameTable$StorageMetaHandle -> cn.com.codesec.Ol:
    java.lang.Object key -> b
    java.lang.String name -> c
    boolean $assertionsDisabled -> a
    1086:1086:void <clinit>() -> <clinit>
    1088:1090:void <init>() -> <init>
    1093:1093:java.lang.Object getKey() -> a
    1097:1097:java.lang.String getName() -> b
    1101:1102:void setKey(java.lang.Object) -> a
    1105:1106:void setName(java.lang.String) -> a
    1111:1115:void <init>(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1119:1119:cn.com.codesec.scan.metadata.StorageMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    1111:1111:void <init>(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$StorageMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTable$TypeMetaHandle -> cn.com.codesec.Om:
    java.lang.String name -> b
    cn.com.codesec.scan.meta.Language lang -> c
    boolean $assertionsDisabled -> a
    1124:1124:void <clinit>() -> <clinit>
    1126:1128:void <init>() -> <init>
    1131:1131:java.lang.String getName() -> a
    1135:1135:cn.com.codesec.scan.meta.Language getLang() -> b
    1139:1140:void setName(java.lang.String) -> a
    1143:1144:void setLang(cn.com.codesec.scan.meta.Language) -> a
    1149:1154:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1158:1158:cn.com.codesec.scan.metadata.TypeMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    1149:1149:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$TypeMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTable$UnknownFunMetaHandle -> cn.com.codesec.On:
    cn.com.codesec.scan.meta.Language language -> a
    java.lang.String name -> b
    1051:1053:void <init>() -> <init>
    1056:1056:cn.com.codesec.scan.meta.Language getLanguage() -> a
    1060:1060:java.lang.String getName() -> b
    1064:1065:void setLanguage(cn.com.codesec.scan.meta.Language) -> a
    1068:1069:void setName(java.lang.String) -> a
    1074:1077:void <init>(cn.com.codesec.scan.metadata.UnknownFunMeta,cn.com.codesec.scan.metadata.NameTable) -> <init>
    1081:1081:cn.com.codesec.scan.metadata.UnknownFunMeta get(cn.com.codesec.scan.metadata.NameTable) -> a
    1:1:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.metadata.NameTable) -> b
    1074:1074:void <init>(cn.com.codesec.scan.metadata.UnknownFunMeta,cn.com.codesec.scan.metadata.NameTable,cn.com.codesec.scan.metadata.NameTable$UnknownFunMetaHandle) -> <init>
cn.com.codesec.scan.metadata.NameTableData -> cn.com.codesec.Oo:
    void writeObjectPass2(java.io.ObjectOutputStream) -> a
    void readObjectPass2(java.io.ObjectInputStream) -> a
cn.com.codesec.scan.metadata.Namespace -> cn.com.codesec.Op:
    java.util.concurrent.ConcurrentMap NAMESPACES -> e
    cn.com.codesec.scan.metadata.Namespace$Scope C_ENUM_SCOPE -> a
    cn.com.codesec.scan.meta.Language sourceLanguage -> b
    java.lang.String namespaceName -> c
    cn.com.codesec.scan.metadata.Namespace$Scope scope -> d
    134:150:void <clinit>() -> <clinit>
    32:32:cn.com.codesec.scan.metadata.Namespace getNamespace(java.lang.String,cn.com.codesec.scan.meta.Language) -> a
    37:38:cn.com.codesec.scan.metadata.Namespace getNamespace(java.lang.String,cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.metadata.Namespace$Scope) -> a
    43:43:cn.com.codesec.scan.metadata.Namespace getCanonicalNamespace(cn.com.codesec.scan.metadata.Namespace) -> a
    47:47:cn.com.codesec.scan.metadata.Namespace getDefaultNamespace(cn.com.codesec.scan.meta.Language) -> a
    50:54:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language,cn.com.codesec.scan.metadata.Namespace$Scope) -> <init>
    58:58:java.lang.String toString() -> toString
    62:62:cn.com.codesec.scan.meta.Language getSourceLanguage() -> a
    66:66:java.lang.String getNamespaceSeparator() -> b
    70:70:java.lang.String getNamespaceName() -> c
    74:74:cn.com.codesec.scan.metadata.Namespace$Scope getScope() -> d
    78:78:boolean isDefault() -> e
    84:100:boolean equals(java.lang.Object) -> equals
    105:108:int hashCode() -> hashCode
    113:126:int compareTo(cn.com.codesec.scan.metadata.Namespace) -> b
    130:130:java.lang.Object readResolve() -> readResolve
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.metadata.Namespace$1 -> cn.com.codesec.Oq:
    1:136:void <init>() -> <init>
    139:139:java.lang.String toString() -> toString
    144:147:int compareTo(cn.com.codesec.scan.metadata.Namespace$Scope) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.metadata.Namespace$FileScope -> cn.com.codesec.Or:
    cn.com.codesec.util.SKYFile compilationUnit -> a
    154:156:void <init>() -> <init>
    161:162:void setCompilationUnit(cn.com.codesec.util.SKYFile) -> a
    164:166:void <init>(cn.com.codesec.util.SKYFile) -> <init>
    169:169:cn.com.codesec.util.SKYFile getCompilationUnit() -> a
    174:174:java.lang.String toString() -> toString
    179:194:boolean equals(java.lang.Object) -> equals
    199:199:int hashCode() -> hashCode
    204:215:int compareTo(cn.com.codesec.scan.metadata.Namespace$Scope) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.metadata.Namespace$LocalScope -> cn.com.codesec.Os:
    java.lang.String inFunction -> b
    221:223:void <init>() -> <init>
    228:228:java.lang.String getInFunction() -> b
    232:233:void setInFunction(java.lang.String) -> a
    236:238:void <init>(cn.com.codesec.util.SKYFile,java.lang.String) -> <init>
    242:242:java.lang.String toString() -> toString
    247:257:boolean equals(java.lang.Object) -> equals
    262:266:int hashCode() -> hashCode
    271:282:int compareTo(cn.com.codesec.scan.metadata.Namespace$Scope) -> a
cn.com.codesec.scan.metadata.Namespace$Scope -> cn.com.codesec.Ot:
cn.com.codesec.scan.metadata.NonStaticFieldMeta -> cn.com.codesec.Ou:
    cn.com.codesec.scan.metadata.FieldMeta field -> c
    14:16:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    20:20:java.lang.String getSimpleName() -> c
    25:25:java.lang.String getAltSimpleName() -> e
    30:30:java.lang.String getCanonicalName() -> f
    35:35:java.lang.String getAltCanonicalName() -> g
    40:40:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> a
    45:45:cn.com.codesec.scan.metadata.Type getType() -> j
    50:50:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    55:55:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    59:59:cn.com.codesec.scan.metadata.FieldMeta getField() -> u
    64:64:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    69:69:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    74:74:java.lang.String toString() -> toString
    79:79:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> m
    84:84:java.util.Set getConstantValues() -> n
    89:90:void addConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.Quasi -> cn.com.codesec.Ov:
    13:13:void <init>() -> <init>
cn.com.codesec.scan.metadata.Quasi$FieldMeta -> cn.com.codesec.Ow:
    cn.com.codesec.scan.analyzer.typeinference.DuckType duckType -> b
    47:48:void <init>(cn.com.codesec.scan.metadata.Quasi$TypeMeta,java.lang.String) -> <init>
    51:51:cn.com.codesec.scan.analyzer.typeinference.DuckType getDuckType() -> w
cn.com.codesec.scan.metadata.Quasi$FunMeta -> cn.com.codesec.Ox:
    cn.com.codesec.scan.analyzer.typeinference.DuckType duckType -> e
    34:35:void <init>(cn.com.codesec.scan.metadata.Quasi$TypeMeta,java.lang.String) -> <init>
    38:38:cn.com.codesec.scan.analyzer.typeinference.DuckType getDuckType() -> aI
cn.com.codesec.scan.metadata.Quasi$TypeMeta -> cn.com.codesec.Oy:
    cn.com.codesec.scan.analyzer.typeinference.DuckType duckType -> d
    20:22:void <init>(cn.com.codesec.scan.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.scan.analyzer.typeinference.DuckType,cn.com.codesec.scan.meta.Language) -> <init>
    25:25:cn.com.codesec.scan.analyzer.typeinference.DuckType getDuckType() -> m
cn.com.codesec.scan.metadata.RuleDefinedReturnType -> cn.com.codesec.Oz:
    29:30:void <init>(cn.com.codesec.scan.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    35:35:cn.com.codesec.util.fset.FSet getSubs() -> G_
    41:41:cn.com.codesec.util.fset.FSet getSupers() -> n
    46:46:void addSub(cn.com.codesec.scan.metadata.TypeMeta) -> a
    51:51:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String) -> a
    57:57:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String,boolean) -> a
    63:63:cn.com.codesec.util.fset.FSet getFunctions(java.lang.String) -> c
    69:69:cn.com.codesec.util.fset.FList getLocalFunctions(java.lang.String) -> d
    75:75:java.util.Collection getLocalFields() -> o
    81:81:cn.com.codesec.util.fset.FList getLocalFunctions() -> p
    86:86:boolean isA(cn.com.codesec.scan.metadata.TypeMeta) -> b
    91:91:boolean isA(java.lang.String) -> e
    97:97:cn.com.codesec.scan.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> b
    103:103:cn.com.codesec.scan.metadata.FunMeta getLocalFunction(java.lang.String,cn.com.codesec.scan.metadata.Type[],boolean) -> a
    108:108:void loadSupersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> a
    112:112:void loadMembersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> b
    117:117:cn.com.codesec.util.fset.FMap getFieldMap() -> q
    123:123:cn.com.codesec.util.fset.FMap getFunctions() -> r
    128:128:void removeFun(cn.com.codesec.scan.metadata.FunMeta) -> a
    132:132:void addFun(cn.com.codesec.scan.metadata.FunMeta) -> b
    136:136:void addField(cn.com.codesec.scan.metadata.FieldMeta) -> a
    141:141:cn.com.codesec.scan.ir.nodes.IRClassDecl getDecl() -> s
    146:146:boolean equals(java.lang.Object) -> equals
    151:151:int hashCode() -> hashCode
    155:155:void writeState(java.io.ObjectOutputStream) -> b
    158:158:void readState(java.io.ObjectInputStream) -> b
cn.com.codesec.scan.metadata.SingletonMeta -> cn.com.codesec.OA:
    cn.com.codesec.scan.metadata.TypeMeta typeMeta -> c
    cn.com.codesec.java.rules.GlobalClassRule rule -> d
    21:25:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.java.rules.GlobalClassRule) -> <init>
    29:29:java.lang.String getCanonicalName() -> f
    34:34:java.lang.String getAltCanonicalName() -> g
    38:38:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> u
    43:43:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> v
    48:48:cn.com.codesec.scan.metadata.Type getType() -> j
    53:53:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    58:58:java.lang.String getSimpleName() -> c
    63:63:java.lang.String getAltSimpleName() -> e
    68:68:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    73:73:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    78:78:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    83:83:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    88:88:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    93:93:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    98:98:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    102:102:cn.com.codesec.java.rules.GlobalClassRule getRule() -> w
    107:107:java.lang.String toString() -> toString
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.StaticFieldMeta -> cn.com.codesec.OB:
    cn.com.codesec.scan.metadata.FieldMeta field -> c
    17:20:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    24:24:java.lang.String getSimpleName() -> c
    29:29:java.lang.String getAltSimpleName() -> e
    34:34:java.lang.String getCanonicalName() -> f
    39:39:java.lang.String getAltCanonicalName() -> g
    44:44:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> u
    49:49:cn.com.codesec.scan.metadata.Type getType() -> j
    54:54:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    59:59:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    63:63:cn.com.codesec.scan.metadata.FieldMeta getField() -> v
    68:68:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    73:73:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    78:78:java.lang.String toString() -> toString
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.StorageMeta -> cn.com.codesec.OC:
    cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> m
    java.util.Set getConstantValues() -> n
    void addConstantValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    void addFunPtr(cn.com.codesec.scan.metadata.FunMeta) -> a
    java.util.Set getPossibleFunPtrs() -> o
    java.util.Collection getAccessorFunctions() -> t
    java.util.Collection getModifierFunctions() -> s
    boolean addAccessor(cn.com.codesec.scan.metadata.FunMeta) -> b
    void addModifier(cn.com.codesec.scan.metadata.FunMeta) -> c
    cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    boolean getHadAddressTaken() -> r
    void setHadAddressTaken(boolean) -> a
cn.com.codesec.scan.metadata.Type -> cn.com.codesec.OD:
    java.util.concurrent.ConcurrentMap types -> R
    cn.com.codesec.scan.metadata.Type UNKNOWN -> a
    cn.com.codesec.scan.metadata.Type ANY -> b
    cn.com.codesec.scan.metadata.Type$Primitive VOID -> c
    cn.com.codesec.scan.metadata.Type$Primitive NULL -> d
    cn.com.codesec.scan.metadata.Type$Primitive INT -> e
    cn.com.codesec.scan.metadata.Type$Primitive SHORT -> f
    cn.com.codesec.scan.metadata.Type$Primitive LONG -> g
    cn.com.codesec.scan.metadata.Type$Primitive LONGLONG -> h
    cn.com.codesec.scan.metadata.Type$Primitive BYTE -> i
    cn.com.codesec.scan.metadata.Type$Primitive CHAR -> j
    cn.com.codesec.scan.metadata.Type$Primitive CHAR16 -> k
    cn.com.codesec.scan.metadata.Type$Primitive CHAR32 -> l
    cn.com.codesec.scan.metadata.Type$Primitive WCHAR -> m
    cn.com.codesec.scan.metadata.Type$Primitive BOOLEAN -> n
    cn.com.codesec.scan.metadata.Type$Primitive DOUBLE -> o
    cn.com.codesec.scan.metadata.Type$Primitive LONGDOUBLE -> p
    cn.com.codesec.scan.metadata.Type$Primitive INT128 -> q
    cn.com.codesec.scan.metadata.Type$Primitive HALF -> r
    cn.com.codesec.scan.metadata.Type$Primitive FLOAT -> s
    cn.com.codesec.scan.metadata.Type$Primitive FLOAT128 -> t
    cn.com.codesec.scan.metadata.Type$Primitive NUMBER -> u
    cn.com.codesec.scan.metadata.Type$Primitive DATE -> v
    cn.com.codesec.scan.metadata.Type$Primitive TIMESTAMP -> w
    cn.com.codesec.scan.metadata.Type$Primitive INTERVAL -> x
    cn.com.codesec.scan.metadata.Type$Primitive BFILE -> y
    cn.com.codesec.scan.metadata.Type$Primitive ROWID -> z
    cn.com.codesec.scan.metadata.Type$Primitive BLOB -> A
    cn.com.codesec.scan.metadata.Type$Primitive CLOB -> B
    cn.com.codesec.scan.metadata.Type$Primitive NCLOB -> C
    cn.com.codesec.scan.metadata.Type$Primitive RAW -> D
    cn.com.codesec.scan.metadata.Type$Primitive CURSOR -> E
    cn.com.codesec.scan.metadata.Type$Primitive UCHAR -> F
    cn.com.codesec.scan.metadata.Type$Primitive UCHAR16 -> G
    cn.com.codesec.scan.metadata.Type$Primitive UCHAR32 -> H
    cn.com.codesec.scan.metadata.Type$Primitive UWCHAR -> I
    cn.com.codesec.scan.metadata.Type$Primitive UINT -> J
    cn.com.codesec.scan.metadata.Type$Primitive USHORT -> K
    cn.com.codesec.scan.metadata.Type$Primitive ULONG -> L
    cn.com.codesec.scan.metadata.Type$Primitive ULONGLONG -> M
    cn.com.codesec.scan.metadata.Type$Primitive UINT128 -> N
    cn.com.codesec.scan.metadata.Type$Primitive PTR_TYPE -> O
    cn.com.codesec.scan.metadata.Type$Primitive SIZET -> P
    cn.com.codesec.scan.metadata.TypeSizeModel PTypeModel -> S
    boolean $assertionsDisabled -> Q
    31:543:void <clinit>() -> <clinit>
    31:31:void <init>() -> <init>
    int getStorageSize() -> a
    java.lang.String toString() -> toString
    84:84:cn.com.codesec.scan.metadata.Type unwrapOuterTypedefs() -> b
    cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    cn.com.codesec.scan.metadata.Type removePointers() -> d
    93:93:boolean isPossiblePointerType() -> e
    97:97:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    101:101:boolean isDereferenceable() -> f
    106:106:java.lang.String toStringBase() -> g
    110:113:int getPrimitiveTypeWidth(cn.com.codesec.parse.ir.PrimitiveType) -> a
    117:121:cn.com.codesec.scan.metadata.TypeMeta getTypeMeta() -> h
    126:127:cn.com.codesec.scan.metadata.Type getCached(cn.com.codesec.scan.metadata.Type) -> a
    131:131:cn.com.codesec.scan.metadata.Type$Defined get(cn.com.codesec.scan.metadata.TypeMeta) -> a
    135:135:cn.com.codesec.scan.metadata.Type$Defined get(cn.com.codesec.scan.metadata.TypeMeta,java.util.List) -> a
    139:139:cn.com.codesec.scan.metadata.Type$Primitive get(cn.com.codesec.parse.ir.PrimitiveType) -> b
    143:143:cn.com.codesec.scan.metadata.Type$Function getFunction(cn.com.codesec.scan.metadata.FunMeta) -> a
    147:147:cn.com.codesec.scan.metadata.Type$Function getFunction(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[]) -> a
    151:151:cn.com.codesec.scan.metadata.Type$Typedef getTypedef(java.lang.String) -> a
    155:155:cn.com.codesec.scan.metadata.Type$PlainPointer getPointer() -> i
    159:159:cn.com.codesec.scan.metadata.Type$CppReference getCppReference() -> j
    164:164:cn.com.codesec.scan.metadata.Type$Array getArray() -> k
    169:169:cn.com.codesec.scan.metadata.Type$Array$Fixed getArray(int) -> a
    173:173:cn.com.codesec.scan.metadata.Type$TypeVar getTypeVar(java.lang.String,cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    178:190:cn.com.codesec.scan.metadata.Type applyIndirection(int,int,int[]) -> a
    194:194:boolean isFloatingPoint() -> l
    199:199:boolean isPrimitive() -> m
    204:204:boolean isDefinedType() -> n
    209:209:boolean isFunPtr() -> o
    214:234:cn.com.codesec.scan.metadata.Type getBase() -> p
    239:243:cn.com.codesec.parse.ir.PrimitiveType getPrimitiveType() -> q
    248:252:cn.com.codesec.scan.metadata.TypeMeta getDefinedType() -> r
    256:260:cn.com.codesec.scan.metadata.TypeMeta getClassSymbol() -> s
    265:269:cn.com.codesec.scan.metadata.Type getReturnType() -> t
    274:278:cn.com.codesec.scan.metadata.Type[] getArgTypes() -> u
    283:300:int getPointerDepth() -> v
    305:319:int getArrayDims() -> w
    324:336:boolean hasArrayDims() -> x
    341:346:boolean hasPointer() -> y
    351:351:boolean hasIndirection() -> z
    356:374:int getArrayDimSize(int) -> b
    382:394:cn.com.codesec.scan.metadata.Type getDimensionType(int) -> c
    399:413:int getIndirectionLevel() -> A
    418:422:java.lang.String getFullyQualifiedName() -> B
    427:434:java.lang.String getSimpleName() -> C
    java.lang.String getDisplayString() -> D
    440:441:void setTypeSizeModel(cn.com.codesec.scan.metadata.TypeSizeModel) -> a
    444:444:boolean isCharacterType(cn.com.codesec.parse.ir.PrimitiveType,cn.com.codesec.scan.metadata.BackEndNameTable) -> a
    451:495:boolean override(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type) -> a
    76:76:cn.com.codesec.scan.metadata.TypeSizeModel access$0() -> E
cn.com.codesec.scan.metadata.Type$Any -> cn.com.codesec.OE:
    cn.com.codesec.scan.metadata.Type$Any INSTANCE -> R
    1366:1367:void <clinit>() -> <clinit>
    1311:1312:void <init>() -> <init>
    1316:1316:java.lang.String toString() -> toString
    1321:1321:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    1327:1327:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1332:1332:int getStorageSize() -> a
    1337:1337:boolean isPossiblePointerType() -> e
    1342:1342:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    1347:1347:boolean isDereferenceable() -> f
    1352:1352:java.lang.String getDisplayString() -> D
    1357:1357:int hashCode() -> hashCode
    1362:1362:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.metadata.Type$Array -> cn.com.codesec.OF:
    cn.com.codesec.scan.metadata.Type element -> R
    boolean $assertionsDisabled -> S
    871:871:void <clinit>() -> <clinit>
    873:875:void <init>() -> <init>
    880:881:void setElement(cn.com.codesec.scan.metadata.Type) -> b
    883:886:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    889:889:cn.com.codesec.scan.metadata.Type getElement() -> F
    894:894:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    899:899:java.lang.String getDisplayString() -> D
    883:883:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type$Array) -> <init>
cn.com.codesec.scan.metadata.Type$Array$Fixed -> cn.com.codesec.OG:
    int numElements -> U
    boolean $assertionsDisabled -> T
    950:950:void <clinit>() -> <clinit>
    952:954:void <init>() -> <init>
    959:959:int getNumElements() -> G
    963:964:void setNumElements(int) -> d
    967:970:void <init>(cn.com.codesec.scan.metadata.Type,int) -> <init>
    974:974:java.lang.String toString() -> toString
    979:979:boolean equals(java.lang.Object) -> equals
    983:983:boolean equals(cn.com.codesec.scan.metadata.Type$Array$Fixed) -> a
    988:988:int hashCode() -> hashCode
    993:993:cn.com.codesec.scan.metadata.Type$Array$Fixed unwrapAllTypedefs() -> H
    999:999:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1004:1008:int getStorageSize() -> a
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    966:966:void <init>(cn.com.codesec.scan.metadata.Type,int,cn.com.codesec.scan.metadata.Type$Array$Fixed) -> <init>
    956:956:int access$2(cn.com.codesec.scan.metadata.Type$Array$Fixed) -> b
cn.com.codesec.scan.metadata.Type$Array$Variable -> cn.com.codesec.OH:
    905:907:void <init>() -> <init>
    910:911:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    915:915:java.lang.String toString() -> toString
    920:920:boolean equals(java.lang.Object) -> equals
    924:924:boolean equals(cn.com.codesec.scan.metadata.Type$Array$Variable) -> a
    929:929:int hashCode() -> hashCode
    934:934:cn.com.codesec.scan.metadata.Type$Array unwrapAllTypedefs() -> G
    940:940:cn.com.codesec.scan.metadata.Type removePointers() -> d
    945:945:int getStorageSize() -> a
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    909:909:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type$Array$Variable) -> <init>
cn.com.codesec.scan.metadata.Type$Base -> cn.com.codesec.OI:
    547:549:void <init>() -> <init>
    554:554:cn.com.codesec.scan.metadata.Type removePointers() -> d
    547:547:void <init>(cn.com.codesec.scan.metadata.Type$Base) -> <init>
cn.com.codesec.scan.metadata.Type$CppReference -> cn.com.codesec.OJ:
    1107:1109:void <init>() -> <init>
    1112:1113:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    1117:1117:java.lang.String toString() -> toString
    1122:1122:boolean equals(java.lang.Object) -> equals
    1126:1126:boolean equals(cn.com.codesec.scan.metadata.Type$CppReference) -> a
    1131:1131:cn.com.codesec.scan.metadata.Type$CppReference unwrapAllTypedefs() -> F
    1136:1136:int hashCode() -> hashCode
    1141:1141:java.lang.String getDisplayString() -> D
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
cn.com.codesec.scan.metadata.Type$Defined -> cn.com.codesec.OK:
    cn.com.codesec.scan.metadata.TypeMeta def -> R
    java.util.List typeArguments -> S
    635:637:void <init>() -> <init>
    640:641:void setDef(cn.com.codesec.scan.metadata.TypeMeta) -> b
    644:645:void setTypeArguments(java.util.List) -> a
    651:652:void <init>(cn.com.codesec.scan.metadata.TypeMeta) -> <init>
    654:657:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.util.List) -> <init>
    660:660:cn.com.codesec.scan.metadata.TypeMeta getDef() -> F
    664:664:java.util.List getTypeArguments() -> G
    669:682:java.lang.String toString() -> toString
    687:687:boolean equals(java.lang.Object) -> equals
    691:691:boolean equals(cn.com.codesec.scan.metadata.Type$Defined) -> a
    696:696:int hashCode() -> hashCode
    701:701:cn.com.codesec.scan.metadata.Type$Defined unwrapAllTypedefs() -> H
    706:709:int getStorageSize() -> a
    714:714:java.lang.String getDisplayString() -> D
    719:719:boolean isPossiblePointerType() -> e
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    650:650:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.Type$Defined) -> <init>
    650:650:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.metadata.Type$Defined,cn.com.codesec.scan.metadata.Type$Defined) -> <init>
    647:647:cn.com.codesec.scan.metadata.TypeMeta access$3(cn.com.codesec.scan.metadata.Type$Defined) -> b
    654:654:void <init>(cn.com.codesec.scan.metadata.TypeMeta,java.util.List,cn.com.codesec.scan.metadata.Type$Defined) -> <init>
cn.com.codesec.scan.metadata.Type$Defined$Multi -> cn.com.codesec.OL:
    cn.com.codesec.util.fset.FSet defs -> R
    725:727:void <init>() -> <init>
    732:732:cn.com.codesec.util.fset.FSet getDefs() -> I
    736:737:void setDefs(cn.com.codesec.util.fset.FSet) -> a
    740:742:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.util.fset.FSet) -> <init>
    746:746:int hashCode() -> hashCode
    751:751:boolean equals(java.lang.Object) -> equals
    755:755:boolean equals(cn.com.codesec.scan.metadata.Type$Defined$Multi) -> a
    760:764:java.lang.String toString() -> toString
    768:772:cn.com.codesec.util.fset.FSet getInferredTypes() -> J
cn.com.codesec.scan.metadata.Type$Function -> cn.com.codesec.OM:
    cn.com.codesec.scan.metadata.Type[] params -> S
    cn.com.codesec.scan.metadata.Type ret -> T
    boolean $assertionsDisabled -> R
    1146:1146:void <clinit>() -> <clinit>
    1148:1150:void <init>() -> <init>
    1153:1153:cn.com.codesec.scan.metadata.Type[] getParams() -> F
    1157:1157:cn.com.codesec.scan.metadata.Type getRet() -> G
    1161:1162:void setParams(cn.com.codesec.scan.metadata.Type[]) -> a
    1165:1166:void setRet(cn.com.codesec.scan.metadata.Type) -> b
    1171:1179:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type[]) -> <init>
    1183:1183:java.lang.String toString() -> toString
    1188:1188:boolean equals(java.lang.Object) -> equals
    1192:1203:boolean equals(cn.com.codesec.scan.metadata.Type$Function) -> a
    1208:1212:int hashCode() -> hashCode
    1217:1222:cn.com.codesec.scan.metadata.Type$Function unwrapAllTypedefs() -> H
    1228:1233:cn.com.codesec.scan.metadata.Type$Function removePointers() -> I
    1238:1238:int getStorageSize() -> a
    1243:1243:java.lang.String getDisplayString() -> D
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    1:1:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1169:1169:cn.com.codesec.scan.metadata.Type access$2(cn.com.codesec.scan.metadata.Type$Function) -> b
    1168:1168:cn.com.codesec.scan.metadata.Type[] access$3(cn.com.codesec.scan.metadata.Type$Function) -> c
cn.com.codesec.scan.metadata.Type$PlainPointer -> cn.com.codesec.ON:
    1066:1068:void <init>() -> <init>
    1071:1072:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    1076:1076:java.lang.String toString() -> toString
    1081:1081:boolean equals(java.lang.Object) -> equals
    1085:1085:boolean equals(cn.com.codesec.scan.metadata.Type$PlainPointer) -> a
    1090:1090:cn.com.codesec.scan.metadata.Type$PlainPointer unwrapAllTypedefs() -> F
    1095:1095:int hashCode() -> hashCode
    1100:1100:java.lang.String getDisplayString() -> D
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
cn.com.codesec.scan.metadata.Type$Pointer -> cn.com.codesec.OO:
    cn.com.codesec.scan.metadata.Type target -> R
    boolean $assertionsDisabled -> S
    1013:1013:void <clinit>() -> <clinit>
    1015:1017:void <init>() -> <init>
    1023:1024:void setTarget(cn.com.codesec.scan.metadata.Type) -> b
    1026:1029:void <init>(cn.com.codesec.scan.metadata.Type) -> <init>
    1033:1033:cn.com.codesec.scan.metadata.Type getTarget() -> G
    1039:1039:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1044:1044:int getStorageSize() -> a
    1049:1049:boolean isPossiblePointerType() -> e
    1054:1054:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    1059:1059:boolean isDereferenceable() -> f
    1026:1026:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.scan.metadata.Type$Pointer) -> <init>
cn.com.codesec.scan.metadata.Type$Primitive -> cn.com.codesec.OP:
    cn.com.codesec.parse.ir.PrimitiveType def -> R
    561:563:void <init>() -> <init>
    568:568:cn.com.codesec.parse.ir.PrimitiveType getDef() -> F
    572:573:void setDef(cn.com.codesec.parse.ir.PrimitiveType) -> c
    575:577:void <init>(cn.com.codesec.parse.ir.PrimitiveType) -> <init>
    581:581:java.lang.String toString() -> toString
    586:586:boolean equals(java.lang.Object) -> equals
    590:590:boolean equals(cn.com.codesec.scan.metadata.Type$Primitive) -> a
    595:595:int hashCode() -> hashCode
    600:600:cn.com.codesec.scan.metadata.Type$Primitive unwrapAllTypedefs() -> G
    605:605:int getStorageSize() -> a
    609:609:int getBitWidth() -> H
    613:613:boolean isSigned() -> I
    618:618:java.lang.String getDisplayString() -> D
    623:623:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    628:628:boolean isFloatingPoint() -> l
    1:1:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    575:575:void <init>(cn.com.codesec.parse.ir.PrimitiveType,cn.com.codesec.scan.metadata.Type$Primitive) -> <init>
    565:565:cn.com.codesec.parse.ir.PrimitiveType access$2(cn.com.codesec.scan.metadata.Type$Primitive) -> b
cn.com.codesec.scan.metadata.Type$TypeVar -> cn.com.codesec.OQ:
    java.lang.String name -> R
    cn.com.codesec.scan.ir.util.memory.IRRef scope -> S
    1373:1374:void <init>() -> <init>
    1377:1378:void setName(java.lang.String) -> b
    1381:1382:void setScope(cn.com.codesec.scan.ir.util.memory.IRRef) -> a
    1387:1390:void <init>(java.lang.String,cn.com.codesec.scan.ir.util.memory.IRRef) -> <init>
    1393:1393:java.lang.String getName() -> F
    1397:1397:cn.com.codesec.scan.ir.util.memory.IRRef getScope() -> G
    1402:1402:java.lang.String toString() -> toString
    1407:1407:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    1413:1413:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1418:1418:int getStorageSize() -> a
    1423:1423:boolean isPossiblePointerType() -> e
    1428:1428:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    1433:1433:boolean isDereferenceable() -> f
    1438:1438:java.lang.String getDisplayString() -> D
    1443:1443:int hashCode() -> hashCode
    1448:1448:boolean equals(java.lang.Object) -> equals
    1452:1452:boolean equals(cn.com.codesec.scan.metadata.Type$TypeVar) -> a
cn.com.codesec.scan.metadata.Type$Typedef -> cn.com.codesec.OR:
    java.lang.String name -> S
    cn.com.codesec.scan.metadata.Type target -> T
    boolean $assertionsDisabled -> R
    778:778:void <clinit>() -> <clinit>
    780:782:void <init>() -> <init>
    785:785:java.lang.String getName() -> F
    789:789:cn.com.codesec.scan.metadata.Type getTarget() -> G
    793:794:void setName(java.lang.String) -> b
    797:798:void setTarget(cn.com.codesec.scan.metadata.Type) -> b
    803:808:void <init>(java.lang.String,cn.com.codesec.scan.metadata.Type) -> <init>
    812:812:java.lang.String toString() -> toString
    817:817:boolean equals(java.lang.Object) -> equals
    821:821:boolean equals(cn.com.codesec.scan.metadata.Type$Typedef) -> a
    826:826:int hashCode() -> hashCode
    831:831:int getStorageSize() -> a
    836:836:cn.com.codesec.scan.metadata.Type unwrapOuterTypedefs() -> b
    841:841:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    847:847:cn.com.codesec.scan.metadata.Type removePointers() -> d
    852:852:java.lang.String getDisplayString() -> D
    857:857:boolean isPossiblePointerType() -> e
    862:862:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    867:867:boolean isDereferenceable() -> f
    801:801:cn.com.codesec.scan.metadata.Type access$0(cn.com.codesec.scan.metadata.Type$Typedef) -> b
    800:800:java.lang.String access$1(cn.com.codesec.scan.metadata.Type$Typedef) -> c
cn.com.codesec.scan.metadata.Type$Unknown -> cn.com.codesec.OS:
    cn.com.codesec.scan.metadata.Type$Unknown INSTANCE -> R
    1302:1303:void <clinit>() -> <clinit>
    1252:1253:void <init>() -> <init>
    1257:1257:java.lang.String toString() -> toString
    1262:1262:cn.com.codesec.scan.metadata.Type unwrapAllTypedefs() -> c
    1268:1268:cn.com.codesec.scan.metadata.Type removePointers() -> d
    1273:1273:int getStorageSize() -> a
    1278:1278:java.lang.String getDisplayString() -> D
    1283:1283:boolean isAllowedParameterType(cn.com.codesec.scan.meta.Language) -> a
    1288:1288:boolean isDereferenceable() -> f
    1293:1293:int hashCode() -> hashCode
    1298:1298:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.metadata.TypeDefMeta -> cn.com.codesec.OT:
    cn.com.codesec.scan.ir.nodes.IRType nstType -> b
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> c
    cn.com.codesec.scan.meta.Language language -> d
    cn.com.codesec.scan.metadata.Type type -> e
    java.lang.String uniqueName -> f
    java.lang.String simpleName -> g
    java.lang.String namespace -> h
    boolean $assertionsDisabled -> a
    18:18:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,java.lang.String,java.lang.String,cn.com.codesec.scan.ir.nodes.IRType) -> <init>
    37:37:cn.com.codesec.scan.ir.nodes.IRType getNSTType() -> a
    42:43:cn.com.codesec.scan.metadata.Type getType() -> j
    47:52:void resolve() -> m
    56:56:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    60:60:java.lang.String getUniqueName() -> n
    65:65:java.lang.String getSimpleName() -> c
    70:70:java.lang.String getAltSimpleName() -> e
    75:75:java.lang.String getTrueSimpleName() -> d
    80:83:java.lang.String getCanonicalName() -> f
    88:88:java.lang.String getAltCanonicalName() -> g
    93:94:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> o
    99:100:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    105:105:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    110:113:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    118:128:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.TypeMeta -> cn.com.codesec.OU:
    java.lang.String uniqueName -> d
    cn.com.codesec.scan.meta.Language sourceLanguage -> e
    cn.com.codesec.scan.metadata.Namespace namespace -> f
    java.lang.String simpleName -> g
    java.lang.String trueSimpleName -> h
    java.lang.String altSimpleName -> i
    java.lang.String canonicalName -> j
    java.lang.String altCanonicalName -> k
    cn.com.codesec.parse.ir.IRModifierSet modifiers -> a
    int size -> l
    cn.com.codesec.util.fset.FList typeParameters -> m
    cn.com.codesec.util.fset.FMap typeParameterUpperBounds -> n
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> o
    cn.com.codesec.scan.ir.util.memory.IRRef nst -> p
    cn.com.codesec.util.fset.FMap funMap -> q
    cn.com.codesec.util.fset.FSet supers -> r
    cn.com.codesec.util.fset.FSet subs -> s
    cn.com.codesec.util.fset.FSet allSupers -> t
    cn.com.codesec.util.fset.FSet allSubs -> u
    cn.com.codesec.util.fset.FList allSupersSorted -> v
    cn.com.codesec.util.fset.FMap fieldMap -> b
    cn.com.codesec.scan.metadata.SingletonMeta singletonStorage -> w
    java.util.Set annotations -> x
    boolean $assertionsDisabled -> c
    56:56:void <clinit>() -> <clinit>
    84:109:void <init>(java.lang.String,cn.com.codesec.scan.metadata.Namespace,java.lang.String,java.lang.String,cn.com.codesec.parse.ir.IRModifierSet,cn.com.codesec.scan.meta.Language) -> <init>
    111:146:void <init>(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> <init>
    151:151:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    155:163:boolean isA(cn.com.codesec.scan.metadata.TypeMeta) -> b
    167:179:boolean isA(java.lang.String) -> e
    183:185:void setSize(int) -> a
    188:188:int getSize() -> t
    193:193:java.lang.String toString() -> toString
    198:198:java.lang.String getSimpleName() -> c
    203:203:java.lang.String getAltSimpleName() -> e
    208:208:java.lang.String getName() -> u
    212:212:java.lang.String getUniqueName() -> v
    217:217:java.lang.String getCanonicalName() -> f
    222:222:java.lang.String getAltCanonicalName() -> g
    226:231:boolean isNestedClass() -> w
    236:242:boolean isAnonymousClass() -> x
    247:253:boolean isLambdaClass() -> y
    259:273:java.lang.String getTrueSimpleName() -> d
    277:277:boolean isInterface() -> z
    281:281:boolean isAbstract() -> A
    285:285:boolean isXamarinFuncInterface() -> B
    290:290:cn.com.codesec.scan.metadata.Type getType() -> j
    295:306:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    310:310:cn.com.codesec.util.fset.FList getTypeParameters() -> C
    314:314:cn.com.codesec.scan.metadata.TypeMeta getTypeParameterUpperBound(cn.com.codesec.scan.metadata.Type$TypeVar) -> a
    319:320:cn.com.codesec.util.fset.FSet getSubs() -> G_
    325:325:cn.com.codesec.util.fset.FSet getSubClasses() -> D
    330:330:cn.com.codesec.util.fset.FSet getAllSubClasses() -> E
    335:335:cn.com.codesec.util.fset.FSet getSuperClasses() -> F
    340:341:cn.com.codesec.util.fset.FSet getSupers() -> n
    345:353:cn.com.codesec.util.fset.FSet getAllSubs() -> G
    357:366:cn.com.codesec.util.fset.FSet getAllSupers() -> H
    370:398:cn.com.codesec.util.fset.FList getAllSupersSorted() -> I
    402:403:void addSub(cn.com.codesec.scan.metadata.TypeMeta) -> a
    406:407:void setNSTRef(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> c
    410:416:void adjustNSTRef(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> e
    420:420:cn.com.codesec.scan.ir.nodes.IRClassDecl getDecl() -> s
    425:426:cn.com.codesec.util.fset.FMap getFieldMap() -> q
    430:431:cn.com.codesec.util.fset.FMap getFunctions() -> r
    436:436:java.net.URL getSource() -> J
    441:441:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String) -> a
    446:456:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String,boolean) -> a
    461:464:cn.com.codesec.scan.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> b
    468:469:void addField(cn.com.codesec.scan.metadata.FieldMeta) -> a
    472:481:void addField(cn.com.codesec.scan.metadata.FieldMeta,boolean) -> a
    484:485:void removeField(cn.com.codesec.scan.metadata.FieldMeta) -> b
    488:489:java.util.Collection getLocalFields() -> o
    493:493:java.util.Collection getFields() -> K
    498:510:cn.com.codesec.util.fset.FSet getFunctions(java.lang.String) -> c
    514:522:void addFun(cn.com.codesec.scan.metadata.FunMeta) -> b
    525:527:void addFunInternal(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.util.fset.FList) -> a
    530:538:void removeFun(cn.com.codesec.scan.metadata.FunMeta) -> a
    542:544:cn.com.codesec.util.fset.FList getLocalFunctions(java.lang.String) -> d
    549:554:cn.com.codesec.util.fset.FList getLocalFunctions() -> p
    559:572:cn.com.codesec.scan.metadata.FunMeta getLocalFunction(java.lang.String,cn.com.codesec.scan.metadata.Type[],boolean) -> a
    576:592:cn.com.codesec.scan.metadata.FunMeta getVirtualFunction(java.lang.String,cn.com.codesec.scan.metadata.Type[],boolean) -> b
    596:606:cn.com.codesec.util.fset.FSet getAllSupers(java.util.Collection) -> a
    610:615:void loadSupers() -> X
    618:634:void loadSupersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> a
    637:643:void loadMembers() -> Y
    646:681:void loadMembersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> b
    684:686:void load() -> L
    689:701:void loadRedecl(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> d
    704:704:boolean isUserDefined() -> M
    709:709:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    714:714:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    719:719:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    724:724:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    728:728:cn.com.codesec.scan.metadata.TypeMeta getGenericType() -> N
    732:732:java.util.Map getTypeArguments() -> O
    736:740:void setSupers(cn.com.codesec.util.fset.FSet) -> a
    744:744:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> P
    748:757:cn.com.codesec.parse.ir.SourceInfo getAspxSourceLocation() -> Q
    762:762:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    767:767:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    771:774:void setAnnotations(java.util.Set) -> a
    777:777:java.util.Set getAnnotations() -> R
    781:782:boolean isMagicGlobalType() -> S
    786:791:void forceGlobal(cn.com.codesec.java.rules.GlobalClassRule) -> a
    794:813:void forceGlobal(cn.com.codesec.java.rules.GlobalClassRule,cn.com.codesec.scan.metadata.TypeMeta) -> a
    816:816:cn.com.codesec.scan.metadata.SingletonMeta getSingletonStorage() -> T
    820:823:cn.com.codesec.java.rules.GlobalClassRule forcedGlobalRule() -> U
    829:833:void writeObjectPass2(java.io.ObjectOutputStream) -> a
    837:841:void readObjectPass2(java.io.ObjectInputStream) -> a
    844:844:cn.com.codesec.scan.util.serialization.Handle getHandle(cn.com.codesec.scan.backend.BackEnd) -> a
    849:859:int compareTo(java.lang.Object) -> compareTo
    863:871:boolean isDelegate() -> V
    875:875:boolean isLambdaType() -> W
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
    632:632:void lambda$0(cn.com.codesec.scan.metadata.TypeMeta) -> c
cn.com.codesec.scan.metadata.TypeSizeModel -> cn.com.codesec.OV:
    cn.com.codesec.scan.metadata.TypeSizeModel LP32 -> a
    cn.com.codesec.scan.metadata.TypeSizeModel LP64 -> b
    cn.com.codesec.scan.metadata.TypeSizeModel LLP64 -> c
    int wcharBytes -> d
    java.util.EnumMap CPFE_OPTION_STRINGS -> e
    java.util.EnumMap CPFE_DEFAULT_SIZES -> f
    cn.com.codesec.scan.metadata.TypeSizeModel[] ENUM$VALUES -> g
    15:215:void <clinit>() -> <clinit>
    13:13:void <init>(java.lang.String,int) -> <init>
    int getPrimitiveBytes(cn.com.codesec.parse.ir.PrimitiveType) -> a
    152:153:void setWcharSize(int) -> a
    156:165:java.util.List getCpfeArguments() -> a
    169:190:void loadTypeSizes() -> c
    1:1:cn.com.codesec.scan.metadata.TypeSizeModel[] values() -> values
    1:1:cn.com.codesec.scan.metadata.TypeSizeModel valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int,cn.com.codesec.scan.metadata.TypeSizeModel) -> <init>
    145:145:int access$3() -> b
cn.com.codesec.scan.metadata.TypeSizeModel$1 -> cn.com.codesec.OW:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> d
    1:15:void <init>(java.lang.String,int) -> <init>
    18:54:int getPrimitiveBytes(cn.com.codesec.parse.ir.PrimitiveType) -> a
    15:15:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> c
cn.com.codesec.scan.metadata.TypeSizeModel$2 -> cn.com.codesec.OX:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> d
    1:58:void <init>(java.lang.String,int) -> <init>
    61:97:int getPrimitiveBytes(cn.com.codesec.parse.ir.PrimitiveType) -> a
    58:58:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> c
cn.com.codesec.scan.metadata.TypeSizeModel$3 -> cn.com.codesec.OY:
    int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType -> d
    1:101:void <init>(java.lang.String,int) -> <init>
    104:140:int getPrimitiveBytes(cn.com.codesec.parse.ir.PrimitiveType) -> a
    101:101:int[] $SWITCH_TABLE$cn$com$codesec$parse$ir$PrimitiveType() -> c
cn.com.codesec.scan.metadata.UnknownFieldMeta -> cn.com.codesec.OZ:
    cn.com.codesec.scan.metadata.UnknownFieldMeta UNKNOWN_FIELD -> b
    23:24:void <clinit>() -> <clinit>
    14:15:void <init>() -> <init>
    19:19:cn.com.codesec.scan.metadata.StorageMeta getStorageMeta() -> p
cn.com.codesec.scan.metadata.UnknownFunMeta -> cn.com.codesec.Pa:
    java.util.Set EMPTY_SET -> e
    31:32:void <clinit>() -> <clinit>
    19:20:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    24:24:java.util.Set getCallers() -> Y
    28:28:void addCaller(cn.com.codesec.scan.metadata.FunMeta) -> f
cn.com.codesec.scan.metadata.UnknownTypeMeta -> cn.com.codesec.Pb:
    cn.com.codesec.scan.metadata.UnknownTypeMeta unknownType -> d
    165:166:void <clinit>() -> <clinit>
    31:32:void <init>() -> <init>
    37:37:cn.com.codesec.util.fset.FSet getSubs() -> G_
    43:43:cn.com.codesec.util.fset.FSet getAllSubs() -> G
    49:49:cn.com.codesec.util.fset.FSet getSupers() -> n
    55:55:cn.com.codesec.util.fset.FSet getAllSupers() -> H
    60:60:void addSub(cn.com.codesec.scan.metadata.TypeMeta) -> a
    65:65:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String) -> a
    71:71:cn.com.codesec.scan.metadata.FieldMeta getField(java.lang.String,boolean) -> a
    77:77:cn.com.codesec.util.fset.FSet getFunctions(java.lang.String) -> c
    83:83:cn.com.codesec.util.fset.FList getLocalFunctions(java.lang.String) -> d
    89:89:java.util.Collection getLocalFields() -> o
    95:95:cn.com.codesec.util.fset.FList getLocalFunctions() -> p
    101:101:cn.com.codesec.scan.metadata.FieldMeta getLocalFieldNoLoad(java.lang.String) -> b
    107:107:cn.com.codesec.scan.metadata.FunMeta getLocalFunction(java.lang.String,cn.com.codesec.scan.metadata.Type[],boolean) -> a
    112:112:void loadSupersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> a
    116:116:void loadMembersFromNst(cn.com.codesec.scan.ir.nodes.IRClassDecl) -> b
    121:121:cn.com.codesec.util.fset.FMap getFieldMap() -> q
    127:127:cn.com.codesec.util.fset.FMap getFunctions() -> r
    132:132:void removeFun(cn.com.codesec.scan.metadata.FunMeta) -> a
    136:136:void addFun(cn.com.codesec.scan.metadata.FunMeta) -> b
    140:140:void addField(cn.com.codesec.scan.metadata.FieldMeta) -> a
    145:145:cn.com.codesec.scan.ir.nodes.IRClassDecl getDecl() -> s
    149:150:void writeState(java.io.ObjectOutputStream) -> b
    153:154:void readState(java.io.ObjectInputStream) -> b
    157:157:cn.com.codesec.scan.metadata.UnknownTypeMeta getUnknownType() -> X
    161:162:void setUnknownType(cn.com.codesec.scan.metadata.UnknownTypeMeta) -> a
cn.com.codesec.scan.metadata.VarMeta -> cn.com.codesec.Pc:
    cn.com.codesec.parse.ir.SourceInfo sourceLocation -> a
    cn.com.codesec.scan.ir.util.memory.IRRef ref -> b
    cn.com.codesec.scan.metadata.Type type -> c
    cn.com.codesec.scan.metadata.TypeMeta enclosingType -> d
    cn.com.codesec.scan.meta.Language language -> e
    cn.com.codesec.scan.metadata.Namespace namespace -> f
    java.lang.String simpleName -> g
    cn.com.codesec.parse.ir.IRModifierSet modifierFlags -> h
    boolean isParameter -> i
    36:52:void <init>(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> <init>
    56:56:cn.com.codesec.parse.meta.SymbolKind getSymbolKind() -> b
    61:61:java.lang.String getSimpleName() -> c
    66:66:java.lang.String getAltSimpleName() -> e
    71:71:java.lang.String getTrueSimpleName() -> d
    76:76:java.lang.String getCanonicalName() -> f
    81:81:java.lang.String getAltCanonicalName() -> g
    86:86:cn.com.codesec.parse.ir.SourceInfo getSourceLocation() -> m
    91:91:cn.com.codesec.scan.meta.Language getSourceLanguage() -> i
    95:95:cn.com.codesec.scan.ir.nodes.IRVarDecl getDecl() -> n
    100:100:cn.com.codesec.scan.metadata.Type getType() -> j
    105:105:cn.com.codesec.scan.metadata.TypeMeta getEnclosingType() -> k
    110:110:cn.com.codesec.scan.metadata.Namespace getNamespace() -> l
    115:115:void setModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> a
    120:120:void clearModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> b
    125:125:boolean checkModifiers(cn.com.codesec.parse.ir.IRModifiers[]) -> c
    130:130:cn.com.codesec.parse.ir.IRModifierSet getModifiers() -> F_
    134:134:boolean isParameter() -> o
    139:146:boolean equals(java.lang.Object) -> equals
    151:151:int hashCode() -> hashCode
    156:166:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.parse.ir.SourceLocation getSourceLocation() -> h
cn.com.codesec.scan.metadata.annotations.Annotation -> cn.com.codesec.Pd:
    java.util.concurrent.atomic.AtomicInteger FORTIFY_JAVA_ANNOTATIONS -> a
    cn.com.codesec.scan.metadata.Type type -> b
    cn.com.codesec.parse.ir.SourceInfo sourceInfo -> c
    cn.com.codesec.util.fset.FMap elements -> d
    121:122:void <clinit>() -> <clinit>
    26:33:void <init>(cn.com.codesec.scan.metadata.Type,cn.com.codesec.parse.ir.SourceInfo) -> <init>
    36:44:boolean isFortifyJavaAnnotation() -> a
    48:48:int getFortifyJavaAnnotationCount() -> b
    52:52:cn.com.codesec.scan.metadata.Type getAnnotationType() -> c
    56:56:cn.com.codesec.parse.ir.SourceInfo getSourceInfo() -> d
    60:60:cn.com.codesec.scan.metadata.annotations.AnnotationElement getElement(java.lang.String) -> a
    64:79:cn.com.codesec.scan.analyzer.constants.ConstantValue adjustSingletonArrayVal(java.lang.String,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> c
    83:85:void addElem(java.lang.String,cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    88:91:void addElem(java.lang.String,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    94:97:void setElemValue(java.lang.String,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    100:100:cn.com.codesec.util.fset.FMap getElements() -> e
    105:117:java.lang.String toString() -> toString
cn.com.codesec.scan.metadata.annotations.AnnotationElement -> cn.com.codesec.Pe:
    java.lang.String name -> a
    cn.com.codesec.scan.metadata.annotations.Annotation parent -> b
    cn.com.codesec.scan.analyzer.constants.ConstantValue value -> c
    cn.com.codesec.scan.ir.nodes.IRLocation valueLoc -> d
    21:26:void <init>(java.lang.String,cn.com.codesec.scan.metadata.annotations.Annotation,cn.com.codesec.scan.ir.nodes.IRLocation) -> <init>
    28:33:void <init>(java.lang.String,cn.com.codesec.scan.metadata.annotations.Annotation,cn.com.codesec.scan.analyzer.constants.ConstantValue) -> <init>
    36:43:cn.com.codesec.scan.metadata.FieldMeta getField() -> a
    47:49:void setValue(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    52:52:java.lang.String getValueString() -> b
    56:56:cn.com.codesec.scan.analyzer.constants.ConstantValue getConstantValue() -> c
    60:60:cn.com.codesec.scan.analyzer.constants.ConstantValue getValue() -> d
    64:64:cn.com.codesec.scan.ir.nodes.IRLocation getValueLoc() -> e
    68:68:java.lang.String getName() -> f
    73:73:java.lang.String toString() -> toString
cn.com.codesec.scan.model.AccessPath -> cn.com.codesec.Pf:
    java.lang.String ACCESS_PATH_INSTANCE_COUNTER_NAME -> a
    cn.com.codesec.scan.model.AccessPath IDENTITY -> b
    java.util.LinkedList path -> j
    int aliasBarrierPos -> k
    cn.com.codesec.scan.model.AccessPath$MapKey UNKNOWN_MAP_KEY -> c
    cn.com.codesec.scan.model.AccessPath$ArrayIndex UNKNOWN_ARRAY_INDEX -> d
    cn.com.codesec.scan.model.AccessPath$Selector DEREFERENCE -> e
    cn.com.codesec.scan.model.AccessPath$Selector REFERENCE -> f
    cn.com.codesec.scan.model.AccessPath$Selector MAP_KEY_SET -> g
    cn.com.codesec.scan.model.AccessPath$Selector LAZY_MAP_KEY -> h
    boolean $assertionsDisabled -> i
    33:625:void <clinit>() -> <clinit>
    47:47:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    51:51:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.model.AccessPath$Selector[]) -> a
    55:55:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath) -> a
    59:70:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath) -> a
    74:78:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath[]) -> a
    82:82:cn.com.codesec.scan.model.AccessPath create(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    86:86:cn.com.codesec.scan.model.AccessPath create(cn.com.codesec.scan.model.AccessPath$Selector[]) -> a
    90:90:cn.com.codesec.scan.model.AccessPath create(java.util.List) -> a
    94:94:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.model.AccessPath) -> a
    98:105:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    109:113:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Selector[]) -> a
    117:121:cn.com.codesec.scan.model.AccessPath compose(cn.com.codesec.scan.model.AccessPath,java.util.List) -> a
    125:131:cn.com.codesec.scan.model.AccessPath chopHead() -> a
    135:139:cn.com.codesec.scan.model.AccessPath chopHead(int) -> a
    144:144:cn.com.codesec.scan.model.AccessPath chopHead(cn.com.codesec.scan.model.AccessPath) -> b
    149:149:cn.com.codesec.scan.model.AccessPath chopHead(cn.com.codesec.scan.model.AccessPath,int) -> a
    153:159:cn.com.codesec.scan.model.AccessPath chopTail() -> b
    164:164:cn.com.codesec.scan.model.AccessPath chopTail(cn.com.codesec.scan.model.AccessPath) -> c
    168:189:cn.com.codesec.scan.model.AccessPath stripIndirection(cn.com.codesec.scan.model.AccessPath,int,boolean) -> a
    193:193:cn.com.codesec.scan.model.AccessPath withAliasBarrier() -> c
    196:200:void <init>(java.util.LinkedList,int) -> <init>
    203:206:cn.com.codesec.scan.model.AccessPath mk(java.util.LinkedList,int) -> a
    210:210:java.util.LinkedList getPath() -> d
    214:214:int getAliasBarrierPosition() -> e
    219:219:java.util.ListIterator iterator() -> f
    223:223:int size() -> g
    227:227:cn.com.codesec.scan.model.AccessPath$Selector get(int) -> b
    231:234:cn.com.codesec.scan.model.AccessPath$Selector getHead() -> h
    238:241:cn.com.codesec.scan.model.AccessPath$Selector getTail() -> i
    245:252:cn.com.codesec.scan.model.AccessPath$FieldAccess getLastField() -> j
    256:276:boolean hasRepeatedFieldSelector() -> k
    280:298:int getFieldCount() -> l
    303:322:java.lang.String toString() -> toString
    326:340:java.lang.String printDiffs(cn.com.codesec.scan.model.AccessPath) -> d
    345:352:boolean equals(java.lang.Object) -> equals
    357:357:int hashCode() -> hashCode
    361:361:boolean isChildOf(cn.com.codesec.scan.model.AccessPath) -> e
    365:385:boolean isParentOf(cn.com.codesec.scan.model.AccessPath) -> f
    389:397:cn.com.codesec.scan.model.AccessPath lessPrefix(cn.com.codesec.scan.model.AccessPath) -> g
    403:403:int compareTo(cn.com.codesec.scan.model.AccessPath) -> h
    407:420:int compareTo(java.util.LinkedList,java.util.LinkedList) -> a
    424:491:void renderTo(java.lang.StringBuilder,cn.com.codesec.scan.meta.Language) -> a
    494:497:cn.com.codesec.scan.model.AccessPath$MapKey getMapKey(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> a
    501:504:cn.com.codesec.scan.model.AccessPath$ArrayIndex getArrayIndex(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:java.util.Iterator iterator() -> iterator
cn.com.codesec.scan.model.AccessPath$1 -> cn.com.codesec.Pg:
    1:509:void <init>() -> <init>
    511:511:java.lang.Object readResolve() -> readResolve
    516:516:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    521:521:boolean equals(java.lang.Object) -> equals
    526:526:int hashCode() -> hashCode
    531:534:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
cn.com.codesec.scan.model.AccessPath$2 -> cn.com.codesec.Ph:
    1:537:void <init>() -> <init>
    539:539:java.lang.Object readResolve() -> readResolve
    544:544:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    549:549:boolean equals(java.lang.Object) -> equals
    554:554:int hashCode() -> hashCode
    559:562:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
cn.com.codesec.scan.model.AccessPath$3 -> cn.com.codesec.Pi:
    1:565:void <init>() -> <init>
    568:568:java.lang.String toString() -> toString
    572:572:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.model.AccessPath$4 -> cn.com.codesec.Pj:
    1:575:void <init>() -> <init>
    578:578:java.lang.String toString() -> toString
    582:582:java.lang.Object readResolve() -> readResolve
cn.com.codesec.scan.model.AccessPath$5 -> cn.com.codesec.Pk:
    1:585:void <init>() -> <init>
    588:588:java.lang.String toString() -> toString
    592:592:java.lang.Object readResolve() -> readResolve
    597:597:boolean isKnown() -> a
    602:602:cn.com.codesec.scan.model.AccessPath$ElementSelector getUnknown() -> b
cn.com.codesec.scan.model.AccessPath$6 -> cn.com.codesec.Pl:
    1:605:void <init>() -> <init>
    608:608:java.lang.String toString() -> toString
    612:612:java.lang.Object readResolve() -> readResolve
    617:617:boolean isKnown() -> a
    622:622:cn.com.codesec.scan.model.AccessPath$ElementSelector getUnknown() -> b
cn.com.codesec.scan.model.AccessPath$ArrayIndex -> cn.com.codesec.Pm:
    cn.com.codesec.scan.analyzer.constants.IntegerConstant index -> a
    boolean $assertionsDisabled -> b
    807:807:void <clinit>() -> <clinit>
    811:814:void <init>(cn.com.codesec.scan.analyzer.constants.IntegerConstant) -> <init>
    816:818:void <init>() -> <init>
    820:822:void <init>(int) -> <init>
    825:825:cn.com.codesec.scan.analyzer.constants.IntegerConstant getIndex() -> c
    830:830:boolean isKnown() -> a
    835:835:cn.com.codesec.scan.model.AccessPath$ArrayIndex getUnknown() -> d
    840:840:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    845:852:boolean equals(java.lang.Object) -> equals
    857:857:int hashCode() -> hashCode
    862:862:java.lang.String toString() -> toString
    867:877:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.scan.model.AccessPath$ElementSelector getUnknown() -> b
    816:816:void <init>(cn.com.codesec.scan.model.AccessPath$ArrayIndex) -> <init>
cn.com.codesec.scan.model.AccessPath$ElementSelector -> cn.com.codesec.Pn:
    boolean isKnown() -> a
    cn.com.codesec.scan.model.AccessPath$ElementSelector getUnknown() -> b
cn.com.codesec.scan.model.AccessPath$FieldAccess -> cn.com.codesec.Po:
    java.lang.String fieldName -> a
    cn.com.codesec.scan.meta.Language lang -> b
    635:636:void <init>(cn.com.codesec.scan.metadata.FieldMeta) -> <init>
    638:644:void <init>(java.lang.String,cn.com.codesec.scan.meta.Language) -> <init>
    648:648:java.lang.String getFieldName() -> a
    653:653:cn.com.codesec.scan.meta.Language getLanguage() -> b
    659:659:java.lang.String toString() -> toString
    664:680:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    685:685:boolean equals(java.lang.Object) -> equals
    689:692:boolean nameEquals(java.lang.String) -> a
    697:697:int hashCode() -> hashCode
    702:708:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.model.AccessPath$Global -> cn.com.codesec.Pp:
    cn.com.codesec.scan.metadata.StorageMeta meta -> a
    885:887:void <init>(cn.com.codesec.scan.metadata.StorageMeta) -> <init>
    890:890:cn.com.codesec.scan.metadata.StorageMeta getMeta() -> a
    895:895:java.lang.String toString() -> toString
    900:900:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    905:912:boolean equals(java.lang.Object) -> equals
    917:917:int hashCode() -> hashCode
    922:925:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.model.AccessPath$MapKey -> cn.com.codesec.Pq:
    cn.com.codesec.scan.analyzer.constants.ConstantValue key -> a
    boolean $assertionsDisabled -> b
    712:712:void <clinit>() -> <clinit>
    716:719:void <init>(cn.com.codesec.scan.analyzer.constants.ConstantValue) -> <init>
    721:723:void <init>(java.lang.String) -> <init>
    725:727:void <init>() -> <init>
    730:730:cn.com.codesec.scan.analyzer.constants.ConstantValue getKey() -> c
    735:735:boolean isKnown() -> a
    740:740:cn.com.codesec.scan.model.AccessPath$MapKey getUnknown() -> d
    744:752:int getKeyValue() -> e
    757:766:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    771:778:boolean equals(java.lang.Object) -> equals
    783:783:int hashCode() -> hashCode
    788:788:java.lang.String toString() -> toString
    793:803:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.scan.model.AccessPath$ElementSelector getUnknown() -> b
    725:725:void <init>(cn.com.codesec.scan.model.AccessPath$MapKey) -> <init>
cn.com.codesec.scan.model.AccessPath$STrie -> cn.com.codesec.Pr:
    cn.com.codesec.scan.model.AccessPath$STrie emptyInstance -> d
    1848:1849:void <clinit>() -> <clinit>
    1666:1666:cn.com.codesec.scan.model.AccessPath$STrie emptyTrie() -> a
    1669:1672:void <init>() -> <init>
    1674:1680:void <init>(java.lang.Object) -> <init>
    1682:1688:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    1690:1693:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    1697:1704:cn.com.codesec.scan.model.AccessPath$STrie select(cn.com.codesec.scan.model.AccessPath) -> a
    1709:1713:cn.com.codesec.scan.model.AccessPath$STrie select(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    1718:1722:cn.com.codesec.scan.model.AccessPath$STrie selectKnown(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1727:1735:cn.com.codesec.scan.model.AccessPath$STrie extract(cn.com.codesec.scan.model.AccessPath) -> b
    1740:1744:cn.com.codesec.scan.model.AccessPath$STrie extractAll() -> b
    1749:1753:cn.com.codesec.scan.model.AccessPath$STrie with(java.lang.Object) -> a
    1758:1765:cn.com.codesec.scan.model.AccessPath$STrie compose(cn.com.codesec.scan.model.AccessPath) -> c
    1770:1777:cn.com.codesec.scan.model.AccessPath$STrie compose(cn.com.codesec.scan.model.AccessPath$Selector) -> c
    1782:1789:cn.com.codesec.scan.model.AccessPath$STrie union(cn.com.codesec.scan.model.AccessPath$Trie) -> a
    1794:1798:cn.com.codesec.scan.model.AccessPath$STrie difference(cn.com.codesec.scan.model.AccessPath$Trie) -> b
    1803:1811:cn.com.codesec.scan.model.AccessPath$STrie less(cn.com.codesec.scan.model.AccessPath) -> d
    1816:1816:int compareTo(cn.com.codesec.scan.model.AccessPath$STrie) -> a
    1820:1844:int compareNodes(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> c
    1:1:cn.com.codesec.scan.model.AccessPath$Trie selectKnown(cn.com.codesec.scan.model.AccessPath$Selector) -> d
    1:1:cn.com.codesec.scan.model.AccessPath$Trie with(java.lang.Object) -> b
    1:1:cn.com.codesec.scan.model.AccessPath$Trie select(cn.com.codesec.scan.model.AccessPath$Selector) -> e
    1:1:cn.com.codesec.scan.model.AccessPath$Trie select(cn.com.codesec.scan.model.AccessPath) -> e
    1:1:cn.com.codesec.scan.model.AccessPath$Trie union(cn.com.codesec.scan.model.AccessPath$Trie) -> c
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.scan.model.AccessPath$Trie less(cn.com.codesec.scan.model.AccessPath) -> f
    1:1:cn.com.codesec.scan.model.AccessPath$Trie difference(cn.com.codesec.scan.model.AccessPath$Trie) -> d
    1:1:cn.com.codesec.scan.model.AccessPath$Trie extract(cn.com.codesec.scan.model.AccessPath) -> g
    1:1:cn.com.codesec.scan.model.AccessPath$Trie compose(cn.com.codesec.scan.model.AccessPath$Selector) -> f
    1:1:cn.com.codesec.scan.model.AccessPath$Trie compose(cn.com.codesec.scan.model.AccessPath) -> h
    1:1:cn.com.codesec.scan.model.AccessPath$Trie extractAll() -> c
    1690:1690:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$STrie) -> <init>
cn.com.codesec.scan.model.AccessPath$STrie$Builder -> cn.com.codesec.Ps:
    1854:1855:void <init>() -> <init>
    1859:1861:cn.com.codesec.scan.model.AccessPath$STrie getTrie() -> a
    1:1:cn.com.codesec.scan.model.AccessPath$Trie getTrie() -> b
cn.com.codesec.scan.model.AccessPath$Selector -> cn.com.codesec.Pt:
    boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
cn.com.codesec.scan.model.AccessPath$SingletonElementSelector -> cn.com.codesec.Pu:
    945:945:void <init>() -> <init>
    945:945:void <init>(cn.com.codesec.scan.model.AccessPath$SingletonElementSelector) -> <init>
cn.com.codesec.scan.model.AccessPath$SingletonSelector -> cn.com.codesec.Pv:
    929:929:void <init>() -> <init>
    933:933:boolean matches(cn.com.codesec.scan.model.AccessPath$Selector) -> a
    938:941:int compareTo(cn.com.codesec.scan.model.AccessPath$Selector) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    929:929:void <init>(cn.com.codesec.scan.model.AccessPath$SingletonSelector) -> <init>
cn.com.codesec.scan.model.AccessPath$Trie -> cn.com.codesec.Pw:
    cn.com.codesec.util.fset.FSet emptyValueSet -> a
    cn.com.codesec.scan.model.AccessPath$Trie$Node root -> b
    cn.com.codesec.scan.model.AccessPath$Trie emptyInstance -> d
    boolean $assertionsDisabled -> c
    949:1458:void <clinit>() -> <clinit>
    957:957:cn.com.codesec.scan.model.AccessPath$Trie emptyTrie() -> d
    960:963:void <init>() -> <init>
    966:972:void <init>(java.lang.Object) -> <init>
    975:981:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    983:988:void <init>(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.util.fset.FSet) -> <init>
    990:993:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    996:996:int size() -> e
    1000:1000:boolean isEmpty() -> f
    1004:1008:cn.com.codesec.util.fset.FSet get(cn.com.codesec.scan.model.AccessPath) -> i
    1012:1012:boolean containsExtension(cn.com.codesec.scan.model.AccessPath) -> j
    1016:1020:int childCount(cn.com.codesec.scan.model.AccessPath) -> k
    1024:1031:cn.com.codesec.scan.model.AccessPath$Trie select(cn.com.codesec.scan.model.AccessPath) -> e
    1035:1039:cn.com.codesec.scan.model.AccessPath$Trie select(cn.com.codesec.scan.model.AccessPath$Selector) -> e
    1043:1047:cn.com.codesec.scan.model.AccessPath$Trie selectKnown(cn.com.codesec.scan.model.AccessPath$Selector) -> d
    1051:1059:cn.com.codesec.scan.model.AccessPath$Trie extract(cn.com.codesec.scan.model.AccessPath) -> g
    1063:1067:cn.com.codesec.scan.model.AccessPath$Trie extractAll() -> c
    1071:1075:cn.com.codesec.scan.model.AccessPath$Trie with(java.lang.Object) -> b
    1079:1083:cn.com.codesec.scan.model.AccessPath$Trie with(cn.com.codesec.scan.model.AccessPath,java.lang.Object) -> a
    1087:1094:cn.com.codesec.scan.model.AccessPath$Trie compose(cn.com.codesec.scan.model.AccessPath) -> h
    1098:1105:cn.com.codesec.scan.model.AccessPath$Trie compose(cn.com.codesec.scan.model.AccessPath$Selector) -> f
    1109:1116:cn.com.codesec.scan.model.AccessPath$Trie union(cn.com.codesec.scan.model.AccessPath$Trie) -> c
    1120:1124:cn.com.codesec.scan.model.AccessPath$Trie difference(cn.com.codesec.scan.model.AccessPath$Trie) -> d
    1128:1136:cn.com.codesec.scan.model.AccessPath$Trie less(cn.com.codesec.scan.model.AccessPath) -> f
    1141:1141:int hashCode() -> hashCode
    1146:1146:boolean equals(java.lang.Object) -> equals
    1151:1151:java.util.Iterator iterator() -> iterator
    1155:1162:cn.com.codesec.scan.model.AccessPath$Trie$Node findNode(cn.com.codesec.scan.model.AccessPath) -> l
    1166:1173:cn.com.codesec.scan.model.AccessPath$Trie$Node selectInternal(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1177:1193:cn.com.codesec.scan.model.AccessPath$Trie$Node selectInternal(cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1197:1197:cn.com.codesec.scan.model.AccessPath$Trie$Node extractInternal(java.util.List,int,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1205:1255:cn.com.codesec.scan.model.AccessPath$Trie$Node extractInternalHelper(java.util.List,int,cn.com.codesec.scan.model.AccessPath$Trie$Node,boolean) -> a
    1259:1267:boolean containsUnextractedValues(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1272:1286:cn.com.codesec.scan.model.AccessPath$Trie$Node extractAll(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> b
    1290:1299:cn.com.codesec.scan.model.AccessPath$Trie$Node withInternal(cn.com.codesec.scan.model.AccessPath$Trie$Node,java.lang.Object) -> a
    1303:1319:cn.com.codesec.scan.model.AccessPath$Trie$Node withInternal(java.util.List,int,cn.com.codesec.scan.model.AccessPath$Trie$Node,java.lang.Object) -> a
    1324:1363:cn.com.codesec.scan.model.AccessPath$Trie$Node unionInternal(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1367:1393:cn.com.codesec.scan.model.AccessPath$Trie$Node differenceInternal(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> b
    1398:1428:cn.com.codesec.scan.model.AccessPath$Trie$Node lessInternal(java.util.List,int,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> b
    1432:1432:boolean hashCodesCorrect() -> g
    1436:1436:boolean hashCodesCorrect(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> c
    1440:1453:boolean hashCodesCorrect(cn.com.codesec.scan.model.AccessPath$Trie$Node,boolean) -> a
    990:990:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie) -> <init>
cn.com.codesec.scan.model.AccessPath$Trie$Builder -> cn.com.codesec.Px:
    cn.com.codesec.util.fset.FSet emptyValueSet -> a
    cn.com.codesec.scan.model.AccessPath$Trie$Node root -> b
    1465:1468:void <init>() -> <init>
    1470:1473:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    1476:1478:cn.com.codesec.scan.model.AccessPath$Trie getTrie() -> b
    1482:1487:void putNew(cn.com.codesec.scan.model.AccessPath,java.lang.Object) -> a
    1490:1495:void putNew(cn.com.codesec.scan.model.AccessPath,java.util.Set) -> a
    1498:1502:void merge(cn.com.codesec.scan.model.AccessPath$Trie) -> a
    1506:1521:cn.com.codesec.scan.model.AccessPath$Trie$Node putInternal(cn.com.codesec.scan.model.AccessPath,int,int) -> a
    1525:1549:long mergeInternal(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
cn.com.codesec.scan.model.AccessPath$Trie$Iter -> cn.com.codesec.Py:
    cn.com.codesec.scan.model.AccessPath fullPath -> a
    cn.com.codesec.scan.model.AccessPath unextractedPath -> b
    java.util.ArrayList stack -> c
    1559:1568:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    1572:1581:boolean hasNext() -> hasNext
    1586:1606:org.apache.commons.lang3.tuple.Triple next() -> a
    1611:1611:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.model.AccessPath$Trie$Node -> cn.com.codesec.Pz:
    cn.com.codesec.util.fset.FSet values -> a
    cn.com.codesec.util.fset.FTreeMap children -> b
    int hash -> c
    int size -> d
    boolean extracted -> e
    1623:1629:void <init>(cn.com.codesec.util.fset.FSet) -> <init>
    1631:1639:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    1642:1642:boolean isEmpty() -> a
    1646:1646:boolean equals(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> g
    1651:1651:boolean equals(java.lang.Object) -> equals
    1656:1656:int hashCode() -> hashCode
    1623:1623:void <init>(cn.com.codesec.util.fset.FSet,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    1617:1617:cn.com.codesec.util.fset.FSet access$1(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1617:1617:void access$2(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.util.fset.FSet) -> a
    1618:1618:cn.com.codesec.util.fset.FTreeMap access$3(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> b
    1618:1618:void access$4(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.util.fset.FTreeMap) -> a
    1619:1619:int access$5(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> c
    1619:1619:void access$6(cn.com.codesec.scan.model.AccessPath$Trie$Node,int) -> a
    1620:1620:int access$7(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> d
    1620:1620:void access$8(cn.com.codesec.scan.model.AccessPath$Trie$Node,int) -> b
    1641:1641:boolean access$9(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> e
    1621:1621:boolean access$10(cn.com.codesec.scan.model.AccessPath$Trie$Node) -> f
    1645:1645:boolean access$11(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> a
    1631:1631:void <init>(cn.com.codesec.scan.model.AccessPath$Trie$Node,cn.com.codesec.scan.model.AccessPath$Trie$Node) -> <init>
    1621:1621:void access$13(cn.com.codesec.scan.model.AccessPath$Trie$Node,boolean) -> a
cn.com.codesec.scan.model.GlobalLocationInfo -> cn.com.codesec.PA:
    cn.com.codesec.scan.metadata.StorageMeta base -> b
    19:21:void <init>(cn.com.codesec.scan.metadata.StorageMeta,cn.com.codesec.scan.model.AccessPath) -> <init>
    26:26:cn.com.codesec.scan.meta.Symbol getBase() -> a
    31:31:boolean isGlobal() -> b
    37:38:java.lang.String getBaseRenderName() -> c
    43:43:cn.com.codesec.scan.meta.Language getLang() -> d
cn.com.codesec.scan.model.LocalLocationInfo -> cn.com.codesec.PB:
    cn.com.codesec.scan.meta.Symbol base -> b
    20:22:void <init>(cn.com.codesec.scan.meta.Symbol,cn.com.codesec.scan.model.AccessPath) -> <init>
    27:27:cn.com.codesec.scan.meta.Symbol getBase() -> a
    32:33:boolean isGlobal() -> b
    39:49:java.lang.String getBaseRenderName() -> c
    55:59:cn.com.codesec.scan.model.AccessPath getRenderPath() -> e
    64:64:cn.com.codesec.scan.meta.Language getLang() -> d
    69:70:boolean isMagicGlobal() -> j
cn.com.codesec.scan.model.LocationInfo -> cn.com.codesec.PC:
    cn.com.codesec.scan.model.AccessPath accessPath -> a
    22:24:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
    28:28:cn.com.codesec.scan.model.AccessPath getAccessPath() -> f
    32:42:java.lang.String renderShort() -> g
    47:64:int compareTo(cn.com.codesec.scan.model.LocationInfo) -> a
    69:76:boolean equals(java.lang.Object) -> equals
    81:84:int hashCode() -> hashCode
    89:89:java.lang.String toString() -> toString
    94:101:java.lang.String render() -> h
    106:107:boolean suitableForRender() -> i
    111:125:boolean pathSuitableForRender(cn.com.codesec.scan.model.AccessPath) -> a
    130:130:cn.com.codesec.scan.model.AccessPath getRenderPath() -> e
    boolean isGlobal() -> b
    cn.com.codesec.scan.meta.Symbol getBase() -> a
    java.lang.String getBaseRenderName() -> c
    142:145:cn.com.codesec.scan.meta.Language getLang(cn.com.codesec.scan.meta.Symbol) -> a
    cn.com.codesec.scan.meta.Language getLang() -> d
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.model.Parameter -> cn.com.codesec.PD:
    cn.com.codesec.scan.model.Parameter THIS -> a
    cn.com.codesec.scan.model.Parameter RETURN -> b
    cn.com.codesec.scan.model.Parameter GLOBALS -> c
    cn.com.codesec.scan.model.Parameter OUTER_THIS -> d
    cn.com.codesec.scan.model.Parameter VAR_ARG -> e
    java.util.ArrayList POSITIONALS -> f
    453:459:void <clinit>() -> <clinit>
    25:25:void <init>() -> <init>
    40:44:cn.com.codesec.scan.model.Parameter getPositional(int) -> a
    49:53:cn.com.codesec.scan.model.Parameter forParameterDecl(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    57:57:cn.com.codesec.scan.model.Parameter forParameterIndex(cn.com.codesec.scan.metadata.FunMeta,int) -> a
    61:76:cn.com.codesec.scan.model.Parameter forParameterIndex(cn.com.codesec.scan.metadata.FunMeta,int,boolean) -> a
    80:98:cn.com.codesec.scan.model.Parameter forArgument(cn.com.codesec.scan.ir.nodes.IRLocation) -> a
    102:105:cn.com.codesec.scan.ir.nodes.IRVarDecl getParamDecl(cn.com.codesec.scan.ir.nodes.IRFunDecl,cn.com.codesec.scan.model.Parameter) -> a
    110:110:int getRawIndex(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.Parameter) -> a
    115:115:int getRawIndex(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.Parameter,int) -> a
    120:124:int getRawIndex(cn.com.codesec.scan.model.Parameter,boolean,boolean,boolean,boolean,int) -> a
    129:162:int getRawIndex(cn.com.codesec.scan.model.Parameter,boolean,boolean,boolean,boolean) -> a
    166:166:cn.com.codesec.scan.ir.nodes.IRLocation getArgument(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.Parameter) -> a
    170:171:int getArgumentIndex(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.model.Parameter) -> b
    175:208:int getArgumentIndex(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.model.Parameter) -> a
    212:376:java.util.List getArgument(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta) -> a
    381:393:org.apache.commons.lang3.tuple.Pair getSpreadArgument(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int,int) -> a
    397:413:cn.com.codesec.scan.ir.nodes.IRLocation getArgumentByParameterName(cn.com.codesec.scan.ir.nodes.IRFunCall,cn.com.codesec.scan.metadata.FunMeta,int) -> a
    417:426:boolean argumentExistsByName(cn.com.codesec.scan.metadata.FunMeta,java.lang.String) -> a
    431:434:cn.com.codesec.scan.ir.nodes.IRLocation getArgumentThis(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    442:442:java.lang.String toString() -> toString
    int getCompareIndex() -> a
    449:449:int compareTo(cn.com.codesec.scan.model.Parameter) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.model.Parameter$Globals -> cn.com.codesec.PE:
    554:555:void <init>() -> <init>
    559:559:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    564:564:int getCompareIndex() -> a
    568:568:java.lang.Object readResolve() -> readResolve
    554:554:void <init>(cn.com.codesec.scan.model.Parameter$Globals) -> <init>
cn.com.codesec.scan.model.Parameter$NoSuchArgumentException -> cn.com.codesec.PF:
    int i -> a
    466:467:void <init>() -> <init>
    469:471:void <init>(int) -> <init>
    475:475:java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    463:463:int access$0(cn.com.codesec.scan.model.Parameter$NoSuchArgumentException) -> a
cn.com.codesec.scan.model.Parameter$OuterThis -> cn.com.codesec.PG:
    574:575:void <init>() -> <init>
    579:579:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    584:584:int getCompareIndex() -> a
    588:588:java.lang.Object readResolve() -> readResolve
    574:574:void <init>(cn.com.codesec.scan.model.Parameter$OuterThis) -> <init>
cn.com.codesec.scan.model.Parameter$Positional -> cn.com.codesec.PH:
    int position -> f
    483:488:void <init>(int) -> <init>
    491:491:int getPosition() -> b
    496:496:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    501:501:int getCompareIndex() -> a
    505:505:java.lang.Object readResolve() -> readResolve
    483:483:void <init>(int,cn.com.codesec.scan.model.Parameter$Positional) -> <init>
cn.com.codesec.scan.model.Parameter$Return -> cn.com.codesec.PI:
    534:535:void <init>() -> <init>
    539:539:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    544:544:int getCompareIndex() -> a
    548:548:java.lang.Object readResolve() -> readResolve
    534:534:void <init>(cn.com.codesec.scan.model.Parameter$Return) -> <init>
cn.com.codesec.scan.model.Parameter$This -> cn.com.codesec.PJ:
    511:512:void <init>() -> <init>
    516:519:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    524:524:int getCompareIndex() -> a
    528:528:java.lang.Object readResolve() -> readResolve
    511:511:void <init>(cn.com.codesec.scan.model.Parameter$This) -> <init>
cn.com.codesec.scan.model.Parameter$VarArg -> cn.com.codesec.PK:
    594:595:void <init>() -> <init>
    599:599:java.lang.String getName(cn.com.codesec.scan.meta.Language) -> a
    604:604:int getCompareIndex() -> a
    608:608:java.lang.Object readResolve() -> readResolve
    594:594:void <init>(cn.com.codesec.scan.model.Parameter$VarArg) -> <init>
cn.com.codesec.scan.model.ParameterLocation -> cn.com.codesec.PL:
    cn.com.codesec.scan.model.Parameter parameter -> a
    cn.com.codesec.scan.model.AccessPath accessPath -> b
    16:16:cn.com.codesec.scan.model.Parameter getParameter() -> b
    20:20:cn.com.codesec.scan.model.AccessPath getAccessPath() -> f
    26:29:void <init>(cn.com.codesec.scan.model.Parameter,cn.com.codesec.scan.model.AccessPath) -> <init>
    32:43:boolean isWellFormed() -> g
    48:48:cn.com.codesec.scan.model.AccessPath getPath() -> e
    53:53:cn.com.codesec.scan.analyzer.util.Location getLoc() -> d
    58:58:cn.com.codesec.scan.analyzer.util.Location getSpellingLoc() -> a
    63:63:boolean isAlias() -> c
    67:101:java.lang.String render(cn.com.codesec.scan.meta.Language) -> a
    105:105:boolean isReturn() -> h
    110:110:java.lang.String toString() -> toString
    115:122:boolean equals(java.lang.Object) -> equals
    127:129:int hashCode() -> hashCode
    134:138:int compareTo(cn.com.codesec.scan.model.ParameterLocation) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.scan.model.PathLocationInfo -> cn.com.codesec.PM:
    cn.com.codesec.scan.meta.Language sourceLang -> b
    17:19:void <init>(cn.com.codesec.scan.model.AccessPath,cn.com.codesec.scan.meta.Language) -> <init>
    24:24:cn.com.codesec.scan.meta.Symbol getBase() -> a
    29:29:boolean isGlobal() -> b
    35:35:java.lang.String getBaseRenderName() -> c
    40:40:cn.com.codesec.scan.meta.Language getLang() -> d
cn.com.codesec.scan.util.ArgumentSpecifier -> cn.com.codesec.PN:
    int MAX_ARG -> b
    int GLOBALS_MASK -> c
    int THIS_MASK -> d
    int RETURN_MASK -> e
    java.util.Map INSTANCE_CACHE -> f
    int matches -> g
    int allAfter -> h
    cn.com.codesec.scan.util.ArgumentSpecifier$Member[] members -> i
    cn.com.codesec.scan.util.ArgumentSpecifier$CacheID cacheID -> j
    boolean $assertionsDisabled -> a
    21:390:void <clinit>() -> <clinit>
    35:42:boolean equals(java.lang.Object) -> equals
    47:47:int hashCode() -> hashCode
    50:56:void <init>(int,int,cn.com.codesec.scan.util.ArgumentSpecifier$Member[]) -> <init>
    59:59:cn.com.codesec.scan.util.ArgumentSpecifier getSpec(int,int,cn.com.codesec.scan.util.ArgumentSpecifier$Member[]) -> a
    63:70:cn.com.codesec.scan.util.ArgumentSpecifier getCached(cn.com.codesec.scan.util.ArgumentSpecifier) -> e
    74:74:cn.com.codesec.scan.util.ArgumentSpecifier getSpec(java.lang.String) -> a
    78:144:cn.com.codesec.scan.util.ArgumentSpecifier getExtendedPathSpec(java.lang.String,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    148:158:void addMember(java.util.List,java.lang.String,int,cn.com.codesec.scan.model.AccessPath$Selector) -> a
    161:161:boolean matchesThis() -> a
    165:165:boolean matchesReturn() -> b
    169:169:boolean matchesGlobals() -> c
    173:174:boolean matchesArg(int) -> a
    178:195:java.util.List getMembersByMask(int) -> c
    199:199:java.util.List getThisMembers() -> d
    203:203:java.util.List getReturnMembers() -> e
    207:207:java.util.List getGlobalsMembers() -> f
    211:211:java.util.List getMembers(int) -> b
    215:219:cn.com.codesec.scan.util.ArgumentSpecifier$Member getSingleMember() -> g
    223:239:boolean checkInternalArgNo(cn.com.codesec.scan.metadata.FunMeta,int) -> a
    243:259:java.util.List getInternalArgMembers(cn.com.codesec.scan.metadata.FunMeta,int) -> b
    263:271:int getInternalSingleArgNo(cn.com.codesec.scan.ir.nodes.IRFunCall) -> a
    276:276:boolean isSingle() -> h
    280:280:boolean exactlyOneBitIsSet(int) -> d
    284:296:void toStringPart(java.lang.StringBuilder,java.lang.String,java.util.List) -> a
    300:322:java.lang.String toString() -> toString
    326:326:cn.com.codesec.scan.model.Parameter toParameter() -> i
    330:347:cn.com.codesec.scan.model.Parameter toParameter(cn.com.codesec.scan.meta.Language) -> a
    351:356:cn.com.codesec.scan.model.ParameterLocation toParameterLocation(cn.com.codesec.scan.meta.Language) -> b
    360:360:boolean insertDerefs(cn.com.codesec.scan.meta.Language) -> c
    365:384:int compareTo(cn.com.codesec.scan.util.ArgumentSpecifier) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
    29:29:int access$1(cn.com.codesec.scan.util.ArgumentSpecifier) -> b
    28:28:int access$2(cn.com.codesec.scan.util.ArgumentSpecifier) -> c
    30:30:cn.com.codesec.scan.util.ArgumentSpecifier$Member[] access$3(cn.com.codesec.scan.util.ArgumentSpecifier) -> d
cn.com.codesec.scan.util.ArgumentSpecifier$CacheID -> cn.com.codesec.PO:
    cn.com.codesec.scan.util.ArgumentSpecifier this$0 -> a
    392:392:void <init>(cn.com.codesec.scan.util.ArgumentSpecifier) -> <init>
    395:395:cn.com.codesec.scan.util.ArgumentSpecifier forArgumentSpecifier() -> a
    400:407:boolean equals(java.lang.Object) -> equals
    412:422:int hashCode() -> hashCode
    392:392:void <init>(cn.com.codesec.scan.util.ArgumentSpecifier,cn.com.codesec.scan.util.ArgumentSpecifier$CacheID) -> <init>
cn.com.codesec.scan.util.ArgumentSpecifier$ExtendedMember -> cn.com.codesec.PP:
    java.lang.String[] EMPTY_FIELDS -> c
    cn.com.codesec.scan.model.AccessPath$Selector extension -> d
    531:532:void <clinit>() -> <clinit>
    493:495:void <init>(java.lang.String,int,cn.com.codesec.scan.model.AccessPath$Selector) -> <init>
    498:500:void <init>(int,cn.com.codesec.scan.model.AccessPath$Selector) -> <init>
    504:508:cn.com.codesec.scan.model.AccessPath toAccessPath(cn.com.codesec.scan.meta.Language) -> a
    513:517:java.lang.String toString() -> toString
    522:522:boolean equals(java.lang.Object) -> equals
    527:527:int hashCode() -> hashCode
    492:492:void <init>(java.lang.String,int,cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.util.ArgumentSpecifier$ExtendedMember) -> <init>
    497:497:void <init>(int,cn.com.codesec.scan.model.AccessPath$Selector,cn.com.codesec.scan.util.ArgumentSpecifier$ExtendedMember) -> <init>
cn.com.codesec.scan.util.ArgumentSpecifier$Member -> cn.com.codesec.PQ:
    java.lang.String[] fields -> a
    int matches -> c
    boolean $assertionsDisabled -> b
    426:426:void <clinit>() -> <clinit>
    431:435:void <init>(java.lang.String[],int) -> <init>
    438:439:void <init>(java.lang.String,int) -> <init>
    443:450:java.lang.String toString() -> toString
    455:462:boolean equals(java.lang.Object) -> equals
    467:471:int hashCode() -> hashCode
    475:483:cn.com.codesec.scan.model.AccessPath toAccessPath(cn.com.codesec.scan.meta.Language) -> a
    437:437:void <init>(java.lang.String,int,cn.com.codesec.scan.util.ArgumentSpecifier$Member) -> <init>
    431:431:void <init>(java.lang.String[],int,cn.com.codesec.scan.util.ArgumentSpecifier$Member) -> <init>
    437:437:void <init>(java.lang.String,int,cn.com.codesec.scan.util.ArgumentSpecifier$Member,cn.com.codesec.scan.util.ArgumentSpecifier$Member) -> <init>
    429:429:int access$3(cn.com.codesec.scan.util.ArgumentSpecifier$Member) -> a
cn.com.codesec.scan.util.Bean -> cn.com.codesec.PR:
    java.lang.Object value -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(java.lang.Object) -> <init>
    19:19:java.lang.Object getValue() -> a
    23:24:void setValue(java.lang.Object) -> a
cn.com.codesec.scan.util.Box -> cn.com.codesec.PS:
    java.lang.Object contents -> a
    11:13:void <init>(java.lang.Object) -> <init>
    16:17:void set(java.lang.Object) -> a
    20:20:java.lang.Object get() -> c
    24:27:java.lang.Object getOrElse(java.lang.Object) -> b
    31:31:boolean isDefined() -> d
cn.com.codesec.scan.util.Canonicalizer -> cn.com.codesec.PT:
    java.util.Map instances -> a
    boolean threadSafe -> b
    18:19:void <init>() -> <init>
    21:24:void <init>(boolean) -> <init>
    27:38:java.lang.Object get(java.lang.Object) -> a
    42:42:int size() -> a
cn.com.codesec.scan.util.CharPointer -> cn.com.codesec.PU:
    java.lang.CharSequence data -> a
    int nextIndex -> b
    12:15:void <init>(java.lang.CharSequence) -> <init>
    18:18:boolean hasNext() -> a
    22:22:boolean hasPrevious() -> b
    26:26:int getNextIndex() -> c
    30:30:char peek() -> d
    34:34:char peek(int) -> a
    39:43:char next() -> e
    49:56:char prev() -> f
cn.com.codesec.scan.util.Converters -> cn.com.codesec.PV:
    10:10:void <init>() -> <init>
    13:13:java.util.List list(java.lang.Object[]) -> a
    17:17:java.lang.Object as(java.lang.Object) -> a
cn.com.codesec.scan.util.Factory -> cn.com.codesec.PW:
    java.lang.Object create() -> a
cn.com.codesec.scan.util.FixedResourcePool -> cn.com.codesec.PX:
    java.util.concurrent.BlockingQueue queue -> b
    boolean $assertionsDisabled -> a
    13:13:void <clinit>() -> <clinit>
    17:35:void <init>(java.util.Collection) -> <init>
    39:42:cn.com.codesec.scan.util.ResourceHandle acquire() -> a
    47:52:cn.com.codesec.scan.util.ResourceHandle tryAcquire() -> b
    57:62:cn.com.codesec.scan.util.ResourceHandle tryAcquire(long) -> a
    66:70:void release(cn.com.codesec.scan.util.FixedResourcePool$Handle) -> a
    65:65:void access$0(cn.com.codesec.scan.util.FixedResourcePool,cn.com.codesec.scan.util.FixedResourcePool$Handle) -> a
cn.com.codesec.scan.util.FixedResourcePool$Handle -> cn.com.codesec.PY:
    java.lang.Object resource -> a
    cn.com.codesec.scan.util.FixedResourcePool owner -> b
    77:80:void <init>(java.lang.Object) -> <init>
    84:84:java.lang.Object get() -> a
    89:93:void release() -> b
    96:96:java.lang.Object getResource() -> c
    100:100:cn.com.codesec.scan.util.FixedResourcePool getOwner() -> d
    104:105:void setOwner(cn.com.codesec.scan.util.FixedResourcePool) -> a
cn.com.codesec.scan.util.Func2 -> cn.com.codesec.PZ:
    java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
cn.com.codesec.scan.util.Func3 -> cn.com.codesec.Qa:
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
cn.com.codesec.scan.util.FunctionTimerQueue -> cn.com.codesec.Qb:
    16:17:void <init>(int) -> <init>
    20:21:void add(java.lang.String,int) -> a
    24:31:java.util.List getSlowest() -> a
cn.com.codesec.scan.util.HashCodeBuilder -> cn.com.codesec.Qc:
    int hashCode -> a
    int multiplier -> b
    17:20:void <init>(int,int) -> <init>
    23:25:cn.com.codesec.scan.util.HashCodeBuilder add(java.lang.Object) -> a
    29:30:cn.com.codesec.scan.util.HashCodeBuilder add(boolean) -> a
    34:35:cn.com.codesec.scan.util.HashCodeBuilder add(int) -> a
    39:40:cn.com.codesec.scan.util.HashCodeBuilder add(byte) -> a
    44:45:cn.com.codesec.scan.util.HashCodeBuilder add(char) -> a
    49:50:cn.com.codesec.scan.util.HashCodeBuilder add(short) -> a
    54:55:cn.com.codesec.scan.util.HashCodeBuilder add(long) -> a
    59:60:cn.com.codesec.scan.util.HashCodeBuilder add(float) -> a
    64:65:cn.com.codesec.scan.util.HashCodeBuilder add(double) -> a
    69:70:cn.com.codesec.scan.util.HashCodeBuilder add(java.lang.Object[]) -> a
    74:79:cn.com.codesec.scan.util.HashCodeBuilder add(java.util.Collection) -> a
    83:83:int build() -> a
    88:89:int hashCode() -> hashCode
    94:105:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.util.IdentityPair -> cn.com.codesec.Qd:
    java.lang.Object first -> a
    java.lang.Object second -> b
    16:19:void <init>(java.lang.Object,java.lang.Object) -> <init>
    22:23:void <init>(java.util.Map$Entry) -> <init>
    26:26:cn.com.codesec.scan.util.IdentityPair mk(java.lang.Object,java.lang.Object) -> a
    31:31:java.lang.String toString() -> toString
    36:36:boolean equals(java.lang.Object) -> equals
    40:40:boolean equals(cn.com.codesec.scan.util.IdentityPair) -> a
    45:52:int hashCode() -> hashCode
    56:56:java.util.Iterator firstIterator(java.util.Iterator) -> a
    75:75:java.util.Iterator secondIterator(java.util.Iterator) -> b
cn.com.codesec.scan.util.IdentityPair$1 -> cn.com.codesec.Qe:
    java.util.Iterator val$it -> a
    1:56:void <init>(java.util.Iterator) -> <init>
    59:59:boolean hasNext() -> hasNext
    64:64:java.lang.Object next() -> next
    69:70:void remove() -> remove
cn.com.codesec.scan.util.IdentityPair$2 -> cn.com.codesec.Qf:
    java.util.Iterator val$it -> a
    1:75:void <init>(java.util.Iterator) -> <init>
    78:78:boolean hasNext() -> hasNext
    83:83:java.lang.Object next() -> next
    88:89:void remove() -> remove
cn.com.codesec.scan.util.LoggingPrintStream -> cn.com.codesec.Qg:
    java.io.PipedInputStream in -> a
    java.util.logging.Logger log -> b
    java.util.logging.Level logLevel -> c
    java.lang.String prefix -> d
    java.lang.Thread monitor -> e
    28:35:void <init>(java.util.logging.Logger,java.util.logging.Level,java.lang.String) -> <init>
    38:46:void cleanup(long) -> a
    21:21:java.io.PipedInputStream access$0(cn.com.codesec.scan.util.LoggingPrintStream) -> a
    22:22:java.util.logging.Logger access$1(cn.com.codesec.scan.util.LoggingPrintStream) -> b
    23:23:java.util.logging.Level access$2(cn.com.codesec.scan.util.LoggingPrintStream) -> c
    24:24:java.lang.String access$3(cn.com.codesec.scan.util.LoggingPrintStream) -> d
cn.com.codesec.scan.util.LoggingPrintStream$StreamMonitor -> cn.com.codesec.Qh:
    cn.com.codesec.scan.util.LoggingPrintStream this$0 -> a
    51:51:void <init>(cn.com.codesec.scan.util.LoggingPrintStream) -> <init>
    56:92:void run() -> run
    51:51:void <init>(cn.com.codesec.scan.util.LoggingPrintStream,cn.com.codesec.scan.util.LoggingPrintStream$StreamMonitor) -> <init>
cn.com.codesec.scan.util.PQueue -> cn.com.codesec.Qi:
    java.util.TreeMap map -> a
    int size -> b
    boolean $assertionsDisabled -> c
    12:12:void <clinit>() -> <clinit>
    17:21:void <init>(int) -> <init>
    24:32:void add(java.lang.Object) -> a
    35:39:java.util.Iterator getIterator() -> b
cn.com.codesec.scan.util.Parallelizer -> cn.com.codesec.Qj:
    java.util.concurrent.locks.Lock progressLock -> a
    229:230:void <clinit>() -> <clinit>
    23:23:void <init>() -> <init>
    28:39:void reportProgress(java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.lang.String,java.util.concurrent.atomic.AtomicInteger,int) -> a
    42:42:int getNumberThreads(java.lang.String) -> a
    47:52:int getNumberThreads(java.lang.String,int) -> a
    56:58:void multithreadP1(java.lang.String,java.lang.String,java.lang.Iterable,cn.com.codesec.scan.util.Parallelizer$UnaryExecutor,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    61:63:void multithreadP0(java.lang.String,java.lang.String,java.lang.Iterable,cn.com.codesec.scan.util.Parallelizer$UnaryExecutor,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> b
    66:67:void multithreadWorkers(java.lang.String,java.lang.String,java.util.function.Supplier,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    70:81:void multithreadWorkers(java.lang.String,int,java.util.function.Supplier,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    84:91:void multithread(java.lang.String,int,java.lang.Iterable,cn.com.codesec.scan.util.Parallelizer$UnaryExecutor,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    94:145:void multithread(cn.com.codesec.scan.util.Parallelizer$SCAThreadPool,java.lang.Iterable,cn.com.codesec.scan.util.Parallelizer$UnaryExecutor,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    148:217:void multithreadRQ(java.lang.String,int,cn.com.codesec.scan.util.Parallelizer$WorkQueue,cn.com.codesec.scan.util.Parallelizer$UnaryComputer,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> a
    220:220:cn.com.codesec.scan.util.Parallelizer$SCAThreadPool getExecutor(java.lang.String,java.lang.String) -> a
    224:225:java.lang.Object competitiveCacheStore(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.Parallelizer$1Runner -> cn.com.codesec.Qk:
    java.lang.Object obj -> a
    cn.com.codesec.scan.util.Parallelizer$UnaryExecutor val$action -> b
    cn.com.codesec.scan.util.Parallelizer$ExceptionHandler val$handler -> c
    96:98:void <init>(java.lang.Object,cn.com.codesec.scan.util.Parallelizer$UnaryExecutor,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> <init>
    103:117:void run() -> run
cn.com.codesec.scan.util.Parallelizer$2Runner -> cn.com.codesec.Ql:
    cn.com.codesec.scan.util.Parallelizer$UnaryComputer val$action -> a
    java.lang.Object val$obj -> b
    cn.com.codesec.scan.util.Parallelizer$ExceptionHandler val$handler -> c
    158:158:void <init>(cn.com.codesec.scan.util.Parallelizer$UnaryComputer,java.lang.Object,cn.com.codesec.scan.util.Parallelizer$ExceptionHandler) -> <init>
    164:179:java.util.Set call() -> a
    1:1:java.lang.Object call() -> call
cn.com.codesec.scan.util.Parallelizer$ExceptionHandler -> cn.com.codesec.Qm:
    void handle(java.lang.Throwable,java.lang.Object) -> handle
cn.com.codesec.scan.util.Parallelizer$SCADynamicThreadPool -> cn.com.codesec.Qn:
    254:255:void <init>(java.lang.String) -> <init>
    253:253:void <init>(java.lang.String,cn.com.codesec.scan.util.Parallelizer$SCADynamicThreadPool) -> <init>
cn.com.codesec.scan.util.Parallelizer$SCAFixedThreadPool -> cn.com.codesec.Qo:
    247:248:void <init>(int,java.lang.String) -> <init>
    246:246:void <init>(int,java.lang.String,cn.com.codesec.scan.util.Parallelizer$SCAFixedThreadPool) -> <init>
cn.com.codesec.scan.util.Parallelizer$SCAThreadPool -> cn.com.codesec.Qp:
    235:236:void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.lang.String) -> <init>
    240:241:void close() -> close
cn.com.codesec.scan.util.Parallelizer$UnaryComputer -> cn.com.codesec.Qq:
    java.util.Set compute(java.lang.Object) -> compute
cn.com.codesec.scan.util.Parallelizer$UnaryExecutor -> cn.com.codesec.Qr:
    void execute(java.lang.Object) -> execute
cn.com.codesec.scan.util.Parallelizer$WorkQueue -> cn.com.codesec.Qs:
    void add(java.util.Set) -> a
    java.lang.Object pollExcluding(java.util.Collection) -> b
    int size() -> a
cn.com.codesec.scan.util.PartialResult -> cn.com.codesec.Qt:
    java.lang.Object result -> a
    java.util.List errors -> c
    boolean $assertionsDisabled -> b
    12:12:void <clinit>() -> <clinit>
    17:21:void <init>(java.lang.Object,java.util.List) -> <init>
    24:26:cn.com.codesec.scan.util.PartialResult mk(java.lang.Object,java.util.List) -> a
    30:31:cn.com.codesec.scan.util.PartialResult mk(java.lang.Object) -> a
    35:36:cn.com.codesec.scan.util.PartialResult error(java.lang.String) -> a
    40:41:cn.com.codesec.scan.util.PartialResult error(java.util.List) -> a
    45:45:boolean hasErrors() -> a
    49:49:java.lang.Iterable getErrors() -> b
    53:59:java.lang.String getErrorLines(java.lang.String,java.lang.String) -> a
cn.com.codesec.scan.util.Quadruple -> cn.com.codesec.Qu:
    java.lang.Object first -> a
    java.lang.Object second -> b
    java.lang.Object third -> c
    java.lang.Object fourth -> d
    18:23:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    26:26:cn.com.codesec.scan.util.Quadruple mk(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    31:31:java.lang.String toString() -> toString
    36:36:boolean equals(java.lang.Object) -> equals
    40:40:boolean equals(cn.com.codesec.scan.util.Quadruple) -> a
    45:58:int hashCode() -> hashCode
cn.com.codesec.scan.util.Quintuple -> cn.com.codesec.Qv:
    java.lang.Object first -> a
    java.lang.Object second -> b
    java.lang.Object third -> c
    java.lang.Object fourth -> d
    java.lang.Object fifth -> e
    19:25:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    28:28:cn.com.codesec.scan.util.Quintuple mk(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    33:33:java.lang.String toString() -> toString
    38:38:boolean equals(java.lang.Object) -> equals
    42:42:boolean equals(cn.com.codesec.scan.util.Quintuple) -> a
    47:63:int hashCode() -> hashCode
cn.com.codesec.scan.util.ReachableComparable -> cn.com.codesec.Qw:
    int reachableCompareTo(java.lang.Object) -> a
cn.com.codesec.scan.util.Ref -> cn.com.codesec.Qx:
    java.lang.Object get() -> get
cn.com.codesec.scan.util.Ref$Simple -> cn.com.codesec.Qy:
    java.lang.Object data -> a
    19:21:void <init>(java.lang.Object) -> <init>
    25:25:java.lang.Object get() -> get
    30:30:java.lang.String toString() -> toString
    36:40:boolean equals(java.lang.Object) -> equals
    45:45:int hashCode() -> hashCode
cn.com.codesec.scan.util.ResourceHandle -> cn.com.codesec.Qz:
    java.lang.Object get() -> a
    void release() -> b
    15:16:void close() -> close
cn.com.codesec.scan.util.ResourcePool -> cn.com.codesec.QA:
    cn.com.codesec.scan.util.ResourceHandle acquire() -> a
    cn.com.codesec.scan.util.ResourceHandle tryAcquire(long) -> a
    cn.com.codesec.scan.util.ResourceHandle tryAcquire() -> b
cn.com.codesec.scan.util.ResultUtils -> cn.com.codesec.QB:
    java.lang.String DESCIRPTION_SEPARATOR -> a
    4:4:void <init>() -> <init>
cn.com.codesec.scan.util.ResultUtils$UnifiedActionType -> cn.com.codesec.QC:
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType OPERATION -> a
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType IN_CALL_PARAMETER -> b
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType IN_CALL_ENTRYPOINT -> c
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType IN_CALL -> d
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType OUT_CALL -> e
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType IN_OUT_CALL -> f
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType READ -> g
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType READ_GLOBAL -> h
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType ASSIGN -> i
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType ASSIGN_GLOBAL -> j
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType ALIAS -> k
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType COMPARE -> l
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType RETURN -> m
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType REF -> n
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType DEREF -> o
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType END_SCOPE -> p
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType JUMP -> q
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType BRANCH_TAKEN -> r
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType BRANCH_NOT_TAKEN -> s
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType TAINT_CHANGE -> t
    java.lang.String typeName -> u
    cn.com.codesec.scan.util.ResultUtils$UnifiedActionType[] ENUM$VALUES -> v
    8:29:void <clinit>() -> <clinit>
    34:34:java.lang.String getTypeName() -> a
    37:40:void <init>(java.lang.String,int,java.lang.String) -> <init>
    1:1:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType[] values() -> values
    1:1:cn.com.codesec.scan.util.ResultUtils$UnifiedActionType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.util.SCAConstants -> cn.com.codesec.QD:
    float CONFIDENCE_MAX -> a
    float CONFIDENCE_MIN -> b
    7:7:void <init>() -> <init>
cn.com.codesec.scan.util.SCAUtil -> cn.com.codesec.QE:
    18:18:void <init>() -> <init>
    21:21:boolean isEmpty(java.util.Collection) -> a
    25:25:int size(java.util.Collection) -> b
    29:29:int size(java.util.Map) -> a
    33:35:boolean roughlyEquals(java.util.Collection,java.util.Collection) -> a
    39:47:boolean roughlyEquals(java.util.Map,java.util.Map) -> a
    51:51:int hashCodeOrZero(java.lang.Object) -> a
    55:55:java.util.Map newMap() -> a
    59:59:java.util.Map newMap(int) -> a
    63:63:java.util.List newList() -> b
    67:67:java.util.List newList(int) -> b
    71:71:java.util.List newList(java.util.Collection) -> c
    75:75:java.util.Set newSet() -> c
    79:79:java.util.Set newSet(int) -> c
    83:83:java.util.Set newSet(java.util.Set) -> a
    87:96:java.lang.String asCommaSeparatedString(java.util.Collection) -> d
cn.com.codesec.scan.util.ScaThreadFactory -> cn.com.codesec.QF:
    java.lang.ThreadGroup group -> a
    java.util.concurrent.atomic.AtomicInteger threadNumber -> b
    java.lang.String namePrefix -> c
    18:22:void <init>(java.lang.String) -> <init>
    26:26:java.lang.Thread newThread(java.lang.Runnable) -> newThread
cn.com.codesec.scan.util.ScanMonitor -> cn.com.codesec.QG:
    java.lang.management.ThreadMXBean mx -> a
    long[] gcTimeWindow -> b
    long[] elapsedTimeWindow -> c
    int gcWindowHead -> d
    int elapsedWindowHead -> e
    int MEMORY_WINDOW_SIZE -> f
    27:31:void startMonitor() -> a
    34:41:void <init>() -> <init>
    45:62:void run() -> run
    65:114:void checkMemory() -> b
    117:136:void checkDeadlock() -> c
    139:163:void checkZombies() -> d
cn.com.codesec.scan.util.SharedIterator -> cn.com.codesec.QH:
    java.util.Iterator i -> a
    14:16:void <init>(java.util.Iterator) -> <init>
    18:20:void <init>(java.lang.Iterable) -> <init>
    23:26:java.lang.Object next() -> a
cn.com.codesec.scan.util.StringBuilderMux -> cn.com.codesec.QI:
    java.lang.StringBuilder[] children -> a
    13:15:void <init>(java.lang.StringBuilder[]) -> <init>
    19:22:cn.com.codesec.scan.util.StringBuilderMux append(java.lang.CharSequence,int,int) -> a
    27:30:cn.com.codesec.scan.util.StringBuilderMux append(char) -> a
    35:38:cn.com.codesec.scan.util.StringBuilderMux append(java.lang.CharSequence) -> a
    1:1:java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    1:1:java.lang.Appendable append(java.lang.CharSequence) -> append
    1:1:java.lang.Appendable append(char) -> append
cn.com.codesec.scan.util.StrongNstIdGenerator -> cn.com.codesec.QJ:
    44:44:void <init>() -> <init>
    47:48:void append(java.lang.StringBuilder,cn.com.codesec.scan.ir.nodes.IRNode) -> a
cn.com.codesec.scan.util.StrongNstIdGenerator$Visitor -> cn.com.codesec.QK:
    java.lang.StringBuilder result -> b
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type -> c
    50:50:void <clinit>() -> <clinit>
    54:56:void <init>(java.lang.StringBuilder) -> <init>
    59:60:void write(java.lang.String) -> a
    63:66:void write(java.lang.String[]) -> a
    70:88:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAllocation,java.lang.Object) -> a
    93:97:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRAssignmentStmt,java.lang.Object) -> a
    102:103:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    108:110:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCallStmt,java.lang.Object) -> a
    115:116:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRClassDecl,java.lang.Object) -> a
    121:122:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,java.lang.Object) -> a
    127:129:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRDeclStatement,java.lang.Object) -> a
    134:149:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    154:158:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldDecl,java.lang.Object) -> a
    163:165:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunIdentifier,java.lang.Object) -> a
    170:190:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    195:213:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunDecl,java.lang.Object) -> a
    218:219:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRGoto,java.lang.Object) -> a
    224:229:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRIfThen,java.lang.Object) -> a
    234:266:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRLiteralExp,java.lang.Object) -> a
    271:272:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRNoOpStmt,java.lang.Object) -> a
    277:288:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IROpExp,java.lang.Object) -> a
    293:301:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRReturnStmt,java.lang.Object) -> a
    306:335:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRType,java.lang.Object) -> a
    340:354:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarAccess,java.lang.Object) -> a
    359:363:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    368:373:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRWhileStmt,java.lang.Object) -> a
    377:378:void writeModifiers(cn.com.codesec.parse.ir.IRModifierSet) -> a
    381:382:void writePrimitiveType(cn.com.codesec.parse.ir.PrimitiveType) -> a
    50:50:int[] $SWITCH_TABLE$cn$com$codesec$scan$ir$nodes$IRLiteralExp$Type() -> a
cn.com.codesec.scan.util.TimeLimit -> cn.com.codesec.QL:
    long SECONDS -> a
    long MINUTES -> b
    long HOURS -> c
    java.util.Timer TIMER -> e
    java.util.Map TASKMAP -> f
    boolean $assertionsDisabled -> d
    15:43:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    24:28:void startTask(cn.com.codesec.scan.util.TimeLimit$TimeLimitedJob,long) -> a
    31:38:void endTask(cn.com.codesec.scan.util.TimeLimit$TimeLimitedJob,boolean) -> a
cn.com.codesec.scan.util.TimeLimit$TimeLimitedJob -> cn.com.codesec.QM:
    void timeExpired() -> a
cn.com.codesec.scan.util.TimeLimit$TripTask -> cn.com.codesec.QN:
    cn.com.codesec.scan.util.TimeLimit$TimeLimitedJob job -> a
    49:51:void <init>(cn.com.codesec.scan.util.TimeLimit$TimeLimitedJob) -> <init>
    62:70:void run() -> run
    75:76:boolean cancel() -> cancel
cn.com.codesec.scan.util.Timer -> cn.com.codesec.QO:
    cn.com.codesec.scan.util.Timer INSTANCE -> b
    java.util.Collection plugins -> c
    boolean enabled -> d
    boolean memEnabled -> e
    long startTime -> f
    boolean autoLogThreadStarted -> g
    cn.com.codesec.scan.util.Timer$TopTaskList TOP_TASKS -> h
    java.util.concurrent.ConcurrentHashMap threadMap -> i
    java.lang.Object TIMER_LIST_LOCK -> j
    int COLS_NAME -> k
    int COLS_ACTIVE -> l
    boolean DEBUG_INCLUDE_PS -> m
    java.util.EnumSet PRINT_BEANS -> n
    java.util.concurrent.ConcurrentHashMap counters -> o
    java.lang.ref.ReferenceQueue REF_QUEUE -> p
    java.util.concurrent.ConcurrentHashMap REFERENCES -> q
    boolean $assertionsDisabled -> a
    43:615:void <clinit>() -> <clinit>
    62:66:void <init>() -> <init>
    69:70:cn.com.codesec.scan.util.Timer getSnapshot() -> a
    74:84:void prepareSnapshot(long) -> a
    87:88:void addPlugin(java.lang.Runnable) -> a
    91:92:void setEnabled(boolean) -> a
    95:95:boolean isEnabled() -> b
    99:100:void setMemEnabled(boolean) -> b
    103:119:java.lang.String getThreadDumps() -> c
    123:125:cn.com.codesec.scan.util.Timer$ForThread getForCurrentThread() -> m
    129:129:cn.com.codesec.scan.util.Timer$Handle get(java.lang.String) -> a
    133:149:cn.com.codesec.scan.util.Timer$Handle getHandle(java.lang.String) -> b
    153:164:java.util.Map getAllTimers() -> d
    169:169:java.util.concurrent.ConcurrentHashMap getCounters() -> e
    173:178:java.util.Map snapshotCounters() -> f
    182:183:void times(java.lang.StringBuilder) -> a
    186:219:void times(java.lang.StringBuilder,cn.com.codesec.scan.util.Timer) -> a
    222:223:void elapsed(java.lang.StringBuilder) -> b
    226:226:long elapsedMS() -> g
    230:247:void msToHMS(long,java.lang.StringBuilder) -> a
    250:268:void pushHandle(cn.com.codesec.scan.util.Timer$Handle) -> a
    271:299:void popHandle(cn.com.codesec.scan.util.Timer$Handle) -> b
    302:305:void activate(cn.com.codesec.scan.util.Timer$Handle,long) -> a
    308:313:void deactivate(cn.com.codesec.scan.util.Timer$Handle,long) -> b
    317:322:cn.com.codesec.scan.util.Timer$Handle push(java.lang.String) -> c
    326:337:void pop() -> h
    340:387:void autoLog() -> i
    390:391:void printStats(java.lang.StringBuilder) -> c
    394:435:void printStats(java.lang.StringBuilder,cn.com.codesec.util.StringBuilderWriter) -> b
    438:439:void setDebugIncludePS(boolean) -> c
    442:451:void psCpu(java.lang.StringBuilder) -> e
    454:463:void psMem(java.lang.StringBuilder) -> f
    466:467:void psWindows(java.lang.StringBuilder,java.lang.String) -> a
    470:471:void psUnix(java.lang.StringBuilder,java.lang.String) -> b
    474:497:void ps(java.lang.StringBuilder,java.lang.String) -> c
    500:500:long getCounter(java.lang.String) -> d
    504:511:long getInstanceCounter(java.lang.String) -> e
    515:515:long changeCounter(java.lang.String,long) -> a
    519:531:long changeInstanceCounter(java.lang.String,long) -> c
    535:535:long setCounter(java.lang.String,long) -> b
    539:550:long setInstanceCounter(java.lang.String,long) -> d
    554:554:long incrementCounter(java.lang.String) -> f
    558:558:long decrementCounter(java.lang.String) -> g
    562:569:void registerObject(java.lang.Object,java.lang.String) -> a
    572:579:void checkForCollected() -> j
    582:601:void counters(java.lang.StringBuilder) -> d
    51:51:cn.com.codesec.scan.util.Timer$TopTaskList access$0() -> k
    47:47:boolean access$1() -> l
    249:249:void access$2(cn.com.codesec.scan.util.Timer,cn.com.codesec.scan.util.Timer$Handle) -> a
    270:270:void access$3(cn.com.codesec.scan.util.Timer,cn.com.codesec.scan.util.Timer$Handle) -> b
    393:393:void access$4(java.lang.StringBuilder,cn.com.codesec.util.StringBuilderWriter) -> a
cn.com.codesec.scan.util.Timer$1 -> cn.com.codesec.QP:
    long val$interval -> a
    1:357:void <init>(java.lang.String,long) -> <init>
    360:382:void run() -> run
cn.com.codesec.scan.util.Timer$CompletedTask -> cn.com.codesec.QQ:
    java.lang.String text -> a
    long duration -> b
    657:660:void <init>(java.lang.String,long) -> <init>
    664:671:int compareTo(cn.com.codesec.scan.util.Timer$CompletedTask) -> a
    676:678:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
    657:657:void <init>(java.lang.String,long,cn.com.codesec.scan.util.Timer$CompletedTask) -> <init>
    655:655:long access$2(cn.com.codesec.scan.util.Timer$CompletedTask) -> b
cn.com.codesec.scan.util.Timer$ForThread -> cn.com.codesec.QR:
    cn.com.codesec.scan.util.Timer$Handle[] timerStack -> a
    int timerStackPos -> b
    long lastTime -> c
    java.util.concurrent.ConcurrentHashMap timerMap -> d
    java.util.ArrayList timerList -> e
    748:753:void <init>() -> <init>
    744:744:long access$0(cn.com.codesec.scan.util.Timer$ForThread) -> a
    744:744:void access$1(cn.com.codesec.scan.util.Timer$ForThread,long) -> a
    746:746:java.util.ArrayList access$2(cn.com.codesec.scan.util.Timer$ForThread) -> b
    748:748:void <init>(cn.com.codesec.scan.util.Timer$ForThread) -> <init>
    745:745:java.util.concurrent.ConcurrentHashMap access$4(cn.com.codesec.scan.util.Timer$ForThread) -> c
    743:743:int access$5(cn.com.codesec.scan.util.Timer$ForThread) -> d
    742:742:cn.com.codesec.scan.util.Timer$Handle[] access$6(cn.com.codesec.scan.util.Timer$ForThread) -> e
    742:742:void access$7(cn.com.codesec.scan.util.Timer$ForThread,cn.com.codesec.scan.util.Timer$Handle[]) -> a
    743:743:void access$8(cn.com.codesec.scan.util.Timer$ForThread,int) -> a
cn.com.codesec.scan.util.Timer$Handle -> cn.com.codesec.QS:
    java.lang.String name -> a
    long activeTime -> d
    long stackTime -> e
    long pushTime -> f
    cn.com.codesec.scan.util.Timer$ForThread thread -> g
    boolean currentlyActive -> h
    cn.com.codesec.scan.util.Timer this$0 -> b
    boolean $assertionsDisabled -> c
    756:756:void <clinit>() -> <clinit>
    765:772:void <init>(cn.com.codesec.scan.util.Timer,java.lang.String,cn.com.codesec.scan.util.Timer$ForThread) -> <init>
    775:778:cn.com.codesec.scan.util.Timer$Handle push() -> a
    782:786:void pop() -> b
    790:791:void close() -> close
    795:801:long getActiveTime() -> c
    806:812:long getStackTime() -> d
    817:817:java.lang.String toString() -> toString
    821:834:void merge(cn.com.codesec.scan.util.Timer$Handle,cn.com.codesec.scan.util.Timer$Handle) -> a
    837:841:void updateActiveTime(long) -> a
    844:848:void updateStackTime(long) -> b
    836:836:void access$0(cn.com.codesec.scan.util.Timer$Handle,long) -> a
    843:843:void access$1(cn.com.codesec.scan.util.Timer$Handle,long) -> b
    765:765:void <init>(cn.com.codesec.scan.util.Timer,java.lang.String,cn.com.codesec.scan.util.Timer$ForThread,cn.com.codesec.scan.util.Timer$Handle) -> <init>
    762:762:cn.com.codesec.scan.util.Timer$ForThread access$3(cn.com.codesec.scan.util.Timer$Handle) -> a
    761:761:long access$4(cn.com.codesec.scan.util.Timer$Handle) -> b
    761:761:void access$5(cn.com.codesec.scan.util.Timer$Handle,long) -> c
    763:763:boolean access$6(cn.com.codesec.scan.util.Timer$Handle) -> c
    763:763:void access$7(cn.com.codesec.scan.util.Timer$Handle,boolean) -> a
cn.com.codesec.scan.util.Timer$TaskTimer -> cn.com.codesec.QT:
    java.lang.String text -> a
    long startTime -> b
    boolean closed -> c
    624:625:void <init>(cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.analyzer.Analyzer) -> <init>
    628:629:void <init>(cn.com.codesec.scan.metadata.TypeMeta,cn.com.codesec.scan.analyzer.Analyzer) -> <init>
    631:636:void <init>(java.lang.String) -> <init>
    640:644:void close() -> close
    648:648:java.lang.String toString() -> toString
    619:619:java.lang.String access$0(cn.com.codesec.scan.util.Timer$TaskTimer) -> a
    620:620:long access$1(cn.com.codesec.scan.util.Timer$TaskTimer) -> b
cn.com.codesec.scan.util.Timer$TopTaskList -> cn.com.codesec.QU:
    int NUMBER_TRACKED_TOP_TASKS -> a
    java.util.Set active -> b
    java.util.List completed -> c
    long totalTaskTime -> d
    long totalTaskCount -> e
    736:737:void <clinit>() -> <clinit>
    690:695:void <init>() -> <init>
    698:699:void addActiveTask(cn.com.codesec.scan.util.Timer$TaskTimer) -> a
    702:711:void completeTask(cn.com.codesec.scan.util.Timer$TaskTimer) -> b
    714:732:void emitStats(java.lang.StringBuilder) -> a
    690:690:void <init>(cn.com.codesec.scan.util.Timer$TopTaskList) -> <init>
    697:697:void access$1(cn.com.codesec.scan.util.Timer$TopTaskList,cn.com.codesec.scan.util.Timer$TaskTimer) -> a
    701:701:void access$2(cn.com.codesec.scan.util.Timer$TopTaskList,cn.com.codesec.scan.util.Timer$TaskTimer) -> b
    713:713:void access$3(cn.com.codesec.scan.util.Timer$TopTaskList,java.lang.StringBuilder) -> a
cn.com.codesec.scan.util.Timer$TrackerReference -> cn.com.codesec.QV:
    java.lang.String className -> a
    856:858:void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,java.lang.String) -> <init>
cn.com.codesec.scan.util.Trie -> cn.com.codesec.QW:
    cn.com.codesec.scan.util.Trie$TrieNode trieRoot -> a
    java.lang.Object separator -> b
    20:22:void <init>() -> <init>
    25:25:java.lang.Object[] normalizePath(java.lang.Object[]) -> a
    29:29:java.lang.Object match(java.lang.Object[]) -> b
    33:50:boolean put(java.lang.Object[],java.lang.Object) -> a
    54:62:java.lang.Object get(java.lang.Object[]) -> c
    66:69:java.io.Writer dump(java.io.Writer,java.lang.Object) -> a
    73:80:java.lang.String prefix2key(java.util.ArrayList) -> a
    84:97:void dumpInternal(cn.com.codesec.scan.util.Trie$TrieNode,java.util.ArrayList,java.io.Writer) -> a
cn.com.codesec.scan.util.Trie$TrieNode -> cn.com.codesec.QX:
    java.lang.Object keyi -> a
    cn.com.codesec.scan.util.collections.TightMap children -> b
    java.lang.Object value -> c
    105:109:void <init>(java.lang.Object) -> <init>
    112:112:java.lang.Object getValue() -> a
    116:117:void setValue(java.lang.Object) -> a
    120:120:boolean containsChild(java.lang.Object) -> b
    124:124:cn.com.codesec.scan.util.Trie$TrieNode getChild(java.lang.Object) -> c
    128:128:java.util.Collection getChildren() -> b
    133:133:java.lang.String toString() -> toString
    102:102:cn.com.codesec.scan.util.collections.TightMap access$0(cn.com.codesec.scan.util.Trie$TrieNode) -> a
    102:102:void access$1(cn.com.codesec.scan.util.Trie$TrieNode,cn.com.codesec.scan.util.collections.TightMap) -> a
    101:101:java.lang.Object access$2(cn.com.codesec.scan.util.Trie$TrieNode) -> b
cn.com.codesec.scan.util.Twin -> cn.com.codesec.QY:
    java.lang.Object left -> a
    java.lang.Object right -> b
    16:19:void <init>(java.lang.Object,java.lang.Object) -> <init>
    22:22:cn.com.codesec.scan.util.Twin mk(java.lang.Object,java.lang.Object) -> a
    27:27:java.lang.String toString() -> toString
    32:32:boolean equals(java.lang.Object) -> equals
    36:36:boolean equals(cn.com.codesec.scan.util.Twin) -> a
    41:48:int hashCode() -> hashCode
cn.com.codesec.scan.util.VersionComparator -> cn.com.codesec.QZ:
    java.util.Comparator LOOSE -> a
    java.util.Comparator STRICT -> b
    133:145:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    15:15:boolean equalsLoose(java.lang.String,java.lang.String) -> a
    19:68:int compareLoose(java.lang.String,java.lang.String) -> b
    72:72:boolean equalsStrict(java.lang.String,java.lang.String) -> c
    76:125:int compareStrict(java.lang.String,java.lang.String) -> d
    129:129:boolean isDigit(char) -> a
cn.com.codesec.scan.util.VersionComparator$1 -> cn.com.codesec.Ra:
    1:133:void <init>() -> <init>
    136:136:int compare(java.lang.String,java.lang.String) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.util.VersionComparator$2 -> cn.com.codesec.Rb:
    1:139:void <init>() -> <init>
    142:142:int compare(java.lang.String,java.lang.String) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.scan.util.Xml1TextEncoder -> cn.com.codesec.Rc:
    char ESCAPE_CHAR -> b
    java.lang.String HEX_DIGITS -> c
    boolean $assertionsDisabled -> a
    7:10:void <clinit>() -> <clinit>
    7:7:void <init>() -> <init>
    13:38:java.lang.String encode(java.lang.String) -> a
    42:46:void appendHexCode(java.lang.StringBuffer,char) -> a
    49:85:java.lang.String decode(java.lang.String) -> b
    89:104:int appendUndoHexCode(java.lang.StringBuffer,java.lang.String,int) -> a
    108:108:boolean needToEscape(char) -> a
cn.com.codesec.scan.util.archer.Const -> cn.com.codesec.Rd:
    long value -> a
    cn.com.codesec.scan.util.archer.Const NEG_ONE -> b
    cn.com.codesec.scan.util.archer.Const ZERO -> c
    cn.com.codesec.scan.util.archer.Const ONE -> d
    cn.com.codesec.scan.util.archer.Const TWO -> e
    41:45:void <clinit>() -> <clinit>
    15:17:void <init>(long) -> <init>
    20:32:cn.com.codesec.scan.util.archer.Const mk(long) -> a
    37:37:java.lang.String toString() -> toString
cn.com.codesec.scan.util.archer.Constraint -> cn.com.codesec.Re:
    cn.com.codesec.scan.util.archer.RelOp op -> a
    cn.com.codesec.scan.util.archer.Expr left -> b
    cn.com.codesec.scan.util.archer.Expr right -> c
    boolean $assertionsDisabled -> d
    7:7:void <clinit>() -> <clinit>
    13:20:void <init>(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Expr,cn.com.codesec.scan.util.archer.Expr) -> <init>
    23:23:cn.com.codesec.scan.util.archer.Constraint inverse() -> a
    27:27:cn.com.codesec.scan.util.archer.Constraint reverse() -> b
    32:32:java.lang.String toString() -> toString
cn.com.codesec.scan.util.archer.Deriv -> cn.com.codesec.Rf:
    int var -> a
    cn.com.codesec.scan.util.archer.Linear func -> b
    7:21:boolean equals(java.lang.Object) -> equals
    27:30:void <init>(int,cn.com.codesec.scan.util.archer.Linear) -> <init>
    33:33:boolean equals(cn.com.codesec.scan.util.archer.Deriv) -> a
    38:42:int hashCode() -> hashCode
    47:47:java.lang.String toString() -> toString
cn.com.codesec.scan.util.archer.Expr -> cn.com.codesec.Rg:
    7:7:void <init>() -> <init>
cn.com.codesec.scan.util.archer.Linear -> cn.com.codesec.Rh:
    int mul -> a
    int add -> b
    int div -> c
    13:23:void <init>(int,int,int) -> <init>
    26:26:long eval(long) -> a
    30:30:long roughInverse(long) -> b
    35:39:boolean equals(java.lang.Object) -> equals
    43:43:int rotateLeft(int,int) -> a
    48:48:int hashCode() -> hashCode
    52:67:java.lang.String toString(java.lang.String) -> a
cn.com.codesec.scan.util.archer.RelOp -> cn.com.codesec.Ri:
    cn.com.codesec.scan.util.archer.RelOp LT -> a
    cn.com.codesec.scan.util.archer.RelOp LE -> b
    cn.com.codesec.scan.util.archer.RelOp GT -> c
    cn.com.codesec.scan.util.archer.RelOp GE -> d
    cn.com.codesec.scan.util.archer.RelOp EQ -> e
    cn.com.codesec.scan.util.archer.RelOp NE -> f
    java.lang.String string -> g
    cn.com.codesec.scan.util.archer.RelOp reverse -> h
    cn.com.codesec.scan.util.archer.RelOp inverse -> i
    cn.com.codesec.scan.util.archer.RelOp[] ENUM$VALUES -> j
    9:82:void <clinit>() -> <clinit>
    50:52:void <init>(java.lang.String,int,java.lang.String) -> <init>
    55:55:cn.com.codesec.scan.util.archer.RelOp reverse() -> a
    59:59:cn.com.codesec.scan.util.archer.RelOp inverse() -> b
    boolean eval(long,long) -> a
    66:66:java.lang.String toString() -> toString
    1:1:cn.com.codesec.scan.util.archer.RelOp[] values() -> values
    1:1:cn.com.codesec.scan.util.archer.RelOp valueOf(java.lang.String) -> valueOf
    50:50:void <init>(java.lang.String,int,java.lang.String,cn.com.codesec.scan.util.archer.RelOp) -> <init>
cn.com.codesec.scan.util.archer.RelOp$1 -> cn.com.codesec.Rj:
    1:9:void <init>(java.lang.String,int,java.lang.String) -> <init>
    12:12:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.RelOp$2 -> cn.com.codesec.Rk:
    1:15:void <init>(java.lang.String,int,java.lang.String) -> <init>
    18:18:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.RelOp$3 -> cn.com.codesec.Rl:
    1:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.RelOp$4 -> cn.com.codesec.Rm:
    1:27:void <init>(java.lang.String,int,java.lang.String) -> <init>
    30:30:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.RelOp$5 -> cn.com.codesec.Rn:
    1:33:void <init>(java.lang.String,int,java.lang.String) -> <init>
    36:36:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.RelOp$6 -> cn.com.codesec.Ro:
    1:39:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean eval(long,long) -> a
cn.com.codesec.scan.util.archer.Solver -> cn.com.codesec.Rp:
    cn.com.codesec.scan.util.archer.Solver$BoundType LOWER -> b
    cn.com.codesec.scan.util.archer.Solver$BoundType UPPER -> c
    java.util.Map constLower -> d
    java.util.Map constUpper -> e
    java.util.Map[] constBounds -> f
    java.util.Map symLower -> g
    java.util.Map symUpper -> h
    java.util.Map[] symBounds -> i
    java.util.Map symUpperUsers -> j
    java.util.Map symLowerUsers -> k
    java.util.Map[] symBoundsUsers -> l
    java.util.Map equivs -> m
    int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$RelOp -> n
    boolean $assertionsDisabled -> a
    int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$Solver$MBoolean -> o
    22:528:void <clinit>() -> <clinit>
    37:46:void <init>() -> <init>
    48:57:void <init>(cn.com.codesec.scan.util.archer.Solver) -> <init>
    60:64:java.util.Map copyMapMapSet(java.util.Map) -> a
    68:72:java.util.Map copyMapSet(java.util.Map) -> b
    76:76:java.util.Map copyMap(java.util.Map) -> c
    80:86:void initToggleArrays() -> c
    89:110:cn.com.codesec.scan.util.archer.Solver$MBoolean add(cn.com.codesec.scan.util.archer.Constraint) -> a
    115:123:cn.com.codesec.scan.util.archer.Solver$MBoolean addConst(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Const) -> a
    128:161:cn.com.codesec.scan.util.archer.Solver$MBoolean addConstInequal(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Const) -> b
    166:183:cn.com.codesec.scan.util.archer.Solver$MBoolean addConstBound(cn.com.codesec.scan.util.archer.Solver$BoundType,int,long) -> a
    187:199:long solveForConst(cn.com.codesec.scan.util.archer.Linear,long) -> a
    203:215:long solveForConstCeiling(cn.com.codesec.scan.util.archer.Linear,long) -> b
    219:226:cn.com.codesec.scan.util.archer.Solver$MBoolean addSymbolic(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Deriv) -> a
    231:245:cn.com.codesec.scan.util.archer.Expr getCanonical(cn.com.codesec.scan.util.archer.Expr) -> a
    250:254:cn.com.codesec.scan.util.archer.Solver$MBoolean replaceConst(int,cn.com.codesec.scan.util.archer.Const) -> a
    258:265:void pushConstBounds(cn.com.codesec.scan.util.archer.Solver$BoundType,int,cn.com.codesec.scan.util.archer.Const) -> a
    268:279:cn.com.codesec.scan.util.archer.Solver$MBoolean replaceSymbol(cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Deriv) -> a
    283:288:void pullConstBound(cn.com.codesec.scan.util.archer.Solver$BoundType,int,int,cn.com.codesec.scan.util.archer.Linear) -> a
    291:298:void pullSymbolicBounds(cn.com.codesec.scan.util.archer.Solver$BoundType,int,int,cn.com.codesec.scan.util.archer.Linear) -> b
    301:308:void pushSymbolicBounds(cn.com.codesec.scan.util.archer.Solver$BoundType,int,int,cn.com.codesec.scan.util.archer.Linear) -> c
    311:349:cn.com.codesec.scan.util.archer.Solver$MBoolean addSymbolicInequal(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Deriv) -> b
    354:354:cn.com.codesec.scan.util.archer.Linear plusOne(cn.com.codesec.scan.util.archer.Linear) -> a
    358:372:java.util.Set getBounds(java.util.Map,int,int) -> a
    376:381:java.util.Set getUsers(java.util.Map,int) -> a
    385:412:cn.com.codesec.scan.util.archer.Solver$MBoolean addSymbolicBound(cn.com.codesec.scan.util.archer.Solver$BoundType,int,int,cn.com.codesec.scan.util.archer.Linear) -> d
    416:416:cn.com.codesec.scan.util.archer.Linear solveForSymbolic(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> a
    420:423:cn.com.codesec.scan.util.archer.Linear composeInverseFloor(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> b
    427:430:cn.com.codesec.scan.util.archer.Linear composeInverse(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> c
    434:437:cn.com.codesec.scan.util.archer.Linear compose(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> d
    441:463:java.util.List check(cn.com.codesec.scan.util.archer.Constraint) -> b
    468:468:java.util.List checkConst(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Const) -> c
    472:472:java.util.List checkSymbolic(cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Deriv,cn.com.codesec.scan.util.archer.Deriv) -> c
    476:477:void dump(java.io.Writer,java.util.Map) -> a
    480:481:void dump(java.io.PrintStream,java.util.Map) -> a
    484:492:void dump(cn.com.codesec.util.IndentPrinter,java.util.Map) -> a
    495:498:void dumpConst(java.io.PrintWriter,java.util.Map,java.util.Map,cn.com.codesec.scan.util.archer.Solver$BoundType) -> a
    501:505:java.lang.String getVarName(java.util.Map,java.lang.Integer) -> a
    509:523:void dumpSymbolic(java.io.PrintWriter,java.util.Map,java.util.Map,cn.com.codesec.scan.util.archer.Solver$BoundType) -> b
    22:22:int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$RelOp() -> a
    22:22:int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$Solver$MBoolean() -> b
cn.com.codesec.scan.util.archer.Solver$BoundType -> cn.com.codesec.Rq:
    cn.com.codesec.scan.util.archer.Solver$BoundType LOWER -> a
    cn.com.codesec.scan.util.archer.Solver$BoundType UPPER -> b
    cn.com.codesec.scan.util.archer.RelOp op -> c
    cn.com.codesec.scan.util.archer.Solver$MLinearComparator stronger -> d
    boolean $assertionsDisabled -> e
    cn.com.codesec.scan.util.archer.Solver$BoundType[] ENUM$VALUES -> f
    530:533:void <clinit>() -> <clinit>
    538:541:void <init>(java.lang.String,int,cn.com.codesec.scan.util.archer.RelOp,cn.com.codesec.scan.util.archer.Solver$MLinearComparator) -> <init>
    544:551:cn.com.codesec.scan.util.archer.Solver$BoundType opposite() -> a
    1:1:cn.com.codesec.scan.util.archer.Solver$BoundType[] values() -> values
    1:1:cn.com.codesec.scan.util.archer.Solver$BoundType valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.util.archer.Solver$MBoolean -> cn.com.codesec.Rr:
    cn.com.codesec.scan.util.archer.Solver$MBoolean TRUE -> a
    cn.com.codesec.scan.util.archer.Solver$MBoolean FALSE -> b
    cn.com.codesec.scan.util.archer.Solver$MBoolean MAYBE -> c
    boolean $assertionsDisabled -> d
    int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$Solver$MBoolean -> e
    cn.com.codesec.scan.util.archer.Solver$MBoolean[] ENUM$VALUES -> f
    555:559:void <clinit>() -> <clinit>
    555:555:void <init>(java.lang.String,int) -> <init>
    562:562:cn.com.codesec.scan.util.archer.Solver$MBoolean mk(boolean) -> a
    566:574:cn.com.codesec.scan.util.archer.Solver$MBoolean and(cn.com.codesec.scan.util.archer.Solver$MBoolean,cn.com.codesec.scan.util.archer.Solver$MBoolean) -> a
    578:586:cn.com.codesec.scan.util.archer.Solver$MBoolean or(cn.com.codesec.scan.util.archer.Solver$MBoolean,cn.com.codesec.scan.util.archer.Solver$MBoolean) -> b
    590:599:cn.com.codesec.scan.util.archer.Solver$MBoolean inverse(cn.com.codesec.scan.util.archer.Solver$MBoolean) -> a
    1:1:cn.com.codesec.scan.util.archer.Solver$MBoolean[] values() -> values
    1:1:cn.com.codesec.scan.util.archer.Solver$MBoolean valueOf(java.lang.String) -> valueOf
    555:555:int[] $SWITCH_TABLE$cn$com$codesec$scan$util$archer$Solver$MBoolean() -> a
cn.com.codesec.scan.util.archer.Solver$MLinearComparator -> cn.com.codesec.Rs:
    cn.com.codesec.scan.util.archer.Solver$MLinearComparator GREATER_THAN -> a
    cn.com.codesec.scan.util.archer.Solver$MLinearComparator LESS_THAN -> b
    614:642:void <clinit>() -> <clinit>
    604:604:void <init>() -> <init>
    cn.com.codesec.scan.util.archer.Solver$MBoolean compare(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> a
    boolean compare(long,long) -> a
cn.com.codesec.scan.util.archer.Solver$MLinearComparator$1 -> cn.com.codesec.Rt:
    1:614:void <init>() -> <init>
    617:620:cn.com.codesec.scan.util.archer.Solver$MBoolean compare(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> a
    625:625:boolean compare(long,long) -> a
cn.com.codesec.scan.util.archer.Solver$MLinearComparator$2 -> cn.com.codesec.Ru:
    1:628:void <init>() -> <init>
    631:634:cn.com.codesec.scan.util.archer.Solver$MBoolean compare(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> a
    639:639:boolean compare(long,long) -> a
cn.com.codesec.scan.util.archer.Solver$Order -> cn.com.codesec.Rv:
    cn.com.codesec.scan.util.archer.Solver$MBoolean compare(cn.com.codesec.scan.util.archer.Linear,cn.com.codesec.scan.util.archer.Linear) -> a
cn.com.codesec.scan.util.collections.Bag -> cn.com.codesec.Rw:
    java.util.concurrent.ConcurrentMap map -> a
    20:22:void <init>(java.util.concurrent.ConcurrentMap) -> <init>
    25:26:void <init>() -> <init>
    29:30:int add(java.lang.Object,int) -> a
    34:34:int add(java.lang.Object) -> a
    38:39:void removeAll(java.lang.Object) -> b
    42:42:boolean contains(java.lang.Object) -> c
    46:50:int count(java.lang.Object) -> d
    55:55:java.lang.String toString() -> toString
    59:59:java.util.Iterator iterator() -> a
    63:63:java.util.Iterator iterator(boolean) -> a
    67:67:java.util.Set items() -> b
    71:71:int size() -> c
cn.com.codesec.scan.util.collections.Bag$MyIterator -> cn.com.codesec.Rx:
    java.util.Iterator mi -> a
    java.lang.Object current -> b
    java.util.concurrent.atomic.AtomicInteger currentCount -> c
    boolean iterateDistinctElements -> d
    81:86:void <init>(java.util.Iterator,boolean) -> <init>
    89:97:void prepareNext() -> a
    101:101:boolean hasNext() -> hasNext
    106:116:java.lang.Object next() -> next
    121:121:void remove() -> remove
cn.com.codesec.scan.util.collections.CodeMapping -> cn.com.codesec.Ry:
    int offset -> a
    java.lang.String[] strings -> b
    java.util.Map codes -> c
    java.lang.String defString -> d
    int defCode -> e
    18:30:void <init>(int,java.lang.String[],java.lang.String,int) -> <init>
    33:37:java.lang.String getString(int) -> a
    41:45:int getCode(java.lang.String) -> a
cn.com.codesec.scan.util.collections.CollectionUtil -> cn.com.codesec.Rz:
    java.util.Collection DISCARDING_COLLECTION -> a
    15:81:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
cn.com.codesec.scan.util.collections.CollectionUtil$1 -> cn.com.codesec.RA:
    1:15:void <init>() -> <init>
    18:18:int size() -> size
    23:23:boolean isEmpty() -> isEmpty
    28:28:boolean contains(java.lang.Object) -> contains
    33:33:java.util.Iterator iterator() -> iterator
    38:38:java.lang.Object[] toArray() -> toArray
    43:43:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    48:48:boolean add(java.lang.Object) -> add
    53:53:boolean remove(java.lang.Object) -> remove
    58:58:boolean containsAll(java.util.Collection) -> containsAll
    63:63:boolean addAll(java.util.Collection) -> addAll
    68:68:boolean removeAll(java.util.Collection) -> removeAll
    73:73:boolean retainAll(java.util.Collection) -> retainAll
    78:78:void clear() -> clear
cn.com.codesec.scan.util.collections.ConcurrentTightMap -> cn.com.codesec.RB:
    java.util.concurrent.locks.ReentrantReadWriteLock lock -> a
    int revision -> b
    24:27:void <init>() -> <init>
    31:31:java.util.Map mkBigData() -> a
    36:36:java.lang.Object cloneBigData() -> b
    41:47:int size() -> size
    52:58:boolean isEmpty() -> isEmpty
    63:72:boolean containsKey(java.lang.Object) -> containsKey
    77:86:boolean containsValue(java.lang.Object) -> containsValue
    91:97:java.lang.Object get(java.lang.Object) -> get
    102:114:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    119:131:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    136:149:void putAll(java.util.Map) -> putAll
    153:165:java.lang.Object remove(java.lang.Object) -> remove
    170:183:boolean remove(java.lang.Object,java.lang.Object) -> remove
    188:201:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    206:218:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    223:233:void clear() -> clear
    237:243:java.util.Collection values() -> values
    248:254:java.util.Set keySet() -> keySet
    259:259:java.util.Set entrySet() -> entrySet
    264:270:java.lang.Object clone() -> clone
    275:281:boolean equals(java.lang.Object) -> equals
    286:292:int hashCode() -> hashCode
    297:303:java.lang.String toString() -> toString
    21:21:java.util.concurrent.locks.ReentrantReadWriteLock access$0(cn.com.codesec.scan.util.collections.ConcurrentTightMap) -> a
    22:22:int access$1(cn.com.codesec.scan.util.collections.ConcurrentTightMap) -> b
cn.com.codesec.scan.util.collections.ConcurrentTightMap$EntrySet -> cn.com.codesec.RC:
    cn.com.codesec.scan.util.collections.ConcurrentTightMap this$0 -> a
    306:306:void <init>(cn.com.codesec.scan.util.collections.ConcurrentTightMap) -> <init>
    310:319:java.util.Iterator iterator() -> iterator
    324:324:int size() -> size
    306:306:void <init>(cn.com.codesec.scan.util.collections.ConcurrentTightMap,cn.com.codesec.scan.util.collections.ConcurrentTightMap$EntrySet) -> <init>
cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator -> cn.com.codesec.RD:
    int next -> b
    int atRevision -> c
    cn.com.codesec.scan.util.collections.ConcurrentTightMap this$0 -> a
    333:336:void <init>(cn.com.codesec.scan.util.collections.ConcurrentTightMap) -> <init>
    340:349:boolean hasNext() -> hasNext
    354:365:java.util.Map$Entry next() -> a
    369:378:boolean hasPrevious() -> b
    383:395:void remove() -> remove
    1:1:java.lang.Object next() -> next
    331:331:int access$1(cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator) -> a
    331:331:void access$2(cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator,int) -> a
    328:328:cn.com.codesec.scan.util.collections.ConcurrentTightMap access$3(cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator) -> b
cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator$ConcurrentTightMapEntry -> cn.com.codesec.RE:
    java.lang.Object key -> b
    cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator this$1 -> a
    401:403:void <init>(cn.com.codesec.scan.util.collections.ConcurrentTightMap$SmallIterator,java.lang.Object) -> <init>
    407:407:java.lang.Object getKey() -> getKey
    412:412:java.lang.Object getValue() -> getValue
    417:418:java.lang.Object setValue(java.lang.Object) -> setValue
    423:438:boolean equals(java.lang.Object) -> equals
    443:443:int hashCode() -> hashCode
cn.com.codesec.scan.util.collections.ConcurrentTightSet -> cn.com.codesec.RF:
    java.util.concurrent.locks.ReentrantReadWriteLock lock -> a
    int revision -> b
    21:24:void <init>() -> <init>
    28:34:int size() -> size
    39:45:boolean isEmpty() -> isEmpty
    50:56:boolean contains(java.lang.Object) -> contains
    61:67:java.lang.Object get(java.lang.Object) -> a
    72:85:boolean add(java.lang.Object) -> add
    90:100:boolean remove(java.lang.Object) -> remove
    105:111:boolean containsAll(java.util.Collection) -> containsAll
    116:129:boolean addAll(java.util.Collection) -> addAll
    134:144:boolean retainAll(java.util.Collection) -> retainAll
    149:162:boolean removeAll(java.util.Collection) -> removeAll
    167:177:void clear() -> clear
    181:187:boolean equals(java.lang.Object) -> equals
    192:198:int hashCode() -> hashCode
    203:209:java.lang.Object clone() -> clone
    214:220:java.lang.String toString() -> toString
    225:231:java.lang.Object[] toArray() -> toArray
    236:242:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    247:247:java.util.Map mkBigData() -> a
    252:252:java.lang.Object cloneBigData() -> b
    257:266:java.util.Iterator iterator() -> iterator
    19:19:int access$0(cn.com.codesec.scan.util.collections.ConcurrentTightSet) -> a
    18:18:java.util.concurrent.locks.ReentrantReadWriteLock access$1(cn.com.codesec.scan.util.collections.ConcurrentTightSet) -> b
cn.com.codesec.scan.util.collections.ConcurrentTightSet$SmallIterator -> cn.com.codesec.RG:
    int next -> b
    int atRevision -> c
    cn.com.codesec.scan.util.collections.ConcurrentTightSet this$0 -> a
    274:277:void <init>(cn.com.codesec.scan.util.collections.ConcurrentTightSet) -> <init>
    281:290:boolean hasNext() -> hasNext
    295:304:java.lang.Object next() -> next
    308:317:boolean hasPrevious() -> a
    322:336:void remove() -> remove
cn.com.codesec.scan.util.collections.DirectIndexMap -> cn.com.codesec.RH:
    java.lang.Object[] data -> a
    int size -> c
    boolean $assertionsDisabled -> b
    18:18:void <clinit>() -> <clinit>
    23:27:void <init>(int) -> <init>
    int getIndex(java.lang.Object) -> a
    33:34:java.lang.Object get(java.lang.Object) -> get
    39:46:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    51:60:void putAll(java.util.Map) -> putAll
    63:74:void putAll(cn.com.codesec.scan.util.collections.DirectIndexMap) -> a
    78:85:java.lang.Object remove(java.lang.Object) -> remove
    89:92:boolean containsEntry(java.util.Map$Entry) -> a
    96:104:boolean removeEntry(java.util.Map$Entry) -> b
    109:109:int size() -> size
    114:114:boolean isEmpty() -> isEmpty
    119:121:void clear() -> clear
    125:127:boolean containsKey(java.lang.Object) -> containsKey
    132:139:boolean containsValue(java.lang.Object) -> containsValue
    144:144:java.util.Collection values() -> values
    149:149:java.util.Set keySet() -> keySet
    154:154:java.util.Set entrySet() -> entrySet
    159:173:java.lang.String toString() -> toString
    21:21:int access$0(cn.com.codesec.scan.util.collections.DirectIndexMap) -> b
cn.com.codesec.scan.util.collections.DirectIndexMap$BaseIterator -> cn.com.codesec.RI:
    int pos -> b
    int rem -> c
    java.lang.Object[] data -> a
    351:356:void <init>(java.lang.Object[]) -> <init>
    359:362:void seekNextNonNull() -> a
    java.lang.Object get(int) -> a
    368:368:boolean hasNext() -> hasNext
    373:379:java.lang.Object next() -> next
    384:389:void remove() -> remove
cn.com.codesec.scan.util.collections.DirectIndexMap$MyCollection -> cn.com.codesec.RJ:
    cn.com.codesec.scan.util.collections.DirectIndexMap this$0 -> a
    317:317:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap) -> <init>
    321:321:java.util.Iterator iterator() -> iterator
    331:331:boolean contains(java.lang.Object) -> contains
    336:336:int size() -> size
    341:342:void clear() -> clear
    317:317:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap,cn.com.codesec.scan.util.collections.DirectIndexMap$MyCollection) -> <init>
cn.com.codesec.scan.util.collections.DirectIndexMap$MyCollection$1 -> cn.com.codesec.RK:
    cn.com.codesec.scan.util.collections.DirectIndexMap$MyCollection this$1 -> b
    1:321:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$MyCollection,java.lang.Object[]) -> <init>
    324:324:java.lang.Object get(int) -> a
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey -> cn.com.codesec.RL:
    179:180:void <init>(int) -> <init>
    java.lang.Object getKey(int) -> a
    186:186:java.util.Set entrySet() -> entrySet
    191:191:java.util.Set keySet() -> keySet
    196:212:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet -> cn.com.codesec.RM:
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey outer -> b
    boolean $assertionsDisabled -> a
    256:256:void <clinit>() -> <clinit>
    260:262:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey) -> <init>
    266:266:java.util.Iterator iterator() -> iterator
    295:296:boolean contains(java.lang.Object) -> contains
    301:302:boolean remove(java.lang.Object) -> remove
    307:307:int size() -> size
    312:313:void clear() -> clear
    258:258:cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey access$0(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet) -> a
    260:260:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey,cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet) -> <init>
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet$1 -> cn.com.codesec.RN:
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet this$2 -> b
    1:266:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet,java.lang.Object[]) -> <init>
    269:270:java.util.Map$Entry get(int) -> b
    1:1:java.lang.Object get(int) -> a
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet$1$1 -> cn.com.codesec.RO:
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet$1 this$3 -> a
    java.lang.Object val$key -> b
    int val$pos -> c
    1:270:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$EntrySet$1,java.lang.Object,int) -> <init>
    273:273:java.lang.Object getKey() -> getKey
    278:278:java.lang.Object getValue() -> getValue
    283:286:java.lang.Object setValue(java.lang.Object) -> setValue
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet -> cn.com.codesec.RP:
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey outer -> b
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey this$1 -> a
    219:221:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey,cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey) -> <init>
    225:225:java.util.Iterator iterator() -> iterator
    235:236:boolean contains(java.lang.Object) -> contains
    241:242:boolean remove(java.lang.Object) -> remove
    247:247:int size() -> size
    252:253:void clear() -> clear
    217:217:cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey access$0(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet) -> a
    219:219:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey,cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey,cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet) -> <init>
cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet$1 -> cn.com.codesec.RQ:
    cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet this$2 -> b
    1:225:void <init>(cn.com.codesec.scan.util.collections.DirectIndexMap$RecoverKey$KeySet,java.lang.Object[]) -> <init>
    228:228:java.lang.Object get(int) -> a
cn.com.codesec.scan.util.collections.EquivClassElt -> cn.com.codesec.RR:
    cn.com.codesec.scan.util.collections.EquivClassElt parent -> a
    cn.com.codesec.scan.util.collections.EquivClassElt next -> b
    cn.com.codesec.scan.util.collections.EquivClassElt tail -> c
    int rank -> d
    int size -> e
    18:24:void <init>() -> <init>
    27:27:cn.com.codesec.scan.util.collections.EquivClassElt getRepresentative() -> a
    31:31:int size() -> b
    35:58:void mergeClasses(cn.com.codesec.scan.util.collections.EquivClassElt) -> a
    62:62:java.util.Iterator iterator() -> iterator
    66:66:boolean isSingleton() -> c
    70:73:cn.com.codesec.scan.util.collections.EquivClassElt findRoot() -> d
    77:77:cn.com.codesec.scan.util.collections.EquivClassElt subclassCast(cn.com.codesec.scan.util.collections.EquivClassElt) -> c
    13:13:cn.com.codesec.scan.util.collections.EquivClassElt access$0(cn.com.codesec.scan.util.collections.EquivClassElt) -> b
    76:76:cn.com.codesec.scan.util.collections.EquivClassElt access$1(cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt) -> a
    13:13:void access$2(cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt) -> b
    14:14:void access$3(cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt) -> c
cn.com.codesec.scan.util.collections.EquivClassElt$EquivClassEltIter -> cn.com.codesec.RS:
    cn.com.codesec.scan.util.collections.EquivClassElt head -> b
    cn.com.codesec.scan.util.collections.EquivClassElt prev -> c
    cn.com.codesec.scan.util.collections.EquivClassElt cur -> d
    cn.com.codesec.scan.util.collections.EquivClassElt next -> e
    cn.com.codesec.scan.util.collections.EquivClassElt this$0 -> a
    87:93:void <init>(cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt) -> <init>
    97:97:boolean hasNext() -> hasNext
    102:108:cn.com.codesec.scan.util.collections.EquivClassElt next() -> a
    113:121:void remove() -> remove
    1:1:java.lang.Object next() -> next
    87:87:void <init>(cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt,cn.com.codesec.scan.util.collections.EquivClassElt$EquivClassEltIter) -> <init>
cn.com.codesec.scan.util.collections.FCache -> cn.com.codesec.RT:
    cn.com.codesec.scan.util.collections.FCache EMPTY -> a
    cn.com.codesec.util.fset.FMap map -> b
    123:124:void <clinit>() -> <clinit>
    22:22:cn.com.codesec.scan.util.collections.FCache empty() -> a
    25:27:void <init>() -> <init>
    29:31:void <init>(cn.com.codesec.util.fset.FMap) -> <init>
    35:35:java.lang.Object get(java.lang.Object) -> a
    40:40:cn.com.codesec.scan.util.collections.FCache with(java.lang.Object) -> b
    45:45:boolean contains(java.lang.Object) -> contains
    50:50:boolean containsAll(java.util.Collection) -> containsAll
    55:55:boolean isEmpty() -> isEmpty
    60:60:int size() -> size
    66:66:java.lang.Object[] toArray() -> toArray
    72:72:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    78:78:java.util.Iterator iterator() -> iterator
    83:83:java.lang.Object arb() -> b
    89:89:boolean add(java.lang.Object) -> add
    95:95:boolean addAll(java.util.Collection) -> addAll
    101:101:boolean remove(java.lang.Object) -> remove
    107:107:boolean removeAll(java.util.Collection) -> removeAll
    113:113:boolean retainAll(java.util.Collection) -> retainAll
    119:119:void clear() -> clear
cn.com.codesec.scan.util.collections.FCollectors -> cn.com.codesec.RU:
    cn.com.codesec.util.fset.FSet CONC -> a
    cn.com.codesec.util.fset.FSet CONC_UNORDERED -> b
    69:71:void <clinit>() -> <clinit>
    23:23:void <init>() -> <init>
    29:29:java.util.stream.Collector toList() -> a
    33:33:java.util.stream.Collector concatTo(cn.com.codesec.util.fset.FList) -> a
    37:37:java.util.stream.Collector listsToList() -> b
    41:41:java.util.stream.Collector toSet() -> c
    45:45:java.util.stream.Collector unionWith(cn.com.codesec.util.fset.FSet) -> a
    49:49:java.util.stream.Collector setsToSet() -> d
    53:53:java.util.stream.Collector toTreeSet() -> e
    57:57:java.util.stream.Collector toTreeSet(java.util.Comparator) -> a
    61:61:java.util.stream.Collector toHashSet() -> f
    65:65:java.util.stream.Collector toLinkedHashSet() -> g
cn.com.codesec.scan.util.collections.FCollectors$Accumulator -> cn.com.codesec.RV:
    java.lang.Object fobj -> a
    java.util.function.BiFunction adder -> b
    java.util.function.BiFunction merger -> c
    119:123:void <init>(java.lang.Object,java.util.function.BiFunction,java.util.function.BiFunction) -> <init>
    126:127:void add(java.lang.Object) -> a
    130:130:cn.com.codesec.scan.util.collections.FCollectors$Accumulator merge(cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> b
    134:134:java.lang.Object raw() -> a
    119:119:void <init>(java.lang.Object,java.util.function.BiFunction,java.util.function.BiFunction,cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> <init>
    125:125:void access$1(cn.com.codesec.scan.util.collections.FCollectors$Accumulator,java.lang.Object) -> a
    129:129:cn.com.codesec.scan.util.collections.FCollectors$Accumulator access$2(cn.com.codesec.scan.util.collections.FCollectors$Accumulator,cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> a
    133:133:java.lang.Object access$3(cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> a
cn.com.codesec.scan.util.collections.FCollectors$Impl -> cn.com.codesec.RW:
    cn.com.codesec.util.fset.FSet chars -> a
    java.lang.Object init -> b
    java.util.function.BiFunction adder -> c
    java.util.function.BiFunction merger -> d
    80:85:void <init>(java.lang.Object,java.util.function.BiFunction,java.util.function.BiFunction,cn.com.codesec.util.fset.FSet) -> <init>
    89:89:java.util.function.Supplier supplier() -> supplier
    94:94:java.util.function.BiConsumer accumulator() -> accumulator
    99:99:java.util.function.BinaryOperator combiner() -> combiner
    104:104:java.util.function.Function finisher() -> finisher
    109:109:java.util.Set characteristics() -> characteristics
    80:80:void <init>(java.lang.Object,java.util.function.BiFunction,java.util.function.BiFunction,cn.com.codesec.util.fset.FSet,cn.com.codesec.scan.util.collections.FCollectors$Impl) -> <init>
    89:89:cn.com.codesec.scan.util.collections.FCollectors$Accumulator lambda$0() -> a
    94:94:void lambda$1(cn.com.codesec.scan.util.collections.FCollectors$Accumulator,java.lang.Object) -> a
    99:99:cn.com.codesec.scan.util.collections.FCollectors$Accumulator lambda$2(cn.com.codesec.scan.util.collections.FCollectors$Accumulator,cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> a
    104:104:java.lang.Object lambda$3(cn.com.codesec.scan.util.collections.FCollectors$Accumulator) -> a
cn.com.codesec.scan.util.collections.FieldMap -> cn.com.codesec.RX:
    cn.com.codesec.scan.util.collections.FieldMap$Node top -> b
    int INITIAL_HASH_MAP_CAPACITY -> c
    int HASH_MAP_CAPACITY_MULTIPLIER_NUMERATOR -> d
    int HASH_MAP_CAPACITY_MULTIPLIER_DENOMINATOR -> e
    boolean $assertionsDisabled -> a
    23:28:void <clinit>() -> <clinit>
    31:32:void <init>() -> <init>
    34:37:void <init>(cn.com.codesec.scan.util.collections.FieldMap$Node) -> <init>
    40:41:void put(java.util.Iterator,java.lang.Object) -> a
    44:46:void put(java.util.Iterator,java.lang.Object,java.util.Collection) -> a
    49:50:void put(java.lang.Iterable,java.lang.Object) -> a
    53:55:void put(java.lang.Iterable,java.lang.Object,java.util.Collection) -> a
    58:84:cn.com.codesec.scan.util.collections.FieldMap$Node putDeep(cn.com.codesec.scan.util.collections.FieldMap$Node,java.util.Iterator,java.lang.Object,java.util.Collection) -> a
    88:91:cn.com.codesec.scan.util.collections.FieldMap$Node mkPathWithLeafValue(java.util.Iterator,java.lang.Object) -> b
    95:96:void setPath(java.util.Iterator,java.util.Iterator) -> a
    99:120:cn.com.codesec.scan.util.collections.FieldMap$Node setDeep(cn.com.codesec.scan.util.collections.FieldMap$Node,java.util.Iterator,java.util.Iterator) -> a
    124:132:cn.com.codesec.scan.util.collections.FieldMap$Node mkPathWithValues(java.util.Iterator,java.util.Iterator) -> b
    136:163:cn.com.codesec.scan.util.collections.FieldMap$Match get(java.util.Iterator) -> a
    167:184:java.lang.Object getV(java.util.Iterator) -> b
    188:188:cn.com.codesec.scan.util.collections.FieldMap$Match get(java.lang.Iterable) -> a
    192:192:java.lang.Object getV(java.lang.Iterable) -> b
    196:223:void remove(java.util.Iterator) -> c
    226:227:void remove(java.lang.Iterable) -> c
    231:231:java.util.Iterator iterator() -> iterator
    236:240:boolean equals(java.lang.Object) -> equals
    244:245:boolean equals(cn.com.codesec.scan.util.collections.FieldMap) -> a
    250:253:int hashCode() -> hashCode
    257:257:cn.com.codesec.scan.util.collections.FieldMap copy() -> a
    261:264:cn.com.codesec.scan.util.collections.FieldMap$Node copyNode(cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    268:275:java.util.HashMap copyMap(java.util.HashMap) -> a
    279:279:cn.com.codesec.scan.util.collections.FieldMap map(cn.com.codesec.util.Func) -> a
    283:290:cn.com.codesec.scan.util.collections.FieldMap$Node mapNode(cn.com.codesec.util.Func,cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    294:301:java.util.HashMap mapMap(cn.com.codesec.util.Func,java.util.HashMap) -> a
    305:309:cn.com.codesec.scan.util.collections.FieldMap destructiveMerge(cn.com.codesec.scan.util.Func2,cn.com.codesec.scan.util.collections.FieldMap,cn.com.codesec.scan.util.collections.FieldMap) -> a
    313:347:cn.com.codesec.scan.util.collections.FieldMap$Node destructiveMergeRec(cn.com.codesec.scan.util.Func2,cn.com.codesec.scan.util.collections.FieldMap$Node,cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    351:352:void putAll(cn.com.codesec.scan.util.collections.FieldMap) -> b
    355:373:cn.com.codesec.scan.util.collections.FieldMap$Node putAllRec(cn.com.codesec.scan.util.collections.FieldMap$Node,cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    377:381:java.lang.String dump() -> b
    385:387:void dump(java.io.PrintWriter) -> a
    390:391:void dump(cn.com.codesec.util.IndentPrinter) -> a
    394:414:void dump(cn.com.codesec.util.IndentPrinter,cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    417:417:java.util.HashMap mkMap() -> d
    421:421:java.util.HashMap mkMap(int) -> a
    425:427:int calcHashMapCapacity(int) -> b
    416:416:java.util.HashMap access$0() -> c
cn.com.codesec.scan.util.collections.FieldMap$IteratorImpl -> cn.com.codesec.RY:
    cn.com.codesec.scan.util.collections.FieldMap$IteratorImpl$Marker current -> b
    boolean $assertionsDisabled -> a
    549:549:void <clinit>() -> <clinit>
    553:561:void <init>(cn.com.codesec.scan.util.collections.FieldMap$Node) -> <init>
    565:566:boolean hasNext() -> hasNext
    571:588:java.lang.Object next() -> next
    593:593:void remove() -> remove
cn.com.codesec.scan.util.collections.FieldMap$IteratorImpl$Marker -> cn.com.codesec.RZ:
    cn.com.codesec.scan.util.collections.FieldMap$IteratorImpl$Marker parent -> a
    java.util.Iterator iterator -> b
    boolean $assertionsDisabled -> c
    596:596:void <clinit>() -> <clinit>
    601:610:void <init>(cn.com.codesec.scan.util.collections.FieldMap$IteratorImpl$Marker,java.util.Iterator) -> <init>
cn.com.codesec.scan.util.collections.FieldMap$Match -> cn.com.codesec.Sa:
    java.lang.Object value -> a
    int depth -> b
    boolean $assertionsDisabled -> c
    518:518:void <clinit>() -> <clinit>
    523:527:void <init>(java.lang.Object,int) -> <init>
    531:531:boolean equals(java.lang.Object) -> equals
    535:535:boolean equals(cn.com.codesec.scan.util.collections.FieldMap$Match) -> a
    540:540:int hashCode() -> hashCode
    545:545:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.FieldMap$Node -> cn.com.codesec.Sb:
    java.lang.Object value -> b
    java.util.HashMap sub -> c
    boolean $assertionsDisabled -> a
    430:430:void <clinit>() -> <clinit>
    436:440:void <init>(java.lang.Object) -> <init>
    442:445:void <init>(java.lang.Object,java.util.HashMap) -> <init>
    448:450:java.util.HashMap mkMap(java.lang.Object,cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    455:459:boolean equals(java.lang.Object) -> equals
    463:463:boolean equals(cn.com.codesec.scan.util.collections.FieldMap$Node) -> a
    468:475:int hashCode() -> hashCode
    479:481:boolean isLeaf() -> a
    485:488:boolean eq(java.lang.Object,java.lang.Object) -> a
    492:494:void set(java.lang.Object) -> a
    497:497:java.lang.Object get() -> b
    501:501:java.lang.Object getValue() -> c
    505:506:void setValue(java.lang.Object) -> b
    509:509:java.util.HashMap getSub() -> d
    513:514:java.util.HashMap setSub(java.util.HashMap) -> a
cn.com.codesec.scan.util.collections.GMultiMap -> cn.com.codesec.Sc:
    java.lang.Class collClass -> a
    java.util.Map map -> b
    26:27:void <init>() -> <init>
    30:31:void <init>(java.lang.Class) -> <init>
    33:36:void <init>(java.lang.Class,java.util.Map) -> <init>
    39:39:boolean putIntoList(java.lang.Object,java.lang.Object) -> a
    43:48:boolean putIntoCollection(java.lang.Object,java.lang.Object) -> b
    52:56:boolean putAll(java.lang.Object,java.util.Collection) -> a
    60:61:java.util.List getList(java.lang.Object) -> a
    65:65:java.util.Collection remove(java.lang.Object) -> b
    69:69:java.util.Collection getCollection(java.lang.Object) -> c
    73:74:void clear() -> b
    77:84:void mergeFrom(cn.com.codesec.scan.util.collections.GMultiMap) -> a
    87:87:boolean isEmpty() -> c
    91:91:java.util.Set entrySet() -> d
    95:95:java.util.Set keySet() -> e
    99:99:java.util.Collection values() -> f
    104:104:java.lang.String toString() -> toString
    109:116:boolean equals(java.lang.Object) -> equals
    121:121:int hashCode() -> hashCode
    126:130:java.util.Collection getNewCollectionInstance() -> g
cn.com.codesec.scan.util.collections.GMultiMap$Concurrent -> cn.com.codesec.Sd:
    148:149:void <init>(java.lang.Class) -> <init>
    153:154:boolean putIntoCollection(java.lang.Object,java.lang.Object) -> b
    160:164:java.util.Collection getNewCollectionInstance() -> g
cn.com.codesec.scan.util.collections.GMultiMap$Linked -> cn.com.codesec.Se:
    137:138:void <init>() -> <init>
    141:142:void <init>(java.lang.Class) -> <init>
cn.com.codesec.scan.util.collections.GTwoWayMap -> cn.com.codesec.Sf:
    java.util.Map forward -> a
    java.util.Map reverse -> b
    16:19:void <init>() -> <init>
    21:24:void <init>(int) -> <init>
    27:28:java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    32:34:void putAll(cn.com.codesec.scan.util.collections.GTwoWayMap) -> a
    37:37:java.lang.Object get(java.lang.Object) -> a
    41:41:java.lang.Object getKey(java.lang.Object) -> b
    45:45:int size() -> a
    49:49:boolean isEmpty() -> b
    53:53:java.util.Set keySet() -> c
    57:57:java.util.Set valueSet() -> d
    61:61:boolean containsKey(java.lang.Object) -> c
    65:65:boolean containsValue(java.lang.Object) -> d
    69:71:void clear() -> e
    75:75:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.GrowingArray -> cn.com.codesec.Sg:
    java.lang.Object[] elements -> b
    boolean $assertionsDisabled -> a
    11:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.Object[]) -> <init>
    21:24:java.lang.Object get(int) -> a
    28:36:void put(int,java.lang.Object) -> a
    39:39:int length() -> a
    43:43:java.lang.Object[] getElements() -> b
    47:48:void setElements(java.lang.Object[]) -> a
cn.com.codesec.scan.util.collections.IdentityHashSet -> cn.com.codesec.Sh:
    java.lang.Object PRESENT -> a
    java.util.IdentityHashMap map -> b
    70:71:void <clinit>() -> <clinit>
    16:18:void <init>() -> <init>
    22:22:boolean add(java.lang.Object) -> add
    27:27:boolean remove(java.lang.Object) -> remove
    32:32:int size() -> size
    37:37:boolean isEmpty() -> isEmpty
    42:43:void clear() -> clear
    47:47:java.util.Iterator iterator() -> iterator
    52:52:boolean contains(java.lang.Object) -> contains
    57:57:int hashCode() -> hashCode
    62:66:boolean equals(java.lang.Object) -> equals
cn.com.codesec.scan.util.collections.IndexMap -> cn.com.codesec.Si:
    java.util.Map map -> b
    java.util.List list -> c
    int base -> d
    boolean $assertionsDisabled -> a
    17:17:void <clinit>() -> <clinit>
    24:25:void <init>() -> <init>
    27:31:void <init>(int) -> <init>
    34:34:java.lang.Integer get(java.lang.Object) -> a
    38:38:boolean containsKey(java.lang.Object) -> b
    42:46:java.lang.Integer getOrAdd(java.lang.Object) -> c
    50:52:void clear() -> a
    55:56:int size() -> b
    60:63:java.lang.Integer put(java.lang.Object) -> d
    67:67:java.lang.Object getKey(int) -> a
    72:72:java.util.Iterator iterator() -> iterator
    20:20:java.util.List access$0(cn.com.codesec.scan.util.collections.IndexMap) -> a
    21:21:int access$1(cn.com.codesec.scan.util.collections.IndexMap) -> b
cn.com.codesec.scan.util.collections.IndexMap$1 -> cn.com.codesec.Sj:
    int next -> b
    cn.com.codesec.scan.util.collections.IndexMap this$0 -> a
    1:73:void <init>(cn.com.codesec.scan.util.collections.IndexMap) -> <init>
    77:77:boolean hasNext() -> hasNext
    82:87:org.apache.commons.lang3.tuple.Pair next() -> a
    93:93:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.util.collections.IteratorUtil -> cn.com.codesec.Sk:
    10:10:void <init>() -> <init>
    13:13:java.lang.Iterable iterable(java.util.Iterator) -> a
    22:31:java.util.Iterator concatIterator(java.util.Iterator[]) -> a
    62:62:java.util.Iterator singletonIterator(java.lang.Object) -> a
    87:87:java.util.Iterator emptyIterator() -> a
cn.com.codesec.scan.util.collections.IteratorUtil$1 -> cn.com.codesec.Sl:
    java.util.Iterator val$iterator -> a
    1:13:void <init>(java.util.Iterator) -> <init>
    16:16:java.util.Iterator iterator() -> iterator
cn.com.codesec.scan.util.collections.IteratorUtil$2 -> cn.com.codesec.Sm:
    int currentIndex -> a
    java.util.Iterator previousIterator -> b
    java.util.Iterator currentIterator -> c
    java.util.Iterator[] val$inputs -> d
    1:34:void <init>(int,java.util.Iterator,java.util.Iterator[]) -> <init>
    38:38:boolean hasNext() -> hasNext
    43:48:java.lang.Object next() -> next
    53:57:void remove() -> remove
cn.com.codesec.scan.util.collections.IteratorUtil$3 -> cn.com.codesec.Sn:
    boolean hasNext -> a
    java.lang.Object val$input -> b
    1:63:void <init>(java.lang.Object) -> <init>
    67:67:boolean hasNext() -> hasNext
    72:76:java.lang.Object next() -> next
    81:81:void remove() -> remove
cn.com.codesec.scan.util.collections.IteratorUtil$4 -> cn.com.codesec.So:
    1:87:void <init>() -> <init>
    90:90:boolean hasNext() -> hasNext
    95:95:java.lang.Object next() -> next
    100:100:void remove() -> remove
cn.com.codesec.scan.util.collections.LockingLinkedHashSet -> cn.com.codesec.Sp:
    cn.com.codesec.util.fset.FLinkedHashSet set -> a
    21:23:void <init>() -> <init>
    27:27:cn.com.codesec.util.fset.FLinkedHashSet immutableView() -> a
    32:34:boolean add(java.lang.Object) -> add
    39:41:boolean addAll(java.util.Collection) -> addAll
    46:47:void clear() -> clear
    51:51:boolean contains(java.lang.Object) -> contains
    56:56:boolean containsAll(java.util.Collection) -> containsAll
    61:61:boolean isEmpty() -> isEmpty
    67:67:java.util.Iterator iterator() -> iterator
    72:77:boolean remove(java.lang.Object) -> remove
    82:89:boolean removeAll(java.util.Collection) -> removeAll
    94:109:boolean retainAll(java.util.Collection) -> retainAll
    114:114:int size() -> size
    120:120:java.lang.Object[] toArray() -> toArray
    126:126:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
cn.com.codesec.scan.util.collections.LockingList -> cn.com.codesec.Sq:
    cn.com.codesec.util.fset.FList list -> a
    22:24:void <init>() -> <init>
    29:29:java.util.Iterator iterator() -> iterator
    35:35:java.util.ListIterator listIterator() -> listIterator
    41:41:java.util.ListIterator listIterator(int) -> listIterator
    46:46:java.lang.Object get(int) -> get
    51:51:boolean contains(java.lang.Object) -> contains
    56:56:boolean containsAll(java.util.Collection) -> containsAll
    61:61:int size() -> size
    66:66:boolean isEmpty() -> isEmpty
    72:72:java.util.List subList(int,int) -> subList
    78:78:java.lang.Object[] toArray() -> toArray
    84:84:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    89:89:cn.com.codesec.util.fset.FList immutableView() -> a
    94:95:boolean add(java.lang.Object) -> add
    100:101:void add(int,java.lang.Object) -> add
    105:106:boolean addAll(java.util.Collection) -> addAll
    111:112:boolean addAll(int,java.util.Collection) -> addAll
    117:122:java.lang.Object set(int,java.lang.Object) -> set
    127:129:java.lang.Object remove(int) -> remove
    134:139:boolean remove(java.lang.Object) -> remove
    144:152:boolean removeAll(java.util.Collection) -> removeAll
    157:170:boolean retainAll(java.util.Collection) -> retainAll
    175:176:void clear() -> clear
    181:181:int indexOf(java.lang.Object) -> indexOf
    187:187:int lastIndexOf(java.lang.Object) -> lastIndexOf
cn.com.codesec.scan.util.collections.LockingMap -> cn.com.codesec.Sr:
    cn.com.codesec.util.fset.FMap map -> a
    24:26:void <init>() -> <init>
    28:30:void <init>(cn.com.codesec.util.fset.FMap) -> <init>
    34:34:boolean containsKey(java.lang.Object) -> containsKey
    39:39:boolean containsValue(java.lang.Object) -> containsValue
    45:45:java.util.Set entrySet() -> entrySet
    51:51:java.lang.Object get(java.lang.Object) -> get
    57:57:java.util.Set keySet() -> keySet
    62:62:cn.com.codesec.util.fset.FMap immutableView() -> a
    67:67:boolean isEmpty() -> isEmpty
    72:72:int size() -> size
    78:78:java.util.Collection values() -> values
    83:84:void clear() -> clear
    88:100:java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    107:117:java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    121:138:boolean mergeB(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> a
    144:146:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    151:152:void putAll(java.util.Map) -> putAll
    157:159:java.lang.Object remove(java.lang.Object) -> remove
    164:164:int hashCode() -> hashCode
    169:169:boolean equals(java.lang.Object) -> equals
    173:174:void putI(java.lang.Object,java.lang.Object) -> a
    178:178:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.LockingSet -> cn.com.codesec.Ss:
    cn.com.codesec.util.fset.FSet set -> a
    22:24:void <init>() -> <init>
    28:28:cn.com.codesec.util.fset.FSet immutableView() -> a
    33:33:boolean contains(java.lang.Object) -> contains
    38:38:boolean containsAll(java.util.Collection) -> containsAll
    43:43:boolean isEmpty() -> isEmpty
    49:49:java.util.Iterator iterator() -> iterator
    54:54:int size() -> size
    60:60:java.lang.Object[] toArray() -> toArray
    66:66:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    71:73:boolean add(java.lang.Object) -> add
    78:80:boolean addAll(java.util.Collection) -> addAll
    85:86:void clear() -> clear
    90:92:boolean remove(java.lang.Object) -> remove
    97:99:boolean removeAll(java.util.Collection) -> removeAll
    104:111:boolean removeIf(java.util.function.Predicate) -> removeIf
    116:118:boolean retainAll(java.util.Collection) -> retainAll
cn.com.codesec.scan.util.collections.PrependIterable -> cn.com.codesec.St:
    java.util.Iterator child -> a
    java.lang.Object[] prepend -> b
    14:17:void <init>(java.lang.Iterable,java.lang.Object[]) -> <init>
    21:21:java.util.Iterator iterator() -> iterator
    12:12:java.lang.Object[] access$0(cn.com.codesec.scan.util.collections.PrependIterable) -> a
    11:11:java.util.Iterator access$1(cn.com.codesec.scan.util.collections.PrependIterable) -> b
cn.com.codesec.scan.util.collections.PrependIterable$1 -> cn.com.codesec.Su:
    int prependIndex -> b
    cn.com.codesec.scan.util.collections.PrependIterable this$0 -> a
    1:22:void <init>(cn.com.codesec.scan.util.collections.PrependIterable) -> <init>
    26:26:boolean hasNext() -> hasNext
    31:34:java.lang.Object next() -> next
    39:39:void remove() -> remove
cn.com.codesec.scan.util.collections.ThreadSafe -> cn.com.codesec.Sv:
cn.com.codesec.scan.util.collections.TightMap -> cn.com.codesec.Sw:
    int THRESHOLD -> a
    java.lang.Object data -> b
    26:28:void <init>() -> <init>
    32:32:int size() -> size
    37:37:boolean isEmpty() -> isEmpty
    42:56:boolean containsKey(java.lang.Object) -> containsKey
    61:75:boolean containsValue(java.lang.Object) -> containsValue
    80:94:java.lang.Object get(java.lang.Object) -> get
    99:133:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    137:137:java.util.Map mkBigData() -> a
    141:141:java.lang.Object cloneBigData() -> b
    146:180:java.lang.Object remove(java.lang.Object) -> remove
    185:193:void putAll(java.util.Map) -> putAll
    197:205:java.util.Set keySet() -> keySet
    210:218:java.util.Collection values() -> values
    223:223:java.util.Set entrySet() -> entrySet
    228:229:void clear() -> clear
    232:232:boolean isSmall() -> c
    236:236:java.util.Map bigData() -> d
    240:240:java.lang.Object[] smallData() -> e
    245:252:java.lang.Object clone() -> clone
    257:267:boolean equals(java.lang.Object) -> equals
    272:279:int hashCode() -> hashCode
    284:290:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.TightMap$EntrySet -> cn.com.codesec.Sx:
    cn.com.codesec.scan.util.collections.TightMap this$0 -> a
    306:306:void <init>(cn.com.codesec.scan.util.collections.TightMap) -> <init>
    310:313:java.util.Iterator iterator() -> iterator
    318:318:int size() -> size
    306:306:void <init>(cn.com.codesec.scan.util.collections.TightMap,cn.com.codesec.scan.util.collections.TightMap$EntrySet) -> <init>
    306:306:cn.com.codesec.scan.util.collections.TightMap access$1(cn.com.codesec.scan.util.collections.TightMap$EntrySet) -> a
cn.com.codesec.scan.util.collections.TightMap$EntrySet$SmallIterator -> cn.com.codesec.Sy:
    int next -> a
    cn.com.codesec.scan.util.collections.TightMap$EntrySet this$1 -> b
    325:327:void <init>(cn.com.codesec.scan.util.collections.TightMap$EntrySet) -> <init>
    331:331:boolean hasNext() -> hasNext
    336:341:java.util.Map$Entry next() -> a
    346:351:void remove() -> remove
    1:1:java.lang.Object next() -> next
    325:325:void <init>(cn.com.codesec.scan.util.collections.TightMap$EntrySet,cn.com.codesec.scan.util.collections.TightMap$EntrySet$SmallIterator) -> <init>
cn.com.codesec.scan.util.collections.TightMap$Linked -> cn.com.codesec.Sz:
    293:293:void <init>() -> <init>
    297:297:java.util.Map mkBigData() -> a
    302:302:java.lang.Object cloneBigData() -> b
cn.com.codesec.scan.util.collections.TightMap$TightMapEntry -> cn.com.codesec.SA:
    java.lang.Object key -> b
    java.lang.Object value -> c
    cn.com.codesec.scan.util.collections.TightMap this$0 -> a
    360:363:void <init>(cn.com.codesec.scan.util.collections.TightMap,java.lang.Object,java.lang.Object) -> <init>
    367:367:java.lang.Object getKey() -> getKey
    372:372:java.lang.Object getValue() -> getValue
    377:378:java.lang.Object setValue(java.lang.Object) -> setValue
    383:409:boolean equals(java.lang.Object) -> equals
    414:416:int hashCode() -> hashCode
cn.com.codesec.scan.util.collections.TightSet -> cn.com.codesec.SB:
    int THRESHOLD -> a
    java.lang.Object data -> b
    24:26:void <init>() -> <init>
    28:31:void <init>(java.lang.Object) -> <init>
    35:35:int size() -> size
    40:40:boolean isEmpty() -> isEmpty
    45:54:boolean contains(java.lang.Object) -> contains
    59:89:java.util.Iterator iterator() -> iterator
    94:94:java.lang.Object[] toArray() -> toArray
    99:107:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    111:121:java.lang.Object get(java.lang.Object) -> a
    125:125:java.util.Map mkBigData() -> a
    129:129:java.lang.Object cloneBigData() -> b
    134:162:boolean add(java.lang.Object) -> add
    167:189:boolean remove(java.lang.Object) -> remove
    194:199:boolean containsAll(java.util.Collection) -> containsAll
    204:210:boolean addAll(java.util.Collection) -> addAll
    215:215:boolean retainAll(java.util.Collection) -> retainAll
    220:226:boolean removeAll(java.util.Collection) -> removeAll
    231:232:void clear() -> clear
    235:235:boolean isSmall() -> c
    239:239:java.util.Map bigData() -> d
    243:243:java.lang.Object[] smallData() -> e
    248:263:boolean equals(java.lang.Object) -> equals
    268:275:int hashCode() -> hashCode
    281:288:java.lang.Object clone() -> clone
    294:294:java.lang.String toString() -> toString
cn.com.codesec.scan.util.collections.TightSet$1 -> cn.com.codesec.SC:
    java.lang.Object[] data -> b
    int next -> c
    cn.com.codesec.scan.util.collections.TightSet this$0 -> a
    1:62:void <init>(cn.com.codesec.scan.util.collections.TightSet) -> <init>
    66:66:boolean hasNext() -> hasNext
    71:74:java.lang.Object next() -> next
    79:86:void remove() -> remove
cn.com.codesec.scan.util.collections.TightSet$Linked -> cn.com.codesec.SD:
    297:297:void <init>() -> <init>
    301:301:java.util.Map mkBigData() -> a
cn.com.codesec.scan.util.collections.WMultiMap -> cn.com.codesec.SE:
    java.util.HashMap table -> b
    boolean $assertionsDisabled -> a
    13:13:void <clinit>() -> <clinit>
    17:19:void <init>() -> <init>
    22:26:boolean put(java.lang.Object,java.util.Set) -> a
    30:34:boolean removeValues(java.lang.Object,java.util.Set) -> b
    38:38:java.util.Set remove(java.lang.Object) -> a
    42:43:void clear() -> a
    46:46:java.util.Set keySet() -> b
    50:50:java.util.Collection values() -> c
    54:54:java.util.Set entrySet() -> d
    58:58:int size() -> e
    62:62:boolean isEmpty() -> f
    66:66:boolean containsKey(java.lang.Object) -> b
    70:75:boolean containsValue(java.lang.Comparable) -> a
    79:79:boolean containsValue(java.lang.Object) -> c
    83:83:java.util.Set get(java.lang.Object) -> d
    87:88:void putAll(java.util.Map) -> a
    91:96:boolean putOne(java.lang.Object,java.lang.Comparable) -> a
    100:101:boolean removeOne(java.lang.Object,java.lang.Comparable) -> b
cn.com.codesec.scan.util.graph.DGraph -> cn.com.codesec.SF:
    java.util.ArrayList nodes -> b
    boolean $assertionsDisabled -> a
    12:12:void <clinit>() -> <clinit>
    16:18:void <init>(java.util.ArrayList) -> <init>
    21:22:void <init>() -> <init>
    25:27:cn.com.codesec.scan.util.graph.DGraph$Node addNode(java.lang.Object) -> e
    31:31:cn.com.codesec.scan.util.graph.DGraph$Node addNode() -> c
    35:46:void removeNode(cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    49:49:boolean containsNode(cn.com.codesec.scan.util.graph.DGraph$Node) -> b
    53:53:int getNumNodes() -> d
    58:58:java.util.Iterator iterator() -> iterator
    90:98:boolean addEdge(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    102:103:void addEdges(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> b
    106:108:void addEdges(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    111:114:void addEdges(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    117:124:void addEdges(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node[]) -> a
    127:127:void addEdges(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node[]) -> a
    130:138:boolean removeEdgeMaybe(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> c
    142:144:boolean containsEdge(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph$Node) -> d
    148:149:void check(cn.com.codesec.scan.util.graph.DGraph$Node) -> g
    151:167:void <init>(cn.com.codesec.scan.util.graph.DGraph) -> <init>
    170:170:cn.com.codesec.scan.util.graph.DGraph copy() -> e
    174:176:cn.com.codesec.scan.util.graph.DGraph transpose() -> f
    180:185:void transposeInPlace() -> g
    189:190:int getNumOutgoing(cn.com.codesec.scan.util.graph.DGraph$Node) -> c
    195:196:java.lang.Iterable getOutgoing(cn.com.codesec.scan.util.graph.DGraph$Node) -> d
    201:202:int getNumIncoming(cn.com.codesec.scan.util.graph.DGraph$Node) -> e
    207:208:java.lang.Iterable getIncoming(cn.com.codesec.scan.util.graph.DGraph$Node) -> f
    213:213:java.util.Map createMap() -> a
    228:228:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
    1:1:java.lang.Iterable getOutgoing(java.lang.Object) -> a
    1:1:int getNumIncoming(java.lang.Object) -> b
    1:1:int getNumOutgoing(java.lang.Object) -> c
    1:1:java.lang.Iterable getIncoming(java.lang.Object) -> d
    14:14:java.util.ArrayList access$4(cn.com.codesec.scan.util.graph.DGraph) -> a
cn.com.codesec.scan.util.graph.DGraph$1 -> cn.com.codesec.SG:
    int pos -> a
    int rem -> b
    cn.com.codesec.scan.util.graph.DGraph this$0 -> c
    1:60:void <init>(cn.com.codesec.scan.util.graph.DGraph) -> <init>
    64:64:boolean hasNext() -> hasNext
    69:74:cn.com.codesec.scan.util.graph.DGraph$Node next() -> a
    79:85:void remove() -> remove
    1:1:java.lang.Object next() -> next
cn.com.codesec.scan.util.graph.DGraph$2 -> cn.com.codesec.SH:
    cn.com.codesec.scan.util.graph.DGraph this$0 -> c
    1:213:void <init>(cn.com.codesec.scan.util.graph.DGraph,int) -> <init>
    216:216:int getIndex(cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    221:221:cn.com.codesec.scan.util.graph.DGraph$Node getKey(int) -> b
    1:1:int getIndex(java.lang.Object) -> a
    1:1:java.lang.Object getKey(int) -> a
cn.com.codesec.scan.util.graph.DGraph$3 -> cn.com.codesec.SI:
    cn.com.codesec.scan.util.graph.DGraph this$0 -> a
    1:228:void <init>(cn.com.codesec.scan.util.graph.DGraph,int) -> <init>
    231:231:int getIndex(cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    1:1:int getIndex(java.lang.Object) -> b
cn.com.codesec.scan.util.graph.DGraph$Node -> cn.com.codesec.SJ:
    java.lang.Object value -> a
    int index -> b
    cn.com.codesec.scan.util.graph.DGraph owner -> c
    java.util.HashSet outgoing -> d
    java.util.HashSet incoming -> e
    244:250:void <init>(int,cn.com.codesec.scan.util.graph.DGraph,java.lang.Object) -> <init>
    254:254:java.lang.String toString() -> toString
    258:258:int getIndex() -> a
    262:262:java.lang.Object getValue() -> b
    266:267:void setValue(java.lang.Object) -> a
    244:244:void <init>(int,cn.com.codesec.scan.util.graph.DGraph,java.lang.Object,cn.com.codesec.scan.util.graph.DGraph$Node) -> <init>
    241:241:java.util.HashSet access$1(cn.com.codesec.scan.util.graph.DGraph$Node) -> a
    242:242:java.util.HashSet access$2(cn.com.codesec.scan.util.graph.DGraph$Node) -> b
    239:239:int access$3(cn.com.codesec.scan.util.graph.DGraph$Node) -> c
    239:239:void access$4(cn.com.codesec.scan.util.graph.DGraph$Node,int) -> a
    240:240:void access$5(cn.com.codesec.scan.util.graph.DGraph$Node,cn.com.codesec.scan.util.graph.DGraph) -> a
    240:240:cn.com.codesec.scan.util.graph.DGraph access$6(cn.com.codesec.scan.util.graph.DGraph$Node) -> d
    242:242:void access$7(cn.com.codesec.scan.util.graph.DGraph$Node,java.util.HashSet) -> a
    241:241:void access$8(cn.com.codesec.scan.util.graph.DGraph$Node,java.util.HashSet) -> b
cn.com.codesec.scan.util.graph.DefaultMapToInt -> cn.com.codesec.SK:
    java.util.Map mAp -> a
    15:17:void <init>() -> <init>
    21:25:int get(java.lang.Object) -> a
    30:31:void put(java.lang.Object,int) -> a
cn.com.codesec.scan.util.graph.DepthFirstTraverser -> cn.com.codesec.SL:
    boolean $assertionsDisabled -> a
    18:18:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    21:21:java.util.Iterator preOrder(cn.com.codesec.scan.util.graph.Graph,java.lang.Object) -> a
    25:25:java.util.Iterator preOrder(cn.com.codesec.scan.util.graph.Graph,java.lang.Object,boolean) -> a
    29:29:java.util.Iterator preOrder(cn.com.codesec.scan.util.graph.Graph,java.util.Iterator) -> a
    33:33:java.util.Iterator preOrder(cn.com.codesec.scan.util.graph.Graph,java.util.Iterator,boolean) -> a
    83:92:void generalizedDFS(cn.com.codesec.scan.util.graph.Graph,java.lang.Iterable,cn.com.codesec.scan.util.graph.DepthFirstTraverser$BasicListener) -> a
    95:111:void searchGraph(cn.com.codesec.scan.util.graph.Graph,java.util.Map,java.lang.Object,cn.com.codesec.scan.util.graph.DepthFirstTraverser$Frontier,cn.com.codesec.scan.util.graph.DepthFirstTraverser$BasicListener) -> a
    114:138:void dfs(cn.com.codesec.scan.util.graph.Graph,java.util.Map,java.lang.Object,cn.com.codesec.scan.util.graph.DepthFirstTraverser$BasicListener) -> a
    141:173:void runBasic(cn.com.codesec.scan.util.graph.Graph,java.lang.Object,cn.com.codesec.scan.util.graph.DepthFirstTraverser$BasicListener) -> a
    176:210:void runFull(cn.com.codesec.scan.util.graph.Graph,java.lang.Object,cn.com.codesec.scan.util.graph.DepthFirstTraverser$FullListener) -> a
cn.com.codesec.scan.util.graph.DepthFirstTraverser$1 -> cn.com.codesec.SM:
    java.util.Stack todo -> a
    int SEEN -> b
    cn.com.codesec.scan.util.graph.Graph$MapToInt mark -> c
    cn.com.codesec.scan.util.graph.Graph val$graph -> d
    1:46:void <init>(cn.com.codesec.scan.util.graph.Graph,java.util.Iterator,boolean) -> <init>
    53:53:boolean hasNext() -> hasNext
    58:63:java.lang.Object next() -> next
    67:73:void addChildren(java.lang.Object) -> a
    77:77:void remove() -> remove
cn.com.codesec.scan.util.graph.DepthFirstTraverser$2 -> cn.com.codesec.SN:
    java.util.Stack sTack -> a
    1:115:void <init>() -> <init>
    119:120:void push(java.lang.Object) -> a
    124:124:java.lang.Object pop() -> a
    129:129:boolean isEmpty() -> b
    134:135:void clear() -> c
cn.com.codesec.scan.util.graph.DepthFirstTraverser$BasicListener -> cn.com.codesec.SO:
    void startNode(java.lang.Object) -> a
    void finishNode(java.lang.Object) -> b
cn.com.codesec.scan.util.graph.DepthFirstTraverser$Frontier -> cn.com.codesec.SP:
    void push(java.lang.Object) -> a
    java.lang.Object pop() -> a
    boolean isEmpty() -> b
    void clear() -> c
cn.com.codesec.scan.util.graph.DepthFirstTraverser$FullListener -> cn.com.codesec.SQ:
    void treeEdge(java.lang.Object,java.lang.Object) -> a
    void crossEdge(java.lang.Object,java.lang.Object) -> b
    void backEdge(java.lang.Object,java.lang.Object) -> c
cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus -> cn.com.codesec.SR:
    cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus INIT -> a
    cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus ACTIVE -> b
    cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus FINISHED -> c
    cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus[] ENUM$VALUES -> d
    216:220:void <clinit>() -> <clinit>
    216:216:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus[] values() -> values
    1:1:cn.com.codesec.scan.util.graph.DepthFirstTraverser$NodeStatus valueOf(java.lang.String) -> valueOf
cn.com.codesec.scan.util.graph.DominanceIterative -> cn.com.codesec.SS:
    boolean $assertionsDisabled -> a
    18:18:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    21:21:java.util.Map calcIdoms(cn.com.codesec.scan.util.graph.Graph,java.util.Iterator) -> a
    25:63:java.util.Map calcIdoms(cn.com.codesec.scan.util.graph.Graph,java.util.ArrayList) -> a
    67:84:java.lang.Object intersect(cn.com.codesec.scan.util.graph.Graph$MapToInt,java.util.Map,java.lang.Object,java.lang.Object) -> a
    88:118:java.util.Map calcFrontiers(cn.com.codesec.scan.util.graph.Graph,java.util.Iterator,java.util.Map) -> a
    122:124:java.util.Map calcFrontiers(cn.com.codesec.scan.util.graph.Graph,cn.com.codesec.scan.util.graph.Graph,java.util.Iterator) -> a
    128:160:java.util.List dominanceOrder(cn.com.codesec.scan.util.graph.Graph,cn.com.codesec.scan.util.graph.Graph,java.util.List) -> a
    164:168:java.util.ArrayList iteratorToList(java.util.Iterator) -> a
cn.com.codesec.scan.util.graph.Graph -> cn.com.codesec.ST:
    java.lang.Iterable getOutgoing(java.lang.Object) -> a
    java.util.Map createMap() -> a
    cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
cn.com.codesec.scan.util.graph.Graph$MapToInt -> cn.com.codesec.SU:
    int get(java.lang.Object) -> a
    void put(java.lang.Object,int) -> a
cn.com.codesec.scan.util.graph.Graph$MapToInt$Direct -> cn.com.codesec.SV:
    int[] array -> a
    int getIndex(java.lang.Object) -> b
    30:32:void <init>(int) -> <init>
    36:36:int get(java.lang.Object) -> a
    41:42:void put(java.lang.Object,int) -> a
cn.com.codesec.scan.util.graph.GraphB -> cn.com.codesec.SW:
    java.lang.Iterable getIncoming(java.lang.Object) -> d
    int getNumIncoming(java.lang.Object) -> b
    int getNumOutgoing(java.lang.Object) -> c
cn.com.codesec.scan.util.graph.GraphB$Transpose -> cn.com.codesec.SX:
    cn.com.codesec.scan.util.graph.GraphB underlying -> a
    21:23:void <init>(cn.com.codesec.scan.util.graph.GraphB) -> <init>
    27:27:java.lang.Iterable getIncoming(java.lang.Object) -> d
    32:32:int getNumIncoming(java.lang.Object) -> b
    37:37:int getNumOutgoing(java.lang.Object) -> c
    42:42:java.lang.Iterable getOutgoing(java.lang.Object) -> a
    47:47:java.util.Map createMap() -> a
    52:52:cn.com.codesec.scan.util.graph.Graph$MapToInt createMapToInt() -> b
cn.com.codesec.scan.util.graph.StronglyConnectedComponents -> cn.com.codesec.SY:
    cn.com.codesec.scan.util.graph.Graph graph -> a
    cn.com.codesec.util.fset.FList sccs -> b
    java.util.ArrayDeque stack -> c
    int index -> d
    int nextSCCIndex -> e
    java.util.Map wrappedNodes -> f
    java.util.Set nodes -> g
    27:40:void <init>(cn.com.codesec.scan.util.graph.Graph,java.lang.Iterable) -> <init>
    43:60:cn.com.codesec.util.fset.FList findSCCs() -> a
    64:92:void strongConnect(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> a
    23:23:int access$0(cn.com.codesec.scan.util.graph.StronglyConnectedComponents) -> a
    23:23:void access$1(cn.com.codesec.scan.util.graph.StronglyConnectedComponents,int) -> a
cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC -> cn.com.codesec.SZ:
    cn.com.codesec.util.fset.FSet nodes -> b
    cn.com.codesec.util.fset.FSet succs -> c
    cn.com.codesec.util.fset.FSet preds -> d
    int index -> e
    cn.com.codesec.scan.util.graph.StronglyConnectedComponents this$0 -> a
    101:106:void <init>(cn.com.codesec.scan.util.graph.StronglyConnectedComponents) -> <init>
    109:111:void addNode(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> a
    115:115:int compareTo(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> a
    119:119:cn.com.codesec.util.fset.FSet getNodes() -> a
    123:123:cn.com.codesec.util.fset.FSet getSuccessors() -> b
    127:127:cn.com.codesec.util.fset.FSet getPredecessors() -> c
    1:1:int compareTo(java.lang.Object) -> compareTo
    96:96:cn.com.codesec.util.fset.FSet access$1(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> b
    97:97:cn.com.codesec.util.fset.FSet access$2(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> c
    97:97:void access$3(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC,cn.com.codesec.util.fset.FSet) -> a
    98:98:cn.com.codesec.util.fset.FSet access$4(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> d
    98:98:void access$5(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC,cn.com.codesec.util.fset.FSet) -> b
    101:101:void <init>(cn.com.codesec.scan.util.graph.StronglyConnectedComponents,cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> <init>
    108:108:void access$7(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC,cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> a
cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode -> cn.com.codesec.Ta:
    java.lang.Object origNode -> b
    int index -> c
    int lowLink -> d
    boolean onStack -> e
    cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC scc -> f
    cn.com.codesec.scan.util.graph.StronglyConnectedComponents this$0 -> a
    139:145:void <init>(cn.com.codesec.scan.util.graph.StronglyConnectedComponents,java.lang.Object) -> <init>
    133:133:java.lang.Object access$0(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> a
    137:137:void access$1(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode,cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC) -> a
    139:139:void <init>(cn.com.codesec.scan.util.graph.StronglyConnectedComponents,java.lang.Object,cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> <init>
    134:134:int access$3(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> b
    137:137:cn.com.codesec.scan.util.graph.StronglyConnectedComponents$SCC access$4(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> c
    134:134:void access$5(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode,int) -> a
    135:135:void access$6(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode,int) -> b
    136:136:void access$7(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode,boolean) -> a
    135:135:int access$8(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> d
    136:136:boolean access$9(cn.com.codesec.scan.util.graph.StronglyConnectedComponents$WrappedNode) -> e
cn.com.codesec.scan.util.graph.TopologicalTraverser -> cn.com.codesec.Tb:
    boolean $assertionsDisabled -> a
    12:12:void <clinit>() -> <clinit>
    12:12:void <init>() -> <init>
    15:22:java.util.Iterator iterator(cn.com.codesec.scan.util.graph.Graph,java.lang.Iterable) -> a
    26:34:cn.com.codesec.scan.util.graph.Graph$MapToInt createFullIncomingsMap(cn.com.codesec.scan.util.graph.Graph,java.lang.Iterable) -> b
    38:38:java.util.Iterator iterator(cn.com.codesec.scan.util.graph.GraphB,java.lang.Iterable) -> a
    42:52:java.util.Iterator iterator(cn.com.codesec.scan.util.graph.GraphB,java.util.Iterator) -> a
    56:57:java.util.Iterator partialIterator(cn.com.codesec.scan.util.graph.GraphB,java.lang.Iterable) -> b
    61:80:cn.com.codesec.scan.util.graph.Graph$MapToInt createOnDemandIncomingsMap(cn.com.codesec.scan.util.graph.GraphB,java.lang.Iterable,java.util.Collection) -> a
    84:95:void removeEdges(cn.com.codesec.scan.util.graph.Graph$MapToInt,java.lang.Iterable,java.util.Collection) -> b
    83:83:void access$0(cn.com.codesec.scan.util.graph.Graph$MapToInt,java.lang.Iterable,java.util.Collection) -> a
cn.com.codesec.scan.util.graph.TopologicalTraverser$1 -> cn.com.codesec.Tc:
    cn.com.codesec.scan.util.graph.Graph$MapToInt val$underlyingMap -> a
    cn.com.codesec.scan.util.graph.GraphB val$graph -> b
    1:62:void <init>(cn.com.codesec.scan.util.graph.Graph$MapToInt,cn.com.codesec.scan.util.graph.GraphB) -> <init>
    65:69:int get(java.lang.Object) -> a
    74:75:void put(java.lang.Object,int) -> a
cn.com.codesec.scan.util.graph.TopologicalTraverser$IteratorImpl -> cn.com.codesec.Td:
    cn.com.codesec.scan.util.graph.Graph graph -> a
    cn.com.codesec.scan.util.graph.Graph$MapToInt numIncomings -> b
    java.util.Stack readyNodes -> c
    103:107:void <init>(cn.com.codesec.scan.util.graph.Graph,java.util.Stack,cn.com.codesec.scan.util.graph.Graph$MapToInt) -> <init>
    111:111:boolean hasNext() -> hasNext
    116:130:java.lang.Object next() -> next
    135:135:void remove() -> remove
    103:103:void <init>(cn.com.codesec.scan.util.graph.Graph,java.util.Stack,cn.com.codesec.scan.util.graph.Graph$MapToInt,cn.com.codesec.scan.util.graph.TopologicalTraverser$IteratorImpl) -> <init>
cn.com.codesec.scan.util.langext.Box -> cn.com.codesec.Te:
    java.lang.Object obj -> a
    cn.com.codesec.scan.util.langext.Box EMPTY_BOX -> b
    98:99:void <clinit>() -> <clinit>
    13:15:void <init>(java.lang.Object) -> <init>
    18:18:boolean isEmpty() -> a
    22:25:java.lang.Object get() -> b
    29:32:java.lang.Object getWithFallBack(java.lang.Object) -> a
    37:40:cn.com.codesec.scan.util.langext.Iterable map(cn.com.codesec.scan.util.langext.Function$Function1) -> a
    45:48:void foreach(cn.com.codesec.scan.util.langext.Function$Function1) -> b
    51:51:cn.com.codesec.scan.util.langext.Box storeInNewBox(java.lang.Object) -> b
    56:56:java.lang.Object reduceLeft(cn.com.codesec.scan.util.langext.Function$Function2) -> a
    61:61:java.lang.Object foldLeft(cn.com.codesec.scan.util.langext.Function$Function2,java.lang.Object) -> a
    66:69:cn.com.codesec.scan.util.langext.Box filter(cn.com.codesec.scan.util.langext.Function$Function1) -> c
    74:78:cn.com.codesec.scan.util.langext.Box flatten() -> c
    83:86:cn.com.codesec.scan.util.langext.Box drop(int) -> a
    91:94:cn.com.codesec.scan.util.langext.Box take(int) -> b
    1:1:cn.com.codesec.scan.util.langext.Iterable filter(cn.com.codesec.scan.util.langext.Function$Function1) -> d
    1:1:cn.com.codesec.scan.util.langext.Iterable flatten() -> d
    1:1:cn.com.codesec.scan.util.langext.Iterable drop(int) -> c
    1:1:cn.com.codesec.scan.util.langext.Iterable take(int) -> d
cn.com.codesec.scan.util.langext.CollectionWrapper -> cn.com.codesec.Tf:
    cn.com.codesec.scan.util.langext.Box EMPTY_BOX -> a
    38:39:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    16:22:cn.com.codesec.scan.util.langext.Box wrap(java.util.Collection) -> a
    26:34:java.lang.Object foldLeft(cn.com.codesec.scan.util.langext.Function$Function2,java.lang.Object,cn.com.codesec.scan.util.langext.CollectionWrapper) -> a
cn.com.codesec.scan.util.langext.CollectionWrapper$1 -> cn.com.codesec.Tg:
    cn.com.codesec.scan.util.langext.MutableBox val$currentResult -> a
    cn.com.codesec.scan.util.langext.Function$Function2 val$func -> b
    1:27:void <init>(cn.com.codesec.scan.util.langext.MutableBox,cn.com.codesec.scan.util.langext.Function$Function2) -> <init>
    30:31:java.lang.Void apply(java.lang.Object) -> a
    1:1:java.lang.Object apply(java.lang.Object) -> b
cn.com.codesec.scan.util.langext.Function -> cn.com.codesec.Th:
    7:7:void <init>() -> <init>
cn.com.codesec.scan.util.langext.Function$Function1 -> cn.com.codesec.Ti:
    9:9:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> b
cn.com.codesec.scan.util.langext.Function$Function2 -> cn.com.codesec.Tj:
    14:14:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.langext.Function$Function3 -> cn.com.codesec.Tk:
    19:19:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.langext.Function$Function4 -> cn.com.codesec.Tl:
    24:24:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.langext.Function$Function5 -> cn.com.codesec.Tm:
    29:29:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.langext.Function$Function6 -> cn.com.codesec.Tn:
    34:34:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
cn.com.codesec.scan.util.langext.Iterable -> cn.com.codesec.To:
    void foreach(cn.com.codesec.scan.util.langext.Function$Function1) -> b
    cn.com.codesec.scan.util.langext.Iterable map(cn.com.codesec.scan.util.langext.Function$Function1) -> a
    java.lang.Object reduceLeft(cn.com.codesec.scan.util.langext.Function$Function2) -> a
    java.lang.Object foldLeft(cn.com.codesec.scan.util.langext.Function$Function2,java.lang.Object) -> a
    cn.com.codesec.scan.util.langext.Iterable filter(cn.com.codesec.scan.util.langext.Function$Function1) -> d
    cn.com.codesec.scan.util.langext.Iterable take(int) -> d
    cn.com.codesec.scan.util.langext.Iterable drop(int) -> c
    cn.com.codesec.scan.util.langext.Iterable flatten() -> d
cn.com.codesec.scan.util.langext.ListWrapper -> cn.com.codesec.Tp:
    java.util.List wrappedList -> b
    16:18:void <init>(java.util.List) -> <init>
    22:25:void foreach(cn.com.codesec.scan.util.langext.Function$Function1) -> b
    29:33:cn.com.codesec.scan.util.langext.ListWrapper map(cn.com.codesec.scan.util.langext.Function$Function1) -> c
    38:40:java.lang.Object reduceLeft(cn.com.codesec.scan.util.langext.Function$Function2) -> a
    45:45:java.lang.Object foldLeft(cn.com.codesec.scan.util.langext.Function$Function2,java.lang.Object) -> a
    50:50:cn.com.codesec.scan.util.langext.CollectionWrapper take(int) -> a
    55:55:cn.com.codesec.scan.util.langext.CollectionWrapper drop(int) -> b
    60:66:cn.com.codesec.scan.util.langext.CollectionWrapper filter(cn.com.codesec.scan.util.langext.Function$Function1) -> e
    71:86:cn.com.codesec.scan.util.langext.CollectionWrapper flatten() -> a
    1:1:cn.com.codesec.scan.util.langext.Iterable filter(cn.com.codesec.scan.util.langext.Function$Function1) -> d
    1:1:cn.com.codesec.scan.util.langext.Iterable map(cn.com.codesec.scan.util.langext.Function$Function1) -> a
    1:1:cn.com.codesec.scan.util.langext.Iterable flatten() -> d
    1:1:cn.com.codesec.scan.util.langext.Iterable drop(int) -> c
    1:1:cn.com.codesec.scan.util.langext.Iterable take(int) -> d
cn.com.codesec.scan.util.langext.ListWrapper$1 -> cn.com.codesec.Tq:
    cn.com.codesec.scan.util.langext.ListWrapper this$0 -> a
    java.util.List val$result -> b
    1:72:void <init>(cn.com.codesec.scan.util.langext.ListWrapper,java.util.List) -> <init>
    75:83:java.lang.Void apply(java.lang.Object) -> a
    1:1:java.lang.Object apply(java.lang.Object) -> b
cn.com.codesec.scan.util.langext.MutableBox -> cn.com.codesec.Tr:
    10:11:void <init>(java.lang.Object) -> <init>
    14:14:cn.com.codesec.scan.util.langext.MutableBox newMutableBox(java.lang.Object) -> c
    18:19:void mutate(java.lang.Object) -> d
cn.com.codesec.scan.util.langext.Tuple -> cn.com.codesec.Ts:
    7:7:void <init>() -> <init>
cn.com.codesec.scan.util.langext.Tuple$Tuple1 -> cn.com.codesec.Tt:
    java.lang.Object elem -> a
    13:14:void <init>(java.lang.Object) -> <init>
cn.com.codesec.scan.util.langext.Tuple$Tuple2 -> cn.com.codesec.Tu:
    19:20:void <init>(java.lang.Object,java.lang.Object) -> <init>
cn.com.codesec.scan.util.serialization.AccessPathHandle -> cn.com.codesec.Tv:
    java.util.LinkedList path -> a
    int aliasBarrierPos -> b
    14:19:void <init>(cn.com.codesec.scan.model.AccessPath) -> <init>
    23:23:cn.com.codesec.scan.model.AccessPath get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.AsynchronousSerializer -> cn.com.codesec.Tw:
    java.util.concurrent.LinkedBlockingQueue queue -> b
    java.util.concurrent.ExecutorService executor -> c
    java.util.concurrent.atomic.AtomicBoolean done -> d
    25:31:void <init>(java.lang.String) -> <init>
    35:38:void serialize(java.util.List,cn.com.codesec.scan.util.serialization.OOSFactory) -> a
    41:67:void makeTask(java.util.List,cn.com.codesec.scan.util.serialization.OOSFactory) -> b
    71:79:void finish() -> a
    82:83:void processItem(org.apache.commons.lang3.tuple.Pair) -> a
    43:66:void lambda$0() -> b
cn.com.codesec.scan.util.serialization.BackEndSerializable -> cn.com.codesec.Tx:
cn.com.codesec.scan.util.serialization.BasicSerializer -> cn.com.codesec.Ty:
    java.lang.String timerName -> b
    java.lang.String serializerName -> a
    23:26:void <init>(java.lang.String) -> <init>
    30:45:void serialize(java.util.List,cn.com.codesec.scan.util.serialization.OOSFactory) -> a
    49:50:void handleException(java.lang.String,java.lang.Throwable) -> a
    54:54:void finish() -> a
cn.com.codesec.scan.util.serialization.CircularityTolerantInputStream -> cn.com.codesec.Tz:
    java.util.ArrayList hashMaps -> c
    java.util.ArrayList hashSets -> d
    boolean completeCircularities -> a
    boolean $assertionsDisabled -> b
    14:14:void <clinit>() -> <clinit>
    21:22:void <init>(java.io.InputStream) -> <init>
    25:30:void <init>(java.io.InputStream,boolean) -> <init>
    33:47:void completeCircularities() -> a
    51:63:java.lang.Object resolveObject(java.lang.Object) -> resolveObject
cn.com.codesec.scan.util.serialization.CircularityTolerantOutputStream -> cn.com.codesec.TA:
    boolean completeCircularities -> a
    18:19:void <init>(java.io.OutputStream) -> <init>
    22:25:void <init>(java.io.OutputStream,boolean) -> <init>
    29:37:java.lang.Object replaceObject(java.lang.Object) -> replaceObject
cn.com.codesec.scan.util.serialization.CircularlySerializableHashMap -> cn.com.codesec.TB:
    java.util.ArrayList pairs -> a
    java.lang.Class hmClass -> b
    java.lang.Object PAIRS_KEY -> c
    58:59:void <clinit>() -> <clinit>
    21:31:void <init>(java.util.HashMap) -> <init>
    35:45:java.util.HashMap resolve() -> a
    50:55:void complete(java.util.HashMap) -> a
cn.com.codesec.scan.util.serialization.CircularlySerializableHashSet -> cn.com.codesec.TC:
    java.lang.Object[] elements -> a
    java.lang.Class hsClass -> b
    16:25:void <init>(java.util.HashSet) -> <init>
    29:37:java.util.HashSet resolve() -> a
    42:48:void complete(java.util.HashSet) -> a
cn.com.codesec.scan.util.serialization.CuHandle -> cn.com.codesec.TD:
    int cuIndex -> a
    8:10:void <init>() -> <init>
    15:15:int getCuIndex() -> a
    19:20:void setCuIndex(int) -> a
    22:27:void <init>(cn.com.codesec.scan.ir.nodes.IRCompilationUnit,cn.com.codesec.scan.backend.BackEnd) -> <init>
    31:31:cn.com.codesec.scan.ir.nodes.IRCompilationUnit get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.FunDeclRefHandle -> cn.com.codesec.TE:
    int cuIndex -> b
    int childIndex -> c
    boolean $assertionsDisabled -> a
    7:7:void <clinit>() -> <clinit>
    9:11:void <init>() -> <init>
    14:14:int getCuIndex() -> a
    18:18:int getChildIndex() -> b
    22:23:void setCuIndex(int) -> a
    26:27:void setChildIndex(int) -> b
    32:41:void <init>(cn.com.codesec.scan.ir.util.memory.FunDeclRef,cn.com.codesec.scan.backend.BackEnd) -> <init>
    45:45:cn.com.codesec.scan.ir.util.memory.FunDeclRef get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.GlobalVarHandle -> cn.com.codesec.TF:
    java.lang.String nameInCu -> a
    cn.com.codesec.scan.ir.nodes.IRCompilationUnit cu -> b
    11:13:void <init>() -> <init>
    16:16:java.lang.String getNameInCu() -> a
    20:20:cn.com.codesec.scan.ir.nodes.IRCompilationUnit getCu() -> b
    24:25:void setNameInCu(java.lang.String) -> a
    28:29:void setCu(cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> a
    34:37:void <init>(java.lang.String,cn.com.codesec.scan.ir.nodes.IRCompilationUnit) -> <init>
    41:48:cn.com.codesec.scan.ir.nodes.IRVarDecl get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.Handle -> cn.com.codesec.TG:
    5:5:void <init>() -> <init>
    java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.IRObjectInputStream -> cn.com.codesec.TH:
    cn.com.codesec.scan.backend.BackEnd world -> c
    16:17:void <init>(java.io.InputStream,cn.com.codesec.scan.backend.BackEnd) -> <init>
    20:23:void <init>(java.io.InputStream,cn.com.codesec.scan.backend.BackEnd,boolean) -> <init>
    26:27:void complete() -> b
    31:33:void close() -> close
    37:52:java.lang.Object resolveObject(java.lang.Object) -> resolveObject
cn.com.codesec.scan.util.serialization.IRObjectOutputStream -> cn.com.codesec.TI:
    cn.com.codesec.scan.backend.BackEnd world -> a
    19:22:void <init>(java.io.OutputStream,cn.com.codesec.scan.backend.BackEnd,boolean) -> <init>
    26:49:java.lang.Object replaceObject(java.lang.Object) -> replaceObject
cn.com.codesec.scan.util.serialization.NameTableDataHandle -> cn.com.codesec.TJ:
    cn.com.codesec.scan.metadata.NameTable$Handle handle -> b
    boolean $assertionsDisabled -> a
    8:8:void <clinit>() -> <clinit>
    10:12:void <init>() -> <init>
    17:17:cn.com.codesec.scan.metadata.NameTable$Handle getHandle() -> a
    21:22:void setHandle(cn.com.codesec.scan.metadata.NameTable$Handle) -> a
    24:30:void <init>(cn.com.codesec.scan.metadata.NameTableData,cn.com.codesec.scan.backend.BackEnd) -> <init>
    34:34:cn.com.codesec.scan.metadata.NameTableData get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.NamespaceHandle -> cn.com.codesec.TK:
    java.lang.String name -> b
    cn.com.codesec.scan.meta.Language language -> c
    cn.com.codesec.scan.metadata.Namespace$Scope scope -> d
    boolean $assertionsDisabled -> a
    7:7:void <clinit>() -> <clinit>
    10:10:java.lang.String getName() -> a
    14:14:cn.com.codesec.scan.meta.Language getLanguage() -> b
    18:18:cn.com.codesec.scan.metadata.Namespace$Scope getScope() -> c
    22:23:void setName(java.lang.String) -> a
    26:27:void setLanguage(cn.com.codesec.scan.meta.Language) -> a
    30:31:void setScope(cn.com.codesec.scan.metadata.Namespace$Scope) -> a
    37:42:void <init>(cn.com.codesec.scan.metadata.Namespace,cn.com.codesec.scan.backend.BackEnd) -> <init>
    46:46:cn.com.codesec.scan.metadata.Namespace get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.OOSFactory -> cn.com.codesec.TL:
    java.io.ObjectOutputStream create() -> a
    void finish() -> b
cn.com.codesec.scan.util.serialization.PlacedLabelHandle -> cn.com.codesec.TM:
    cn.com.codesec.scan.meta.Symbol symbol -> a
    java.lang.String labelName -> b
    12:15:void <init>(cn.com.codesec.java.rules.label.PlacedLabel) -> <init>
    19:19:cn.com.codesec.java.rules.label.PlacedLabel get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.ProgramModelInputStream -> cn.com.codesec.TN:
    cn.com.codesec.scan.backend.BackEnd backEnd -> c
    17:20:void <init>(java.io.InputStream,cn.com.codesec.scan.backend.BackEnd) -> <init>
    23:36:void complete() -> b
    43:49:java.lang.Object resolveObject(java.lang.Object) -> resolveObject
cn.com.codesec.scan.util.serialization.ProgramModelOutputStream -> cn.com.codesec.TO:
    cn.com.codesec.scan.backend.BackEnd backEnd -> a
    java.util.ArrayList ntDataSeen -> b
    24:28:void <init>(java.io.OutputStream,cn.com.codesec.scan.backend.BackEnd) -> <init>
    32:44:java.lang.Object replaceObject(java.lang.Object) -> replaceObject
    49:51:void close() -> close
    54:68:void writeNameTableDataPass2() -> a
cn.com.codesec.scan.util.serialization.RuleSetHandle -> cn.com.codesec.TP:
    11:12:void <init>(cn.com.codesec.java.rules.RuleSet) -> <init>
    16:16:cn.com.codesec.java.rules.RuleSet get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.SCAObjectInputStream -> cn.com.codesec.TQ:
    cn.com.codesec.scan.backend.BackEnd world -> c
    18:19:void <init>(java.io.InputStream,cn.com.codesec.scan.backend.BackEnd) -> <init>
    22:25:void <init>(java.io.InputStream,cn.com.codesec.scan.backend.BackEnd,boolean) -> <init>
    28:29:void complete() -> b
    33:35:void close() -> close
    39:45:java.lang.Object resolveObject(java.lang.Object) -> resolveObject
cn.com.codesec.scan.util.serialization.SCAObjectOutputStream -> cn.com.codesec.TR:
    cn.com.codesec.scan.backend.BackEnd world -> a
    boolean remoteModel -> b
    22:26:void <init>(java.io.OutputStream,cn.com.codesec.scan.backend.BackEnd) -> <init>
    29:31:void <init>(java.io.OutputStream,cn.com.codesec.scan.backend.BackEnd,boolean) -> <init>
    34:39:void <init>(java.io.OutputStream,cn.com.codesec.scan.backend.BackEnd,boolean,boolean) -> <init>
    43:70:java.lang.Object replaceObject(java.lang.Object) -> replaceObject
cn.com.codesec.scan.util.serialization.SCARuleHandle -> cn.com.codesec.TS:
    java.lang.String id -> b
    boolean $assertionsDisabled -> a
    11:11:void <clinit>() -> <clinit>
    15:18:void <init>(cn.com.codesec.java.rules.SKYRule) -> <init>
    22:22:cn.com.codesec.java.rules.SKYRule get(cn.com.codesec.scan.backend.BackEnd) -> a
    26:26:java.lang.String getRuleID() -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.scan.util.serialization.Serializer -> cn.com.codesec.TT:
    void serialize(java.util.List,cn.com.codesec.scan.util.serialization.OOSFactory) -> a
    void finish() -> a
cn.com.codesec.scan.util.serialization.SinkRuleSinkHandle -> cn.com.codesec.TU:
    cn.com.codesec.java.rules.SinkSourceRule rule -> b
    int idx -> c
    boolean $assertionsDisabled -> a
    8:8:void <clinit>() -> <clinit>
    13:17:void <init>(cn.com.codesec.java.rules.Sink) -> <init>
    21:21:cn.com.codesec.java.rules.Sink get(cn.com.codesec.scan.backend.BackEnd) -> a
    1:1:java.lang.Object get(cn.com.codesec.scan.backend.BackEnd) -> b
cn.com.codesec.util.ArrayUtil -> cn.com.codesec.util.a:
    char[] EMPTY_CHAR_ARRAY -> a
    boolean[] EMPTY_BOOLEAN_ARRAY -> b
    byte[] EMPTY_BYTE_ARRAY -> c
    short[] EMPTY_SHORT_ARRAY -> d
    int[] EMPTY_INT_ARRAY -> e
    long[] EMPTY_LONG_ARRAY -> f
    float[] EMPTY_FLOAT_ARRAY -> g
    double[] EMPTY_DOUBLE_ARRAY -> h
    java.lang.Object[] EMPTY_OBJECT_ARRAY -> i
    7:15:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    18:22:int indexOfEquals(java.lang.Object[],java.lang.Object) -> a
    26:30:int indexOf(java.lang.Object[],java.lang.Object) -> b
    34:38:int indexOf(byte[],byte) -> a
cn.com.codesec.util.Base64 -> cn.com.codesec.util.b:
    char[] CHARS -> a
    9:9:void <clinit>() -> <clinit>
    11:12:void <init>() -> <init>
    15:48:java.lang.String encode(byte[]) -> a
    52:92:byte[] decode(java.lang.String) -> a
    96:100:int charToInt(char) -> a
cn.com.codesec.util.BlindSslSocketFactory -> cn.com.codesec.util.c:
    javax.net.SocketFactory blindFactory -> a
    24:49:void <init>() -> <init>
    52:52:javax.net.SocketFactory getDefaultBlindSslSocketFactory() -> a
    57:57:java.net.Socket createSocket() -> createSocket
    62:62:java.net.Socket createSocket(java.lang.String,int) -> createSocket
    67:67:java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    72:72:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    77:77:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
cn.com.codesec.util.BlindSslSocketFactory$1 -> cn.com.codesec.util.d:
    cn.com.codesec.util.BlindSslSocketFactory this$0 -> a
    1:28:void <init>(cn.com.codesec.util.BlindSslSocketFactory) -> <init>
    32:32:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    37:37:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    41:41:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
cn.com.codesec.util.ByteArrayBuilder -> cn.com.codesec.util.e:
    byte[] EMPTY_BYTE_ARRAY -> a
    byte[] buf -> b
    int pos -> c
    7:7:void <clinit>() -> <clinit>
    6:9:void <init>() -> <init>
    12:17:byte[] getCopy() -> a
    21:27:void append(byte) -> a
    30:34:int indexOf(byte) -> b
    38:38:int length() -> b
    42:43:void clear() -> c
cn.com.codesec.util.CallGraphRenderer -> cn.com.codesec.util.f:
    java.util.Map fileAndCodeFragmentNode -> c
    25:25:void <clinit>() -> <clinit>
    23:24:void <init>() -> <init>
    46:88:cn.com.codesec.util.Renderer$CodeFragmentNode getRootCodeFragmentNode(cn.com.codesec.scan.metadata.FunMeta) -> b
    92:172:void render(cn.com.codesec.util.fset.FLinkedHashSet) -> a
cn.com.codesec.util.CallGraphRenderer$IRFunCallFindVisitor -> cn.com.codesec.util.g:
    java.util.List funCallList -> b
    cn.com.codesec.util.CallGraphRenderer this$0 -> a
    26:28:void <init>(cn.com.codesec.util.CallGraphRenderer) -> <init>
    31:31:java.util.List getFunCallList() -> a
    36:40:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFunCall,java.lang.Object) -> a
    26:26:void <init>(cn.com.codesec.util.CallGraphRenderer,cn.com.codesec.util.CallGraphRenderer$IRFunCallFindVisitor) -> <init>
cn.com.codesec.util.Canceller -> cn.com.codesec.util.h:
    boolean isCanceled() -> a
    void setCancelled(boolean) -> a
cn.com.codesec.util.CfgRenderer -> cn.com.codesec.util.i:
    boolean SHOW_TEMPNODE -> c
    cn.com.codesec.scan.ir.util.AnnotationKey$PersistentAnnotationKey CALLS_GENERATE_RULES_FIRED -> d
    java.util.Map fileAndCodeFragmentNode -> e
    59:61:void <clinit>() -> <clinit>
    56:57:void <init>() -> <init>
    63:95:cn.com.codesec.util.Renderer$CodeFragmentNode getRootCodeFragmentNode(cn.com.codesec.scan.analyzer.preproc.BasicBlockGraph) -> a
    99:173:void setCodeFragmentNodePredAndSuccs(cn.com.codesec.util.Renderer$CodeFragmentNode) -> b
    178:196:void setCodeFragmentNodePredAndSuccs(cn.com.codesec.scan.analyzer.preproc.BasicBlock,java.util.Map,cn.com.codesec.util.Renderer$CodeFragmentNode) -> a
    200:212:cn.com.codesec.util.Renderer$CodeFragmentNode getFinalCodeFragmentNode(cn.com.codesec.util.Renderer$CodeFragmentNode) -> c
    216:221:java.util.Map collectStatemnts(java.util.List) -> a
    225:278:cn.com.codesec.util.Renderer$CodeFragmentNode collectStatmentsByBasicBlock(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> a
    282:311:cn.com.codesec.scan.ir.nodes.IRNode getRealJspPrintlnNode(cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    315:320:boolean isInGeneratedCatchOrFinallyBlock(cn.com.codesec.scan.ir.nodes.IRStatement) -> b
    325:477:java.lang.String getDescriptionByStatement(cn.com.codesec.scan.ir.nodes.IRStatement,cn.com.codesec.scan.ir.nodes.IRStatement) -> a
    481:507:java.lang.String getExceptionByFunMeta(cn.com.codesec.scan.metadata.FunMeta) -> b
    513:520:java.util.List getPreStatements(cn.com.codesec.scan.ir.nodes.IRStatement) -> c
    524:587:java.lang.String getNameFromForWhile(cn.com.codesec.scan.ir.nodes.IRWhileStmt) -> a
    592:662:java.lang.String getNameFromCase(cn.com.codesec.scan.ir.nodes.IRIfThen) -> a
    667:683:java.util.List collectBlocks(cn.com.codesec.scan.analyzer.preproc.BasicBlock) -> b
    689:778:void render(cn.com.codesec.util.fset.FLinkedHashSet) -> a
cn.com.codesec.util.CollectionUtil -> cn.com.codesec.util.j:
    14:14:void <init>() -> <init>
    16:16:boolean isEmpty(java.util.Collection) -> a
    20:20:boolean isEmpty(java.util.Map) -> a
    24:34:java.lang.Object getIgnoreCase(java.util.Map,java.lang.String) -> a
    38:48:boolean containsIgnoreCase(java.util.Collection,java.lang.String) -> a
cn.com.codesec.util.CommandLineLauncher -> cn.com.codesec.util.k:
    13:14:void <init>() -> <init>
    21:35:void run(cn.com.codesec.util.CommandLineLauncher$RawOutput,java.lang.String[]) -> a
    42:58:void run(cn.com.codesec.util.CommandLineLauncher$TextOutput,java.lang.String[]) -> a
    61:61:cn.com.codesec.util.CommandLineLauncher$Exit exit(int) -> a
    65:65:cn.com.codesec.util.CommandLineLauncher$Exit exit() -> a
    13:13:void <init>(cn.com.codesec.util.CommandLineLauncher) -> <init>
cn.com.codesec.util.CommandLineLauncher$Exit -> cn.com.codesec.util.l:
    int code -> a
    90:92:void <init>(int) -> <init>
cn.com.codesec.util.CommandLineLauncher$RawOutput -> cn.com.codesec.util.m:
    80:81:void <init>() -> <init>
    void run(java.io.PrintStream,java.io.InputStream,java.io.PrintWriter,java.lang.String[]) -> a
cn.com.codesec.util.CommandLineLauncher$TextOutput -> cn.com.codesec.util.n:
    71:72:void <init>() -> <init>
    void run(java.io.PrintWriter,java.io.InputStream,java.io.PrintWriter,java.lang.String[]) -> a
cn.com.codesec.util.ConsolePasswordReader -> cn.com.codesec.util.o:
    java.lang.String prompt -> b
    java.io.InputStream consoleIn -> c
    java.io.PrintStream consoleOut -> d
    boolean $assertionsDisabled -> a
    14:14:void <clinit>() -> <clinit>
    19:24:void <init>(java.lang.String,java.io.InputStream,java.io.PrintStream) -> <init>
    30:49:java.lang.String getPassword() -> a
    15:15:java.lang.String access$0(cn.com.codesec.util.ConsolePasswordReader) -> a
    17:17:java.io.PrintStream access$1(cn.com.codesec.util.ConsolePasswordReader) -> b
cn.com.codesec.util.ConsolePasswordReader$Eraser -> cn.com.codesec.util.p:
    boolean go -> b
    cn.com.codesec.util.ConsolePasswordReader this$0 -> a
    54:57:void <init>(cn.com.codesec.util.ConsolePasswordReader) -> <init>
    60:61:void end() -> a
    66:85:void run() -> run
    56:56:void <init>(cn.com.codesec.util.ConsolePasswordReader,cn.com.codesec.util.ConsolePasswordReader$Eraser) -> <init>
cn.com.codesec.util.DateUtil -> cn.com.codesec.util.q:
    12:12:void <init>() -> <init>
    14:14:int getDaysUntilGregorian(java.util.Date) -> a
    18:18:int getDaysBetweenGregorian(java.util.Date,java.util.Date) -> a
    22:25:int getDaysBetween(java.util.Calendar,java.util.Calendar) -> a
    29:43:int getDaysBetweenIgnoreOrder(java.util.Calendar,java.util.Calendar) -> b
    47:49:java.util.GregorianCalendar getGregorianCalFromDate(java.util.Date) -> b
    53:58:java.lang.String getUTFDate(java.util.Date) -> c
cn.com.codesec.util.DateUtil15 -> cn.com.codesec.util.r:
    javax.xml.datatype.DatatypeFactory datatypeFactory -> a
    45:50:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    19:24:javax.xml.datatype.XMLGregorianCalendar convertDateToXMLGregorianCalender(java.util.Date) -> a
    28:32:java.util.Date convertXMLGregorianCalendarToDate(javax.xml.datatype.XMLGregorianCalendar) -> a
    36:36:javax.xml.datatype.DatatypeFactory getDatatypeFactory() -> a
    40:41:void setDatatypeFactory(javax.xml.datatype.DatatypeFactory) -> a
cn.com.codesec.util.DeprecatedPropertyKey -> cn.com.codesec.util.s:
    java.lang.String remediation -> b
    13:15:void <init>(java.lang.String,java.lang.String) -> <init>
    18:20:void <init>(java.lang.String) -> <init>
    23:24:void warn() -> a
cn.com.codesec.util.Digest -> cn.com.codesec.util.t:
    char[] HEX -> a
    java.security.MessageDigest messageDigest -> b
    boolean debug -> c
    12:65:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    17:23:java.lang.String removeSpace(java.lang.String) -> b
    27:32:java.lang.String toHex(byte[]) -> a
    36:46:java.lang.String mk(java.lang.String) -> a
    50:50:boolean isDebug() -> a
    54:55:void setDebug(boolean) -> a
cn.com.codesec.util.FLock -> cn.com.codesec.util.u:
    java.nio.channels.FileChannel channel -> a
    java.nio.channels.FileLock lock -> b
    17:20:void <init>(java.nio.channels.FileChannel,java.nio.channels.FileLock) -> <init>
    26:55:cn.com.codesec.util.FLock acquire(java.io.File) -> a
    59:65:cn.com.codesec.util.FLock acquire(java.io.File,java.lang.String) -> a
    70:75:boolean release() -> a
    81:102:void releaseChecked() -> b
cn.com.codesec.util.FileFilters -> cn.com.codesec.util.v:
    java.io.FileFilter IS_FILE -> a
    java.io.FileFilter IS_DIRECTORY -> b
    11:24:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    27:27:java.io.FileFilter and(java.io.FileFilter,java.io.FileFilter) -> a
    31:31:java.io.FileFilter and(java.io.FileFilter,java.io.FileFilter,java.io.FileFilter) -> a
    35:35:java.io.FileFilter or(java.io.FileFilter,java.io.FileFilter) -> b
    39:39:java.io.FileFilter or(java.io.FileFilter,java.io.FileFilter,java.io.FileFilter) -> b
cn.com.codesec.util.FileFilters$1 -> cn.com.codesec.util.w:
    1:11:void <init>() -> <init>
    15:15:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$2 -> cn.com.codesec.util.x:
    1:18:void <init>() -> <init>
    22:22:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$And -> cn.com.codesec.util.y:
    java.io.FileFilter[] filters -> a
    106:108:void <init>(java.io.FileFilter[]) -> <init>
    112:116:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$ExtensionList -> cn.com.codesec.util.z:
    java.util.Set extensions -> a
    46:48:void <init>(java.util.Set) -> <init>
    52:52:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$Or -> cn.com.codesec.util.A:
    java.io.FileFilter[] filters -> a
    88:90:void <init>(java.io.FileFilter[]) -> <init>
    94:98:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$Prefix -> cn.com.codesec.util.B:
    java.lang.String prefix -> a
    74:76:void <init>(java.lang.String) -> <init>
    80:80:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FileFilters$Suffix -> cn.com.codesec.util.C:
    java.lang.String suffix -> a
    60:62:void <init>(java.lang.String) -> <init>
    66:66:boolean accept(java.io.File) -> accept
cn.com.codesec.util.FilePath -> cn.com.codesec.util.FilePath:
    java.util.regex.Pattern DRIVE_LETTER -> DRIVE_LETTER
    java.util.regex.Pattern PATH_COMP_SEP -> PATH_COMP_SEP
    java.util.regex.Pattern WINDOWS_COMP_SEP -> WINDOWS_COMP_SEP
    cn.com.codesec.util.FilePath UNKNOWN -> UNKNOWN
    java.util.List pathComponents -> pathComponents
    cn.com.codesec.scan.util.Canonicalizer canonicalizer -> canonicalizer
    java.lang.ref.WeakReference platformNeutralStringCache -> platformNeutralStringCache
    boolean $assertionsDisabled -> $assertionsDisabled
    22:301:void <clinit>() -> <clinit>
    25:26:void <init>() -> <init>
    34:35:void setPathComponents(java.util.List) -> setPathComponents
    41:41:cn.com.codesec.util.FilePath mk(java.lang.String) -> mk
    45:45:cn.com.codesec.util.FilePath mk(java.io.File) -> mk
    48:58:void <init>(java.lang.String) -> <init>
    63:69:java.util.List getComponents(java.lang.String) -> getComponents
    73:73:cn.com.codesec.util.FilePath mk(cn.com.codesec.util.FilePath,java.lang.String) -> mk
    76:87:void <init>(cn.com.codesec.util.FilePath,java.lang.String) -> <init>
    90:90:cn.com.codesec.util.FilePath createFromPossibleRelativePath(java.lang.String,java.lang.String) -> createFromPossibleRelativePath
    94:97:cn.com.codesec.util.FilePath createFromPossibleRelativePath(java.lang.String,cn.com.codesec.util.FilePath) -> createFromPossibleRelativePath
    101:101:cn.com.codesec.util.FilePath canonicalize() -> canonicalize
    105:105:cn.com.codesec.util.FilePath mk(java.util.List) -> mk
    108:110:void <init>(java.util.List) -> <init>
    114:147:java.util.List canonicalize(java.util.List) -> canonicalize
    151:151:boolean isAbsolutePath(java.lang.String) -> isAbsolutePath
    155:155:boolean isAbsolutePath() -> isAbsolutePath
    159:181:cn.com.codesec.util.FilePath getCommonRoot(java.util.Collection) -> getCommonRoot
    185:188:java.lang.String getRelativePath(cn.com.codesec.util.FilePath) -> getRelativePath
    192:192:java.lang.String getRelativePath(java.lang.String) -> getRelativePath
    196:197:boolean isChildOf(cn.com.codesec.util.FilePath) -> isChildOf
    201:211:boolean endsWith(java.lang.String) -> endsWith
    215:218:cn.com.codesec.util.FilePath getParent() -> getParent
    222:222:java.util.List getPathComponents() -> getPathComponents
    227:227:java.lang.String getLastComponent() -> getLastComponent
    231:231:int pathLength() -> pathLength
    235:235:java.io.File toJavaFileObject() -> toJavaFileObject
    239:244:java.lang.String getPlatformNeutralString() -> getPlatformNeutralString
    248:249:java.lang.String getPlatformSpecificString() -> getPlatformSpecificString
    253:254:java.lang.String getPlatformSpecificInterpreterableString() -> getPlatformSpecificInterpreterableString
    259:270:int compareTo(cn.com.codesec.util.FilePath) -> compareTo
    275:282:boolean equals(java.lang.Object) -> equals
    287:287:int hashCode() -> hashCode
    292:292:java.lang.String toString() -> toString
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.util.FileUtil -> cn.com.codesec.util.D:
    java.util.List WIN32_EXE_ORDER -> b
    java.util.List CLASS_EXT_LIST -> c
    java.util.Map CASE_INSENSITIVE_FILE_CACHE -> d
    java.util.regex.Pattern FILENAME_SAFETY_PATTERN -> a
    java.util.regex.Pattern FWD_SLASH_SEQ -> e
    58:62:void <clinit>() -> <clinit>
    64:65:void <init>() -> <init>
    68:68:java.lang.String getExtension(java.io.File) -> a
    72:77:java.lang.String getExtension(java.lang.String) -> a
    81:84:java.lang.String getDirectory(java.lang.String) -> b
    88:89:java.lang.String changeExtension(java.lang.String,java.lang.String) -> a
    93:93:java.lang.String loadFileAsString(java.lang.String) -> c
    97:97:java.lang.String loadFileAsString(java.io.File) -> b
    102:106:java.lang.String loadFileAsString(java.io.InputStream) -> a
    110:110:java.lang.String loadFileAsString(java.io.Reader) -> a
    118:125:java.lang.StringBuffer loadFileAsStringBuffer(java.io.Reader) -> b
    132:142:void saveStringToFile(java.lang.String,java.lang.String) -> b
    145:148:boolean deleteDirectoryStructure(java.io.File) -> c
    152:155:boolean deleteDirectoryStructure(java.io.File,java.util.regex.Pattern) -> a
    160:187:boolean deleteDirStructHelper(java.io.File,java.util.HashSet,java.util.regex.Pattern) -> a
    191:200:java.lang.String makeFilenameSafeString(java.lang.String) -> d
    204:219:java.io.File getCommonRoot(java.util.Collection) -> a
    223:227:boolean isParent(java.io.File,java.io.File) -> a
    231:237:java.io.File getFirstExistingDirectory(java.io.File) -> d
    241:254:java.lang.String getRelativePath(java.io.File,java.io.File) -> b
    258:270:int canReadFile(java.io.File) -> e
    274:288:java.lang.String truncateFilename(java.lang.String,int) -> a
    292:292:java.lang.String path(java.lang.String) -> e
    296:296:java.lang.String path(java.lang.String,java.lang.String) -> c
    300:300:java.lang.String path(java.lang.String,java.lang.String,java.lang.String) -> a
    304:304:java.lang.String path(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    308:308:java.lang.String path(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    312:312:boolean isWindowsExecutable(java.io.File) -> f
    316:324:void copyZipArchive(java.util.zip.ZipFile,java.util.zip.ZipOutputStream,java.util.regex.Pattern,java.util.regex.Pattern) -> a
    327:331:void copyZipEntry(java.lang.String,java.util.zip.ZipOutputStream,java.io.InputStream) -> a
    337:365:void mergeArchives(java.io.File,java.io.File,java.io.File) -> a
    368:375:java.lang.String normalizeDirectorySeperators(java.lang.String) -> f
    379:388:java.io.IOException close(java.io.InputStream) -> b
    392:401:java.io.IOException close(java.io.Reader) -> c
    405:414:java.io.IOException closeAgain(java.io.OutputStream) -> a
    418:427:java.io.IOException closeAgain(java.io.InputStream) -> c
    431:440:java.io.IOException close(java.io.Writer) -> a
    444:453:java.io.IOException closeAgain(java.io.Writer) -> b
    457:466:java.io.IOException closeAgain(java.util.zip.ZipFile) -> a
    470:479:java.io.IOException closeAgain(java.nio.channels.FileChannel) -> a
    484:484:java.io.IOException close(java.io.OutputStream) -> b
    488:489:void copyAuditInfo(java.util.zip.ZipFile,java.util.zip.ZipOutputStream) -> a
    492:506:void copyAuditInfo(java.util.zip.ZipFile,java.util.zip.ZipOutputStream,java.lang.String[]) -> a
    509:510:void copy(java.io.InputStream,java.io.OutputStream) -> a
    516:546:void copy(java.io.InputStream,java.io.OutputStream,boolean) -> a
    549:567:void copyDirectoryStructure(java.io.File,java.io.File) -> c
    570:571:java.io.File makeTempDirectory(java.lang.String) -> g
    575:575:boolean isZipFile(java.lang.String) -> h
    583:600:boolean isZipFile(java.io.File) -> g
    609:636:void copyZipEntry(java.io.File,java.lang.String,java.io.OutputStream) -> a
    639:642:void copyZipEntry(java.util.zip.ZipFile,java.util.zip.ZipOutputStream,java.util.zip.ZipEntry,java.lang.String) -> a
    645:648:void writeZipEntry(java.util.zip.ZipOutputStream,java.lang.String,java.io.InputStream) -> a
    651:676:void extractEntry(java.util.zip.ZipInputStream,java.lang.String) -> a
    685:720:void copy(java.io.File,java.io.File) -> d
    724:732:boolean readFully(java.io.InputStream,byte[],int,int) -> a
    736:736:boolean readFully(java.io.InputStream,byte[]) -> a
    740:740:byte[] loadFileAsBytes(java.io.File) -> h
    747:771:byte[] loadFileAsBytes(java.io.InputStream) -> d
    775:778:int findLastIndex(java.lang.String,java.lang.String) -> d
    782:790:int findLastIndexHelper(java.lang.String,java.lang.String,int) -> a
    794:803:java.io.IOException close(java.util.zip.ZipFile) -> b
    807:815:java.lang.String getShortFileName(java.lang.String) -> i
    819:823:java.lang.String removeExtension(java.lang.String) -> j
    828:848:boolean mkdirs(java.io.File) -> i
    852:863:void ensurePathExists(java.lang.String) -> k
    867:870:java.io.PrintWriter makeUTF8Writer(java.io.OutputStream) -> c
    875:896:java.io.File getCaseInsensitiveFile(java.io.File) -> j
    900:900:boolean exists(java.io.File) -> k
    904:904:boolean isExistingFile(java.lang.String) -> l
    908:908:boolean isExistingFile(java.io.File) -> l
    912:912:boolean isExistingDirectory(java.lang.String) -> m
    916:916:boolean isExistingDirectory(java.io.File) -> m
    921:928:boolean isRoot(java.io.File) -> n
    935:957:java.lang.String getLongestEntry(java.io.File,java.lang.String) -> a
    961:966:java.io.File[] listFiles(java.io.File) -> o
    970:977:java.util.Collection convertPathsToFiles(java.util.Collection) -> b
    981:988:java.util.Collection getFilePaths(java.util.Collection) -> c
    992:992:java.util.List getWin32ExeOrder() -> a
    996:996:java.util.List getClassExtList() -> b
cn.com.codesec.util.FileUtil$ExtensionComparator -> cn.com.codesec.util.E:
    999:999:void <init>() -> <init>
    1003:1009:int compare(java.lang.Object,java.lang.Object) -> compare
    1013:1026:int compare(java.lang.String,java.lang.String) -> a
cn.com.codesec.util.FileUtil$FilesToInclude -> cn.com.codesec.util.F:
    cn.com.codesec.util.FileUtil$FilesToInclude RULES_ONLY -> a
    cn.com.codesec.util.FileUtil$FilesToInclude METADATA_ONLY -> b
    cn.com.codesec.util.FileUtil$FilesToInclude RULES_AND_METADATA -> c
    cn.com.codesec.util.FileUtil$FilesToInclude[] ENUM$VALUES -> d
    1033:1036:void <clinit>() -> <clinit>
    1033:1033:void <init>(java.lang.String,int) -> <init>
    1:1:cn.com.codesec.util.FileUtil$FilesToInclude[] values() -> values
    1:1:cn.com.codesec.util.FileUtil$FilesToInclude valueOf(java.lang.String) -> valueOf
cn.com.codesec.util.Func -> cn.com.codesec.util.G:
    cn.com.codesec.util.Func IDENTITY_FUNC -> a
    boolean $assertionsDisabled -> b
    18:25:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
    30:30:cn.com.codesec.util.Func identity() -> a
    34:34:cn.com.codesec.util.Func constant(java.lang.Object) -> b
    44:44:java.util.Collection map2(java.util.Collection,cn.com.codesec.util.Func) -> a
    49:56:java.util.Collection map2(java.util.Collection) -> a
    60:60:java.util.Collection map(java.lang.Iterable,java.util.Collection,cn.com.codesec.util.Func) -> a
    64:69:java.util.Collection map(java.lang.Iterable,java.util.Collection) -> a
    73:73:java.util.Collection map(java.util.Collection,cn.com.codesec.util.Func) -> b
    79:88:java.util.Collection map(java.util.Collection) -> b
    92:96:java.lang.Object[] map(java.lang.Object[],cn.com.codesec.util.Func) -> a
    100:100:java.lang.Object[] map(java.lang.Object[],cn.com.codesec.util.Func,java.lang.Class) -> a
    104:108:java.lang.Object[] map(java.lang.Object[],java.lang.Class) -> a
    112:113:void mapInPlace(java.util.List,cn.com.codesec.util.Func) -> a
    116:120:void mapInPlace(java.util.ListIterator,cn.com.codesec.util.Func) -> a
    123:126:void mapInPlace(java.lang.Object[],cn.com.codesec.util.Func) -> b
    131:143:java.util.Collection filter(java.util.Collection,cn.com.codesec.util.Func) -> c
    147:156:java.lang.Object[] filter(java.lang.Object[],cn.com.codesec.util.Func) -> c
    160:167:void filterInPlace(java.lang.Iterable,cn.com.codesec.util.Func) -> a
cn.com.codesec.util.Func$1 -> cn.com.codesec.util.H:
    1:19:void <init>() -> <init>
    23:23:java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.util.Func$2 -> cn.com.codesec.util.I:
    java.lang.Object val$ret -> a
    1:34:void <init>(java.lang.Object) -> <init>
    38:38:java.lang.Object apply(java.lang.Object) -> a
cn.com.codesec.util.FunctionVarDeclRenderer -> cn.com.codesec.util.J:
    java.util.Map fileAndCodeFragmentNode -> c
    29:29:void <clinit>() -> <clinit>
    27:28:void <init>() -> <init>
    61:73:java.lang.String getIRVarDeclName(cn.com.codesec.scan.ir.nodes.IRVarDecl) -> a
    79:97:cn.com.codesec.util.Renderer$CodeFragmentNode getRootCodeFragmentNode(cn.com.codesec.scan.ir.nodes.IRFunDecl) -> a
    102:186:void render(cn.com.codesec.util.fset.FLinkedHashSet) -> a
cn.com.codesec.util.FunctionVarDeclRenderer$VarDeclFindVisitor -> cn.com.codesec.util.K:
    java.util.List varDeclList -> b
    cn.com.codesec.util.FunctionVarDeclRenderer this$0 -> a
    30:32:void <init>(cn.com.codesec.util.FunctionVarDeclRenderer) -> <init>
    35:35:java.util.List getVarDeclList() -> a
    39:42:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRBlock,java.lang.Object) -> a
    47:56:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRVarDecl,java.lang.Object) -> a
    30:30:void <init>(cn.com.codesec.util.FunctionVarDeclRenderer,cn.com.codesec.util.FunctionVarDeclRenderer$VarDeclFindVisitor) -> <init>
cn.com.codesec.util.FunctionVarReferRenderer -> cn.com.codesec.util.L:
    java.util.Map fileAndCodeFragmentNode -> c
    java.util.Map funDeclAndCodeFragmentNode -> d
    34:36:void <clinit>() -> <clinit>
    32:33:void <init>() -> <init>
    59:80:void getRootCodeFragmentNode(cn.com.codesec.util.Renderer$CodeFragmentNode,cn.com.codesec.scan.metadata.FieldMeta,java.util.Set) -> a
    85:140:void getFunMetaVarRefer(cn.com.codesec.util.Renderer$CodeFragmentNode,cn.com.codesec.util.Renderer$CodeFragmentNode,cn.com.codesec.scan.metadata.FunMeta,cn.com.codesec.scan.metadata.FieldMeta) -> a
    143:185:cn.com.codesec.util.Renderer$CodeFragmentNode getTypeCodeFragmentNodeByFilePathAndDescription(cn.com.codesec.scan.metadata.TypeMeta) -> a
    189:326:void render(java.util.Collection,cn.com.codesec.scan.util.collections.GMultiMap$Concurrent,cn.com.codesec.scan.util.collections.GMultiMap$Concurrent) -> a
    328:334:java.util.List getFieldMetaList(cn.com.codesec.scan.metadata.TypeMeta) -> b
cn.com.codesec.util.FunctionVarReferRenderer$VarReferFindVisitor -> cn.com.codesec.util.M:
    java.util.List fieldAccessList -> b
    cn.com.codesec.util.FunctionVarReferRenderer this$0 -> a
    38:40:void <init>(cn.com.codesec.util.FunctionVarReferRenderer) -> <init>
    43:43:java.util.List getFieldAccessList() -> a
    49:54:java.lang.Object visit(cn.com.codesec.scan.ir.nodes.IRFieldAccess,java.lang.Object) -> a
    38:38:void <init>(cn.com.codesec.util.FunctionVarReferRenderer,cn.com.codesec.util.FunctionVarReferRenderer$VarReferFindVisitor) -> <init>
cn.com.codesec.util.HexUtil -> cn.com.codesec.util.N:
    int[] DEC -> a
    10:10:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    13:41:byte[] convert(java.lang.String) -> a
    45:50:java.lang.String convert(byte[]) -> a
    54:75:int convert2Int(byte[]) -> b
    79:82:char convertDigit(int) -> a
    86:86:int[] getDec() -> a
cn.com.codesec.util.IRFile -> cn.com.codesec.util.O:
    cn.com.codesec.util.SourceFile translationSource -> b
    cn.com.codesec.util.fset.FSet secondaryTranslationSources -> c
    boolean fromJsp -> d
    19:19:boolean isFromJsp() -> a
    23:24:void setFromJsp(boolean) -> a
    27:30:void <init>(java.lang.String,boolean) -> <init>
    33:33:cn.com.codesec.util.SourceFile getTranslationSource() -> b
    37:38:void setTranslationSource(cn.com.codesec.util.SourceFile) -> a
    41:45:void addSecondaryTranslationSource(cn.com.codesec.util.FilePath) -> a
    48:49:void addSecondaryTranslationSource(cn.com.codesec.util.SourceFile) -> b
    52:53:void addSecondaryTranslationSources(cn.com.codesec.util.fset.FSet) -> a
    56:57:void removeSecondaryTranslationSource(cn.com.codesec.util.SourceFile) -> c
    60:60:cn.com.codesec.util.fset.FSet getSecondaryTranslationSources() -> c
cn.com.codesec.util.IndentPrinter -> cn.com.codesec.util.P:
    int indentSize -> a
    int prefix -> b
    boolean nl -> c
    int DEFAULT_INDENT_SIZE -> d
    java.lang.String SPACES -> e
    19:23:void <init>(java.io.Writer,int,int,boolean) -> <init>
    26:27:void <init>(java.io.Writer,int,int) -> <init>
    30:31:void <init>(java.io.Writer,int) -> <init>
    34:35:void <init>(java.io.Writer) -> <init>
    38:42:void <init>(java.io.PrintStream,int,int,boolean) -> <init>
    45:46:void <init>(java.io.PrintStream,int,int) -> <init>
    49:50:void <init>(java.io.PrintStream,int) -> <init>
    53:54:void <init>(java.io.PrintStream) -> <init>
    57:58:void indent(int) -> a
    61:62:void indent() -> a
    65:67:void dedent(int) -> b
    70:72:void dedent() -> b
    76:78:void print(java.lang.String) -> print
    82:84:void print(char[]) -> print
    88:90:void print(java.lang.Object) -> print
    94:96:void print(char) -> print
    100:102:void print(int) -> print
    106:108:void print(long) -> print
    112:114:void print(double) -> print
    118:120:void print(float) -> print
    124:126:void print(boolean) -> print
    130:133:void println(java.lang.String) -> println
    137:140:void println(char[]) -> println
    144:147:void println(java.lang.Object) -> println
    151:154:void println(char) -> println
    158:161:void println(int) -> println
    165:168:void println(long) -> println
    172:175:void println(double) -> println
    179:182:void println(float) -> println
    186:189:void println(boolean) -> println
    193:195:void println() -> println
    199:201:void write(char[]) -> write
    205:207:void write(char[],int,int) -> write
    210:212:void write(char) -> a
    216:218:void write(java.lang.String) -> write
    222:224:void write(java.lang.String,int,int) -> write
    227:231:void pre() -> c
    235:240:void printIndent() -> d
cn.com.codesec.util.MInteger -> cn.com.codesec.util.Q:
    int value -> a
    9:11:void <init>(int) -> <init>
    14:14:int getValue() -> a
    18:19:void setValue(int) -> a
cn.com.codesec.util.MultiMap -> cn.com.codesec.util.R:
    14:14:void <init>() -> <init>
    17:23:void putIntoList(java.lang.Object,java.lang.Object) -> a
    26:32:void putAllIntoList(java.lang.Object,java.util.Collection) -> a
    35:35:java.util.List getList(java.lang.Object) -> a
cn.com.codesec.util.MultiSetMap -> cn.com.codesec.util.S:
    java.util.Map fInternalMap -> a
    java.lang.Object fLock -> b
    16:18:void <init>() -> <init>
    21:22:void putIntoList(java.lang.Object,java.lang.Object) -> a
    25:26:void putAllIntoSet(java.lang.Object,java.util.Collection) -> a
    29:29:java.util.Set getSet(java.lang.Object) -> a
    33:33:java.util.Set keySet() -> a
    37:37:java.util.Collection values() -> b
    44:51:java.util.Set internalGetSet(java.lang.Object) -> b
cn.com.codesec.util.NumberUtil -> cn.com.codesec.util.T:
    char[] NIBBLE_TO_HEX -> a
    int[] FLOOR_LOG2_LOOKUP_TABLE -> b
    int FLOOR_LOG2_LOOKUP_TABLE_BITS -> c
    int FLOOR_LOG2_LOOKUP_TABLE_SIZE -> d
    7:144:void <clinit>() -> <clinit>
    12:13:void <init>() -> <init>
    16:22:java.lang.String byteArrayToHexString(byte[]) -> a
    26:26:byte[] intToByteArray(int) -> a
    30:30:java.lang.String intToAlphabet(int) -> b
    34:41:long calcHash(byte[],int,int) -> a
    45:49:int setBit(int,int,boolean) -> a
    53:54:boolean getBit(int,int) -> a
    58:69:int floorLog2(int) -> c
    73:78:int bitCount(int) -> d
    82:87:int bitCount(long) -> a
    91:94:boolean isPowerOfTwo(int) -> e
    98:101:boolean isPowerOfTwo(long) -> b
    106:106:long getLong(byte[],int) -> a
    110:118:void putLong(byte[],int,long) -> a
    121:127:double clamp(double,double,double) -> a
    131:137:int clamp(int,int,int) -> a
cn.com.codesec.util.PropertyKey -> cn.com.codesec.util.U:
    java.lang.String key -> a
    9:11:void <init>(java.lang.String) -> <init>
    14:14:java.lang.String getKey() -> b
    18:18:java.lang.String toString() -> toString
cn.com.codesec.util.RegexUtil -> cn.com.codesec.util.V:
    9:9:void <init>() -> <init>
    11:11:java.util.regex.Pattern wildcardStringToRegexPattern(java.lang.String) -> a
    15:15:java.util.regex.Pattern wildcardStringToRegexPattern(java.lang.String,int) -> a
    19:47:java.lang.String wildcardStringToRegexString(java.lang.String) -> b
cn.com.codesec.util.Renderer -> cn.com.codesec.util.W:
    java.util.Map filePathAndId -> a
    java.lang.String path -> c
    java.lang.String nodeName -> d
    java.util.Set jspFilePaths -> b
    47:47:void <clinit>() -> <clinit>
    48:58:void <init>(java.lang.String,java.lang.String) -> <init>
    61:67:java.lang.String getFunMetaName(cn.com.codesec.scan.metadata.FunMeta) -> a
    70:87:java.util.List collectCodeFragmentNodes(cn.com.codesec.util.Renderer$CodeFragmentNode) -> a
    90:90:java.lang.String dotEscape(java.lang.String) -> a
    94:108:boolean isCorrectLocationNode(cn.com.codesec.scan.meta.Symbol) -> a
    112:125:boolean isCorrectLocationSourceInfo(cn.com.codesec.parse.ir.SourceInfo) -> a
    128:132:boolean isCorrectLocationNode(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    137:167:boolean isCurrentNode(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    173:204:boolean isCurrentNode(cn.com.codesec.scan.meta.Symbol) -> b
    209:427:void renderXML(java.util.Map) -> a
    429:440:void sortList(java.util.List) -> a
    442:496:void renderDot(java.util.Map) -> b
    499:531:java.lang.String getNodeStringByCodeFragmentNode(cn.com.codesec.util.Renderer$CodeFragmentNode,java.util.List,boolean) -> a
    536:548:java.util.List getFileStrings(cn.com.codesec.util.FilePath) -> a
cn.com.codesec.util.Renderer$1 -> cn.com.codesec.util.X:
    cn.com.codesec.util.Renderer this$0 -> a
    1:429:void <init>(cn.com.codesec.util.Renderer) -> <init>
    432:437:int compare(cn.com.codesec.util.Renderer$CodeFragmentNode,cn.com.codesec.util.Renderer$CodeFragmentNode) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.util.Renderer$CodeFragmentNode -> cn.com.codesec.util.Y:
    cn.com.codesec.scan.ir.nodes.IRNode node -> a
    int lineStart -> b
    int lineEnd -> c
    int columnStart -> d
    int columnEnd -> e
    java.lang.String name -> f
    java.lang.String description -> g
    cn.com.codesec.util.Renderer$NodeType nodeType -> h
    cn.com.codesec.util.Renderer$OccurrenceType occurrenceType -> i
    java.util.List preds -> j
    java.util.List succs -> k
    cn.com.codesec.util.FilePath filePath -> l
    boolean isLambdaClass -> m
    boolean isAnonymousClass -> n
    566:580:void <init>(int,int,int,int,java.lang.String,java.lang.String,cn.com.codesec.util.Renderer$NodeType,cn.com.codesec.util.Renderer$OccurrenceType) -> <init>
    584:585:void <init>(int,int,int,int,java.lang.String,java.lang.String,cn.com.codesec.util.Renderer$NodeType) -> <init>
    589:593:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String,java.lang.String,cn.com.codesec.util.Renderer$NodeType,cn.com.codesec.util.Renderer$OccurrenceType) -> <init>
    596:597:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String,java.lang.String,cn.com.codesec.util.Renderer$NodeType) -> <init>
    599:600:void <init>(cn.com.codesec.scan.ir.nodes.IRNode,java.lang.String,cn.com.codesec.util.Renderer$NodeType) -> <init>
    603:603:cn.com.codesec.scan.ir.nodes.IRNode getNode() -> a
    607:608:void setNode(cn.com.codesec.scan.ir.nodes.IRNode) -> a
    611:611:java.lang.String getName() -> b
    615:616:void setName(java.lang.String) -> a
    619:619:cn.com.codesec.util.FilePath getFilePath() -> c
    623:624:void setFilePath(cn.com.codesec.util.FilePath) -> a
    627:627:java.util.List getPreds() -> d
    631:632:void setPreds(java.util.List) -> a
    635:635:java.util.List getSuccs() -> e
    639:640:void setSuccs(java.util.List) -> b
    643:643:cn.com.codesec.scan.ir.nodes.IRNode getIRNode() -> f
    647:648:void setIRNode(cn.com.codesec.scan.ir.nodes.IRNode) -> b
    651:651:java.lang.String getDescription() -> g
    656:656:boolean isLambdaClass() -> h
    660:661:void setLambdaClass(boolean) -> a
    664:664:boolean isAnonymousClass() -> i
    668:669:void setAnonymousClass(boolean) -> b
    672:673:void setDescription(java.lang.String) -> b
    676:676:cn.com.codesec.util.Renderer$NodeType getNodeType() -> j
    680:681:void setNodeType(cn.com.codesec.util.Renderer$NodeType) -> a
    684:684:cn.com.codesec.util.Renderer$OccurrenceType getOccurrenceType() -> k
    688:689:void setOccurrenceType(cn.com.codesec.util.Renderer$OccurrenceType) -> a
    692:692:int getLineStart() -> l
    696:697:void setLineStart(int) -> a
    700:700:int getLineEnd() -> m
    704:705:void setLineEnd(int) -> b
    708:708:int getColumnStart() -> n
    712:713:void setColumnStart(int) -> c
    716:716:int getColumnEnd() -> o
    720:721:void setColumnEnd(int) -> d
    727:729:java.lang.String toString() -> toString
    734:746:int hashCode() -> hashCode
    751:790:boolean equals(java.lang.Object) -> equals
    793:817:boolean loactionEquals(java.lang.Object) -> a
    820:849:boolean jspEquals(java.lang.Object) -> b
cn.com.codesec.util.Renderer$NodeType -> cn.com.codesec.util.Z:
    cn.com.codesec.util.Renderer$NodeType VARIABLE -> a
    cn.com.codesec.util.Renderer$NodeType STATEMENT -> b
    cn.com.codesec.util.Renderer$NodeType METHOD -> c
    cn.com.codesec.util.Renderer$NodeType TYPE -> d
    cn.com.codesec.util.Renderer$NodeType File -> e
    java.lang.String name -> f
    cn.com.codesec.util.Renderer$NodeType[] ENUM$VALUES -> g
    854:855:void <clinit>() -> <clinit>
    858:860:void <init>(java.lang.String,int,java.lang.String) -> <init>
    863:863:java.lang.String getName() -> a
    867:868:void setName(java.lang.String) -> a
    1:1:cn.com.codesec.util.Renderer$NodeType[] values() -> values
    1:1:cn.com.codesec.util.Renderer$NodeType valueOf(java.lang.String) -> valueOf
cn.com.codesec.util.Renderer$OccurrenceType -> cn.com.codesec.util.aa:
    cn.com.codesec.util.Renderer$OccurrenceType DEFINITION -> a
    cn.com.codesec.util.Renderer$OccurrenceType REFERENCE -> b
    cn.com.codesec.util.Renderer$OccurrenceType MODIFICATION -> c
    java.lang.String name -> d
    cn.com.codesec.util.Renderer$OccurrenceType[] ENUM$VALUES -> e
    871:872:void <clinit>() -> <clinit>
    875:877:void <init>(java.lang.String,int,java.lang.String) -> <init>
    880:880:java.lang.String getName() -> a
    884:885:void setName(java.lang.String) -> a
    1:1:cn.com.codesec.util.Renderer$OccurrenceType[] values() -> values
    1:1:cn.com.codesec.util.Renderer$OccurrenceType valueOf(java.lang.String) -> valueOf
cn.com.codesec.util.RulepackLocale -> cn.com.codesec.util.ab:
    java.lang.String id -> h
    java.lang.String displayName -> i
    cn.com.codesec.util.RulepackLocale ENGLISH -> a
    cn.com.codesec.util.RulepackLocale JAPANESE -> b
    cn.com.codesec.util.RulepackLocale KOREAN -> c
    cn.com.codesec.util.RulepackLocale SIMPLIFIED_CHINESE -> d
    cn.com.codesec.util.RulepackLocale TRADITIONAL_CHINESE -> e
    cn.com.codesec.util.RulepackLocale SPANISH -> f
    cn.com.codesec.util.RulepackLocale PORTUGUESE -> g
    11:17:void <clinit>() -> <clinit>
    19:22:void <init>(java.lang.String,java.lang.String) -> <init>
    25:25:java.lang.String getLocaleId() -> a
    29:29:java.lang.String getDisplayName() -> b
cn.com.codesec.util.RulepackUtil -> cn.com.codesec.util.ac:
    java.lang.String[] RULEPACK_EXTENSIONS -> a
    java.lang.String[] NON_RULEPACK_FILENAMES -> b
    10:11:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    14:18:boolean isRulepack(java.lang.String) -> a
    22:34:boolean isRulepack(java.io.File) -> a
    38:51:java.io.File[] getRulepacks(java.io.File) -> b
    55:60:java.lang.String[] getRulepackFilter() -> a
    64:64:java.lang.String[] getRulepackExtensions() -> b
    68:68:java.lang.String[] getNonRulepackFilenames() -> c
cn.com.codesec.util.RulepackUtil$1 -> cn.com.codesec.util.ad:
    1:41:void <init>() -> <init>
    45:45:boolean accept(java.io.File) -> accept
cn.com.codesec.util.SKYFile -> cn.com.codesec.util.ae:
    cn.com.codesec.util.FilePath filename -> b
    java.io.File datasource -> a
    cn.com.codesec.parse.meta.FileType type -> c
    int sourceLines -> d
    26:31:void <init>(cn.com.codesec.util.FilePath,java.io.File,cn.com.codesec.parse.meta.FileType) -> <init>
    34:35:void <init>(java.lang.String,cn.com.codesec.parse.meta.FileType,boolean) -> <init>
    37:53:void <init>(java.io.File,cn.com.codesec.parse.meta.FileType,boolean) -> <init>
    56:56:java.io.InputStream getStream() -> d
    61:66:org.apache.commons.io.input.BOMInputStream getBOMStream() -> e
    70:70:boolean isReadable() -> f
    74:79:boolean dataSourceUnder(java.io.File) -> a
    83:83:java.io.File getDataSource() -> g
    87:88:void setDataSource(java.io.File) -> b
    94:94:java.io.File getJavaFile() -> h
    98:98:cn.com.codesec.parse.meta.FileType getType() -> i
    102:102:boolean isSecondary() -> j
    106:106:java.lang.String getName() -> k
    110:110:java.lang.String getPath() -> l
    114:114:cn.com.codesec.util.FilePath getFilePath() -> m
    118:118:int getSourceLines() -> n
    122:123:void setSourceLines(int) -> a
    127:127:java.lang.String toString() -> toString
    132:139:boolean equals(java.lang.Object) -> equals
    144:144:int hashCode() -> hashCode
    149:149:int compareTo(cn.com.codesec.util.SKYFile) -> a
    153:153:boolean exists() -> o
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.util.SecondaryFile -> cn.com.codesec.util.af:
    cn.com.codesec.util.SourceFile originalDataSource -> c
    18:20:void <init>(cn.com.codesec.util.FilePath,java.io.File,cn.com.codesec.parse.meta.FileType,long,long) -> <init>
    23:25:void <init>(java.io.File,cn.com.codesec.parse.meta.FileType) -> <init>
    29:29:boolean isSecondary() -> j
    33:33:cn.com.codesec.util.SourceFile getOriginalDataSource() -> a
    37:38:void setOriginalDataSource(cn.com.codesec.util.SourceFile) -> a
cn.com.codesec.util.Severity -> cn.com.codesec.util.ag:
    float MIN_SEVERITY_VALUE -> a
    float MAX_SEVERITY_VALUE -> b
    java.lang.String UNKNOWN_SEVERITY -> c
    java.lang.String DEFAULT_SEVERITY_PROPERTIES -> d
    java.util.Set ORDERED_SEVERITIES -> e
    java.util.Properties props -> f
    57:107:void <clinit>() -> <clinit>
    24:25:void <init>() -> <init>
    28:38:void useDefaultMap() -> a
    41:47:java.lang.String numberToString(float) -> a
cn.com.codesec.util.Severity$SeverityMapping -> cn.com.codesec.util.ah:
    java.lang.String severityName -> a
    java.lang.Float maxValue -> b
    117:120:void <init>(java.lang.String,java.lang.Float) -> <init>
    123:123:java.lang.String getSeverityName() -> a
    127:127:java.lang.Float getMaxValue() -> b
    132:132:int compareTo(cn.com.codesec.util.Severity$SeverityMapping) -> a
    1:1:int compareTo(java.lang.Object) -> compareTo
cn.com.codesec.util.ShellUtil -> cn.com.codesec.util.ai:
    java.lang.String appLocalName -> a
    7:17:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    10:10:java.lang.String getLocalAppdataPath() -> a
cn.com.codesec.util.SortedProperties -> cn.com.codesec.util.aj:
    11:11:void <init>() -> <init>
    15:21:java.util.Enumeration keys() -> keys
cn.com.codesec.util.SourceFile -> cn.com.codesec.util.ak:
    long length -> c
    long lastModified -> d
    java.lang.String encoding -> e
    java.lang.String originPath -> f
    cn.com.codesec.util.FilePath filePath -> b
    22:23:void <init>(java.io.File,cn.com.codesec.parse.meta.FileType) -> <init>
    26:33:void <init>(java.io.File,cn.com.codesec.parse.meta.FileType,boolean) -> <init>
    35:44:void <init>(java.io.File,cn.com.codesec.parse.meta.FileType,java.lang.String,boolean) -> <init>
    46:50:void <init>(java.lang.String,long,long,cn.com.codesec.parse.meta.FileType) -> <init>
    53:53:java.lang.String getName() -> k
    56:56:cn.com.codesec.util.FilePath getFilePath() -> m
    60:65:void <init>(cn.com.codesec.util.FilePath,java.io.File,cn.com.codesec.parse.meta.FileType,long,long) -> <init>
    68:69:void <init>(cn.com.codesec.util.FilePath,cn.com.codesec.parse.meta.FileType) -> <init>
    72:72:long getLength() -> b
    76:76:long getLastModified() -> c
    80:80:java.lang.String getEncoding() -> p
    84:85:void setEncoding(java.lang.String) -> a
    95:95:cn.com.codesec.util.SourceFile create(java.lang.String,cn.com.codesec.parse.meta.FileType) -> a
    99:99:cn.com.codesec.util.SourceFile create(java.io.File,cn.com.codesec.parse.meta.FileType) -> a
    103:103:cn.com.codesec.util.SourceFile create(java.io.File,java.lang.String,cn.com.codesec.parse.meta.FileType) -> a
    110:110:cn.com.codesec.util.SourceFile create(java.io.File,cn.com.codesec.parse.meta.FileType,boolean) -> a
    117:117:cn.com.codesec.util.SourceFile create(java.io.File,cn.com.codesec.parse.meta.FileType,java.lang.String,boolean) -> a
    122:122:cn.com.codesec.util.SourceFile create(java.lang.String,long,long,cn.com.codesec.parse.meta.FileType) -> a
    130:130:java.io.File createFile(java.lang.String) -> b
    134:134:org.apache.commons.io.input.XmlStreamReader getXmlStreamReader() -> q
    138:152:org.apache.commons.io.input.XmlStreamReader getXmlStreamReader(java.lang.String) -> c
cn.com.codesec.util.StringBuilderWriter -> cn.com.codesec.util.al:
    java.lang.StringBuilder dest -> a
    12:17:void <init>(java.lang.StringBuilder) -> <init>
    21:25:void write(char[],int,int) -> write
    29:29:void flush() -> flush
    33:34:void close() -> close
cn.com.codesec.util.StringUtil -> cn.com.codesec.util.am:
    java.lang.String DEFAULT_ENCODING -> a
    java.lang.String LINE_SEP -> b
    java.lang.String HEX -> c
    char[] REGEX_METACHARS -> d
    26:28:void <clinit>() -> <clinit>
    30:31:void <init>() -> <init>
    35:38:byte[] getBytes(java.lang.String) -> a
    43:59:java.lang.String[] split(java.lang.String) -> b
    63:64:java.lang.String[] splitToArray(java.lang.String,char) -> a
    69:92:java.util.List split(java.lang.String,char) -> b
    96:106:java.lang.String join(java.lang.String[],java.lang.String) -> a
    110:118:java.lang.String join(java.lang.Object[],java.lang.String) -> a
    122:122:java.lang.String join(java.lang.String[]) -> a
    126:126:java.lang.String join2(java.lang.String[]) -> b
    130:136:java.lang.String join(java.util.Collection,java.lang.String) -> a
    140:140:java.lang.String join(java.util.Collection) -> a
    144:151:java.lang.String stackTraceToString(java.lang.Throwable) -> a
    156:174:java.lang.String mergeConcat(java.lang.String,java.lang.String) -> a
    178:178:java.lang.String[] parseArguments(java.lang.String) -> c
    182:221:java.lang.String[] parseArguments(java.lang.String,boolean) -> a
    225:251:void writeExecArgs(java.io.OutputStream,java.util.List) -> a
    254:267:java.lang.String sanitizeForReplace(java.lang.String) -> d
    271:291:java.lang.String formatForCommandLine(java.lang.String) -> e
    295:323:java.lang.String escapeSpecialChars(java.lang.String) -> f
    327:340:java.lang.String toJavaAsciiLiteral(java.lang.String[]) -> c
    344:346:java.lang.String toJavaAsciiLiteral(java.lang.String) -> g
    350:359:void toJavaAsciiLiteral(java.lang.StringBuffer,java.lang.String) -> a
    362:364:java.lang.String toJavaAsciiLiteral(byte[]) -> a
    368:373:void toJavaAsciiLiteral(java.lang.StringBuffer,byte[]) -> a
    376:410:void toJavaAsciiLiteral(java.lang.StringBuffer,char) -> a
    414:423:java.lang.String escapeUnixCommandArgument(java.lang.String) -> h
    427:463:java.lang.String getFriendlyDescriptionOfChar(char) -> a
    467:467:boolean isEmpty(java.lang.String) -> i
    471:474:java.lang.String truncate(java.lang.String,int) -> a
    478:479:java.lang.String firstline(java.lang.String) -> j
    483:487:boolean isLowerCase(java.lang.String) -> k
    492:499:java.lang.String throwableToString(java.lang.Throwable) -> b
    504:514:java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String) -> a
    519:522:void replaceAll(java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    525:537:void replaceAll(java.lang.StringBuilder,java.lang.String,java.lang.String,boolean) -> a
    540:548:java.lang.String replaceFirst(java.lang.String,java.lang.String,java.lang.String) -> b
    552:557:java.lang.String normalizeNewlines(java.lang.String) -> l
    561:568:java.lang.String buildClassPath(java.util.List) -> a
    572:578:java.lang.String rawBytesToString(byte[]) -> b
    582:586:java.lang.String[] splitOnNext(java.lang.String,java.lang.String) -> b
    590:608:java.lang.String[] splitOutNext(java.lang.String,java.lang.String,java.lang.String) -> c
    612:626:java.lang.String padLeft(java.lang.String,java.lang.String,int) -> a
    630:644:java.lang.String padRight(java.lang.String,java.lang.String,int) -> b
    648:659:java.lang.String escapeForRegexPattern(java.lang.String) -> m
    663:663:java.lang.String trimLeft(java.lang.String) -> n
    667:667:boolean isHexDigit(char) -> b
    671:671:boolean isAlphanumeric(java.lang.String) -> o
    675:675:java.lang.String sanitizeFilename(java.lang.String) -> p
    679:679:java.lang.String sanitizeLog(java.lang.String) -> q
    683:683:java.lang.String sanitizeHtml(java.lang.String) -> r
    687:687:java.lang.String sanitizeGuid(java.lang.String) -> s
    691:695:boolean beginsWith(java.lang.StringBuilder,java.lang.String,boolean) -> a
    699:706:boolean endsWith(java.lang.StringBuilder,java.lang.String,boolean) -> b
    710:713:java.lang.String removeSuffix(java.lang.String,java.lang.String) -> c
    717:720:java.lang.String unescapeQuoted(java.lang.String) -> t
    724:724:java.lang.String capitalizeFirstLetter(java.lang.String) -> u
    733:736:java.lang.String toUpperCaseFirstOne(java.lang.String) -> v
cn.com.codesec.util.SystemUtil -> cn.com.codesec.util.an:
    java.lang.String localhostName -> c
    java.util.Properties properties -> d
    java.lang.String OS_NAME_PROPERTY -> a
    java.lang.String LINE_SEP -> b
    boolean IS_WINDOWS -> e
    boolean IS_SOLARIS -> f
    boolean IS_MACOS -> g
    boolean IS_LINUX -> h
    boolean IS_AIX -> i
    boolean IS_HPUX -> j
    java.util.Locale systemDefault -> k
    14:164:void <clinit>() -> <clinit>
    29:30:void <init>() -> <init>
    33:36:java.lang.String getHostName() -> a
    40:40:boolean isWindows() -> b
    44:44:boolean isSolaris() -> c
    48:48:boolean isMacos() -> d
    52:52:boolean isLinux() -> e
    56:56:boolean isAIX() -> f
    60:60:boolean isHPUX() -> g
    64:64:java.util.Locale getSystemDefaultLocale() -> h
    71:71:java.lang.String replaceVarsInProp(java.lang.String,java.util.Properties,java.util.Properties) -> a
    75:111:java.lang.String replaceVarsInProp(java.lang.String,java.util.Properties,java.util.Properties,int) -> a
    115:119:java.io.File findExecutableDir(java.lang.String,java.lang.String) -> a
    123:129:void reassessVariableSubstitution() -> i
    132:152:java.io.File findExecutableDir(java.lang.String[],java.lang.String) -> a
cn.com.codesec.util.TriState -> cn.com.codesec.util.ao:
    cn.com.codesec.util.TriState YES -> a
    cn.com.codesec.util.TriState NO -> b
    cn.com.codesec.util.TriState MAYBE -> c
    8:10:void <clinit>() -> <clinit>
    12:13:void <init>() -> <init>
    16:16:cn.com.codesec.util.TriState fromBoolean(boolean) -> a
    20:26:cn.com.codesec.util.TriState and(cn.com.codesec.util.TriState) -> a
    30:36:cn.com.codesec.util.TriState or(cn.com.codesec.util.TriState) -> b
    40:40:cn.com.codesec.util.TriState not() -> a
    44:44:java.lang.String toString() -> toString
cn.com.codesec.util.TwoWayHashMap -> cn.com.codesec.util.ap:
    java.util.Map valsToKeys -> a
    12:14:void <init>() -> <init>
    18:19:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    23:23:java.lang.Object getKey(java.lang.Object) -> a
cn.com.codesec.util.UnicodeReader -> cn.com.codesec.util.aq:
    java.io.PushbackInputStream in -> a
    java.lang.String defaultEncoding -> b
    java.lang.String finalEncoding -> c
    java.io.Reader reader -> d
    12:18:void <init>(java.io.InputStream,java.lang.String) -> <init>
    21:71:void setup() -> b
    74:74:java.lang.String getFinalEncoding() -> a
    78:82:void close() -> close
    85:88:int read(char[],int,int) -> read
cn.com.codesec.util.Util -> cn.com.codesec.util.ar:
    boolean $assertionsDisabled -> a
    28:28:void <clinit>() -> <clinit>
    29:30:void <init>() -> <init>
    33:41:javax.xml.parsers.SAXParser createSaxParser() -> a
    46:55:void saxSetFeature(javax.xml.parsers.SAXParserFactory,java.lang.String,boolean) -> a
    58:70:boolean eq(java.lang.Object,java.lang.Object) -> a
    74:74:int compare(java.lang.Comparable,java.lang.Object) -> a
    78:82:int compare(java.lang.Comparable,java.lang.Object,cn.com.codesec.util.Util$IntFunc) -> a
    86:95:int compare(java.lang.Comparable,java.lang.Object,int) -> a
    100:125:int compare(java.util.List,java.util.List,int,boolean) -> a
    132:155:int compare(java.lang.Comparable[],java.lang.Object[],int,boolean) -> a
    160:185:int compare(java.util.LinkedHashSet,java.util.LinkedHashSet,int,boolean) -> a
    190:221:int compare(java.util.LinkedHashMap,java.util.LinkedHashMap,int,boolean) -> a
    225:225:java.lang.Object cast(java.lang.Object) -> a
    229:229:java.lang.AssertionError badType(java.lang.Object) -> b
    233:234:void assertBadType(java.lang.Object) -> c
    237:240:java.lang.String getTypeString(java.lang.Object) -> e
    244:244:java.util.regex.Pattern literalRegex(java.lang.String) -> a
    248:250:java.lang.AssertionError assertRelay(java.lang.String,java.lang.Throwable) -> a
    254:257:void ensureNotNull(java.lang.Object) -> d
    260:263:void ensureNotNull(java.lang.Object,java.lang.String) -> a
    266:269:void ensureNotNegative(int) -> a
    272:275:void ensureNotNegative(int,java.lang.String) -> a
    278:281:void ensurePositive(int) -> b
    284:287:void ensurePositive(int,java.lang.String) -> b
    290:293:java.lang.Object[] concat(java.lang.Object[],java.lang.Object[]) -> a
    297:306:java.lang.Object[] subArray(java.lang.Object[],int,int) -> a
    310:319:java.lang.Object[] shrinkArray(java.lang.Object[],int) -> a
    323:323:java.util.Map mapify(java.lang.Object[]) -> a
    327:333:java.util.Map mapify(java.lang.Object[],java.util.Map) -> a
    337:337:java.lang.Object[] l(java.lang.Object[]) -> b
    341:341:boolean isNullOrEmpty(java.lang.String) -> b
    345:345:boolean isNullOrEmpty(java.util.Collection) -> a
cn.com.codesec.util.Util$IntFunc -> cn.com.codesec.util.as:
    int apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.util.VmMonitor -> cn.com.codesec.util.at:
    42:43:boolean disableMxData() -> a
    48:49:boolean printFullMxData() -> b
    53:55:java.lang.String printMXBeans(java.util.EnumSet) -> a
    59:73:void printMXBeans(java.util.EnumSet,java.io.Writer) -> a
    76:85:void writeMXBeanList(java.util.EnumSet,cn.com.codesec.util.VmMonitor$MXBeanType,java.util.List,java.lang.Class,cn.com.codesec.util.IndentPrinter) -> a
    88:143:void writeMXBean(java.util.EnumSet,cn.com.codesec.util.VmMonitor$MXBeanType,java.lang.Object,java.lang.Class,cn.com.codesec.util.IndentPrinter) -> a
    150:207:void storeAttribute(java.util.Map,java.lang.String,java.lang.Object) -> a
    211:234:java.util.Map listBean(java.lang.Object) -> a
    238:238:boolean isPrintableType(java.lang.Class) -> a
    243:251:java.lang.Object runGetter(java.lang.Object,java.lang.reflect.Method) -> a
    254:255:void <init>() -> <init>
cn.com.codesec.util.VmMonitor$MXBeanType -> cn.com.codesec.util.au:
    cn.com.codesec.util.VmMonitor$MXBeanType CLASS_LOADING -> a
    cn.com.codesec.util.VmMonitor$MXBeanType COMPILATION -> b
    cn.com.codesec.util.VmMonitor$MXBeanType GARBAGE_COLLECTOR -> c
    cn.com.codesec.util.VmMonitor$MXBeanType MEMORY_MANAGER -> d
    cn.com.codesec.util.VmMonitor$MXBeanType MEMORY -> e
    cn.com.codesec.util.VmMonitor$MXBeanType MEMORY_POOL -> f
    cn.com.codesec.util.VmMonitor$MXBeanType OPERATING_SYSTEM -> g
    cn.com.codesec.util.VmMonitor$MXBeanType RUNTIME -> h
    cn.com.codesec.util.VmMonitor$MXBeanType THREAD -> i
    java.util.Set excludedKeys -> j
    cn.com.codesec.util.VmMonitor$MXBeanType[] ENUM$VALUES -> k
    260:269:void <clinit>() -> <clinit>
    273:275:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    278:278:java.util.Set getExcludedStrings() -> a
    1:1:cn.com.codesec.util.VmMonitor$MXBeanType[] values() -> values
    1:1:cn.com.codesec.util.VmMonitor$MXBeanType valueOf(java.lang.String) -> valueOf
cn.com.codesec.util.WildcardHelper -> cn.com.codesec.util.av:
    int MATCH_FILE -> a
    int MATCH_PATH -> b
    int MATCH_BEGIN -> c
    int MATCH_THEEND -> d
    int MATCH_END -> e
    30:30:void <init>() -> <init>
    63:63:boolean isLiteral(java.lang.String) -> a
    102:153:int[] compilePattern(java.lang.String) -> b
    167:304:boolean match(java.util.Map,java.lang.String,int[]) -> a
    325:368:int indexOfArray(int[],int,int,char[],int) -> a
    389:434:int lastIndexOfArray(int[],int,int,char[],int) -> b
    452:462:boolean matchArray(int[],int,int,char[],int) -> c
cn.com.codesec.util.XMLUtils -> cn.com.codesec.util.aw:
    12:12:void <init>() -> <init>
    14:31:java.util.List getChildren(org.w3c.dom.Element,java.lang.String) -> a
    35:50:org.w3c.dom.Element getChild(org.w3c.dom.Element,java.lang.String) -> b
    54:58:java.lang.String getChildText(org.w3c.dom.Element,java.lang.String) -> c
    62:73:java.lang.String sanitizeString(java.lang.String) -> a
cn.com.codesec.util.XmlHandlerRelay -> cn.com.codesec.util.ax:
    8:8:void <init>() -> <init>
cn.com.codesec.util.XmlHandlerRelay$ContentHandler -> cn.com.codesec.util.ay:
    org.xml.sax.ContentHandler real -> a
    12:14:void <init>(org.xml.sax.ContentHandler) -> <init>
    18:19:void endDocument() -> endDocument
    23:24:void startDocument() -> startDocument
    28:29:void characters(char[],int,int) -> characters
    33:34:void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    38:39:void endPrefixMapping(java.lang.String) -> endPrefixMapping
    43:44:void skippedEntity(java.lang.String) -> skippedEntity
    48:49:void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    53:54:void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    58:59:void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
    63:64:void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    68:69:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
cn.com.codesec.util.XmlHandlerRelay$DocumentHandler -> cn.com.codesec.util.az:
    org.xml.sax.DocumentHandler real -> a
    75:80:void <init>(org.xml.sax.DocumentHandler) -> <init>
    84:85:void endDocument() -> endDocument
    89:90:void startDocument() -> startDocument
    94:95:void characters(char[],int,int) -> characters
    99:100:void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    104:105:void endElement(java.lang.String) -> endElement
    109:110:void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    114:115:void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    119:120:void startElement(java.lang.String,org.xml.sax.AttributeList) -> startElement
cn.com.codesec.util.XmlInvalidCharacterFilter -> cn.com.codesec.util.aA:
    13:13:void <init>() -> <init>
    15:20:boolean isValid(java.lang.String) -> c
    24:30:java.lang.String sanitizeString(java.lang.String) -> d
    34:40:boolean isValid(char) -> b
    33:33:boolean access$0(char) -> a
    14:14:boolean access$1(java.lang.String) -> a
    23:23:java.lang.String access$2(java.lang.String) -> b
cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler -> cn.com.codesec.util.aB:
    148:149:void <init>(org.xml.sax.ContentHandler) -> <init>
    152:152:void observeInvalidContent(char[],int,int) -> a
    155:155:void observeInvalidAttributeValue(java.lang.String,java.lang.String) -> a
    159:187:void characters(char[],int,int) -> characters
    191:193:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    196:201:org.xml.sax.Attributes sanitizeAttrs(org.xml.sax.Attributes) -> a
    205:222:org.xml.sax.Attributes sanitizeAttrs(int,org.xml.sax.Attributes) -> a
cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler$MyAttributes -> cn.com.codesec.util.aC:
    cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler$MyAttributes$Entry[] entryArray -> a
    java.util.Map qMap -> b
    java.util.Map ulMap -> c
    231:234:void <init>(cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler$MyAttributes$Entry[]) -> <init>
    237:245:void ensureQMap() -> d
    248:256:void ensureULMap() -> e
    260:260:int getLength() -> getLength
    265:268:java.lang.String getURI(int) -> getURI
    273:276:java.lang.String getLocalName(int) -> getLocalName
    281:284:java.lang.String getQName(int) -> getQName
    289:292:java.lang.String getType(int) -> getType
    297:300:java.lang.String getValue(int) -> getValue
    305:310:java.lang.String getType(java.lang.String) -> getType
    315:320:java.lang.String getValue(java.lang.String) -> getValue
    325:330:int getIndex(java.lang.String) -> getIndex
    335:340:java.lang.String getType(java.lang.String,java.lang.String) -> getType
    345:350:java.lang.String getValue(java.lang.String,java.lang.String) -> getValue
    355:360:int getIndex(java.lang.String,java.lang.String) -> getIndex
    364:364:cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler$MyAttributes$Entry[] getEntryArray() -> a
    368:368:java.util.Map getqMap() -> b
    372:373:void setqMap(java.util.Map) -> a
    376:376:java.util.Map getUlMap() -> c
    380:381:void setUlMap(java.util.Map) -> b
cn.com.codesec.util.XmlInvalidCharacterFilter$ContentHandler$MyAttributes$Entry -> cn.com.codesec.util.aD:
    java.lang.String uri -> a
    java.lang.String lname -> b
    java.lang.String qname -> c
    java.lang.String value -> d
    java.lang.String type -> e
    int index -> f
    392:393:void <init>(org.xml.sax.Attributes,int) -> <init>
    395:402:void <init>(org.xml.sax.Attributes,int,java.lang.String) -> <init>
cn.com.codesec.util.XmlInvalidCharacterFilter$Listener -> cn.com.codesec.util.aE:
    void observeInvalidContent(cn.com.codesec.util.XmlInvalidCharacterFilter$PathPart[],int,char[],int,int) -> a
    void observeInvalidAttributeValue(cn.com.codesec.util.XmlInvalidCharacterFilter$PathPart[],int,java.lang.String,java.lang.String) -> a
cn.com.codesec.util.XmlInvalidCharacterFilter$PathPart -> cn.com.codesec.util.aF:
    java.lang.String name -> a
    int index -> b
    43:45:void <init>() -> <init>
    48:50:void set(java.lang.String,int) -> a
    53:53:java.lang.String toString() -> toString
    57:66:java.lang.String fullPathToString(cn.com.codesec.util.XmlInvalidCharacterFilter$PathPart[],int) -> a
    70:70:java.lang.String getName() -> a
    74:75:void setName(java.lang.String) -> a
    78:78:int getIndex() -> b
    82:83:void setIndex(int) -> a
cn.com.codesec.util.XmlInvalidCharacterFilter$ReportingContentHandler -> cn.com.codesec.util.aG:
    cn.com.codesec.util.XmlInvalidCharacterFilter$Listener listener -> b
    cn.com.codesec.util.XmlInvalidCharacterFilter$PathPart[] path -> c
    int pathLength -> d
    98:108:void <init>(cn.com.codesec.util.XmlInvalidCharacterFilter$Listener,org.xml.sax.ContentHandler) -> <init>
    112:124:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    128:133:void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    137:138:void observeInvalidContent(char[],int,int) -> a
    142:143:void observeInvalidAttributeValue(java.lang.String,java.lang.String) -> a
cn.com.codesec.util.fset.AbstractFList -> cn.com.codesec.TV:
    26:26:void <init>() -> <init>
    36:36:cn.com.codesec.util.fset.AbstractFList clone() -> a
    41:41:java.lang.Object first() -> b
    46:46:java.lang.Object last() -> c
    51:51:cn.com.codesec.util.fset.FList lessFirst() -> d
    56:56:cn.com.codesec.util.fset.FList lessLast() -> e
    61:61:cn.com.codesec.util.fset.FList prefix(int) -> a
    66:66:cn.com.codesec.util.fset.FList suffix(int) -> b
    71:71:cn.com.codesec.util.fset.FList suffixFrom(int) -> c
    79:79:boolean add(java.lang.Object) -> add
    87:87:void add(int,java.lang.Object) -> add
    95:95:boolean addAll(int,java.util.Collection) -> addAll
    103:103:void clear() -> clear
    111:111:java.lang.Object remove(int) -> remove
    119:119:boolean removeRange(int,int) -> a
    127:127:java.lang.Object set(int,java.lang.Object) -> set
    137:137:void sort(java.util.Comparator) -> sort
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.util.fset.AbstractFMap -> cn.com.codesec.TW:
    23:23:void <init>() -> <init>
    33:33:void clear() -> clear
    41:41:cn.com.codesec.util.fset.AbstractFMap clone() -> a
    49:49:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    57:57:void putAll(java.util.Map) -> putAll
    65:65:java.lang.Object remove(java.lang.Object) -> remove
    1:1:java.lang.Object clone() -> clone
cn.com.codesec.util.fset.AbstractFSet -> cn.com.codesec.TX:
    26:26:void <init>() -> <init>
    36:36:boolean add(java.lang.Object) -> add
    44:44:boolean addAll(java.util.Collection) -> addAll
    52:52:void clear() -> clear
    60:60:boolean remove(java.lang.Object) -> remove
    68:68:boolean removeAll(java.util.Collection) -> removeAll
    76:76:boolean retainAll(java.util.Collection) -> retainAll
cn.com.codesec.util.fset.BinaryOp -> cn.com.codesec.TY:
    java.lang.Object apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.util.fset.FHashMap -> cn.com.codesec.TZ:
    cn.com.codesec.util.fset.BinaryOp second -> c
    cn.com.codesec.util.fset.FHashMap EMPTY_INSTANCE -> d
    java.lang.Object tree -> a
    java.lang.Object dflt -> e
    int hashCode -> f
    int MAX_LEAF_ARRAY_LENGTH -> g
    int BALANCE_FACTOR -> h
    int NEGATIVE_INFINITY -> i
    int POSITIVE_INFINITY -> j
    java.lang.Object NO_ELEMENT -> b
    int BIN_SEARCH_NOT_FOUND -> k
    int BIN_SEARCH_FOUND -> l
    int BIN_SEARCH_FOUND_MASK -> m
    int BIN_SEARCH_INDEX_SHIFT -> n
    java.lang.reflect.Field TreeField -> o
    360:2109:void <clinit>() -> <clinit>
    119:119:cn.com.codesec.util.fset.FHashMap emptyMap() -> b
    125:458:void <init>() -> <init>
    136:458:void <init>(java.util.Map) -> <init>
    142:151:java.lang.Object fromMap(java.util.Map) -> a
    163:458:void <init>(java.lang.Object[],java.lang.Object[]) -> <init>
    183:183:cn.com.codesec.util.fset.FHashMap withDefault(java.lang.Object) -> a
    198:198:cn.com.codesec.util.fset.FHashMap withDefault(java.util.Map,java.lang.Object) -> a
    203:203:boolean isEmpty() -> isEmpty
    208:208:int size() -> size
    213:213:java.util.Map$Entry arb() -> c
    223:223:boolean contains(java.util.Map$Entry) -> a
    228:228:boolean containsKey(java.lang.Object) -> containsKey
    239:241:java.lang.Object get(java.lang.Object) -> get
    246:248:cn.com.codesec.util.fset.FHashMap with(java.lang.Object,java.lang.Object) -> a
    253:256:cn.com.codesec.util.fset.FHashMap less(java.lang.Object) -> b
    261:261:java.util.Set keySet() -> keySet
    279:279:java.util.Collection values() -> values
    295:295:java.util.Set entrySet() -> entrySet
    325:326:cn.com.codesec.util.fset.FHashSet domain() -> d
    337:337:cn.com.codesec.util.fset.FSet range() -> e
    343:343:cn.com.codesec.util.fset.FSet range(cn.com.codesec.util.fset.FSet) -> a
    348:348:cn.com.codesec.util.fset.FHashSet toSet() -> f
    354:357:cn.com.codesec.util.fset.FSet toSet(cn.com.codesec.util.fset.FSet) -> b
    367:367:cn.com.codesec.util.fset.FHashMap union(cn.com.codesec.util.fset.FMap) -> a
    373:375:cn.com.codesec.util.fset.FHashMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> a
    380:382:cn.com.codesec.util.fset.FHashMap restrictedTo(cn.com.codesec.util.fset.FSet) -> c
    387:389:cn.com.codesec.util.fset.FHashMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> d
    394:394:java.lang.Object getDefault() -> g
    399:399:java.util.Iterator iterator() -> iterator
    405:405:int compareTo(cn.com.codesec.util.fset.FHashMap) -> a
    409:422:boolean equals(java.lang.Object) -> equals
    427:428:int hashCode() -> hashCode
    433:433:java.lang.String dump() -> h
    437:437:boolean verify() -> i
    477:481:int hashCode(java.lang.Object) -> c
    532:537:cn.com.codesec.util.fset.FHashMap$Node makeNode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    541:542:cn.com.codesec.util.fset.FHashMap$Node makeNode(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    546:548:int treeSize(java.lang.Object) -> d
    552:554:int keySize(java.lang.Object) -> j
    458:560:void <init>(java.lang.Object,java.lang.Object) -> <init>
    563:572:java.lang.Object arb(java.lang.Object) -> e
    577:579:boolean contains(java.lang.Object,java.util.Map$Entry) -> a
    586:609:java.lang.Object get(java.lang.Object,java.lang.Object,int) -> a
    615:658:java.lang.Object with(java.lang.Object,java.lang.Object,int,java.lang.Object) -> a
    664:691:java.lang.Object less(java.lang.Object,java.lang.Object,int) -> b
    697:712:java.lang.Object domain(java.lang.Object) -> f
    717:732:cn.com.codesec.util.fset.FSet range(java.lang.Object,cn.com.codesec.util.fset.FSet) -> a
    737:737:java.lang.Object union(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp) -> a
    744:787:java.lang.Object union(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp,int,int) -> a
    794:795:java.lang.Object restrictedTo(java.lang.Object,java.lang.Object) -> f
    800:852:java.lang.Object restrictedTo(java.lang.Object,java.lang.Object,int,int) -> a
    859:860:java.lang.Object restrictedFrom(java.lang.Object,java.lang.Object) -> g
    865:920:java.lang.Object restrictedFrom(java.lang.Object,java.lang.Object,int,int) -> b
    927:934:int compareTo(java.lang.Object,java.lang.Object) -> b
    939:991:int compareTo(java.lang.Object,int,java.lang.Object,int,int,int) -> a
    999:1002:boolean equals(java.lang.Object,java.lang.Object) -> c
    1007:1047:boolean equals(java.lang.Object,int,java.lang.Object,int,int,int) -> b
    1063:1078:cn.com.codesec.util.fset.FHashMap$RankTrimResult rankTrim(java.lang.Object,int,int,int) -> a
    1082:1093:cn.com.codesec.util.fset.FHashMap$Entry rankEntry(java.lang.Object,int) -> a
    1099:1113:cn.com.codesec.util.fset.FHashMap$Entry findEquiv(java.lang.Object,int) -> b
    1120:1144:java.lang.Object split(java.lang.Object,int,int) -> a
    1153:1169:java.lang.Object trim(java.lang.Object,int,int) -> b
    1179:1192:java.lang.Object concat(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1198:1203:java.lang.Object buildNode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1208:1246:java.lang.Object buildNode(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object) -> c
    1251:1260:java.lang.Object join(java.lang.Object,java.lang.Object) -> h
    1267:1275:java.lang.Object min(java.lang.Object) -> k
    1281:1288:java.lang.Object lessMin(java.lang.Object) -> l
    1293:1315:int myHashCode(java.lang.Object) -> g
    1320:1350:java.lang.String dump(java.lang.Object) -> m
    1354:1360:java.lang.String indent(java.lang.String,java.lang.String) -> a
    1364:1394:boolean verify(java.lang.Object,int,int) -> c
    1439:1490:java.lang.Object equivUnion(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp) -> a
    1496:1526:java.lang.Object equivRestrictedTo(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    1533:1563:java.lang.Object equivRestrictedFrom(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1569:1580:java.lang.Object equivLess(java.lang.Object,java.lang.Object) -> i
    1585:1603:int equivCompare(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> c
    1607:1628:boolean equivEquals(java.lang.Object,java.lang.Object) -> j
    1640:1654:java.lang.Object[] makeArray2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object[]) -> a
    1658:1670:java.lang.Object[] insert2(java.lang.Object[],int,java.lang.Object,java.lang.Object) -> a
    1674:1686:java.lang.Object[] remove2(java.lang.Object[],int) -> a
    1691:1700:java.lang.Object[] subseq2(java.lang.Object[],int,int) -> a
    1706:1710:java.lang.Object[] update2(java.lang.Object[],int,java.lang.Object) -> a
    1719:1795:java.lang.Object union2(java.lang.Object[],java.lang.Object[],cn.com.codesec.util.fset.BinaryOp,int,int) -> a
    1801:1839:java.lang.Object[] restrictedTo2(java.lang.Object[],java.lang.Object[],int,int) -> a
    1845:1890:java.lang.Object[] restrictedFrom2(java.lang.Object[],java.lang.Object[],int,int) -> b
    1905:1916:int binarySearch(java.lang.Object[],int) -> b
    1922:1926:int binarySearchLo(java.lang.Object[],int) -> c
    1932:1933:int binarySearchHi(java.lang.Object[],int) -> d
    1937:1937:boolean eql(java.lang.Object,java.lang.Object) -> k
    2091:2098:void writeObject(java.io.ObjectOutputStream) -> writeObject
    2115:2129:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet toSet() -> j
    1:1:cn.com.codesec.util.fset.FMap with(java.lang.Object,java.lang.Object) -> d
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> b
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap) -> b
    1:1:cn.com.codesec.util.fset.FMap restrictedTo(cn.com.codesec.util.fset.FSet) -> e
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> f
    1:1:cn.com.codesec.util.fset.FMap less(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet domain() -> k
    1936:1936:boolean access$9(java.lang.Object,java.lang.Object) -> e
    551:551:int access$10(java.lang.Object) -> i
cn.com.codesec.util.fset.FHashMap$1 -> cn.com.codesec.Ua:
    1:360:void <init>() -> <init>
    362:362:java.lang.Object apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.util.fset.FHashMap$2 -> cn.com.codesec.Ub:
    cn.com.codesec.util.fset.FHashMap this$0 -> a
    1:261:void <init>(cn.com.codesec.util.fset.FHashMap) -> <init>
    264:264:java.util.Iterator iterator() -> iterator
    268:268:int size() -> size
    272:272:boolean contains(java.lang.Object) -> contains
cn.com.codesec.util.fset.FHashMap$3 -> cn.com.codesec.Uc:
    cn.com.codesec.util.fset.FHashMap this$0 -> a
    1:279:void <init>(cn.com.codesec.util.fset.FHashMap) -> <init>
    282:282:java.util.Iterator iterator() -> iterator
    286:286:int size() -> size
cn.com.codesec.util.fset.FHashMap$4 -> cn.com.codesec.Ud:
    cn.com.codesec.util.fset.FHashMap this$0 -> a
    1:295:void <init>(cn.com.codesec.util.fset.FHashMap) -> <init>
    298:298:java.util.Iterator iterator() -> iterator
    302:302:int size() -> size
    306:309:boolean contains(java.lang.Object) -> contains
    314:314:boolean remove(java.lang.Object) -> remove
    318:318:void clear() -> clear
cn.com.codesec.util.fset.FHashMap$Entry -> cn.com.codesec.Ue:
    java.lang.Object key -> a
    java.lang.Object value -> b
    485:488:void <init>(java.lang.Object,java.lang.Object) -> <init>
    492:492:java.lang.Object getKey() -> getKey
    494:494:java.lang.Object getValue() -> getValue
    497:497:java.lang.Object setValue(java.lang.Object) -> setValue
    500:501:int hashCode() -> hashCode
    504:508:boolean equals(java.lang.Object) -> equals
cn.com.codesec.util.fset.FHashMap$EquivalentMap -> cn.com.codesec.Uf:
    java.util.ArrayList contents -> a
    1410:1412:void <init>(java.util.ArrayList) -> <init>
    1415:1416:int hashCode() -> hashCode
    1420:1432:boolean equals(java.lang.Object) -> equals
    1413:1413:java.util.ArrayList access$0(cn.com.codesec.util.fset.FHashMap$EquivalentMap) -> a
    1410:1410:void <init>(java.util.ArrayList,cn.com.codesec.util.fset.FHashMap$EquivalentMap) -> <init>
cn.com.codesec.util.fset.FHashMap$FHMIterator -> cn.com.codesec.Ug:
    cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode inode -> a
    1958:1961:void <init>(java.lang.Object) -> <init>
    1964:1985:void canonicalize() -> b
    1989:1989:boolean hasNext() -> hasNext
    1995:2009:java.util.Map$Entry next() -> a
    2014:2014:void remove() -> remove
    1:1:java.lang.Object next() -> next
    1956:1956:cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode access$1(cn.com.codesec.util.fset.FHashMap$FHMIterator) -> a
    1963:1963:void access$2(cn.com.codesec.util.fset.FHashMap$FHMIterator) -> b
cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode -> cn.com.codesec.Uh:
    java.lang.Object subtree -> a
    int index -> b
    cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode parent -> c
    1946:1950:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode) -> <init>
    1951:1951:java.lang.Object access$0(cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode) -> a
    1953:1953:cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode access$1(cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode) -> b
    1952:1952:int access$2(cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode) -> c
    1952:1952:void access$3(cn.com.codesec.util.fset.FHashMap$FHMIterator$IteratorNode,int) -> a
cn.com.codesec.util.fset.FHashMap$FHMKeyIterator -> cn.com.codesec.Ui:
    cn.com.codesec.util.fset.FHashMap$FHMIterator fhmIter -> a
    2022:2024:void <init>(java.lang.Object) -> <init>
    2028:2028:boolean hasNext() -> hasNext
    2035:2048:java.lang.Object next() -> next
    2053:2053:void remove() -> remove
cn.com.codesec.util.fset.FHashMap$FHMValueIterator -> cn.com.codesec.Uj:
    cn.com.codesec.util.fset.FHashMap$FHMIterator fhmIter -> a
    2061:2063:void <init>(java.lang.Object) -> <init>
    2067:2067:boolean hasNext() -> hasNext
    2074:2074:java.lang.Object next() -> next
    2079:2079:void remove() -> remove
cn.com.codesec.util.fset.FHashMap$Node -> cn.com.codesec.Uk:
    int khash -> f
    int size -> c
    java.lang.Object left -> d
    java.lang.Object right -> e
    519:524:void <init>(int,java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    525:525:int access$0(cn.com.codesec.util.fset.FHashMap$Node) -> a
cn.com.codesec.util.fset.FHashMap$RankTrimResult -> cn.com.codesec.Ul:
    java.lang.Object subtree -> a
    int base -> b
    1054:1057:void <init>(java.lang.Object,int) -> <init>
cn.com.codesec.util.fset.FHashSet -> cn.com.codesec.Um:
    cn.com.codesec.util.fset.FHashSet EMPTY_INSTANCE -> d
    java.lang.Object tree -> a
    int hashCode -> e
    int MAX_LEAF_ARRAY_LENGTH -> f
    int BALANCE_FACTOR -> g
    int NEGATIVE_INFINITY -> h
    int POSITIVE_INFINITY -> i
    boolean debug -> b
    java.lang.Object NO_ELEMENT -> c
    int BIN_SEARCH_NOT_FOUND -> j
    int BIN_SEARCH_FOUND -> k
    int BIN_SEARCH_FOUND_MASK -> l
    int BIN_SEARCH_INDEX_SHIFT -> m
    java.lang.reflect.Field TreeField -> n
    366:1670:void <clinit>() -> <clinit>
    80:80:cn.com.codesec.util.fset.FHashSet emptySet() -> a
    86:371:void <init>() -> <init>
    93:371:void <init>(java.lang.Object) -> <init>
    103:371:void <init>(java.util.Collection) -> <init>
    120:371:void <init>(java.lang.Object[]) -> <init>
    128:128:boolean isEmpty() -> isEmpty
    133:133:int size() -> size
    138:147:java.lang.Object arb() -> b
    153:153:boolean contains(java.lang.Object) -> contains
    158:158:java.util.Iterator iterator() -> iterator
    163:165:cn.com.codesec.util.fset.FHashSet with(java.lang.Object) -> a
    170:173:cn.com.codesec.util.fset.FHashSet less(java.lang.Object) -> b
    190:199:cn.com.codesec.util.fset.FHashSet union(java.util.Collection) -> a
    216:226:cn.com.codesec.util.fset.FHashSet intersection(java.util.Collection) -> b
    243:253:cn.com.codesec.util.fset.FHashSet difference(java.util.Collection) -> c
    260:260:int compareTo(cn.com.codesec.util.fset.FHashSet) -> a
    264:279:boolean equals(java.lang.Object) -> equals
    296:307:boolean isSubset(java.util.Collection) -> d
    325:336:boolean isSuperset(java.util.Collection) -> e
    344:345:int hashCode() -> hashCode
    350:350:java.lang.String dump() -> c
    354:354:boolean verify() -> d
    371:376:void <init>(int,java.lang.Object) -> <init>
    380:381:cn.com.codesec.util.fset.FHashSet make(java.lang.Object) -> c
    399:404:int hashCode(java.lang.Object) -> d
    431:432:cn.com.codesec.util.fset.FHashSet$Node makeNode(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    436:438:int treeSize(java.lang.Object) -> e
    442:444:int elementSize(java.lang.Object) -> k
    448:465:boolean contains(java.lang.Object,java.lang.Object,int) -> a
    471:507:java.lang.Object with(java.lang.Object,java.lang.Object,int) -> b
    513:543:java.lang.Object less(java.lang.Object,java.lang.Object,int) -> c
    549:549:java.lang.Object union(java.lang.Object,java.lang.Object) -> d
    553:566:java.lang.Object union(java.lang.Object,java.lang.Object,int,int) -> a
    571:571:java.lang.Object intersection(java.lang.Object,java.lang.Object) -> e
    575:590:java.lang.Object intersection(java.lang.Object,java.lang.Object,int,int) -> b
    595:595:java.lang.Object difference(java.lang.Object,java.lang.Object) -> f
    599:628:java.lang.Object difference(java.lang.Object,java.lang.Object,int,int) -> c
    633:641:int compareTo(java.lang.Object,java.lang.Object) -> a
    647:686:int compareTo(java.lang.Object,int,java.lang.Object,int,int,int) -> a
    694:697:boolean equals(java.lang.Object,java.lang.Object) -> b
    702:735:boolean equals(java.lang.Object,int,java.lang.Object,int,int,int) -> b
    753:768:cn.com.codesec.util.fset.FHashSet$RankTrimResult rankTrim(java.lang.Object,int,int,int) -> a
    773:783:java.lang.Object rankElement(java.lang.Object,int) -> b
    791:791:boolean isSubset(java.lang.Object,java.lang.Object) -> c
    795:820:boolean isSubset(java.lang.Object,java.lang.Object,int,int) -> d
    834:848:java.lang.Object findEquiv(java.lang.Object,int) -> a
    855:878:java.lang.Object split(java.lang.Object,int,int) -> b
    887:902:java.lang.Object trim(java.lang.Object,int,int) -> a
    911:922:java.lang.Object concat(java.lang.Object,int,java.lang.Object,java.lang.Object) -> a
    927:962:java.lang.Object buildNode(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    969:973:java.lang.Object join(java.lang.Object,java.lang.Object) -> g
    979:983:java.lang.Object min(java.lang.Object) -> l
    989:996:java.lang.Object lessMin(java.lang.Object) -> f
    1001:1021:int myHashCode(java.lang.Object) -> g
    1026:1049:java.lang.String dump(java.lang.Object) -> m
    1053:1059:java.lang.String indent(java.lang.String,java.lang.String) -> a
    1063:1092:boolean verify(java.lang.Object,int,int) -> c
    1113:1151:java.lang.Object equivUnion(java.lang.Object,java.lang.Object) -> h
    1157:1183:java.lang.Object equivIntersect(java.lang.Object,java.lang.Object) -> i
    1187:1213:java.lang.Object equivDiff(java.lang.Object,java.lang.Object) -> j
    1217:1232:boolean equivEquals(java.lang.Object,java.lang.Object) -> k
    1236:1248:boolean equivIsSubset(java.lang.Object,java.lang.Object) -> l
    1257:1264:java.lang.Object[] concat(java.lang.Object,java.lang.Object[],java.lang.Object[]) -> a
    1268:1273:java.lang.Object[] insert(java.lang.Object[],int,java.lang.Object) -> a
    1277:1283:java.lang.Object[] remove(java.lang.Object[],int) -> a
    1288:1295:java.lang.Object[] subseq(java.lang.Object[],int,int) -> a
    1303:1364:java.lang.Object unionSave(java.lang.Object[],java.lang.Object[],int,int) -> a
    1371:1433:java.lang.Object union(java.lang.Object[],java.lang.Object[],int,int) -> b
    1437:1463:java.lang.Object[] intersection(java.lang.Object[],java.lang.Object[],int,int) -> c
    1467:1495:java.lang.Object[] difference(java.lang.Object[],java.lang.Object[],int,int) -> d
    1500:1522:boolean isSubset(java.lang.Object[],java.lang.Object[],int,int) -> e
    1538:1548:int binarySearch(java.lang.Object[],int) -> b
    1554:1558:int binarySearchLo(java.lang.Object[],int) -> c
    1564:1565:int binarySearchHi(java.lang.Object[],int) -> d
    1569:1569:boolean eql(java.lang.Object,java.lang.Object) -> m
    1655:1659:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1676:1689:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet with(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet union(java.util.Collection) -> f
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FSet less(java.lang.Object) -> i
    1:1:cn.com.codesec.util.fset.FSet difference(java.util.Collection) -> g
    1:1:cn.com.codesec.util.fset.FSet intersection(java.util.Collection) -> h
    441:441:int access$6(java.lang.Object) -> j
cn.com.codesec.util.fset.FHashSet$EquivalentSet -> cn.com.codesec.Un:
    java.util.ArrayList contents -> a
    1106:1108:void <init>(java.util.ArrayList) -> <init>
cn.com.codesec.util.fset.FHashSet$FHSIterator -> cn.com.codesec.Uo:
    cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode inode -> a
    1590:1593:void <init>(java.lang.Object) -> <init>
    1596:1617:void canonicalize() -> a
    1621:1621:boolean hasNext() -> hasNext
    1627:1639:java.lang.Object next() -> next
    1644:1644:void remove() -> remove
cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode -> cn.com.codesec.Up:
    java.lang.Object subtree -> a
    int index -> b
    cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode parent -> c
    1578:1582:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode) -> <init>
    1583:1583:java.lang.Object access$0(cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode) -> a
    1585:1585:cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode access$1(cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode) -> b
    1584:1584:int access$2(cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode) -> c
    1584:1584:void access$3(cn.com.codesec.util.fset.FHashSet$FHSIterator$IteratorNode,int) -> a
cn.com.codesec.util.fset.FHashSet$Node -> cn.com.codesec.Uq:
    int size -> a
    java.lang.Object element -> b
    java.lang.Object left -> c
    java.lang.Object right -> d
    417:422:void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
cn.com.codesec.util.fset.FHashSet$RankTrimResult -> cn.com.codesec.Ur:
    java.lang.Object subtree -> a
    int base -> b
    744:747:void <init>(java.lang.Object,int) -> <init>
cn.com.codesec.util.fset.FLinkedHashMap -> cn.com.codesec.Us:
    cn.com.codesec.util.fset.FLinkedHashMap EMPTY_INSTANCE -> b
    java.lang.Object mapTree -> a
    java.lang.Object listTree -> c
    java.lang.Object dflt -> d
    int hashCode -> e
    java.lang.reflect.Field MapTreeField -> f
    java.lang.reflect.Field ListTreeField -> g
    302:408:void <clinit>() -> <clinit>
    45:45:cn.com.codesec.util.fset.FLinkedHashMap emptyMap() -> b
    51:312:void <init>() -> <init>
    57:312:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    72:72:cn.com.codesec.util.fset.FLinkedHashMap withDefault(java.lang.Object) -> a
    77:77:boolean isEmpty() -> isEmpty
    82:82:int size() -> size
    89:89:cn.com.codesec.util.fset.FList keyList() -> d
    94:94:java.util.Map$Entry arb() -> c
    99:101:boolean contains(java.util.Map$Entry) -> a
    106:106:boolean containsKey(java.lang.Object) -> containsKey
    111:113:java.lang.Object get(java.lang.Object) -> get
    118:125:cn.com.codesec.util.fset.FLinkedHashMap with(java.lang.Object,java.lang.Object) -> a
    131:138:cn.com.codesec.util.fset.FLinkedHashMap less(java.lang.Object) -> b
    143:143:java.util.Set keySet() -> keySet
    161:161:java.util.Collection values() -> values
    175:175:java.util.Set entrySet() -> entrySet
    198:198:cn.com.codesec.util.fset.FHashSet domain() -> f
    203:203:cn.com.codesec.util.fset.FSet range() -> e
    208:208:cn.com.codesec.util.fset.FSet range(cn.com.codesec.util.fset.FSet) -> a
    214:214:cn.com.codesec.util.fset.FHashSet toSet() -> h
    219:223:cn.com.codesec.util.fset.FSet toSet(cn.com.codesec.util.fset.FSet) -> b
    229:232:cn.com.codesec.util.fset.FLinkedHashMap union(cn.com.codesec.util.fset.FMap) -> a
    239:245:cn.com.codesec.util.fset.FLinkedHashMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> a
    251:251:cn.com.codesec.util.fset.FLinkedHashMap restrictedTo(cn.com.codesec.util.fset.FSet) -> c
    257:257:cn.com.codesec.util.fset.FLinkedHashMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> d
    262:262:java.lang.Object getDefault() -> g
    267:267:java.util.Iterator iterator() -> iterator
    272:272:int compareTo(cn.com.codesec.util.fset.FLinkedHashMap) -> a
    276:289:boolean equals(java.lang.Object) -> equals
    294:295:int hashCode() -> hashCode
    315:315:boolean eql(java.lang.Object,java.lang.Object) -> b
    319:319:int hashCode(java.lang.Object) -> c
    388:395:void writeObject(java.io.ObjectOutputStream) -> writeObject
    414:431:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet toSet() -> j
    1:1:cn.com.codesec.util.fset.FMap with(java.lang.Object,java.lang.Object) -> d
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> b
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap) -> b
    1:1:cn.com.codesec.util.fset.FMap restrictedTo(cn.com.codesec.util.fset.FSet) -> e
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> f
    1:1:cn.com.codesec.util.fset.FMap less(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet domain() -> k
    308:308:java.lang.Object access$9(cn.com.codesec.util.fset.FLinkedHashMap) -> b
cn.com.codesec.util.fset.FLinkedHashMap$1 -> cn.com.codesec.Ut:
    cn.com.codesec.util.fset.FLinkedHashMap this$0 -> a
    1:143:void <init>(cn.com.codesec.util.fset.FLinkedHashMap) -> <init>
    146:146:java.util.Iterator iterator() -> iterator
    150:150:int size() -> size
    154:154:boolean contains(java.lang.Object) -> contains
cn.com.codesec.util.fset.FLinkedHashMap$2 -> cn.com.codesec.Uu:
    cn.com.codesec.util.fset.FLinkedHashMap this$0 -> a
    1:161:void <init>(cn.com.codesec.util.fset.FLinkedHashMap) -> <init>
    164:164:java.util.Iterator iterator() -> iterator
    168:168:int size() -> size
cn.com.codesec.util.fset.FLinkedHashMap$3 -> cn.com.codesec.Uv:
    cn.com.codesec.util.fset.FLinkedHashMap this$0 -> a
    1:175:void <init>(cn.com.codesec.util.fset.FLinkedHashMap) -> <init>
    178:178:java.util.Iterator iterator() -> iterator
    182:182:int size() -> size
    186:186:boolean remove(java.lang.Object) -> remove
    190:190:void clear() -> clear
cn.com.codesec.util.fset.FLinkedHashMap$FLHMIterator -> cn.com.codesec.Uw:
    java.lang.Object mapTree -> a
    cn.com.codesec.util.fset.FTreeList$FTLIterator listIt -> b
    329:332:void <init>(java.lang.Object,java.lang.Object) -> <init>
    336:336:boolean hasNext() -> hasNext
    341:345:java.util.Map$Entry next() -> a
    350:350:void remove() -> remove
    1:1:java.lang.Object next() -> next
    329:329:void <init>(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FLinkedHashMap$FLHMIterator) -> <init>
cn.com.codesec.util.fset.FLinkedHashMap$FLHMValueIterator -> cn.com.codesec.Ux:
    java.lang.Object mapTree -> a
    cn.com.codesec.util.fset.FTreeList$FTLIterator listIt -> b
    358:361:void <init>(java.lang.Object,java.lang.Object) -> <init>
    365:365:boolean hasNext() -> hasNext
    370:371:java.lang.Object next() -> next
    376:376:void remove() -> remove
    358:358:void <init>(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FLinkedHashMap$FLHMValueIterator) -> <init>
cn.com.codesec.util.fset.FLinkedHashSet -> cn.com.codesec.Uy:
    cn.com.codesec.util.fset.FLinkedHashSet EMPTY_INSTANCE -> b
    java.lang.Object setTree -> a
    java.lang.Object listTree -> c
    int hashCode -> d
    java.lang.reflect.Field SetTreeField -> e
    java.lang.reflect.Field ListTreeField -> f
    220:267:void <clinit>() -> <clinit>
    44:44:cn.com.codesec.util.fset.FLinkedHashSet emptySet() -> a
    50:233:void <init>() -> <init>
    58:233:void <init>(java.lang.Object) -> <init>
    65:65:boolean isEmpty() -> isEmpty
    70:70:int size() -> size
    77:77:cn.com.codesec.util.fset.FList toList() -> c
    86:87:java.lang.Object arb() -> b
    92:92:boolean contains(java.lang.Object) -> contains
    97:101:cn.com.codesec.util.fset.FLinkedHashSet with(java.lang.Object) -> a
    106:113:cn.com.codesec.util.fset.FLinkedHashSet less(java.lang.Object) -> b
    118:118:java.util.Iterator iterator() -> iterator
    127:137:cn.com.codesec.util.fset.FLinkedHashSet union(java.util.Collection) -> a
    143:143:cn.com.codesec.util.fset.FLinkedHashSet intersection(java.util.Collection) -> b
    149:149:cn.com.codesec.util.fset.FLinkedHashSet difference(java.util.Collection) -> c
    154:154:int compareTo(cn.com.codesec.util.fset.FLinkedHashSet) -> a
    158:171:boolean equals(java.lang.Object) -> equals
    177:189:boolean isSubset(java.util.Collection) -> d
    195:207:boolean isSuperset(java.util.Collection) -> e
    212:213:int hashCode() -> hashCode
    228:233:void <init>(java.lang.Object,java.lang.Object) -> <init>
    236:236:boolean eql(java.lang.Object,java.lang.Object) -> a
    240:240:int hashCode(java.lang.Object) -> c
    250:254:void writeObject(java.io.ObjectOutputStream) -> writeObject
    273:289:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet with(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet union(java.util.Collection) -> f
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FSet less(java.lang.Object) -> i
    1:1:cn.com.codesec.util.fset.FSet difference(java.util.Collection) -> g
    1:1:cn.com.codesec.util.fset.FSet intersection(java.util.Collection) -> h
cn.com.codesec.util.fset.FList -> cn.com.codesec.Uz:
    java.lang.Object first() -> b
    java.lang.Object last() -> c
    cn.com.codesec.util.fset.FList with(int,java.lang.Object) -> a
    cn.com.codesec.util.fset.FList withInserted(int,java.lang.Object) -> b
    cn.com.codesec.util.fset.FList withFirst(java.lang.Object) -> a
    cn.com.codesec.util.fset.FList withLast(java.lang.Object) -> b
    cn.com.codesec.util.fset.FList lessFirst() -> d
    cn.com.codesec.util.fset.FList lessLast() -> e
    cn.com.codesec.util.fset.FList less(int) -> d
    cn.com.codesec.util.fset.FList concat(java.util.List) -> a
    cn.com.codesec.util.fset.FList reverse() -> f
    cn.com.codesec.util.fset.FList subList(int,int) -> b
    cn.com.codesec.util.fset.FList subseq(int,int) -> c
    cn.com.codesec.util.fset.FList prefix(int) -> a
    cn.com.codesec.util.fset.FList suffix(int) -> b
    cn.com.codesec.util.fset.FList suffixFrom(int) -> c
    boolean isPrefix(cn.com.codesec.util.fset.FList) -> a
    boolean isSuffix(cn.com.codesec.util.fset.FList) -> b
    cn.com.codesec.util.fset.FList sorted() -> g
    cn.com.codesec.util.fset.FList sorted(java.util.Comparator) -> a
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    java.lang.Object remove(int) -> remove
    boolean removeRange(int,int) -> a
    java.lang.Object set(int,java.lang.Object) -> set
    1:1:java.util.List subList(int,int) -> subList
cn.com.codesec.util.fset.FMap -> cn.com.codesec.UA:
    java.util.Map$Entry arb() -> c
    boolean contains(java.util.Map$Entry) -> a
    cn.com.codesec.util.fset.FMap with(java.lang.Object,java.lang.Object) -> d
    cn.com.codesec.util.fset.FMap less(java.lang.Object) -> h
    cn.com.codesec.util.fset.FSet domain() -> k
    cn.com.codesec.util.fset.FSet range() -> e
    cn.com.codesec.util.fset.FSet range(cn.com.codesec.util.fset.FSet) -> a
    cn.com.codesec.util.fset.FSet toSet() -> j
    cn.com.codesec.util.fset.FSet toSet(cn.com.codesec.util.fset.FSet) -> b
    cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap) -> b
    cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> b
    cn.com.codesec.util.fset.FMap restrictedTo(cn.com.codesec.util.fset.FSet) -> e
    cn.com.codesec.util.fset.FMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> f
    java.lang.Object getDefault() -> g
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
cn.com.codesec.util.fset.FSet -> cn.com.codesec.UB:
    java.lang.Object arb() -> b
    cn.com.codesec.util.fset.FSet with(java.lang.Object) -> h
    cn.com.codesec.util.fset.FSet less(java.lang.Object) -> i
    cn.com.codesec.util.fset.FSet union(java.util.Collection) -> f
    cn.com.codesec.util.fset.FSet intersection(java.util.Collection) -> h
    cn.com.codesec.util.fset.FSet difference(java.util.Collection) -> g
    boolean isSubset(java.util.Collection) -> d
    boolean isSuperset(java.util.Collection) -> e
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
cn.com.codesec.util.fset.FTreeList -> cn.com.codesec.UC:
    cn.com.codesec.util.fset.FTreeList EMPTY_INSTANCE -> a
    java.lang.Object tree -> b
    java.util.Comparator eltComp -> c
    int hashCode -> d
    int MAX_LEAF_ARRAY_LENGTH -> e
    int BALANCE_FACTOR -> f
    java.lang.reflect.Field TreeField -> g
    449:1155:void <clinit>() -> <clinit>
    75:75:cn.com.codesec.util.fset.FTreeList emptyList() -> h
    82:454:void <init>() -> <init>
    94:454:void <init>(java.util.Comparator) -> <init>
    106:454:void <init>(java.util.Collection) -> <init>
    120:454:void <init>(java.util.Collection,java.util.Comparator) -> <init>
    137:454:void <init>(java.lang.Object[]) -> <init>
    157:454:void <init>(java.util.Comparator,java.lang.Object[]) -> <init>
    165:207:java.lang.Object fromCollection(java.lang.Object) -> c
    212:212:boolean isEmpty() -> isEmpty
    217:217:int size() -> size
    222:224:java.lang.Object get(int) -> get
    229:229:java.util.Iterator iterator() -> iterator
    234:234:java.util.ListIterator listIterator() -> listIterator
    238:239:java.util.ListIterator iterator(int) -> e
    244:245:java.util.ListIterator listIterator(int) -> listIterator
    250:255:cn.com.codesec.util.fset.FTreeList with(int,java.lang.Object) -> c
    260:262:cn.com.codesec.util.fset.FTreeList withInserted(int,java.lang.Object) -> d
    267:267:cn.com.codesec.util.fset.FTreeList withFirst(java.lang.Object) -> d
    272:272:cn.com.codesec.util.fset.FTreeList withLast(java.lang.Object) -> e
    277:279:cn.com.codesec.util.fset.FTreeList less(int) -> f
    286:286:cn.com.codesec.util.fset.FTreeList lessFirst() -> i
    291:291:cn.com.codesec.util.fset.FTreeList lessLast() -> j
    296:299:cn.com.codesec.util.fset.FTreeList concat(java.util.List) -> b
    304:305:cn.com.codesec.util.fset.FTreeList reverse() -> k
    310:313:cn.com.codesec.util.fset.FTreeList subseq(int,int) -> d
    318:318:cn.com.codesec.util.fset.FTreeList prefix(int) -> g
    323:323:cn.com.codesec.util.fset.FTreeList suffix(int) -> h
    328:328:cn.com.codesec.util.fset.FTreeList suffixFrom(int) -> i
    333:341:boolean isPrefix(cn.com.codesec.util.fset.FList) -> a
    347:357:boolean isSuffix(cn.com.codesec.util.fset.FList) -> b
    363:364:cn.com.codesec.util.fset.FList subList(int,int) -> b
    372:374:cn.com.codesec.util.fset.FTreeList sorted(java.util.Comparator) -> b
    379:379:cn.com.codesec.util.fset.FTreeList sorted() -> l
    384:384:boolean contains(java.lang.Object) -> contains
    389:389:int indexOf(java.lang.Object) -> indexOf
    394:394:int lastIndexOf(java.lang.Object) -> lastIndexOf
    399:404:int compareTo(cn.com.codesec.util.fset.FTreeList) -> a
    408:422:boolean equals(java.lang.Object) -> equals
    427:428:int hashCode() -> hashCode
    433:433:java.lang.String dump() -> m
    437:437:boolean verify() -> n
    454:459:void <init>(java.lang.Object,java.util.Comparator) -> <init>
    480:482:java.lang.Object makeNode(java.lang.Object,java.lang.Object) -> a
    486:488:int treeSize(java.lang.Object) -> f
    492:497:java.lang.Object get(java.lang.Object,int) -> a
    502:508:java.lang.Object with(java.lang.Object,int,java.lang.Object) -> b
    513:531:java.lang.Object insert(java.lang.Object,int,java.lang.Object) -> a
    536:542:java.lang.Object less(java.lang.Object,int) -> b
    547:550:java.lang.Object reverse(java.lang.Object) -> g
    555:560:int compareTo(java.lang.Object,java.lang.Object) -> b
    566:597:int compareTo(java.lang.Object,int,java.lang.Object,int,int,int) -> a
    603:606:boolean equals(java.lang.Object,java.lang.Object) -> c
    611:637:boolean equals(java.lang.Object,int,java.lang.Object,int,int,int) -> b
    664:675:cn.com.codesec.util.fset.FTreeList$RankTrimResult rankTrim(java.lang.Object,int,int,int) -> a
    679:690:java.lang.Object concat(java.lang.Object,java.lang.Object) -> d
    695:727:java.lang.Object buildNode(java.lang.Object,java.lang.Object) -> e
    733:741:int compareElements(java.lang.Object,java.lang.Object) -> f
    746:756:java.lang.Object subseq(java.lang.Object,int,int) -> a
    761:775:int indexOf(java.lang.Object,java.lang.Object) -> g
    781:795:int lastIndexOf(java.lang.Object,java.lang.Object) -> h
    801:807:java.lang.Object[] concat(java.lang.Object[],java.lang.Object[]) -> a
    811:815:java.lang.Object[] update(java.lang.Object[],int,java.lang.Object) -> a
    819:824:java.lang.Object[] insert(java.lang.Object[],int,java.lang.Object) -> b
    830:836:java.lang.Object[] less(java.lang.Object[],int) -> a
    841:844:java.lang.Object[] reverse(java.lang.Object[]) -> a
    848:854:java.lang.Object[] subseq(java.lang.Object[],int,int) -> a
    861:866:java.lang.Object[] subseqInsert(java.lang.Object[],int,int,int,java.lang.Object) -> a
    870:882:int hashCode(java.lang.Object,int) -> c
    886:901:java.lang.String dump(java.lang.Object) -> h
    905:911:java.lang.String indent(java.lang.String,java.lang.String) -> a
    915:933:boolean verify(java.lang.Object) -> i
    937:937:boolean eql(java.lang.Object,java.lang.Object) -> i
    1140:1144:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1161:1172:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FList less(int) -> d
    1:1:cn.com.codesec.util.fset.FList withLast(java.lang.Object) -> b
    1:1:cn.com.codesec.util.fset.FList withFirst(java.lang.Object) -> a
    1:1:cn.com.codesec.util.fset.FList prefix(int) -> a
    1:1:cn.com.codesec.util.fset.FList with(int,java.lang.Object) -> a
    1:1:cn.com.codesec.util.fset.FList subseq(int,int) -> c
    1:1:cn.com.codesec.util.fset.FList suffixFrom(int) -> c
    1:1:cn.com.codesec.util.fset.FList concat(java.util.List) -> a
    1:1:cn.com.codesec.util.fset.FList withInserted(int,java.lang.Object) -> b
    1:1:cn.com.codesec.util.fset.FList lessFirst() -> d
    1:1:cn.com.codesec.util.fset.FList suffix(int) -> b
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FList lessLast() -> e
    1:1:cn.com.codesec.util.fset.FList sorted(java.util.Comparator) -> a
    1:1:cn.com.codesec.util.fset.FList sorted() -> g
    1:1:cn.com.codesec.util.fset.FList reverse() -> f
    1:1:java.util.List subList(int,int) -> subList
cn.com.codesec.util.fset.FTreeList$FTLIterator -> cn.com.codesec.UD:
    cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode inode -> b
    boolean atStart -> c
    boolean atEnd -> d
    int RIGHT_END -> a
    957:964:void <init>(java.lang.Object) -> <init>
    957:988:void <init>(java.lang.Object,int) -> <init>
    991:1017:void canonicalizeFwd() -> a
    1021:1021:boolean hasNext() -> hasNext
    1026:1031:java.lang.Object next() -> next
    1037:1047:int nextIndex() -> nextIndex
    1052:1052:int previousIndex() -> previousIndex
    1058:1090:void canonicalizeRev() -> b
    1094:1094:boolean hasPrevious() -> hasPrevious
    1099:1112:java.lang.Object previous() -> previous
    1118:1118:void add(java.lang.Object) -> add
    1123:1123:void remove() -> remove
    1128:1128:void set(java.lang.Object) -> set
    966:966:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FTreeList$FTLIterator) -> <init>
cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode -> cn.com.codesec.UE:
    java.lang.Object subtree -> a
    int index -> b
    cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode parent -> c
    946:950:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode) -> <init>
    952:952:void access$0(cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode,int) -> a
    951:951:java.lang.Object access$1(cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode) -> a
    952:952:int access$2(cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode) -> b
    953:953:cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode access$3(cn.com.codesec.util.fset.FTreeList$FTLIterator$IteratorNode) -> c
cn.com.codesec.util.fset.FTreeList$Node -> cn.com.codesec.UF:
    int size -> a
    java.lang.Object left -> b
    java.lang.Object right -> c
    469:473:void <init>(int,java.lang.Object,java.lang.Object) -> <init>
    475:475:java.lang.Object access$0(cn.com.codesec.util.fset.FTreeList$Node) -> a
    476:476:java.lang.Object access$1(cn.com.codesec.util.fset.FTreeList$Node) -> b
    474:474:int access$2(cn.com.codesec.util.fset.FTreeList$Node) -> c
cn.com.codesec.util.fset.FTreeList$RankTrimResult -> cn.com.codesec.UG:
    java.lang.Object subtree -> a
    int base -> b
    643:646:void <init>(java.lang.Object,int) -> <init>
    648:648:java.lang.Object getSubtree() -> a
    651:652:void setSubtree(java.lang.Object) -> a
    654:654:int getBase() -> b
    657:658:void setBase(int) -> a
cn.com.codesec.util.fset.FTreeMap -> cn.com.codesec.UH:
    cn.com.codesec.util.fset.BinaryOp second -> c
    cn.com.codesec.util.fset.FTreeMap EMPTY_INSTANCE -> d
    java.lang.Object tree -> e
    java.lang.Object dflt -> f
    java.util.Comparator comp -> g
    int hashCode -> h
    int MAX_LEAF_ARRAY_LENGTH -> i
    int BALANCE_FACTOR -> j
    java.lang.Object NEGATIVE_INFINITY -> a
    java.lang.Object POSITIVE_INFINITY -> b
    java.lang.Object NO_ELEMENT -> k
    int BIN_SEARCH_NOT_FOUND -> l
    int BIN_SEARCH_FOUND -> m
    int BIN_SEARCH_FOUND_MASK -> n
    int BIN_SEARCH_INDEX_SHIFT -> o
    java.lang.reflect.Field TreeField -> p
    530:2561:void <clinit>() -> <clinit>
    154:154:cn.com.codesec.util.fset.FTreeMap emptyMap() -> b
    161:751:void <init>() -> <init>
    173:751:void <init>(java.util.Comparator) -> <init>
    185:751:void <init>(java.util.Map) -> <init>
    199:751:void <init>(java.util.Map,java.util.Comparator) -> <init>
    211:751:void <init>(java.util.SortedMap) -> <init>
    225:751:void <init>(java.lang.Object[],java.lang.Object[]) -> <init>
    242:751:void <init>(java.lang.Object[],java.lang.Object[],java.util.Comparator) -> <init>
    259:259:cn.com.codesec.util.fset.FTreeMap withDefault(java.lang.Object) -> a
    273:273:cn.com.codesec.util.fset.FTreeMap withDefault(java.lang.Object,java.util.Comparator) -> a
    287:287:cn.com.codesec.util.fset.FTreeMap withDefault(cn.com.codesec.util.fset.FTreeMap,java.lang.Object) -> a
    303:303:cn.com.codesec.util.fset.FTreeMap withDefault(cn.com.codesec.util.fset.FTreeMap,java.lang.Object,java.util.Comparator) -> a
    307:313:java.lang.Object fromMap(java.util.Map) -> a
    318:323:java.lang.Object fromArrays(java.lang.Object[],java.lang.Object[]) -> a
    328:328:boolean isEmpty() -> isEmpty
    333:333:int size() -> size
    338:349:java.util.Map$Entry arb() -> c
    361:362:boolean contains(java.util.Map$Entry) -> a
    367:367:boolean containsKey(java.lang.Object) -> containsKey
    378:382:java.lang.Object get(java.lang.Object) -> get
    387:391:cn.com.codesec.util.fset.FTreeMap with(java.lang.Object,java.lang.Object) -> a
    396:402:cn.com.codesec.util.fset.FTreeMap less(java.lang.Object) -> b
    407:407:java.util.Set keySet() -> keySet
    428:428:java.util.Collection values() -> values
    443:443:java.util.Set entrySet() -> entrySet
    484:485:cn.com.codesec.util.fset.FTreeSet domain() -> d
    496:496:cn.com.codesec.util.fset.FTreeSet range() -> f
    502:502:cn.com.codesec.util.fset.FSet range(cn.com.codesec.util.fset.FSet) -> a
    518:518:cn.com.codesec.util.fset.FTreeSet toSet() -> h
    524:527:cn.com.codesec.util.fset.FSet toSet(cn.com.codesec.util.fset.FSet) -> b
    539:539:cn.com.codesec.util.fset.FTreeMap union(cn.com.codesec.util.fset.FMap) -> a
    544:546:cn.com.codesec.util.fset.FTreeMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> a
    551:553:cn.com.codesec.util.fset.FTreeMap restrictedTo(cn.com.codesec.util.fset.FSet) -> c
    558:560:cn.com.codesec.util.fset.FTreeMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> d
    565:565:java.lang.Object getDefault() -> g
    570:570:java.util.Iterator iterator() -> iterator
    584:584:int compareTo(cn.com.codesec.util.fset.FTreeMap) -> a
    588:604:boolean equals(java.lang.Object) -> equals
    609:611:int hashCode() -> hashCode
    616:616:java.lang.String dump() -> i
    620:620:boolean verify() -> l
    628:628:java.util.Comparator comparator() -> comparator
    633:636:java.lang.Object firstKey() -> firstKey
    641:644:java.lang.Object lastKey() -> lastKey
    664:678:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    697:702:java.util.SortedMap headMap(java.lang.Object) -> headMap
    719:728:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    865:870:cn.com.codesec.util.fset.FTreeMap$Node makeNode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    874:879:int treeSize(java.lang.Object) -> d
    883:886:int keySize(java.lang.Object) -> e
    751:893:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator) -> <init>
    896:907:java.lang.Object firstKey(java.lang.Object) -> f
    912:924:java.lang.Object lastKey(java.lang.Object) -> g
    932:962:java.lang.Object get(java.lang.Object,java.lang.Object) -> c
    968:1015:java.lang.Object with(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    1021:1059:java.lang.Object less(java.lang.Object,java.lang.Object) -> e
    1065:1084:java.lang.Object domain(java.lang.Object) -> i
    1089:1105:cn.com.codesec.util.fset.FSet range(java.lang.Object,cn.com.codesec.util.fset.FSet) -> a
    1110:1110:java.lang.Object union(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp) -> a
    1114:1156:java.lang.Object union(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp,java.lang.Object,java.lang.Object) -> a
    1163:1163:java.lang.Object restrictedTo(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FTreeSet) -> a
    1167:1221:java.lang.Object restrictedTo(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FTreeSet,java.lang.Object,java.lang.Object) -> a
    1228:1228:java.lang.Object restrictedFrom(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FTreeSet) -> b
    1232:1286:java.lang.Object restrictedFrom(java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.FTreeSet,java.lang.Object,java.lang.Object) -> b
    1293:1304:int compareTo(java.lang.Object,java.lang.Object) -> f
    1308:1360:int compareTo(java.lang.Object,int,java.lang.Object,int,int,int) -> a
    1368:1374:boolean equals(java.lang.Object,java.lang.Object) -> g
    1378:1421:boolean equals(java.lang.Object,int,java.lang.Object,int,int,int) -> b
    1438:1456:cn.com.codesec.util.fset.FTreeMap$RankTrimResult rankTrim(java.lang.Object,int,int,int) -> a
    1460:1476:cn.com.codesec.util.fset.FTreeMap$Entry rankEntry(java.lang.Object,int) -> a
    1482:1502:cn.com.codesec.util.fset.FTreeMap$Entry findEquiv(java.lang.Object,java.lang.Object) -> h
    1507:1521:int compare(java.lang.Object,java.lang.Object) -> i
    1529:1563:java.lang.Object split(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1571:1590:java.lang.Object trim(java.lang.Object,java.lang.Object,java.lang.Object) -> c
    1599:1613:java.lang.Object concat(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1618:1657:java.lang.Object buildNode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> c
    1662:1673:java.lang.Object join(java.lang.Object,java.lang.Object) -> j
    1682:1693:java.lang.Object min(java.lang.Object) -> j
    1699:1707:java.lang.Object lessMin(java.lang.Object) -> k
    1712:1734:int hashCode(java.lang.Object) -> l
    1739:1774:java.lang.String dump(java.lang.Object) -> m
    1778:1785:java.lang.String indent(java.lang.String,java.lang.String) -> a
    1789:1822:boolean verify(java.lang.Object,java.lang.Object,java.lang.Object) -> d
    1847:1902:java.lang.Object equivUnion(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,cn.com.codesec.util.fset.BinaryOp) -> a
    1907:1944:java.lang.Object equivRestrictedTo(java.lang.Object,java.lang.Object,java.lang.Object) -> e
    1950:1986:java.lang.Object equivRestrictedFrom(java.lang.Object,java.lang.Object,java.lang.Object) -> f
    1992:2007:java.lang.Object equivLess(java.lang.Object,java.lang.Object) -> k
    2011:2034:int equivCompare(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    2038:2064:boolean equivEquals(java.lang.Object,java.lang.Object) -> l
    2076:2090:java.lang.Object[] makeArray2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object[]) -> a
    2094:2106:java.lang.Object[] insert2(java.lang.Object[],int,java.lang.Object,java.lang.Object) -> a
    2110:2123:java.lang.Object[] remove2(java.lang.Object[],int) -> a
    2128:2138:java.lang.Object[] subseq2(java.lang.Object[],int,int) -> a
    2144:2149:java.lang.Object[] update2(java.lang.Object[],int,java.lang.Object) -> a
    2157:2232:java.lang.Object union2(java.lang.Object[],java.lang.Object[],cn.com.codesec.util.fset.BinaryOp,java.lang.Object,java.lang.Object) -> a
    2237:2275:java.lang.Object[] restrictedTo2(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> a
    2280:2325:java.lang.Object[] restrictedFrom2(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> b
    2342:2355:int binarySearch(java.lang.Object[],java.lang.Object) -> a
    2361:2366:int binarySearchLo(java.lang.Object[],java.lang.Object) -> b
    2372:2373:int binarySearchHi(java.lang.Object[],java.lang.Object) -> c
    2377:2377:boolean eql(java.lang.Object,java.lang.Object) -> m
    2543:2550:void writeObject(java.io.ObjectOutputStream) -> writeObject
    2567:2581:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet toSet() -> j
    1:1:cn.com.codesec.util.fset.FMap with(java.lang.Object,java.lang.Object) -> d
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap,cn.com.codesec.util.fset.BinaryOp) -> b
    1:1:cn.com.codesec.util.fset.FMap union(cn.com.codesec.util.fset.FMap) -> b
    1:1:cn.com.codesec.util.fset.FMap restrictedTo(cn.com.codesec.util.fset.FSet) -> e
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FMap restrictedFrom(cn.com.codesec.util.fset.FSet) -> f
    1:1:cn.com.codesec.util.fset.FSet range() -> e
    1:1:cn.com.codesec.util.fset.FMap less(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet domain() -> k
    2376:2376:boolean access$10(java.lang.Object,java.lang.Object) -> b
    882:882:int access$11(java.lang.Object) -> c
    748:748:java.lang.Object access$12(cn.com.codesec.util.fset.FTreeMap) -> b
cn.com.codesec.util.fset.FTreeMap$1 -> cn.com.codesec.UI:
    1:530:void <init>() -> <init>
    533:533:java.lang.Object apply(java.lang.Object,java.lang.Object) -> a
cn.com.codesec.util.fset.FTreeMap$2 -> cn.com.codesec.UJ:
    cn.com.codesec.util.fset.FTreeMap this$0 -> a
    1:407:void <init>(cn.com.codesec.util.fset.FTreeMap) -> <init>
    410:410:java.util.Iterator iterator() -> iterator
    415:415:int size() -> size
    420:420:boolean contains(java.lang.Object) -> contains
cn.com.codesec.util.fset.FTreeMap$3 -> cn.com.codesec.UK:
    cn.com.codesec.util.fset.FTreeMap this$0 -> a
    1:428:void <init>(cn.com.codesec.util.fset.FTreeMap) -> <init>
    431:431:java.util.Iterator iterator() -> iterator
    436:436:int size() -> size
cn.com.codesec.util.fset.FTreeMap$4 -> cn.com.codesec.UL:
    cn.com.codesec.util.fset.FTreeMap this$0 -> a
    1:443:void <init>(cn.com.codesec.util.fset.FTreeMap) -> <init>
    446:446:java.util.Iterator iterator() -> iterator
    451:451:int size() -> size
    456:466:boolean contains(java.lang.Object) -> contains
    472:472:boolean remove(java.lang.Object) -> remove
    477:477:void clear() -> clear
cn.com.codesec.util.fset.FTreeMap$Entry -> cn.com.codesec.UM:
    java.lang.Object key -> a
    java.lang.Object value -> b
    775:778:void <init>(java.lang.Object,java.lang.Object) -> <init>
    785:785:java.lang.Object getKey() -> getKey
    790:790:java.lang.Object getValue() -> getValue
    795:795:java.lang.Object setValue(java.lang.Object) -> setValue
    799:799:int hashCode() -> hashCode
    804:814:int compareTo(java.lang.Object) -> a
    818:824:boolean equals(java.lang.Object) -> equals
cn.com.codesec.util.fset.FTreeMap$EntryComparator -> cn.com.codesec.UN:
    java.util.Comparator mapComp -> a
    832:834:void <init>(java.util.Comparator) -> <init>
    838:842:int compare(cn.com.codesec.util.fset.FTreeMap$Entry,cn.com.codesec.util.fset.FTreeMap$Entry) -> a
    1:1:int compare(java.lang.Object,java.lang.Object) -> compare
cn.com.codesec.util.fset.FTreeMap$EquivalentMap -> cn.com.codesec.UO:
    java.util.ArrayList contents -> a
    1838:1840:void <init>(java.util.ArrayList) -> <init>
cn.com.codesec.util.fset.FTreeMap$FTMIterator -> cn.com.codesec.UP:
    cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode inode -> a
    2399:2402:void <init>(java.lang.Object) -> <init>
    2405:2434:void canonicalize() -> b
    2438:2438:boolean hasNext() -> hasNext
    2444:2459:java.util.Map$Entry next() -> a
    2464:2464:void remove() -> remove
    1:1:java.lang.Object next() -> next
    2399:2399:void <init>(java.lang.Object,cn.com.codesec.util.fset.FTreeMap$FTMIterator) -> <init>
    2397:2397:cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode access$2(cn.com.codesec.util.fset.FTreeMap$FTMIterator) -> a
    2404:2404:void access$3(cn.com.codesec.util.fset.FTreeMap$FTMIterator) -> b
cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode -> cn.com.codesec.UQ:
    java.lang.Object subtree -> a
    int index -> b
    cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode parent -> c
    2386:2390:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode) -> <init>
    2392:2392:java.lang.Object access$0(cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode) -> a
    2394:2394:cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode access$1(cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode) -> b
    2393:2393:int access$2(cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode) -> c
    2393:2393:void access$3(cn.com.codesec.util.fset.FTreeMap$FTMIterator$IteratorNode,int) -> a
cn.com.codesec.util.fset.FTreeMap$FTMKeyIterator -> cn.com.codesec.UR:
    cn.com.codesec.util.fset.FTreeMap$FTMIterator ftmIter -> a
    2472:2474:void <init>(java.lang.Object) -> <init>
    2478:2478:boolean hasNext() -> hasNext
    2485:2500:java.lang.Object next() -> next
    2505:2505:void remove() -> remove
cn.com.codesec.util.fset.FTreeMap$FTMValueIterator -> cn.com.codesec.US:
    cn.com.codesec.util.fset.FTreeMap$FTMIterator ftmIter -> a
    2513:2515:void <init>(java.lang.Object) -> <init>
    2519:2519:boolean hasNext() -> hasNext
    2526:2526:java.lang.Object next() -> next
    2531:2531:void remove() -> remove
cn.com.codesec.util.fset.FTreeMap$Node -> cn.com.codesec.UT:
    int size -> c
    java.lang.Object left -> d
    java.lang.Object right -> e
    853:857:void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    860:860:java.lang.Object access$0(cn.com.codesec.util.fset.FTreeMap$Node) -> a
    861:861:java.lang.Object access$1(cn.com.codesec.util.fset.FTreeMap$Node) -> b
    859:859:int access$2(cn.com.codesec.util.fset.FTreeMap$Node) -> c
cn.com.codesec.util.fset.FTreeMap$RankTrimResult -> cn.com.codesec.UU:
    java.lang.Object subtree -> a
    int base -> b
    1428:1431:void <init>(java.lang.Object,int) -> <init>
cn.com.codesec.util.fset.FTreeSet -> cn.com.codesec.UV:
    int EQUALS_CACHE_THRESHOLD -> e
    cn.com.codesec.util.fset.FTreeSet EMPTY_INSTANCE -> f
    java.lang.Object tree -> a
    java.util.Comparator comp -> g
    int hashCode -> h
    int MAX_LEAF_ARRAY_LENGTH -> i
    int BALANCE_FACTOR -> j
    java.lang.Object NEGATIVE_INFINITY -> b
    java.lang.Object POSITIVE_INFINITY -> c
    java.lang.Object NO_ELEMENT -> d
    int BIN_SEARCH_NOT_FOUND -> k
    int BIN_SEARCH_FOUND -> l
    int BIN_SEARCH_FOUND_MASK -> m
    int BIN_SEARCH_INDEX_SHIFT -> n
    java.lang.reflect.Field TreeField -> o
    599:1838:void <clinit>() -> <clinit>
    108:108:cn.com.codesec.util.fset.FTreeSet emptySet() -> a
    115:116:cn.com.codesec.util.fset.FTreeSet emptySet(java.util.Comparator) -> a
    123:605:void <init>() -> <init>
    132:605:void <init>(java.lang.Object) -> <init>
    143:605:void <init>(java.util.Comparator) -> <init>
    152:605:void <init>(java.lang.Object,java.util.Comparator) -> <init>
    163:605:void <init>(java.util.Collection) -> <init>
    176:605:void <init>(java.util.Collection,java.util.Comparator) -> <init>
    188:605:void <init>(java.util.SortedSet) -> <init>
    194:199:java.lang.Object fromCollection(java.util.Collection) -> i
    214:605:void <init>(java.lang.Object[]) -> <init>
    236:605:void <init>(java.util.Comparator,java.lang.Object[]) -> <init>
    245:245:boolean isEmpty() -> isEmpty
    250:250:int size() -> size
    255:264:java.lang.Object arb() -> b
    270:270:boolean contains(java.lang.Object) -> contains
    275:275:java.util.Iterator iterator() -> iterator
    280:282:cn.com.codesec.util.fset.FTreeSet with(java.lang.Object) -> a
    287:290:cn.com.codesec.util.fset.FTreeSet less(java.lang.Object) -> b
    310:320:cn.com.codesec.util.fset.FTreeSet union(java.util.Collection) -> a
    340:350:cn.com.codesec.util.fset.FTreeSet intersection(java.util.Collection) -> b
    370:380:cn.com.codesec.util.fset.FTreeSet difference(java.util.Collection) -> c
    394:398:int compareTo(cn.com.codesec.util.fset.FTreeSet) -> a
    405:416:boolean equals(java.lang.Object) -> equals
    436:445:boolean isSubset(java.util.Collection) -> d
    466:475:boolean isSuperset(java.util.Collection) -> e
    483:484:int hashCode() -> hashCode
    489:489:java.lang.String dump() -> c
    493:493:boolean verify() -> d
    500:500:java.util.Comparator comparator() -> comparator
    504:505:java.lang.Object first() -> first
    510:511:java.lang.Object last() -> last
    530:543:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    561:563:java.util.SortedSet headSet(java.lang.Object) -> headSet
    580:586:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    605:611:void <init>(int,java.lang.Object,java.util.Comparator) -> <init>
    615:616:cn.com.codesec.util.fset.FTreeSet make(java.lang.Object,java.util.Comparator) -> a
    657:658:cn.com.codesec.util.fset.FTreeSet$Node makeNode(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    662:664:int treeSize(java.lang.Object) -> d
    668:670:int elementSize(java.lang.Object) -> e
    674:681:java.lang.Object first(java.lang.Object) -> f
    686:696:java.lang.Object last(java.lang.Object) -> g
    701:718:boolean contains(java.lang.Object,java.lang.Object) -> c
    725:765:java.lang.Object with(java.lang.Object,java.lang.Object) -> a
    771:802:java.lang.Object less(java.lang.Object,java.lang.Object) -> d
    809:813:java.lang.Object min(java.lang.Object) -> j
    819:825:java.lang.Object lessMin(java.lang.Object) -> k
    830:830:java.lang.Object union(java.lang.Object,java.lang.Object) -> e
    834:850:java.lang.Object union(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    855:855:java.lang.Object intersection(java.lang.Object,java.lang.Object) -> f
    859:873:java.lang.Object intersection(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    878:878:java.lang.Object difference(java.lang.Object,java.lang.Object) -> g
    882:911:java.lang.Object difference(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> c
    916:924:int compareTo(java.lang.Object,java.lang.Object) -> h
    930:965:int compareTo(java.lang.Object,int,java.lang.Object,int,int,int) -> a
    973:976:boolean equals(java.lang.Object,java.lang.Object) -> i
    981:1010:boolean equals(java.lang.Object,int,java.lang.Object,int,int,int) -> b
    1026:1041:cn.com.codesec.util.fset.FTreeSet$RankTrimResult rankTrim(java.lang.Object,int,int,int) -> a
    1045:1055:java.lang.Object rankElement(java.lang.Object,int) -> a
    1061:1061:boolean isSubset(java.lang.Object,java.lang.Object) -> j
    1065:1088:boolean isSubset(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    1102:1116:java.lang.Object findEquiv(java.lang.Object,java.lang.Object) -> b
    1123:1136:int compare(java.lang.Object,java.lang.Object) -> k
    1144:1169:java.lang.Object split(java.lang.Object,java.lang.Object,java.lang.Object) -> c
    1178:1192:java.lang.Object trim(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    1201:1212:java.lang.Object concat(java.lang.Object,java.lang.Object,java.lang.Object) -> d
    1219:1221:java.lang.Object join(java.lang.Object,java.lang.Object) -> l
    1225:1260:java.lang.Object buildNode(java.lang.Object,java.lang.Object,java.lang.Object) -> e
    1265:1285:int hashCode(java.lang.Object) -> l
    1290:1315:java.lang.String dump(java.lang.Object) -> m
    1319:1325:java.lang.String indent(java.lang.String,java.lang.String) -> a
    1329:1357:boolean verify(java.lang.Object,java.lang.Object,java.lang.Object) -> f
    1378:1416:java.lang.Object equivUnion(java.lang.Object,java.lang.Object) -> m
    1422:1448:java.lang.Object equivIntersect(java.lang.Object,java.lang.Object) -> n
    1452:1475:java.lang.Object equivDiff(java.lang.Object,java.lang.Object) -> o
    1479:1494:boolean equivEquals(java.lang.Object,java.lang.Object) -> p
    1498:1510:boolean equivIsSubset(java.lang.Object,java.lang.Object) -> q
    1519:1526:java.lang.Object[] concat(java.lang.Object,java.lang.Object[],java.lang.Object[]) -> a
    1530:1535:java.lang.Object[] insert(java.lang.Object[],int,java.lang.Object) -> a
    1539:1545:java.lang.Object[] remove(java.lang.Object[],int) -> a
    1550:1556:java.lang.Object[] subseq(java.lang.Object[],int,int) -> a
    1564:1619:java.lang.Object union(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> a
    1623:1642:java.lang.Object[] intersection(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> b
    1646:1668:java.lang.Object[] difference(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> c
    1673:1690:boolean isSubset(java.lang.Object[],java.lang.Object[],java.lang.Object,java.lang.Object) -> d
    1705:1715:int binarySearch(java.lang.Object[],java.lang.Object) -> a
    1721:1725:int binarySearchLo(java.lang.Object[],java.lang.Object) -> b
    1731:1732:int binarySearchHi(java.lang.Object[],java.lang.Object) -> c
    1736:1736:boolean eql(java.lang.Object,java.lang.Object) -> r
    1823:1827:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1844:1855:void readObject(java.io.ObjectInputStream) -> readObject
    1:1:cn.com.codesec.util.fset.FSet with(java.lang.Object) -> h
    1:1:cn.com.codesec.util.fset.FSet union(java.util.Collection) -> f
    1:1:int compareTo(java.lang.Object) -> compareTo
    1:1:cn.com.codesec.util.fset.FSet less(java.lang.Object) -> i
    1:1:cn.com.codesec.util.fset.FSet difference(java.util.Collection) -> g
    1:1:cn.com.codesec.util.fset.FSet intersection(java.util.Collection) -> h
    667:667:int access$6(java.lang.Object) -> c
cn.com.codesec.util.fset.FTreeSet$EquivalentSet -> cn.com.codesec.UW:
    java.util.ArrayList contents -> a
    1371:1373:void <init>(java.util.ArrayList) -> <init>
cn.com.codesec.util.fset.FTreeSet$FTSIterator -> cn.com.codesec.UX:
    cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode inode -> a
    1757:1760:void <init>(java.lang.Object) -> <init>
    1763:1784:void canonicalize() -> a
    1788:1788:boolean hasNext() -> hasNext
    1794:1806:java.lang.Object next() -> next
    1811:1811:void remove() -> remove
    1757:1757:void <init>(java.lang.Object,cn.com.codesec.util.fset.FTreeSet$FTSIterator) -> <init>
cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode -> cn.com.codesec.UY:
    java.lang.Object subtree -> a
    int index -> b
    cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode parent -> c
    1745:1749:void <init>(java.lang.Object,int,cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode) -> <init>
    1750:1750:java.lang.Object access$0(cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode) -> a
    1752:1752:cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode access$1(cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode) -> b
    1751:1751:int access$2(cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode) -> c
    1751:1751:void access$3(cn.com.codesec.util.fset.FTreeSet$FTSIterator$IteratorNode,int) -> a
cn.com.codesec.util.fset.FTreeSet$Node -> cn.com.codesec.UZ:
    int size -> a
    java.lang.Object element -> b
    java.lang.Object left -> c
    java.lang.Object right -> d
    643:648:void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
cn.com.codesec.util.fset.FTreeSet$RankTrimResult -> cn.com.codesec.Va:
    java.lang.Object subtree -> a
    int base -> b
    1017:1020:void <init>(java.lang.Object,int) -> <init>
